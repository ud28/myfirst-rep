// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.makit.library-all');
if ( !jQuery.sap.isDeclared('sap.makit.ChartRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.makit.ChartRenderer");

/**
 * @class Chart renderer. 
 * @static
 */
sap.makit.ChartRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.makit.ChartRenderer.render = function(oRm, oControl){
	 // write the HTML into the render manager
	 oRm.write("<div id=\"sap-ui-dummy-" + oControl.getId() + "\" style=\"display:none\">");
	 oRm.write("<div");
	 oRm.writeControlData(oControl);
	 oRm.writeAttribute("data-sap-ui-preserve", oControl.getId());
	 oRm.addClass("sapMakitChart");
	 oRm.writeClasses();
	 oRm.write(">"); // div element
	 oRm.write("</div>");
	 oRm.write("</div>");
};

}; // end of sap.makit.ChartRenderer
if ( !jQuery.sap.isDeclared('sap.makit.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.makit (1.8.4)
 */
jQuery.sap.declare("sap.makit.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library contains the makit charts.
 *
 * @namespace
 * @name sap.makit
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.makit",
  dependencies : ["sap.ui.core"],
  types: [
    "sap.makit.ChartType",
    "sap.makit.LegendPosition",
    "sap.makit.SortOrder",
    "sap.makit.ValueBubblePosition",
    "sap.makit.ValueBubbleStyle"
  ],
  interfaces: [],
  controls: [
    "sap.makit.Chart"
  ],
  elements: [
    "sap.makit.Axis",
    "sap.makit.Category",
    "sap.makit.CategoryAxis",
    "sap.makit.Column",
    "sap.makit.Row",
    "sap.makit.Series",
    "sap.makit.Value",
    "sap.makit.ValueAxis",
    "sap.makit.ValueBubble"
  ],
  version: "1.8.4"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.ChartType.
jQuery.sap.declare("sap.makit.ChartType");

/**
 * @class Enumeration for chart type
 *
 * @version 1.8.4
 * @static
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 */
sap.makit.ChartType = {
  
    /**
     * Column chart 
     * @public
     */
    Column : "Column",

    /**
     * Line chart 
     * @public
     */
    Line : "Line",

    /**
     * Bubble chart 
     * @public
     */
    Bubble : "Bubble",

    /**
     * Horizontal table bar chart 
     * @public
     */
    Bar : "Bar",

    /**
     * Pie chart 
     * @public
     */
    Pie : "Pie",

    /**
     * Donut chart 
     * @public
     */
    Donut : "Donut",

    /**
     * Stacked column chart 
     * @public
     */
    StackedColumn : "StackedColumn",

    /**
     * 100% stacked column chart 
     * @public
     */
    HundredPercentStackedColumn : "HundredPercentStackedColumn"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.LegendPosition.
jQuery.sap.declare("sap.makit.LegendPosition");

/**
 * @class Enumeration for legend position.
 *
 * @version 1.8.4
 * @static
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 */
sap.makit.LegendPosition = {
  
    /**
     * Legend location is on the top of the chart 
     * @public
     */
    Top : "Top",

    /**
     * Legend location is on the left of the chart 
     * @public
     */
    Left : "Left",

    /**
     * Legend location is on the bottom of the chart 
     * @public
     */
    Bottom : "Bottom",

    /**
     * Legend location is on the right of the chart 
     * @public
     */
    Right : "Right",

    /**
     * Hide the legend 
     * @public
     */
    None : "None"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.SortOrder.
jQuery.sap.declare("sap.makit.SortOrder");

/**
 * @class Enumeration for sort order
 *
 * @version 1.8.4
 * @static
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 */
sap.makit.SortOrder = {
  
    /**
     * Ascending sort 
     * @public
     */
    Ascending : "Ascending",

    /**
     * Descending sort 
     * @public
     */
    Descending : "Descending",

    /**
     * Partially sort 
     * @public
     */
    Partial : "Partial",

    /**
     * No sorting 
     * @public
     */
    None : "None"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.ValueBubblePosition.
jQuery.sap.declare("sap.makit.ValueBubblePosition");

/**
 * @class Position for Value Bubble only applies to Pie/Donut Chart.
 *
 * @version 1.8.4
 * @static
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 */
sap.makit.ValueBubblePosition = {
  
    /**
     * Value Bubble position set to above the chart 
     * @public
     */
    Top : "Top",

    /**
     * Value Bubble position set to beside the chart 
     * @public
     */
    Side : "Side"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.makit.ValueBubbleStyle.
jQuery.sap.declare("sap.makit.ValueBubbleStyle");

/**
 * @class Enumeration for Value Bubble's positioning style. This applies all chart types except Pie/Donut/HBar chart.
 *
 * @version 1.8.4
 * @static
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 */
sap.makit.ValueBubbleStyle = {
  
    /**
     * The Value Bubble snaps above of the chart, the chart height will adjust accordingly. 
     * @public
     */
    Top : "Top",

    /**
     * The Value Bubble floats on the touch point, chart's size will not change. 
     * @public
     */
    Float : "Float",

    /**
     * The Value Bubble floats and snaps above of the chart, chart's size will not change. 
     * @public
     */
    FloatTop : "FloatTop"

  };
  

}; // end of sap.makit.library
if ( !jQuery.sap.isDeclared('sap.makit.Axis') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Axis.
jQuery.sap.declare("sap.makit.Axis");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Axis.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowLabel showLabel} : boolean (default: true)</li>
 * <li>{@link #getShowPrimaryLine showPrimaryLine} : boolean (default: true)</li>
 * <li>{@link #getShowGrid showGrid} : boolean (default: false)</li>
 * <li>{@link #getThickness thickness} : float (default: 0.5)</li>
 * <li>{@link #getColor color} : string (default: 'gray')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Base element for the Axis object for the Chart.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 * @name sap.makit.Axis
 */
sap.ui.core.Element.extend("sap.makit.Axis", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.makit",
	properties : {
		"showLabel" : {type : "boolean", group : "Appearance", defaultValue : true},
		"showPrimaryLine" : {type : "boolean", group : "Appearance", defaultValue : true},
		"showGrid" : {type : "boolean", group : "Appearance", defaultValue : false},
		"thickness" : {type : "float", group : "Appearance", defaultValue : 0.5},
		"color" : {type : "string", group : "Appearance", defaultValue : 'gray'}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Axis with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Axis.extend
 * @function
 */


/**
 * Getter for property <code>showLabel</code>.
 * Indicates whether to show label of the Axis by the primary line
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLabel</code>
 * @public
 * @name sap.makit.Axis#getShowLabel
 * @function
 */


/**
 * Setter for property <code>showLabel</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLabel  new value for property <code>showLabel</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setShowLabel
 * @function
 */

/**
 * Getter for property <code>showPrimaryLine</code>.
 * Indicates whether to show the primary line of the Axis on the chart area
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPrimaryLine</code>
 * @public
 * @name sap.makit.Axis#getShowPrimaryLine
 * @function
 */


/**
 * Setter for property <code>showPrimaryLine</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPrimaryLine  new value for property <code>showPrimaryLine</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setShowPrimaryLine
 * @function
 */

/**
 * Getter for property <code>showGrid</code>.
 * Indicates whether to show grid of the Axis in the chart area
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showGrid</code>
 * @public
 * @name sap.makit.Axis#getShowGrid
 * @function
 */


/**
 * Setter for property <code>showGrid</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowGrid  new value for property <code>showGrid</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setShowGrid
 * @function
 */

/**
 * Getter for property <code>thickness</code>.
 * The line thickness of the primary line
 *
 * Default value is <code>0.5</code>
 *
 * @return {float} the value of property <code>thickness</code>
 * @public
 * @name sap.makit.Axis#getThickness
 * @function
 */


/**
 * Setter for property <code>thickness</code>.
 *
 * Default value is <code>0.5</code> 
 *
 * @param {float} fThickness  new value for property <code>thickness</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setThickness
 * @function
 */

/**
 * Getter for property <code>color</code>.
 * Color of the primary line. Accept the following format:
 * standard name format: gray, red, black, etc
 * hex format: #ff00ff
 * rgb format: rgb(256, 0, 256)
 *
 * Default value is <code>gray</code>
 *
 * @return {string} the value of property <code>color</code>
 * @public
 * @name sap.makit.Axis#getColor
 * @function
 */


/**
 * Setter for property <code>color</code>.
 *
 * Default value is <code>gray</code> 
 *
 * @param {string} sColor  new value for property <code>color</code>
 * @return {sap.makit.Axis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Axis#setColor
 * @function
 */

// Start of sap/makit/Axis.js
/*!
 * @copyright@
 */
}; // end of sap.makit.Axis
if ( !jQuery.sap.isDeclared('sap.makit.Category') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Category.
jQuery.sap.declare("sap.makit.Category");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Category.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumn column} : string</li>
 * <li>{@link #getDisplayName displayName} : string</li>
 * <li>{@link #getFormat format} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents the Category data region of the Chart.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 * @name sap.makit.Category
 */
sap.ui.core.Element.extend("sap.makit.Category", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.makit",
	properties : {
		"column" : {type : "string", group : "Misc", defaultValue : null},
		"displayName" : {type : "string", group : "Misc", defaultValue : null},
		"format" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Category with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Category.extend
 * @function
 */


/**
 * Getter for property <code>column</code>.
 * Specify the name of the column to be mapped to the Category Axis's value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>column</code>
 * @public
 * @name sap.makit.Category#getColumn
 * @function
 */


/**
 * Setter for property <code>column</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sColumn  new value for property <code>column</code>
 * @return {sap.makit.Category} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Category#setColumn
 * @function
 */

/**
 * Getter for property <code>displayName</code>.
 * The text label representing this Category(on value bubble or table's header)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>displayName</code>
 * @public
 * @name sap.makit.Category#getDisplayName
 * @function
 */


/**
 * Setter for property <code>displayName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDisplayName  new value for property <code>displayName</code>
 * @return {sap.makit.Category} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Category#setDisplayName
 * @function
 */

/**
 * Getter for property <code>format</code>.
 * Number formatting for the value. Accepted values:
 * number
 * currency
 * percent
 * roundedN - where N represents number of decimal places e.g. rounded4
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>format</code>
 * @public
 * @name sap.makit.Category#getFormat
 * @function
 */


/**
 * Setter for property <code>format</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFormat  new value for property <code>format</code>
 * @return {sap.makit.Category} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Category#setFormat
 * @function
 */

// Start of sap/makit/Category.js
/*!
 * @copyright@
 */

}; // end of sap.makit.Category
if ( !jQuery.sap.isDeclared('sap.makit.CategoryAxis') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.CategoryAxis.
jQuery.sap.declare("sap.makit.CategoryAxis");



/**
 * Constructor for a new CategoryAxis.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSortOrder sortOrder} : sap.makit.SortOrder (default: sap.makit.SortOrder.None)</li>
 * <li>{@link #getDisplayLastLabel displayLastLabel} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.makit.Axis#constructor sap.makit.Axis}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Contains the properties of the Category's Axis.
 * @extends sap.makit.Axis
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 * @name sap.makit.CategoryAxis
 */
sap.makit.Axis.extend("sap.makit.CategoryAxis", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.makit",
	properties : {
		"sortOrder" : {type : "sap.makit.SortOrder", group : "Misc", defaultValue : sap.makit.SortOrder.None},
		"displayLastLabel" : {type : "boolean", group : "Misc", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.makit.CategoryAxis with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.CategoryAxis.extend
 * @function
 */


/**
 * Getter for property <code>sortOrder</code>.
 * Sort order of the chart
 *
 * Default value is <code>None</code>
 *
 * @return {sap.makit.SortOrder} the value of property <code>sortOrder</code>
 * @public
 * @name sap.makit.CategoryAxis#getSortOrder
 * @function
 */


/**
 * Setter for property <code>sortOrder</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.makit.SortOrder} oSortOrder  new value for property <code>sortOrder</code>
 * @return {sap.makit.CategoryAxis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CategoryAxis#setSortOrder
 * @function
 */

/**
 * Getter for property <code>displayLastLabel</code>.
 * Whether to always display the last label on the axis regardless of the automatic resize
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displayLastLabel</code>
 * @public
 * @name sap.makit.CategoryAxis#getDisplayLastLabel
 * @function
 */


/**
 * Setter for property <code>displayLastLabel</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplayLastLabel  new value for property <code>displayLastLabel</code>
 * @return {sap.makit.CategoryAxis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.CategoryAxis#setDisplayLastLabel
 * @function
 */

// Start of sap/makit/CategoryAxis.js
/*!
 * @copyright@
 */

sap.makit.CategoryAxis.prototype.init = function(){
	this.setShowGrid(false);
	this.setShowPrimaryLine(true);
};

}; // end of sap.makit.CategoryAxis
if ( !jQuery.sap.isDeclared('sap.makit.Column') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Column.
jQuery.sap.declare("sap.makit.Column");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Column.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getValue value} : any</li>
 * <li>{@link #getType type} : string (default: 'string')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The data column of the Chart's data table
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @name sap.makit.Column
 */
sap.ui.core.Element.extend("sap.makit.Column", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.makit",
	properties : {
		"name" : {type : "string", group : "Identification", defaultValue : null},
		"value" : {type : "any", group : "Data", defaultValue : null},
		"type" : {type : "string", group : "Misc", defaultValue : 'string'}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Column with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Column.extend
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The name representing the Column
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.makit.Column#getName
 * @function
 */


/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.makit.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Column#setName
 * @function
 */

/**
 * Getter for property <code>value</code>.
 * The value mapped to this Column (User should map this using data binding)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>value</code>
 * @public
 * @name sap.makit.Column#getValue
 * @function
 */


/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oValue  new value for property <code>value</code>
 * @return {sap.makit.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Column#setValue
 * @function
 */

/**
 * Getter for property <code>type</code>.
 * The data type of the Column:
 * number
 * string
 * datetime
 *
 * Default value is <code>string</code>
 *
 * @return {string} the value of property <code>type</code>
 * @public
 * @name sap.makit.Column#getType
 * @function
 */


/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>string</code> 
 *
 * @param {string} sType  new value for property <code>type</code>
 * @return {sap.makit.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Column#setType
 * @function
 */

// Start of sap/makit/Column.js
/*!
 * @copyright@
 */

}; // end of sap.makit.Column
if ( !jQuery.sap.isDeclared('sap.makit.Row') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Row.
jQuery.sap.declare("sap.makit.Row");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Row.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} : sap.makit.Column[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The data row of the Chart's data table
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 * @name sap.makit.Row
 */
sap.ui.core.Element.extend("sap.makit.Row", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.makit",
	aggregations : {
    	"cells" : {type : "sap.makit.Column", multiple : true, singularName : "cell"}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Row with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Row.extend
 * @function
 */

	
/**
 * Getter for aggregation <code>cells</code>.<br/>
 * Representing the cells of the row. User should not add individual cells. The cells will be added automatically via Column mapping.
 * 
 * @return {sap.makit.Column[]}
 * @public
 * @name sap.makit.Row#getCells
 * @function
 */

/**
 * Inserts a cell into the aggregation named <code>cells</code>.
 *
 * @param {sap.makit.Column}
 *          oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the cell should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the cell is inserted at 
 *             the last position        
 * @return {sap.makit.Row} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Row#insertCell
 * @function
 */


/**
 * Adds some cell <code>oCell</code> 
 * to the aggregation named <code>cells</code>.
 *
 * @param {sap.makit.Column}
 *            oCell the cell to add; if empty, nothing is inserted
 * @return {sap.makit.Row} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Row#addCell
 * @function
 */


/**
 * Removes an cell from the aggregation named <code>cells</code>.
 *
 * @param {int | string | sap.makit.Column} vCell the cell to remove or its index or id
 * @return {sap.makit.Column} the removed cell or null
 * @public
 * @name sap.makit.Row#removeCell
 * @function
 */


/**
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.makit.Column[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.makit.Row#removeAllCells
 * @function
 */


/**
 * Checks for the provided <code>sap.makit.Column</code> in the aggregation named <code>cells</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.makit.Column}
 *            oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.makit.Row#indexOfCell
 * @function
 */


/**
 * Destroys all the cells in the aggregation 
 * named <code>cells</code>.
 * @return {sap.makit.Row} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Row#destroyCells
 * @function
 */

// Start of sap/makit/Row.js
/*!
 * @copyright@
 */

sap.makit.Row.prototype.init = function(){
	this._datarow = {};
};

sap.makit.Row.prototype.addCell = function(oCell){
	sap.ui.core.Element.prototype.addAggregation.call(this, "cells", oCell, false);
	var sId = this.getId();
	//We only want to attach event on real rows not on template rows.
	if (!jQuery.sap.endsWith(sId, "dummyrows")){	
		this._datarow[oCell.getName()] = oCell.getValue();
		oCell.attachEvent("_change", this.onCellChanged, this);
	}
};

sap.makit.Row.prototype.onCellChanged = function(oEvent){
	if (oEvent.mParameters['name'] === "name"){
		var oldName = oEvent.mParameters['oldValue'];
		var newName = oEvent.mParameters['newValue'];
		this._datarow[newName] = undefined;
		if(oldName && oldName !== ""){
			this._datarow[newName] = this._datarow[oldName];
			this._datarow[oldName] = null;
			this._datarow[oldName] = undefined;
			delete this._datarow[oldName];
		}
	}
	else if(oEvent.mParameters['name'] === "value"){
		var cellName = oEvent.oSource.getName();
		this._datarow[cellName] = oEvent.mParameters['newValue'];
	}
};

}; // end of sap.makit.Row
if ( !jQuery.sap.isDeclared('sap.makit.Series') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Series.
jQuery.sap.declare("sap.makit.Series");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Series.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getColumn column} : string</li>
 * <li>{@link #getDisplayName displayName} : string</li>
 * <li>{@link #getFormat format} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents the Series data region of the Chart.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 * @name sap.makit.Series
 */
sap.ui.core.Element.extend("sap.makit.Series", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.makit",
	properties : {
		"column" : {type : "string", group : "Data", defaultValue : null},
		"displayName" : {type : "string", group : "Appearance", defaultValue : null},
		"format" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Series with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Series.extend
 * @function
 */


/**
 * Getter for property <code>column</code>.
 * The name of the column that will be mapped to the chart's Series value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>column</code>
 * @public
 * @name sap.makit.Series#getColumn
 * @function
 */


/**
 * Setter for property <code>column</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sColumn  new value for property <code>column</code>
 * @return {sap.makit.Series} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Series#setColumn
 * @function
 */

/**
 * Getter for property <code>displayName</code>.
 * The displayed name of the Series
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>displayName</code>
 * @public
 * @name sap.makit.Series#getDisplayName
 * @function
 */


/**
 * Setter for property <code>displayName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDisplayName  new value for property <code>displayName</code>
 * @return {sap.makit.Series} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Series#setDisplayName
 * @function
 */

/**
 * Getter for property <code>format</code>.
 * Number formatting for the value. Accepted values:
 * number
 * currency
 * percent
 * roundedN - where N represents number of decimal places e.g. rounded4
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>format</code>
 * @public
 * @name sap.makit.Series#getFormat
 * @function
 */


/**
 * Setter for property <code>format</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFormat  new value for property <code>format</code>
 * @return {sap.makit.Series} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Series#setFormat
 * @function
 */

// Start of sap/makit/Series.js
/*!
 * @copyright@
 */

}; // end of sap.makit.Series
if ( !jQuery.sap.isDeclared('sap.makit.Value') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.Value.
jQuery.sap.declare("sap.makit.Value");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Value.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getExpression expression} : string</li>
 * <li>{@link #getDisplayName displayName} : string</li>
 * <li>{@link #getFormat format} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Represents the Value data region of the Chart.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 * @name sap.makit.Value
 */
sap.ui.core.Element.extend("sap.makit.Value", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.makit",
	properties : {
		"expression" : {type : "string", group : "Misc", defaultValue : null},
		"displayName" : {type : "string", group : "Misc", defaultValue : null},
		"format" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.makit.Value with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.Value.extend
 * @function
 */


/**
 * Getter for property <code>expression</code>.
 * The user should map the column on this property. The expression allows more advanced column mapping. Instead of just specifying the column name (e.g. revenueValue), the user can use SAP expression language e.g. Assuming the user has a revenueValue column and an operatingCost column, the user can specify the following expression:
 * "revenueValue - operatingCost"
 * the resulting value displayed in the chart will be the arithmatic operation result on these two columns.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>expression</code>
 * @public
 * @name sap.makit.Value#getExpression
 * @function
 */


/**
 * Setter for property <code>expression</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sExpression  new value for property <code>expression</code>
 * @return {sap.makit.Value} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Value#setExpression
 * @function
 */

/**
 * Getter for property <code>displayName</code>.
 * The text label representing this Value (on value bubble or table's header)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>displayName</code>
 * @public
 * @name sap.makit.Value#getDisplayName
 * @function
 */


/**
 * Setter for property <code>displayName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDisplayName  new value for property <code>displayName</code>
 * @return {sap.makit.Value} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Value#setDisplayName
 * @function
 */

/**
 * Getter for property <code>format</code>.
 * Number formatting for the value. Accepted values:
 * number
 * currency
 * percent
 * roundedN - where N represents number of decimal places e.g. rounded4
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>format</code>
 * @public
 * @name sap.makit.Value#getFormat
 * @function
 */


/**
 * Setter for property <code>format</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFormat  new value for property <code>format</code>
 * @return {sap.makit.Value} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.Value#setFormat
 * @function
 */

// Start of sap/makit/Value.js
/*!
 * @copyright@
 */

}; // end of sap.makit.Value
if ( !jQuery.sap.isDeclared('sap.makit.ValueAxis') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.ValueAxis.
jQuery.sap.declare("sap.makit.ValueAxis");



/**
 * Constructor for a new ValueAxis.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getMin min} : string</li>
 * <li>{@link #getMax max} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.makit.Axis#constructor sap.makit.Axis}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Contains the properties of the Value's Axis.
 * @extends sap.makit.Axis
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 * @name sap.makit.ValueAxis
 */
sap.makit.Axis.extend("sap.makit.ValueAxis", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.makit",
	properties : {
		"min" : {type : "string", group : "Misc", defaultValue : null},
		"max" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.makit.ValueAxis with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.ValueAxis.extend
 * @function
 */


/**
 * Getter for property <code>min</code>.
 * Highest displayed value on the Value Axis (this value will be automatically adjusted to nearest major tick value depending on the value's range)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>min</code>
 * @public
 * @name sap.makit.ValueAxis#getMin
 * @function
 */


/**
 * Setter for property <code>min</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMin  new value for property <code>min</code>
 * @return {sap.makit.ValueAxis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueAxis#setMin
 * @function
 */

/**
 * Getter for property <code>max</code>.
 * Highest displayed value on the Value Axis (this value will be automatically adjusted to nearest major tick value depending on the value's range)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>max</code>
 * @public
 * @name sap.makit.ValueAxis#getMax
 * @function
 */


/**
 * Setter for property <code>max</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMax  new value for property <code>max</code>
 * @return {sap.makit.ValueAxis} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueAxis#setMax
 * @function
 */

// Start of sap/makit/ValueAxis.js
/*!
 * @copyright@
 */

sap.makit.ValueAxis.prototype.init = function(){
	this.setShowGrid(true);
	this.setShowPrimaryLine(false);
};

}; // end of sap.makit.ValueAxis
if ( !jQuery.sap.isDeclared('sap.makit.ValueBubble') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.makit.ValueBubble.
jQuery.sap.declare("sap.makit.ValueBubble");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new ValueBubble.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowCategoryText showCategoryText} : boolean (default: true)</li>
 * <li>{@link #getShowCategoryDisplayName showCategoryDisplayName} : boolean (default: true)</li>
 * <li>{@link #getShowValueDisplayName showValueDisplayName} : boolean (default: true)</li>
 * <li>{@link #getShowValueOnPieChart showValueOnPieChart} : boolean (default: false)</li>
 * <li>{@link #getShowLegendLabel showLegendLabel} : boolean (default: true)</li>
 * <li>{@link #getShowNullValue showNullValue} : boolean (default: true)</li>
 * <li>{@link #getPosition position} : sap.makit.ValueBubblePosition (default: sap.makit.ValueBubblePosition.Top)</li>
 * <li>{@link #getStyle style} : sap.makit.ValueBubbleStyle (default: sap.makit.ValueBubbleStyle.Top)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The properties of the Chart's Value Bubble.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.8.4
 *
 * @constructor   
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 * @name sap.makit.ValueBubble
 */
sap.ui.core.Element.extend("sap.makit.ValueBubble", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.makit",
	properties : {
		"showCategoryText" : {type : "boolean", group : "Misc", defaultValue : true},
		"showCategoryDisplayName" : {type : "boolean", group : "Misc", defaultValue : true},
		"showValueDisplayName" : {type : "boolean", group : "Misc", defaultValue : true},
		"showValueOnPieChart" : {type : "boolean", group : "Misc", defaultValue : false},
		"showLegendLabel" : {type : "boolean", group : "Misc", defaultValue : true},
		"showNullValue" : {type : "boolean", group : "Misc", defaultValue : true},
		"position" : {type : "sap.makit.ValueBubblePosition", group : "Misc", defaultValue : sap.makit.ValueBubblePosition.Top},
		"style" : {type : "sap.makit.ValueBubbleStyle", group : "Misc", defaultValue : sap.makit.ValueBubbleStyle.Top},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.makit.ValueBubble with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.makit.ValueBubble.extend
 * @function
 */


/**
 * Getter for property <code>showCategoryText</code>.
 * Whether to display category's text on the Value Bubble
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCategoryText</code>
 * @public
 * @name sap.makit.ValueBubble#getShowCategoryText
 * @function
 */


/**
 * Setter for property <code>showCategoryText</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCategoryText  new value for property <code>showCategoryText</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowCategoryText
 * @function
 */

/**
 * Getter for property <code>showCategoryDisplayName</code>.
 * Whether to display category's display name on the Value Bubble
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCategoryDisplayName</code>
 * @public
 * @name sap.makit.ValueBubble#getShowCategoryDisplayName
 * @function
 */


/**
 * Setter for property <code>showCategoryDisplayName</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCategoryDisplayName  new value for property <code>showCategoryDisplayName</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowCategoryDisplayName
 * @function
 */

/**
 * Getter for property <code>showValueDisplayName</code>.
 * Whether to display value's display name on the Value Bubble
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showValueDisplayName</code>
 * @public
 * @name sap.makit.ValueBubble#getShowValueDisplayName
 * @function
 */


/**
 * Setter for property <code>showValueDisplayName</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowValueDisplayName  new value for property <code>showValueDisplayName</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowValueDisplayName
 * @function
 */

/**
 * Getter for property <code>showValueOnPieChart</code>.
 * Whether to display value on Pie or Donut chart
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showValueOnPieChart</code>
 * @public
 * @name sap.makit.ValueBubble#getShowValueOnPieChart
 * @function
 */


/**
 * Setter for property <code>showValueOnPieChart</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowValueOnPieChart  new value for property <code>showValueOnPieChart</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowValueOnPieChart
 * @function
 */

/**
 * Getter for property <code>showLegendLabel</code>.
 * Whether to display legend's label (Pie or Donut chart only)
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLegendLabel</code>
 * @public
 * @name sap.makit.ValueBubble#getShowLegendLabel
 * @function
 */


/**
 * Setter for property <code>showLegendLabel</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLegendLabel  new value for property <code>showLegendLabel</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowLegendLabel
 * @function
 */

/**
 * Getter for property <code>showNullValue</code>.
 * Whether to render null item on the Value Bubble
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showNullValue</code>
 * @public
 * @name sap.makit.ValueBubble#getShowNullValue
 * @function
 */


/**
 * Setter for property <code>showNullValue</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowNullValue  new value for property <code>showNullValue</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setShowNullValue
 * @function
 */

/**
 * Getter for property <code>position</code>.
 * The position of the Value Bubble (Pie or Donut chart only)
 *
 * Default value is <code>Top</code>
 *
 * @return {sap.makit.ValueBubblePosition} the value of property <code>position</code>
 * @public
 * @name sap.makit.ValueBubble#getPosition
 * @function
 */


/**
 * Setter for property <code>position</code>.
 *
 * Default value is <code>Top</code> 
 *
 * @param {sap.makit.ValueBubblePosition} oPosition  new value for property <code>position</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setPosition
 * @function
 */

/**
 * Getter for property <code>style</code>.
 * Value Bubble positioning style (All the chart types except: Pie/Donut/HBar chart)
 *
 * Default value is <code>Top</code>
 *
 * @return {sap.makit.ValueBubbleStyle} the value of property <code>style</code>
 * @public
 * @name sap.makit.ValueBubble#getStyle
 * @function
 */


/**
 * Setter for property <code>style</code>.
 *
 * Default value is <code>Top</code> 
 *
 * @param {sap.makit.ValueBubbleStyle} oStyle  new value for property <code>style</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setStyle
 * @function
 */

/**
 * Getter for property <code>visible</code>.
 * Whether the Value Bubble is visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.makit.ValueBubble#getVisible
 * @function
 */


/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.makit.ValueBubble} <code>this</code> to allow method chaining
 * @public
 * @name sap.makit.ValueBubble#setVisible
 * @function
 */

// Start of sap/makit/ValueBubble.js
/*!
 * @copyright@
 */

sap.makit.ValueBubble.prototype.toObject = function(){
	var obj = {};
	
	obj.showCategoryText = this.getShowCategoryText();
	obj.showCategoryDisplayName = this.getShowCategoryDisplayName();
	obj.showValueDisplayName = this.getShowValueDisplayName();
	obj.showValueOnPieChart = this.getShowValueOnPieChart();
	obj.showLegendLabel = this.getShowLegendLabel();
	obj.showNullValue  = this.getShowNullValue();
	obj.style = this.getStyle().toLowerCase();
	obj.position = this.getPosition().toLowerCase();
	obj.visible = this.getVisible();
	return obj;
};
}; // end of sap.makit.ValueBubble
