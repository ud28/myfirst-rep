// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.m.library-all');
if ( !jQuery.sap.isDeclared('sap.m.ActionSheetRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.ActionSheetRenderer");

/**
 * @class ActionSheet renderer. 
 * @static
 */
sap.m.ActionSheetRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ActionSheetRenderer.render = function(oRm, oControl){ 
	var aActionButtons = oControl.getButtons(), i;
	 
	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMActionSheet");
	oRm.writeClasses();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	
	oRm.write(">");
	
	for(i = 0 ; i < aActionButtons.length ; i++){
		oControl._preProcessActionButton(aActionButtons[i]);
		oRm.renderControl(aActionButtons[i].addStyleClass("sapMActionSheetButton"));
	}
	 
	if((jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && jQuery.device.is.phone)) && oControl.getShowCancelButton()){
		oRm.renderControl(oControl._getCancelButton());
	}
	
	oRm.write("</div>");
};

}; // end of sap.m.ActionSheetRenderer
if ( !jQuery.sap.isDeclared('sap.m.BarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.BarRenderer");

/**
 * @class Bar renderer.
 * @static
 */
sap.m.BarRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.BarRenderer.render = function(rm, oControl) { 
	var i = 0;

	switch (oControl._context) {
	case 'header':
		//render header element 
		rm.write("<header");
		break;
	case 'footer':
		//render footer element 
		rm.write("<footer");
		rm.addClass("sapMFooter-CTX");
		break;
	default: 
		//render div element as default 
		rm.write("<div");
		break;
	}
	rm.writeControlData(oControl);
	rm.addClass("sapMBar");

	if (oControl.getTranslucent() && (jQuery.support.touch  || jQuery.sap.simulateMobileOnDesktop)) {
		rm.addClass("sapMBarTranslucent");
	}

	rm.addClass("sapMBar-CTX");
	rm.writeClasses();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	
	rm.write(">"); 

	//middle content area 
	rm.write("<div id='"); 
	rm.write(oControl.getId());
	rm.write("-BarMiddle' class='sapMBarMiddle' >");
	if (oControl.getEnableFlexBox()){
		oControl._oflexBox = oControl._oflexBox || new sap.m.HBox(oControl.getId() + "-BarPH", {alignItems: "Center"}).addStyleClass("sapMBarPH").setParent(oControl, null, true);
		aMContent = oControl.getContentMiddle();
		for(i=0; i<aMContent.length; i++){
			oControl._oflexBox.addItem(aMContent[i]);
		}
		rm.renderControl(oControl._oflexBox);
	} else {
		rm.write("<div id='" + oControl.getId() + "-BarPH' class='sapMBarPH' >"); //place holder
		var aMContent = oControl.getContentMiddle();
		for(i=0; i<aMContent.length; i++){
			rm.renderControl(aMContent[i]);
		}
		rm.write("</div>");
	}
	rm.write("</div>");
	
	//left content area
	rm.write("<div id='"); 
	rm.write(oControl.getId());
	rm.write("-BarLeft' class='sapMBarLeft' >");
	var aLContent = oControl.getContentLeft();
	for(i=0; i< aLContent.length; i++){
		rm.renderControl(aLContent[i]);
	}
	rm.write("</div>");

	//right content area		
	rm.write("<div id='"); 
	rm.write(oControl.getId());
	rm.write("-BarRight' class='sapMBarRight' >");
	var aRContent = oControl.getContentRight();
	for(i=0; i<aRContent.length; i++){
		rm.renderControl(aRContent[i]);
	}
	rm.write("</div>");
	
	switch (oControl._context) {
	case 'header':
		rm.write("</header>");
		break;
	case 'footer':
		rm.write("</footer>");
		break;
	default: 
		rm.write("</div>");
		break;
	}
	
};
}; // end of sap.m.BarRenderer
if ( !jQuery.sap.isDeclared('sap.m.BusyDialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.BusyDialogRenderer");

/**
 * @class BusyDialog renderer. 
 * @static
 */
sap.m.BusyDialogRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.BusyDialogRenderer.render = function(oRm, oControl){ 
	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMBusyDialog sapMCommonDialog");
	if(jQuery.device.is.iphone){
		oRm.addClass("sapMDialogHidden");
	}
	if(!oControl._isPlatformDependent) {
		if(!oControl.getText() && !oControl.getTitle() && !oControl.getShowCancelButton()) {
			oRm.addClass("sapMBusyDialogSimple");
		}
	}
	oRm.writeClasses();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	oRm.write(">");
	if(!oControl._busyIndicator)
	oControl._busyIndicator = new sap.m.BusyIndicator(oControl.getId() + 'busyInd', {customIcon: oControl.getCustomIcon(), customIconWidth: '44' + 'px', customIconheight: '44' +'px', 
													customIconRotationSpeed: oControl.getCustomIconRotationSpeed(), customIconDensityAware: oControl.getCustomIconDensityAware()}).addStyleClass('sapMBsyInd');
	
	if(oControl.getTitle()) {
		oRm.write("<header class=\"sapMDialogTitle\">" + oControl.getTitle() + "</header>");
	}
	
	if(jQuery.os.ios || !oControl._isPlatformDependent) {
		oRm.renderControl(oControl._oLabel);
		oRm.renderControl(oControl._busyIndicator);
	} else {
		oRm.renderControl(oControl._busyIndicator);
		oRm.renderControl(oControl._oLabel);
	}
	
	if(oControl.getShowCancelButton()){
		var sButtonStyle = "";
		oRm.write("<footer class='sapMBusyDialogFooter sapMFooter-CTX'>");
		//oRm.write("<div class='sapMBusyDialogAction'>");
		if(!oControl._oButton) {
			var sButtonText = (oControl.getCancelButtonText()) ? oControl.getCancelButtonText() : 	sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("BUSYDIALOG_CANCELBUTTON_TEXT");
			if(!oControl._isPlatformDependent) {
				sButtonStyle = sap.m.ButtonType.Transparent;
			} else {
				sButtonStyle = (jQuery.os.ios) ? sap.m.ButtonType.Unstyled : sap.m.ButtonType.Default;
			}
			oControl._oButton = new sap.m.Button(oControl.getId() + 'busyCancelBtn', {
				text: sButtonText,
				type: sButtonStyle,
				tap : function() {
					oControl.close();
				}
			}).addStyleClass("sapMDialogBtn");
		}
		oRm.renderControl(oControl._oButton);
		//oRm.write("</div>");
		oRm.write("</footer>");
	}
	oRm.write("</div>");
};

}; // end of sap.m.BusyDialogRenderer
if ( !jQuery.sap.isDeclared('sap.m.BusyIndicatorRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.BusyIndicatorRenderer");

/**
 * @class BusyIndicator renderer. 
 * @static
 */
sap.m.BusyIndicatorRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.BusyIndicatorRenderer.render = function(oRm, oControl){ 

	var sSize = oControl.getSize();
	var iSpinBar = (oControl._bIosStyle) ? 13 :4;
	var iDesignClass = "";
	if(oControl.getDesign() == "auto") {
		iDesignClass = "sapMBusyIndicator";
	} else {
		iDesignClass = oControl.getDesign() == "dark" ? "sapMBusyIndicatorDark" : "sapMBusyIndicatorLight";
	}
	
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass(iDesignClass);
	oRm.writeClasses();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	if(!oControl.getVisible()) {
		oRm.addStyle("visibility", "hidden");
		oRm.writeStyles();
	}
	oRm.write(">");
	if(oControl.getCustomIcon()){
		if(!oControl._iconImage) {
			var sWidth = oControl.getCustomIconWidth() || '44px';
			var sHeight = oControl.getCustomIconHeight() || '44px';
			oControl._iconImage = new sap.m.Image(oControl.getId() + "-icon", {src: oControl.getCustomIcon(), width: sWidth, height: sHeight, densityAware: oControl.getCustomIconDensityAware()}).addStyleClass('sapMBsyIndIcon');
		}
		oRm.renderControl(oControl._iconImage);
	}else if (oControl._bUseCanvas){
		oRm.write('<canvas');
		oRm.writeAttribute("id", oControl.getId() +  "-canvas");
		oRm.writeAttribute("class","sapMSpinCanvas"); 
		oRm.writeAttribute("width","32"); // initially 2em * 16px
		oRm.writeAttribute("height","32");
		if(sSize){
			oRm.addStyle('width', sSize);
			oRm.addStyle('height', sSize);
			oRm.writeStyles();
		}
		oRm.write('></canvas>');
	}else{ // old mvi style for android and ios
		oRm.write("<div");
		oRm.writeAttribute("class","sapMSpinner"); 
		if(sSize){
			oRm.addStyle('width', oControl.getSize());
			oRm.addStyle('height', oControl.getSize());
			oRm.writeStyles();
		}
		oRm.write(">");

		for (var i=1; i<iSpinBar; i++) {
			var sBarClass = 'sapMSpinBar' + i;
			if(!oControl._bIosStyle) {
				if(i === 3) {
					var sBarClass1 = 'sapMSpinBar' + 4;
					oRm.write('<div class="'+ sBarClass + '"><div class="'+ sBarClass1 + '"></div></div>');
					break;
				}
			}
			oRm.write('<div class="'+ sBarClass + '"></div>');
		}
		oRm.write("</div>");
	}
	if (oControl.getText()) {
		if (!oControl._oLabel) {
			oControl._oLabel = new sap.m.Label(oControl.getId() + "-label", {text: oControl.getText()}).addStyleClass("sapMBsyIndLabel");
			if (oControl.getTextDirection()){
				oControl._oLabel.setTextDirection(oControl.getTextDirection());
			}
		}
		oRm.renderControl(oControl._oLabel);
	}
	
	oRm.write("</div>");
};

}; // end of sap.m.BusyIndicatorRenderer
if ( !jQuery.sap.isDeclared('sap.m.ButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ButtonRenderer");

/**
 * @class Button renderer.
 * @static
 */
sap.m.ButtonRenderer = {};


/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.m.ButtonRenderer.render = function(rm, oButton) {
	// return immediately if control is invisible
	if (!oButton.getVisible()) {
		return;
	}

	// get control properties
	var sType = oButton.getType();
	var sWidth = oButton.getWidth();
	var bEnabled = oButton.getEnabled();
	var bExtraContentDiv = false;
	var sTheme_BlueCrystal = "sap_bluecrystal";
	var sTheme = sap.ui.getCore().getConfiguration().getTheme().toLowerCase();
	
	// FIXME !!!
	if (sTheme && ((sTheme.indexOf("crystal") > -1) || (sTheme.indexOf("fiori") > -1) || (sTheme.indexOf("sapphire") > -1))) {
		sTheme = "sap_bluecrystal";
	} 

	// start button tag
	rm.write("<button type=\"button\"");
	rm.writeControlData(oButton);

	// button style class
	if (sType != sap.m.ButtonType.Unstyled) {
		rm.addClass("sapMBtn");
	}

	// special for theme: BLUE-CRYSTAL
	if (sTheme === sTheme_BlueCrystal) {
		// set padding depending on icons left or right or none
		if (!oButton.getIcon()) {
			if (sType != sap.m.ButtonType.Accept && sType != sap.m.ButtonType.Reject && sType != sap.m.ButtonType.Back && sType != sap.m.ButtonType.Up) {
				rm.addClass("sapMBtnPaddingLeft");
			}
			if (oButton.getText()) {
				rm.addClass("sapMBtnPaddingRight");
			}
		} else {
			if (oButton.getIcon() && oButton.getText() && oButton.getIconFirst()) {
				rm.addClass("sapMBtnPaddingRight");
			}
			if (oButton.getIcon() && oButton.getText() && !oButton.getIconFirst()) {
				rm.addClass("sapMBtnPaddingLeft");
			}
		}
	}

	// check if button is disabled
	if (!bEnabled) {
		if (sType == sap.m.ButtonType.Back || sType == sap.m.ButtonType.Up) {
			rm.addClass("sapMBtn" + jQuery.sap.escapeHTML(sType) + "Disabled");
		} else {
			if (sType != sap.m.ButtonType.Unstyled) {
				rm.addClass("sapMBtnDisabled");
			}
		}
		// special for theme: BLUE-CRYSTAL
		if (sTheme === sTheme_BlueCrystal) {
			//alert(sTheme);
			if (sType == sap.m.ButtonType.Accept || 
				sType == sap.m.ButtonType.Reject || 
				sType == sap.m.ButtonType.Emphasized || 
				sType == sap.m.ButtonType.Transparent) {
				rm.addClass("sapMBtn" + jQuery.sap.escapeHTML(sType) + "Disabled");
			}
		}
	} else {
		if (sType != "" && sType != sap.m.ButtonType.Unstyled) {
			rm.addClass("sapMBtn" + jQuery.sap.escapeHTML(sType));
		}	
	}

	// only for iOS buttons in bar control: if only an icon and no text is provided the button should be transparent and the active state is a background glow 
	if (oButton.getIcon() && !oButton.getText() && sType != sap.m.ButtonType.Back){
		if (!bEnabled) {
			rm.addClass("sapMBtnIconDisabled");
		} else {
			rm.addClass("sapMBtnIcon");
		}
	}

	// set user defined width
	if (sWidth != "" || sWidth.toLowerCase() == "auto") {
		bExtraContentDiv = false;
		rm.writeAttribute("style", "width:" + sWidth + ";");
	}

	// add all classes to button tag
	rm.writeClasses();

	var sTooltip = oButton.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}

	// close start button tag
	rm.write(">");

	// hook for inheriting controls to add their HTML
	if(this.renderButtonContentBefore){
		this.renderButtonContentBefore(rm, oButton);
	}

	// check if additional content-DIV needs to rendered
	if (sType == sap.m.ButtonType.Accept) { 
		bExtraContentDiv = true;
	}
	if (sType == sap.m.ButtonType.Reject) {
		bExtraContentDiv = true;
	}
	if (sType == sap.m.ButtonType.Up) {
		bExtraContentDiv = true;
	}

	// special for theme: BLUE-CRYSTAL
	if (sTheme === sTheme_BlueCrystal && sType == sap.m.ButtonType.Back) {
		bExtraContentDiv = true;
	}

	if (oButton.getIcon()) {
		bExtraContentDiv = true;
	}

	// render button content tag if image control is loaded	
	if (bExtraContentDiv) {
		rm.write("<div");
		if (sType != sap.m.ButtonType.Unstyled) {
			rm.addClass("sapMBtnContent");
			rm.writeClasses();	
		}
		rm.write(">");	
	}

	// set image for internal image control (accept)
	var sAcceptURI = sap.ui.core.IconPool.getIconURI("accept");
	this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Accept, sAcceptURI);

	// set image for internal image control (reject)
	var sRejectURI = sap.ui.core.IconPool.getIconURI("decline");
	this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Reject, sRejectURI);

	// special for theme: BLUE-CRYSTAL
	if (sTheme === sTheme_BlueCrystal) {
	
		// set image for internal image control (back)
		var sBackURI = sap.ui.core.IconPool.getIconURI("nav-back");
		this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Back, sBackURI);
		this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Up, sBackURI);

	} else {

		// set image for internal image control (up)
		var sUpURI = sap.ui.core.IconPool.getIconURI("navigation-left-arrow");
		this.writeInternalIconPoolHtml(rm, oButton, sType, sap.m.ButtonType.Up, sUpURI);

	}
	
	// write icon left	
	if (oButton.getIcon() && oButton.getIconFirst()) {
		this.writeImgHtml(rm, oButton);
	}

	// write button text	
	this.writeTextHtml(rm, oButton, bExtraContentDiv, sType);

	// write icon right	
	if (oButton.getIcon() && !oButton.getIconFirst()) {
		this.writeImgHtml(rm, oButton);
	}

	// close button content tag	
	if (bExtraContentDiv) {
		rm.write("</div>");
	}

	// hook for inheriting controls to add their HTML
	if(this.renderButtonContentAfter){
		this.renderButtonContentAfter(rm, oButton);
	}

	// end button tag
	rm.write("</button>");
};


/**
 * HTML for button text
 */
sap.m.ButtonRenderer.writeTextHtml = function(rm, oButton, bExtraContentDiv, sType) {
	rm.write("<span");
	if (!bExtraContentDiv && sType != sap.m.ButtonType.Unstyled) {
		rm.addClass("sapMBtnContent");
		rm.writeClasses();
	}
	if (oButton.getIcon() && oButton.getText()) {
		rm.addClass("sapMBtnContentSpan");
		rm.writeClasses();
	}
	rm.write(">");
	if (oButton.getText()) {
		rm.writeEscaped(oButton.getText());
	} else {	
		if (sType == sap.m.ButtonType.Back) {
			rm.write("&nbsp;");
		}
	}	
	rm.write("</span>");	
};


/**
 * HTML for image
 */
sap.m.ButtonRenderer.writeImgHtml = function(rm, oButton) {
	rm.renderControl(oButton._getImage((oButton.getId() + "-img"), oButton.getIcon(), oButton.getActiveIcon(), oButton.getIconDensityAware()));	
};


/**
 * HTML for internal image (icon pool)
 */
sap.m.ButtonRenderer.writeInternalIconPoolHtml = function(rm, oButton, sType, sCheckType, sURI) {
	if (sType === sCheckType) {
		if (oButton._imageBtn) {
			oButton._imageBtn.setSrc(sURI);
		} else{		
			rm.renderControl(oButton._getInternalIconBtn((oButton.getId() + "-iconBtn"), sURI));
		}
	}
};

}; // end of sap.m.ButtonRenderer
if ( !jQuery.sap.isDeclared('sap.m.CarouselRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
 
jQuery.sap.declare("sap.m.CarouselRenderer");

/**
 * @class Carousel renderer. 
 * @static
 */
sap.m.CarouselRenderer = {
};




/**
 * Renders the Carousel's HTML, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.CarouselRenderer.render = function(rm, oCarousel){ 
	// Return immediately if control is invisible or if there are no pages to be rendered
	if (!oCarousel.getVisible()) {
		return;
	}

	//div for pages
	rm.write("<div");
	rm.writeControlData(oCarousel);

	rm.addStyle("width", oCarousel.getWidth());
	rm.addStyle("height", oCarousel.getHeight());
	rm.writeStyles();
	
	rm.addClass("sapMCrsl");
	// add all classes (also custom classes) to carousel tag
	rm.writeClasses();
	
	var sTooltip = oCarousel.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	
	rm.write(">");
	
	//visual indicator
	if(oCarousel.getPageIndicatorPlacement() == sap.m.PlacementType.Top) {
		this._renderPageIndicator(rm, oCarousel);
	}
	
	//prepare the div which will contain the pages
	if(!oCarousel._oSwipeView) {
		rm.write("<div id="); rm.writeEscaped(oCarousel._getContentId()); rm.write(" class='sapMCrslCont'></div>");
	}
	
	//visual indicator
	if(oCarousel.getPageIndicatorPlacement() == sap.m.PlacementType.Bottom) {
		this._renderPageIndicator(rm, oCarousel);
	}
	rm.write("</div>");	
};


/**
 * Renders the page indicator, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @private
 */
sap.m.CarouselRenderer._renderPageIndicator = function(rm, oCarousel){
	rm.write("<ul id="); + rm.writeEscaped(oCarousel._getNavId());
	if (!oCarousel.getShowPageIndicator()) {
		rm.addStyle("display","none");
		rm.writeStyles();
	};
	rm.write(" class='sapMCrslIndLst'>");
	this.renderPageIndicatorDots(rm, oCarousel);
	rm.write("</ul>");
};


/**
 * Renders the page indicator dots, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.CarouselRenderer.renderPageIndicatorDots = function(rm, oCarousel){
	if(oCarousel.getShowPageIndicator()) {
		rm.write("<div id="); rm.writeEscaped(oCarousel._getPrevBtnId()); rm.write(" class='sapMCrslIndLstBt'/>"); 
		var dotCount = oCarousel.getPages().length;
		for(var i= 0; i< dotCount; i ++) {
			rm.write("<li id="); rm.writeEscaped(oCarousel._getNavId()); rm.write("-dot" + i + " class='sapMCrslIndLstIt'></li>");
		}
		rm.write("<div id="); rm.writeEscaped(oCarousel._getNextBtnId()); rm.write(" class='sapMCrslIndLstBt'/>"); 
	}
};


}; // end of sap.m.CarouselRenderer
if ( !jQuery.sap.isDeclared('sap.m.CheckBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.CheckBoxRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class CheckBox renderer. 
 * @static
 */
sap.m.CheckBoxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oCheckBox an object representation of the control that should be rendered
 */
sap.m.CheckBoxRenderer.render = function(oRm, oCheckBox){ 
	// Return immediately if control is invisible
	if (!oCheckBox.getVisible()) {
		return;
	}

	// get control properties
	var bEnabled = oCheckBox.getEnabled();
	var myTabIndex = 0;
	
	// CheckBox wrapper
	oRm.write("<div");
	oRm.addClass("sapMCb");
	if(bEnabled) {
		oRm.addClass("sapMPointer");
	}
	oRm.writeControlData(oCheckBox); 
	oRm.writeClasses();
	
	var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oCheckBox, oCheckBox.getTooltip_AsString());
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	
	oRm.write(">");		// DIV element
	
	
	// write the HTML into the render manager
	oRm.write("<div id='");
	oRm.write(oCheckBox.getId() + "-CbBg'");
	
	// CheckBox style class
	oRm.addClass("sapMCbBg");
	
	if (!bEnabled) {
		oRm.addClass("sapMCbBgDis");
		myTabIndex = -1;
	}

	if (!oCheckBox.getActiveHandling()){
		oRm.addClass("sapMCbActiveStateOff");
	}
	oRm.writeAttribute("tabIndex", myTabIndex);
	oRm.addClass("sapMCbMark"); // TODO: sapMCbMark is redundant, remove it and simplify CSS
	
	if (oCheckBox.getSelected()) {
		oRm.addClass("sapMCbMarkChecked");
	}
	oRm.writeClasses();
	
	oRm.write(">");		// DIV element

	oRm.write("<input type='CheckBox' tabindex='-1' id='");
	oRm.write(oCheckBox.getId() + "-CB'");
	
	if (oCheckBox.getSelected()) {
		oRm.writeAttribute("checked", "checked");
	}
	
	if (oCheckBox.getName()) {
		oRm.writeAttributeEscaped('name', oCheckBox.getName());
	}

	if (!bEnabled) {
		oRm.write(" disabled='disabled'");
	}

	oRm.write(" /></div>");
	oRm.renderControl(oCheckBox._oLabel);
	oRm.write("</div>");
};

}; // end of sap.m.CheckBoxRenderer
if ( !jQuery.sap.isDeclared('sap.m.CustomSelect') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.CustomSelect");

(function(_sap) {
	var sPath = "sap.ui.thirdparty.mobiscroll.",
		sCSSPath = sPath + "css",
		bPlatformDependent = !!sap.ui.core.theming.Parameters.get("sapMPlatformDependent"),
		bAndroid23AndPlatformDependent = bPlatformDependent && jQuery.os.android && jQuery.os.fVersion === 2.3,
		sTheme = bPlatformDependent ? "android-ics light" : "sapMCustomSlt";

	_sap.require("sap.m.InstanceManager");
	_sap.require(sPath + "js.mobiscroll-core");
	_sap.require(sPath + "js.mobiscroll-select");
	_sap.includeStyleSheet(_sap.getModulePath(sCSSPath, "/") + "mobiscroll-core.css");

	if (bPlatformDependent) {
		_sap.includeStyleSheet(_sap.getModulePath(sCSSPath, "/") + "mobiscroll-android-ics.css");
	}

	/**
	 * if page is scrolling then set the dialog middle
	 *
	 */
	var fnCentralizeOnScroll = function($Dialog) {
		var $container = $Dialog.find(".dw"),
			fDialogHeight = $container.outerHeight(true),
			fDialogWidth = $container.outerWidth(true),
			fWindowHeight = document.documentElement.clientHeight,
			fWindowWidth = document.documentElement.clientWidth,
			$Persp = $Dialog.find(".dw-persp");

		// if page is scrolling hide arrow and centralize modal
		if ($Persp.height() > fWindowHeight) {
			$Persp.height(fWindowHeight);
			$Persp.find(".dw-arrw-i").css("display", "none");
			$container.css({
				top : Math.max((fWindowHeight - fDialogHeight) / 2, 0),
				left : Math.max((fWindowWidth - fDialogWidth) / 2, 0)
			});
		}
	};

	/* =========================================================== */
	/*                   begin: lifecycle methods                  */
	/* =========================================================== */

	/**
	 * Required adaptations before rendering when using Mobiscroll.
	 *
	 * @private
	 */
	sap.m.Select.prototype._onBeforeRenderingCustom = function() {
		if (this._$Select) {
			this._$Select.scroller("destroy");
		}
	};

	/**
	 * Required adaptations after rendering when using Mobiscroll.
	 *
	 * @private
	 */
	sap.m.Select.prototype._onAfterRenderingCustom = function() {
		var self = this,
			InstanceManager = sap.m.InstanceManager,
			fnHandlePointerDown = jQuery.proxy(this._handlePointerDown, this),
			fnHandleResizeEvent = jQuery.proxy(this._handleResizeEvent, this);

		if (this._$Select.length) {
			this._$Select.scroller({

				/**
				 *	Options for controlling the modal dialog button labels and header text.
				 */

				// text for Cancel button
				cancelText: this._oRb.getText("SELECT_CANCEL"),

				// text for Set button
				setText: this._oRb.getText("SELECT_ACCEPT"),

				// specifies a custom string which appears in the popup header
				headerText: this.getTitle(),

				// language of the scroller
				lang: this._sLang,

				// specifies the speed in milliseconds to change values in clickpick mode with tap & hold
				delay: 300,

				// disables (true) or enables (false) the scroller
				disabled: !this.getEnabled(),

				// controls the positioning of the scroller. Possible options:
				// "modal", "inline", "bubble", "top", "bottom"
				display: jQuery.device.is.phone ? "modal" : "bubble",

				// Option to choose between modes.
				// Possible modes: 'mixed - ''scroller' - standard behaviour, 'clickpick' - '+' and '-' buttons
				mode: jQuery.device.is.phone || jQuery.device.is.tablet ? "scroller" : "mixed",

				// Preset configurations for select
				preset: "select",

				// show/hide labels above wheels
				showLabel: false,

				// Sets the scroller's visual appearance.
				// Supplied themes: 'android', 'android-ics', 'android-ics light', 'sense-ui', 'ios', 'jqm'
				theme: sTheme,

				// minimum width in pixels of the wheels, expand to fit values and labels
				width: 80,

				// height in pixels of one row on the wheel
				height: 40,

				// css class(es) to style the input which is shown instead of the original select element
				inputClass: "sapMSltInput",

				rows: jQuery.device.is.phone ? 3 : 5,

				/**
				 * Allows you to define your own event when the html markup of the scroller is generated,
				 * but it is not yet shown. It is usefull, if you want to make modifications to the markup
				 * (e.g. add custom elements), before the positioning runs.
				 * The function receives the jQuery object containing the generated html and the scroller instance as parameters.
				 * If returns false, close is prevented.
				 *
				 * @param {jQuery} $Html jQuery object containing the generated HTML
				 * @param {string} oScroller Scroller instance
				 */
				onMarkupReady: function($Html, oScroller) {
					if (self.getTitle()) {
						$Html.addClass("sapMCustomSltHdr");
					}

					// restrict the width of the popup
					$Html[0].querySelector(".dwwr").style.maxWidth = (document.documentElement.clientWidth - 40) + "px";
				},

				/**
				 * Gets called when the scroller appears.
				 *
				 * @param {jQuery} $Html  jQuery object containing the generated html
				 * @param {string} sValue The formatted value
				 * @param {object} oScroller Scroller instance
				 */
				onShow: function($Html, sValue, oScroller) {
					!bAndroid23AndPlatformDependent && !jQuery.device.is.phone && document.addEventListener(jQuery.support.touch ? "touchstart" : "mousedown", fnHandlePointerDown, true);
					jQuery(window).on("resize.sapMCustomSelect", {$domRef: $Html}, fnHandleResizeEvent);
					InstanceManager.addDialogInstance(self);

					oScroller.settings.display === "bubble" && fnCentralizeOnScroll.call(this, $Html);
				},

				/**
				 * Allows you to define your own event when the scroller is closed.
				 * If returns false, close is prevented.
				 *
				 * @param {string} sValue Selected value as text
				 * @param {object} oScroller Scroller instance
				 **/
				onClose: function() {
					!bAndroid23AndPlatformDependent && !jQuery.device.is.phone && document.removeEventListener(jQuery.support.touch ? "touchstart" : "mousedown", fnHandlePointerDown, true);
					jQuery(window).off("resize.sapMCustomSelect", fnHandleResizeEvent);
					InstanceManager.removeDialogInstance(self);
				}
			});
		}
	};

	sap.m.Select.prototype._handlePointerDown = function(oEvent) {
		if (!document.querySelector(".sapMCustomSlt .dwwr").contains(oEvent.target)) {
			this.close();
		}
	};

	/**
	 * Close the opened select dialog when the back button is push.
	 *
	 * This method gets called from sap.m.InstanceManager, but previously it is needed
	 * to add the select instance to the instance manager by using sap.m.InstanceManager.addDialogInstance().
	 */
	sap.m.Select.prototype.close = function() {
		this._$Select.scroller("hide");
	};

	/* =========================================================== */
	/*                   end: lifecycle methods                    */
	/* =========================================================== */


	/* =========================================================== */
	/*                      begin: event handlers                  */
	/* =========================================================== */

	sap.m.Select.prototype._ontouchmoveCustom = function(oEvent) {
		oEvent.stopPropagation();
		oEvent.preventDefault();
	};

	sap.m.Select.prototype._handleResizeEvent = function(oEvent) {
		oEvent.data.$domRef[0].querySelector(".dwwr").style.maxWidth = (document.documentElement.clientWidth - 40) + "px";
	};

	// android 2.3 platform dependent workaround
	if (bAndroid23AndPlatformDependent) {
		sap.m.Select.prototype.onclick = function(oEvent) {
			this._$Select.scroller("show");
		};
	}

	/* ============================================================ */
	/*                      end: event handlers                  	*/
	/* ============================================================ */

})(jQuery.sap);
}; // end of sap.m.CustomSelect
if ( !jQuery.sap.isDeclared('sap.m.DateTimeCustom') ) {
  jQuery.sap.declare('sap.m.DateTimeCustom');
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

(function($) {

	var sOS, oDefaults,
		oCore = sap.ui.getCore(),
		oLocale = sap.m.getLocale(),
		sLanguage = oLocale.getLanguage(),
		oLocaleData = sap.m.getLocaleData(),
		oResourceBundle = oCore.getLibraryResourceBundle("sap.m"),
		_ = function(sText) {
			return oResourceBundle.getText("MOBISCROLL_" + sText);
		},
		rgxExcludeLiteral = "(?=([^']*'[^']*')*[^']*$)",
		sJsPath = "sap.ui.thirdparty.mobiscroll.js.",
		sCssPath = $.sap.getModulePath("sap.ui.thirdparty.mobiscroll", "/css/"),
		oSettings = {
			endYear : new Date().getFullYear() + 10,
			lang : sLanguage
		},
		oi18n = {
			setText : _("SET"),
			cancelText : _("CANCEL"),
			monthText : _("MONTH"),
			dayText : _("DAY"),
			yearText : _("YEAR"),
			hourText : _("HOURS"),
			minuteText : _("MINUTES"),
			secText : _("SECONDS"),
			nowText : _("NOW"),
			dayNames : oLocaleData.getDays("wide"),
			dayNamesShort : oLocaleData.getDays("abbreviated"),
			monthNames : oLocaleData.getMonths("wide"),
			monthNamesShort : oLocaleData.getMonths("abbreviated")
		},
		oThemeParams = sap.ui.core.theming.Parameters.get();
		
	// inject resources
	$.sap.includeStyleSheet(sCssPath + "mobiscroll-core.css");
	$.sap.require(sJsPath + "mobiscroll-core");
	$.sap.require(sJsPath + "mobiscroll-datetime");
	
	// get default settings
	oDefaults = $("<input>").scroller({}).scroller("getInst").settings;

	// check platform dependency and OS then do the required settings
	if (oThemeParams["sapMPlatformDependent"] != "true") {
		var device = ["phone", "tablet", "desktop"].filter(function(d) {
				return $.device.is[d];
			})[0],
			ucfirst = function(str) {
				if (!str) {
					return "";
				}
				return str.charAt(0).toUpperCase() + str.substr(1);
			},
			setDefaultsByTheme = function(key, type, prefix) {
				var value = oThemeParams["sapUiDTICustom" + ucfirst(prefix) + ucfirst(key)];
				if (value) {
					if (type == "bool") {
						oSettings[key] = (value.toLowerCase() == "true" ? true : false);
					} else if (type == "int") {
						value = parseInt(value, 10);
						!isNaN(value) && (oSettings[key] = value);
					} else {
						oSettings[key] = value;
					}
				}
				if (!prefix && device) {
					setDefaultsByTheme(key, type, device);
				}
			};

		oSettings.mode = "mixed";
		oSettings.display = "modal";
		oSettings.theme = "sapMDTICustom";
		setDefaultsByTheme("mode");
		setDefaultsByTheme("display");
		setDefaultsByTheme("animate");
		setDefaultsByTheme("rows", "int");
		setDefaultsByTheme("width", "int");
		setDefaultsByTheme("height", "int");
		setDefaultsByTheme("showLabel", "bool");
		setDefaultsByTheme("headerText", "bool");
		if (oSettings.headerText) {
			// mobiscroll needs text to replace
			oSettings.headerText = "{value}";
		}

		// load custom fonts
		$.sap.require("sap.ui.core.IconPool");
		sap.ui.core.IconPool.insertFontFaceStyle();
	} else if ($.os.ios) {
		sOS = "ios";
		oSettings.display = "bubble";
	} else if ($.os.android) {
		sOS = "android-ics";
		if ($.os.fVersion == 2.3) {
			// scroll mode is not responsive
			oSettings.mode = "clickpick";
			// 5 rows feels like scrollable
			oSettings.rows = 3;
		} else if ($.os.fVersion == 3.2) {
			// mixed mode has overlapping bug
			oSettings.mode = "scroller";
		}
	} else if ($.browser.msie) {
		sOS = "wp";
	}
	
	// enable language settings
	$.scroller.i18n[sLanguage] = $.extend(oi18n);
	
	// do OS settings
	if (sOS) {
		oSettings.theme = ($.os.android) ? sOS + " light" : sOS;
		$.sap.includeStyleSheet(sCssPath + "mobiscroll-" + sOS + ".css");
		$.sap.require(sJsPath + "mobiscroll-" + sOS);
		oSettings = $.extend({}, $.mobiscroll.themes[oSettings.theme].defaults, oSettings);
	}	

	// enable instance management
	$.sap.require("sap.m.InstanceManager");

	// Add custom datetime methods to prototype
	$.extend(sap.m.DateTimeInput.prototype, {
		/**
		 * This method gets called from sap.m.InstanceManager,
		 * to close the opened mobiscroll dialog when the back button is clicked
		 *
		 * @private
		 */
		close : function() {
			this._$input.scroller("hide");
		},

		/**
		 * Mobiscroll title reformatter to support all cldr formats
		 * We can only get string value onChange/onWheel event
		 */
		_setScrollerHeader : function(sValue) {
			try {
				var oConfig = this._$input.scroller("getInst").settings,
					sFormat = !this.getType().indexOf("Date") ? oConfig.dateFormat : oConfig.timeFormat,
					oDate = $.mobiscroll.parseDate(sFormat, sValue);

				return sap.ui.core.format.DateFormat.getDateInstance({
					pattern : this.getDisplayFormat()
				}).format(oDate);
			} catch (e) {
				return sValue;
			}
		},
		
		/**
		 * Auto close for bubbles
		 */
		_autoClose : function(oEvent) {		
			if (this.getDomRef().contains(oEvent.target)) {
				oEvent.stopPropagation();
				oEvent.preventDefault();
				return;
			}
			
			if (!document.querySelector(".sapMDTICustom .dwwr").contains(oEvent.target)) {
				this._$input.scroller("hide");
			}
		},
		
		/**
		 * if page is scrolling then set the dialog middle
		 * 
		 */		
		_centralizeOnScroll : function($dialog) {
			var $container = $dialog.find(".dw"),
				dialogHeight = $container.outerHeight(true),
				dialogWidth = $container.outerWidth(true),
				windowHeight = document.documentElement.clientHeight,
				windowWidth = document.documentElement.clientWidth,
				$persp = $dialog.find(".dw-persp");
			
			// if page is scrolling hide arrow and centralize modal
			if ($persp.height() > windowHeight) {				
				$persp.height(windowHeight);
				$dialog.find(".dw-arrw-i").css("display", "none");				
				$container.css({
					top : Math.max((windowHeight - dialogHeight) / 2, 0),
					left : Math.max((windowWidth - dialogWidth) / 2, 0)
				});
			}
		},
		
		/**
		 * Restrict max width of the dialog
		 */
		_restrictMaxWidth : function($dialog) {
			//TODO : Find a better way to find out 22 instead of hard coding
			$dialog[0].querySelector(".dwwr").style.maxWidth = (document.documentElement.clientWidth - 22) + "px";
		}, 
		
		/**
		 * Handle window resize event
		 */
		_handleResize : function(oEvent) {
			this._restrictMaxWidth(oEvent.data.$dialog);
			//TODO: run the this._centralizeOnScroll for resizing
		},

		/**
		 * Date-time conversion for mobiscroll configuration
		 */
		_getScrollerConfig : function() {			
			var that = this,
				sType = this.getType(),
				sFormat = this.getDisplayFormat(),
				fnAutoCloseProxy = $.proxy(this._autoClose, this),
				fnHandleResize = $.proxy(this._handleResize, this),
				oConfig = $.extend({}, oSettings, {
					preset : sType.toLowerCase(),
					onShow : function($dialog) {
						sap.m.InstanceManager.addDialogInstance(that);
						$(window).on("resize.sapMDTICustom", {$dialog : $dialog}, fnHandleResize);
						if (oSettings.display == "bubble") {
							that._centralizeOnScroll($dialog);
							document.addEventListener($.support.touch ? "touchstart" : "mousedown", fnAutoCloseProxy, true);
						}
					},
					onClose : function() {
						sap.m.InstanceManager.removeDialogInstance(that);
						$(window).off("resize.sapMDTICustom", fnHandleResize);
						if (oSettings.display == "bubble") {
							document.removeEventListener($.support.touch ? "touchstart" : "mousedown", fnAutoCloseProxy, true);
						}
					},
					onMarkupReady : function($dialog, inst) {
						that._restrictMaxWidth($dialog);
						if (oSettings.headerText !== false) {
							$dialog.addClass("sapMDTICustomHdr");
						}						
					}
				});

			if (sType == "Date") {
				sFormat = this._convertDatePattern(sFormat);
				$.extend(oConfig, {
					dateFormat : sFormat,
					dateOrder : this._getLongDatePattern(sFormat.replace(/'.*?'/g, "")).replace(/[^ymd ]/ig, ""),
				});
			} else if (sType == "Time") {
				sFormat = this._convertTimePattern(sFormat);
				$.extend(oConfig, {
					timeFormat : sFormat,
					timeWheels : sFormat.replace(/'.*?'/g, "").replace(/[^hisa]/ig, "")
				});
			} else if (sType == "DateTime") {
				sFormat = this._convertDatePattern(this._convertTimePattern(sFormat));

				// date-time hack
				$.extend(oConfig, {
					dateFormat : sFormat,
					dateOrder : this._getLongDatePattern(sFormat.replace(/'.*?'/g, "")).replace(/[^ymd ]/ig, ""),
					rows :  this._getRowForDateTime(), 
					timeWheels : sFormat,
					timeFormat : "",
					separator : ""
				});								
			}

			// check given format is not supported by mobiscroll
			if (/[^ymdhisa\W]/i.test(sFormat)) {
				this._reformat = true;
				if (oSettings.headerText !== false) {
					oConfig.headerText = $.proxy(this._setScrollerHeader, this);
				}
			} else {
				this._reformat = false;
			}

			return oConfig;
		},

		/**
		 * Until mobiscroll fixes min height(360px) problem for date time
		 * we just decrease the row count to 3
		 */
		_getRowForDateTime : function() {
			var rows = oSettings.rows || oDefaults.rows;
			if (!rows || rows <= 3) {
				return 3;
			}			
			return Math.min(window.innerWidth, window.innerHeight) < 360 ? 3 : rows;
		},

		/**
		 * cache often used regular expressions
		 */
		_rgxYear : new RegExp("y+" + rgxExcludeLiteral, "ig"),
		_rgxMonth : new RegExp("m+" + rgxExcludeLiteral, "ig"),
		_rgxDay : new RegExp("d+" + rgxExcludeLiteral, "g"),
		_rgxMinute : new RegExp("m" + rgxExcludeLiteral, "g"),
		_rgxAmPm : new RegExp("a" + rgxExcludeLiteral, "g"),
		_rgxDayOfWeekLong : new RegExp("EEEE" + rgxExcludeLiteral, "g"),
		_rgxDayOfWeekShort : new RegExp("E+" + rgxExcludeLiteral, "g"),


		/**
		 * Convert date pattern to long month name, 4 digit year, 2 digit day
		 */
		_getLongDatePattern : function(sPattern) {
			sPattern = (sPattern || this.getDisplayFormat()).replace(this._rgxYear, "YY");
			if (sOS == "wp") {	// for IE show day and month names to mimic native picker
				return sPattern.replace(this._rgxMonth, "mm MM").replace(this._rgxDay, "dd DD");
			}
			return sPattern.replace(this._rgxMonth, "MM").replace(this._rgxDay, "dd");
		},


		/**
		 * Converts the time pattern from CLDR to the mobiscroll time picker
		 * m is short month name, i = minute
		 */
		_convertTimePattern : function(sPattern) {
			sPattern = sPattern || this.getDisplayFormat();
			return sPattern.replace(this._rgxMinute, "i").replace(this._rgxAmPm, "A");
		},


		/**
		 * Converts the date pattern from CLDR to the one of the jQuery datePicker
		 * Month is coded in the different way
		 * TODO: Copied from core talk with core team to call method from somewhere else shared
		 * TODO: This implementation ignores the literals usage case, talk also with core team
		 */
		_convertDatePattern : function(sPattern) {
			sPattern = sPattern || this.getDisplayFormat();

			var iIndex1 = sPattern.indexOf('M'),
				iIndex2 = sPattern.lastIndexOf('M'),
				sFormat = sPattern,
				sNewMonth;

			if (iIndex1 == -1) {
				// no month defined with M, maybe using L (standalone)
				iIndex1 = sPattern.indexOf('L');
				iIndex2 = sPattern.lastIndexOf('L');
			}

			if (iIndex1 > -1) {
				switch (iIndex2-iIndex1) {
				case 0:
					sNewMonth = 'm';
					break;
				case 1:
					sNewMonth = 'mm';
					break;
				case 2:
					sNewMonth = 'M';
					break;
				case 5:
					//narrow state not available in jQuery DatePicker -> use shortest one
					sNewMonth = 'm';
					break;
				default:
					sNewMonth = 'MM';
				break;
				}
				sFormat = sPattern.substring(0, iIndex1) + sNewMonth + sPattern.substring(iIndex2 + 1);
			}

			var sNewYear;
			iIndex1 = sFormat.indexOf('y');
			if (iIndex1 > -1) {
				iIndex2 = sFormat.lastIndexOf('y');
				if (iIndex2-iIndex1 == 1) {
					// two chanrs
					sNewYear = 'y';
				}else{
					sNewYear = 'yy';
				}
				var sFormat = sFormat.substring(0, iIndex1) + sNewYear + sFormat.substring(iIndex2 + 1);
			}

			var sNewYearDay;
			iIndex1 = sFormat.indexOf('D');
			if (iIndex1 > -1) {
				iIndex2 = sFormat.lastIndexOf('D');

				if (iIndex2-iIndex1 == 1) {
					// two chanrs
					sNewYearDay = 'o';
				}else{
					sNewYearDay = 'oo';
				}
				var sFormat = sFormat.substring(0, iIndex1) + sNewYearDay + sFormat.substring(iIndex2 + 1);
			}

			// EEEE = DD = day of week(long)
			// EEE, EE, E = D = day of week(short)
			sFormat = sFormat.replace(this._rgxDayOfWeekLong, "DD").replace(this._rgxDayOfWeekShort, "D");

			return sFormat;
		}
	});

})(jQuery);
}; // end of sap.m.DateTimeCustom
if ( !jQuery.sap.isDeclared('sap.m.DialogRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.DialogRenderer");


/**
 * @class Dialog renderer. 
 * @static
 */
sap.m.DialogRenderer = {};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.DialogRenderer.render = function(oRm, oControl) {
	var oCore = sap.ui.getCore(),
		sType = oControl.getType(),
		oHeader = oControl._getHeader(),
		bMessage = (sType === sap.m.DialogType.Message),
		oLeftButton = oCore.byId(oControl.getLeftButton()),
		oRightButton = oCore.byId(oControl.getRightButton());
	
	if(oHeader){
		oHeader._context = "header";
	}

	// write the HTML into the render manager
	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMDialog");
	oRm.addClass("sapMDialog-CTX");
	oRm.addClass(sap.m.Dialog._mStateClasses[oControl.getState()]);
	
	if(!sap.m.Dialog._bOneDesign){
		if(jQuery.os.ios && !oHeader){
			oRm.addClass("sapMDialogNoHeader");
		}
		
		if(bMessage){
			oRm.addClass("sapMMessageDialog");
			oRm.addClass("sapMCommonDialog");
		}else{
			if(jQuery.device.is.iphone){
				oRm.addClass("sapMDialogHidden sapMDialogIPhone");
			}
		}
	}else{
		if(jQuery.device.is.phone){
			oRm.addClass("sapMDialogPhone");
		}
	}
	
	oRm.writeClasses();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	
	oRm.write(">");

	if(!sap.m.Dialog._bOneDesign){
		if(jQuery.os.ios) {
			if(bMessage){
				if(oControl.getTitle()) {
					oRm.write("<header class=\"sapMDialogTitle\">");
					oRm.writeEscaped(oControl.getTitle());
					oRm.write("</header>");
				}
			}else{
				if(oHeader){
					oRm.renderControl(oHeader);
				}
			}
		} else {
			if(oControl.getIcon() || oControl.getTitle()){
				oRm.write("<header>");
				oRm.write("<h1>");
				if(oControl._iconImage){
					oRm.renderControl(oControl._iconImage);
				}
				oRm.write("<span>");
				oRm.renderControl(oControl._headerTitle);
				oRm.write("</span>");
				oRm.write("</h1>");
				oRm.write("</header>");
			}
		}
	}else{
		if(oHeader){
			oRm.renderControl(oHeader);
		}
	}

	oRm.write("<section id='" + oControl.getId() + "-cont'>");
	oRm.write("<div id='" + oControl.getId() + "-scroll' class='sapMDialogScroll'>");
	oRm.write("<div id='" + oControl.getId() + "-scrollCont' class='sapMDialogScrollCont'>");
	var aContent = oControl.getContent();
	for(var i = 0; i < aContent.length; i++) {
		oRm.renderControl(aContent[i]);
	}
	oRm.write("</div>");
	oRm.write("</div>");
	oRm.write("</section>");
	
	if(sap.m.Dialog._bOneDesign || !jQuery.os.ios || bMessage) {
		
		oRm.write("<footer class='sapMDialogActions'>");

		// Render actions
		if(oLeftButton){
			oRm.write("<div class='sapMDialogAction'>");
			oRm.renderControl(oLeftButton.addStyleClass("sapMDialogBtn", true));
			oRm.write("</div>");
		}
		if(oRightButton){
			oRm.write("<div class='sapMDialogAction'>");
			oRm.renderControl(oRightButton.addStyleClass("sapMDialogBtn", true));
			oRm.write("</div>");
		}
		
		oRm.write("</footer>");
	}
	oRm.write("</div>");
};
}; // end of sap.m.DialogRenderer
if ( !jQuery.sap.isDeclared('sap.m.FlexBoxCssPropertyMap') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.FlexBoxCssPropertyMap");

sap.m.FlexBoxCssPropertyMap = {
	'spec0907': {
		'display': {
			'flex': {
				'display': 'box'
			},
			'inline-flex': {
				'display': 'inline-box'
			}
		},
		'flex-direction': {
			'row': {
				'box-orient': 'horizontal',
				'box-direction': 'normal'
			},
			'row-reverse': {
				'box-orient': 'horizontal',
				'box-direction': 'reverse'
			},
			'column': {
				'box-orient': 'vertical',
				'box-direction': 'normal'
			},
			'column-reverse': {
				'box-orient': 'vertical',
				'box-direction': 'reverse'
			}
		},
		'flex-wrap': {
			'no-wrap': {
				'box-lines': 'single'
			},
			'wrap': {
				'box-lines': 'multiple'
			},
			'wrap-reverse': null
		},
		'flex-flow': null,
		'order': {
			'<number>': {
				'box-ordinal-group': '<integer>'
			}
		},
		'flex-grow': {
			'<number>': {
				'box-flex': '<number>'
			}
		},
		'flex-shrink': null,
		'flex-basis': null,
		'flex': {
			'[flex-grow] | [flex-shrink] | [flex-basis]': {
				'box-flex': '[flex-grow]'
			}
		},
		'justify-content': {
			'flex-start': {
				'box-pack': 'start'
			},
			'flex-end': {
				'box-pack': 'end'
			},
			'center': {
				'box-pack': 'center'
			},
			'space-between': {
				'box-pack': 'justify'
			},
			'space-around': null
		},
		'align-items': {
			'flex-start': {
				'box-align': 'start'
			},
			'flex-end':{
				'box-align': 'end'
			},
			'center': {
				'box-align': 'center'
			},
			'baseline': {
				'box-align': 'baseline'
			},
			'stretch': {
				'box-align': 'stretch'
			}
		},
		'align-self': null,
		'align-content': null
	},
	'specie10': {
		'display': {
			'flex': {
				'display': 'flexbox'
			},
			'inline-flex': {
				'display': 'inline-flexbox'
			}
		},
		'flex-direction': {
			'row': {
				'flex-direction': 'row'
			},
			'row-reverse': {
				'flex-direction': 'row-reverse'
			},
			'column': {
				'flex-direction': 'column'
			},
			'column-reverse': {
				'flex-direction': 'column-reverse'
			}
		},
		'flex-wrap': {
			'no-wrap': {
				'flex-wrap': 'none'
			},
			'wrap': {
				'box-lines': 'multiple'
			},
			'wrap-reverse': null
		},
		'flex-flow': null,
		'order': {
			'<number>': {
				'flex-order': '<integer>'
			}
		},
		'flex-grow':{
			'<number>': {
				'flex': '<number>'
			}
		},
		'flex-shrink': null,
		'flex-basis': null,
		'flex': {
			'[flex-grow] | [flex-shrink] | [flex-basis]': {
				'flex': '[flex-grow] | [flex-shrink] | [flex-basis]'
			}
		},
		'justify-content': {
			'flex-start': {
				'flex-pack': 'start'
			},
			'flex-end': {
				'flex-pack': 'end'
			},
			'center': {
				'flex-pack': 'center'
			},
			'space-between': {
				'flex-pack': 'justify'
			},
			'space-around': null
		},
		'align-items': {
			'flex-start': {
				'flex-align': 'start'
			},
			'flex-end':{
				'flex-align': 'end'
			},
			'center': {
				'flex-align': 'center'
			},
			'baseline': {
				'flex-align': 'baseline'
			},
			'stretch': {
				'flex-align': 'stretch'
			}
		},
		'align-self': null,
		'align-content': null
	}
};
}; // end of sap.m.FlexBoxCssPropertyMap
if ( !jQuery.sap.isDeclared('sap.m.FlexBoxStylingHelper') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */


if(jQuery.support.useFlexBoxPolyfill) {
	jQuery.sap.require('sap.ui.thirdparty.flexie'); // unlisted dependency retained

}
jQuery.sap.declare("sap.m.FlexBoxStylingHelper");

/**
 * @class FlexBox styling helper
 * @static
 */
sap.m.FlexBoxStylingHelper = {};

/**
 * Goes through applicable styles and calls function to sets them on the given control.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.FlexBoxStylingHelper.setFlexBoxStyles = function(oRm, oControl) {
	var sDisplay;

	// Prepare values by converting camel-case to dash and lower-casing
	var bInline = oControl.getDisplayInline();
	var sDirection = oControl.getDirection().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
	var bFitContainer = oControl.getFitContainer();
	var sJustifyContent = oControl.getJustifyContent().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
	var sAlignItems = oControl.getAlignItems().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();

	if(bInline) {
		sDisplay = "inline-flex";
	} else {
		sDisplay = "flex";
	}

	// Set width and height for outermost FlexBox only if FitContainer is set
	if(bFitContainer && !(oControl.getParent() instanceof sap.m.FlexBox)) {
		if(oControl.getParent() instanceof sap.m.Page) {
			var $page = jQuery.sap.byId(oControl.getParent().getId());
			$page.find("sapMPageScroll").height("100%"); // Set height of scroll area to 100% because it's currently not automatically set
		}
		//jQuery.sap.log.info("FlexBox fitContainer set to true. Remember, if the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.");
		oRm.addStyle("width", "auto");
		oRm.addStyle("height", "100%");
	}

	// Add flex prefix to start and end values
	if(sJustifyContent === "start" || sJustifyContent === "end") {
		sJustifyContent = "flex-" + sJustifyContent;
	}

	if(sAlignItems === "start" || sAlignItems === "end") {
		sAlignItems = "flex-" + sAlignItems;
	}

	// Set values (if different from default)
	sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "display", sDisplay);
	if(sDirection !== "row") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "flex-direction", sDirection);
	}

	if(sJustifyContent !== "flex-start") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "justify-content", sJustifyContent);
	}
	if(sAlignItems !== "stretch") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "align-items", sAlignItems);
	}
//	if(jQuery.support.newFlexBoxLayout) {
//		var sWrap = oControl.getWrap().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
//		var sAlignContent = oControl.getAlignContent().replace(/\W+/g, "-").replace(/([a-z\d])([A-Z])/g, "$1-$2").toLowerCase();
//
//		if(sWrap !== "nowrap") {
//			sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "flex-wrap", sWrap);
//		}
//		if(sAlignContent === "start" || sAlignContent === "end") {
//			sAlignContent = "flex-" + sAlignContent;
//		}
//		if(sAlignContent !== "stretch") {
//			sap.m.FlexBoxStylingHelper.setStyle(oRm, oControl, "align-content", sAlignContent);
//		}
//	}
};

/**
 * Goes through applicable item styles and sets them on the given control.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.FlexItemData} oLayoutData an object representation of the layout data
 */
sap.m.FlexBoxStylingHelper.setFlexItemStyles = function(oRm, oLayoutData) {
	var order = "";
	var growFactor = "";
	var alignSelf = "";

	// Set values if different from default
	order = oLayoutData.getOrder();
	if(order) {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "order", order);
	}

	growFactor = oLayoutData.getGrowFactor();
	if(growFactor) {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "flex-grow", growFactor);
	}

	alignSelf = oLayoutData.getAlignSelf().toLowerCase();

	// Add flex prefix to start and end values to create CSS value
	if(alignSelf === "start" || alignSelf === "end") {
		alignSelf = "flex-" + alignSelf;
	}

	if(alignSelf && alignSelf !== "flex-start") {
		sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "align-self", alignSelf);
	}

//	if(jQuery.support.newFlexBoxLayout) {
//		var shrinkFactor = "";
//		var baseSize = "";
//
//		shrinkFactor = oLayoutData.getShrinkFactor();
//		if(shrinkFactor != 1) {
//			sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "flex-shrink", shrinkFactor);
//		}
//
//		baseSize = oLayoutData.getBaseSize().toLowerCase();
//		if(baseSize) {
//			sap.m.FlexBoxStylingHelper.setStyle(oRm, null, "flex-basis", baseSize);
//		}
//	}
};

/**
 * Sets style (including fall-back styles) to the given control, using the provided {@link sap.ui.core.RenderManager}.
 * This method does NOT apply a polyfill in browsers that don't support flex box natively.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param sProperty name of the property
 * @param sValue value of the property
 */
sap.m.FlexBoxStylingHelper.setStyle = function(oRm, oControl, sProperty, sValue) {
	if(typeof(sValue) === "string") {
		sValue = sValue.toLowerCase();
	}

	// Determine vendor prefix
	var sVendorPrefix = "";
	if(jQuery.browser.webkit) {
		sVendorPrefix = "-webkit-";
	} else if(jQuery.browser.mozilla) {
		sVendorPrefix = "-moz-";
	} else if(jQuery.browser.msie) {
		sVendorPrefix = "-ms-";
	}

	// Choose flex box styling method
	if(jQuery.support.newFlexBoxLayout) {
		// New spec
		sap.m.FlexBoxStylingHelper.setFinalSpecStyle(oRm, oControl, sProperty, sValue, sVendorPrefix);
	} else if(jQuery.support.flexBoxLayout || jQuery.support.ie10FlexBoxLayout) {
		// Old spec
		sap.m.FlexBoxStylingHelper.setOldSpecStyle(oRm, oControl, sProperty, sValue, sVendorPrefix);
	}
};

/**
 * Sets style for the FINAL flex box spec to the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param sProperty name of the property
 * @param sValue value of the property
 * @param sVendorPrefix vendor prefix
 */
sap.m.FlexBoxStylingHelper.setFinalSpecStyle = function(oRm, oControl, sProperty, sValue, sVendorPrefix) {
	// With vendor prefix
	sap.m.FlexBoxStylingHelper.writeStyle(oRm, oControl, sProperty, sValue, sVendorPrefix);

	// Pure standard
	sap.m.FlexBoxStylingHelper.writeStyle(oRm, oControl, sProperty, sValue);
};

/**
 * Sets style for the OLD or the IE10 flex box spec to the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param sProperty name of the property
 * @param sValue value of the property
 * @param sVendorPrefix vendor prefix
 */
sap.m.FlexBoxStylingHelper.setOldSpecStyle = function(oRm, oControl, sProperty, sValue, sVendorPrefix) {
	// Choose specification
	var sSpec = "";
	if(sVendorPrefix == "-ms-") {
		sSpec = "specie10"; // IE10 specification
	} else {
		sSpec = "spec0907";	// old specification
	}

	// Nothing to do if final standard is supported or property doesn't exist in this spec or is the same as standard
	// Else map to old property
	if(sap.m.FlexBoxCssPropertyMap[sSpec][sProperty] !== null && sap.m.FlexBoxCssPropertyMap[sSpec][sProperty] !== "<idem>") {
		// Prepare mapped properties and values
		var mLegacyMap = null;
		if(typeof(sap.m.FlexBoxCssPropertyMap[sSpec][sProperty]) === "object") {
			if(sap.m.FlexBoxCssPropertyMap[sSpec][sProperty]["<number>"]) {
				mLegacyMap = sap.m.FlexBoxCssPropertyMap[sSpec][sProperty]["<number>"];
				for(var key in mLegacyMap) {
					mLegacyMap[key] = sValue;
				}
			} else {
				mLegacyMap = sap.m.FlexBoxCssPropertyMap[sSpec][sProperty][sValue];
			}
		} else {
			mLegacyMap = sap.m.FlexBoxCssPropertyMap[sSpec][sProperty][sValue];
		}

		// Nothing to do if value doesn't exist or is the same as standard
		if(mLegacyMap !== null && mLegacyMap !== "<idem>") {
			if(typeof(mLegacyMap) === "object") {
				for(var sLegacyProperty in mLegacyMap) {
					// Write property/value to control
					sap.m.FlexBoxStylingHelper.writeStyle(oRm, oControl, sLegacyProperty, mLegacyMap[sLegacyProperty], sVendorPrefix);
				}
			}
		}
	}
};

/**
 * Writes the style to the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 * @param sProperty name of the property
 * @param sValue value of the property
 * @param sVendorPrefix vendor prefix
 */
sap.m.FlexBoxStylingHelper.writeStyle = function(oRm, oControl, sProperty, sValue, sVendorPrefix) {
	var sPropertyPrefix = "";
	var sValuePrefix = "";
	sVendorPrefix = typeof sVendorPrefix !== "undefined" ? sVendorPrefix : "";	// default: empty string

	// Set prefix to value for display property
	// As display is a long-standing standard property the values are vendor-prefixed instead of the property name
	if(sProperty !== "display") {
		sPropertyPrefix = sVendorPrefix;
	} else {
		sValuePrefix = sVendorPrefix;
	}

	// Finally write property value to control using either renderer or element directly
	if(oRm) {
		oRm.addStyle(sPropertyPrefix + sProperty, sValuePrefix + sValue);
	} else {
		jQuery(oControl).css(sPropertyPrefix + sProperty, sValuePrefix + sValue);
	}
};

/**
 * Applies flex box polyfill styling to the given DOM element and its children (if polyfill is being used at all)
 *
 * @param sId DOM ID of the control that should be turned into a flex box
 * @param oSettings object holding the flex box settings
 */
sap.m.FlexBoxStylingHelper.applyFlexBoxPolyfill = function(sId, oSettings) {
	// Return if polyfill is not being used
	if(!jQuery.support.useFlexBoxPolyfill) {
		jQuery.sap.log.warning("FlexBox Polyfill is not being used");
		return;
	}
	var justifyContent = {
		Start: "start",
		Center: "center",
		End: "end",
		SpaceBetween : "justify"
	};
	var alignItems = {
		Start: "start",
		Center: "center",
		End: "end",
		Stretch : "stretch"
	};
	
	var orient = "";
	var direction = "";
	
	switch(oSettings.direction) {
		case "Column" :
			orient = "vertical";
			direction = "normal";
			break;
		case "RowReverse" : 
			orient = "horizontal";
			direction = "reverse";
			break;
		case "ColumnReverse" : 
			orient = "vertical";
			direction = "reverse";
			break;
		case "Row" :
		default:
			orient = "horizontal";
			direction = "normal";
	}

	var box = new window.Flexie.box({
		target : document.getElementById(sId),
		orient : orient,
		align : alignItems[oSettings.alignItems],
		direction : direction,
		pack : justifyContent[oSettings.justifyContent],
		flexMatrix : oSettings.flexMatrix,
		ordinalMatrix : oSettings.ordinalMatrix,
	    dynamic: true
	});
	
	return box;
};
}; // end of sap.m.FlexBoxStylingHelper
if ( !jQuery.sap.isDeclared('sap.m.IconTabBarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.IconTabBarRenderer");

/**
 * @class HBox renderer.
 * @static
 */
sap.m.IconTabBarRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.IconTabBarRenderer.render = function(oRM, oControl){
	
	var aItems = oControl.getItems();
	
	oRM.write("<div ");
	oRM.addClass("sapMITB");
	oRM.writeControlData(oControl);
	oRM.writeClasses();
	oRM.write(">")
	oRM.write("<div class=\"sapMITBHead\">");
	jQuery.each(aItems, function(iIndex, oItem) {
		oRM.write("<div ");
		oRM.writeElementData(oItem)
		oRM.addClass("sapMIT")
		if (oItem instanceof sap.m.IconTabFilter) {
			if (oItem.getShowAll()) {
				oRM.addClass("sapMITAll");
			} else {
				oRM.addClass("sapMITFilter");
			}
			if (oItem.getCount() == "0") {
				oRM.addClass("sapMITDisabled");
			}
 			oRM.writeClasses();
			oRM.write(">");
			if (!oItem.getShowAll()) {
				var sIconClass = "sapMITFilterIcon sapMITFilter" + oItem.getIconColor();
				oRM.writeIcon(oItem.getIcon(), sIconClass);
			}
			oRM.write("<span class=\"sapMITDesc\">");
			oRM.write("<span class=\"sapMITCount\">");
			oRM.writeEscaped(oItem.getCount());
			oRM.write("</span>");
			oRM.write("<span class=\"sapMITText\">");
			oRM.writeEscaped(oItem.getText());
			oRM.write("</span>");
			oRM.write("</span>")
		} 
		else if (oItem instanceof sap.m.IconTabSeparator) {
			oRM.addClass("sapMITSep")
			if (!oItem.getIcon()) {
				oRM.addClass("sapMITSepLine");
			}
			oRM.writeClasses();
			oRM.write(">");
			if (oItem.getIcon()) {
				oRM.writeIcon(oItem.getIcon(), "sapMITSepIcon");
			}
		}
		oRM.write("</div>");
	});
	oRM.write("</div>");
	if (oControl.getContent()) {
		oRM.write("<div id=\"" + oControl.getId() + "-arrow\" class=\"sapMITBArrow\"></div>");
		oRM.write("<div id=\"" + oControl.getId() + "-content\" class=\"sapMITBContent\">");
		oRM.renderControl(oControl.getContent());
		oRM.write("</div>");
	}
	oRM.write("</div>");
};

}; // end of sap.m.IconTabBarRenderer
if ( !jQuery.sap.isDeclared('sap.m.ImageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
 
// Provides default renderer for control sap.m.Image
jQuery.sap.declare("sap.m.ImageRenderer");

/**
 * @class Image renderer. 
 * @author D051016
 * @static
 */
sap.m.ImageRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ImageRenderer.render = function(rm, oImage){ 
	// Return immediately if control is invisible
	if (!oImage.getVisible()) {
		return;
	}
	
	// Open the <img> tag
	rm.write("<img");

	rm.writeAttributeEscaped("src", oImage._getDensityAwareSrc());
	rm.writeControlData(oImage);
	
	rm.addClass("sapMImg");
	if(oImage.hasListeners("press") || oImage.hasListeners("tap")){
		rm.addClass("sapMPointer");
	}
	rm.writeClasses();
	
	//TODO need further discussion to decide if tooltip is still needed for mobile
	var tooltip = oImage.getTooltip_AsString();
	if (tooltip) {
		rm.writeAttributeEscaped("title", tooltip);
	}

	//TODO implement the ImageMap control
	var sUseMap = oImage.getUseMap();
	if (sUseMap) {
		if (!(jQuery.sap.startsWith(sUseMap, "#"))) {
			sUseMap = "#" + sUseMap;
		}
		rm.writeAttributeEscaped("useMap", sUseMap);
	}
	
	// determine tab index and write alt attribute - both depending on "decorative" state (which is overridden by the "useMap" property
	var myTabIndex = 0;
	if ((oImage.getDecorative() && (!sUseMap))) {
		myTabIndex = -1;
		rm.writeAttribute("role", "presentation");
		rm.write(" alt=''"); // accessibility requirement: write always empty alt attribute for decorative images
	} else {
		if (oImage.getAlt()) {
			rm.writeAttributeEscaped("alt", oImage.getAlt() || tooltip); // accessibility requirement: use tooltip for alt if alt is not set
		} else if (tooltip) {
			rm.writeAttributeEscaped("alt", tooltip);
		}
	}
	rm.writeAttribute("tabIndex", myTabIndex);
	
	// Dimensions

	if (oImage.getWidth() && oImage.getWidth() != '') {
		rm.addStyle("width", oImage.getWidth());
	}
	if (oImage.getHeight() && oImage.getHeight() != '') {
		rm.addStyle("height", oImage.getHeight());
	}
	rm.writeStyles();
	
	var sTooltip = oImage.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	
	rm.write(" />"); // close the <img> element
};

}; // end of sap.m.ImageRenderer
if ( !jQuery.sap.isDeclared('sap.m.InputBaseRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.InputBaseRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class Input renderer.
 * @static
 */
sap.m.InputBaseRenderer = {};

sap.m.InputBaseRenderer.render = function(rm, oInput) {

	if(!oInput.getVisible()) {
		return;
	}

	rm.write("<div ");
	rm.writeControlData(oInput);
	oInput.getWidth() && rm.addStyle("width", oInput.getWidth()) && rm.writeStyles();
	!oInput.getEnabled() && rm.addClass("sapMInputBaseDisabled");
	!oInput.getEditable() && rm.addClass("sapMInputBaseReadonly");
	oInput.getValueState() != "None" && rm.addClass("sapMInputBase" + oInput.getValueState());
	rm.addClass("sapMInputBase");
	this.addClasses(rm, oInput);
	
	rm.writeClasses();
	var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oInput, oInput.getTooltip_AsString());
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	
	// enable self-made placeholder
	if (oInput._showLabelAsPlaceholder) {
		rm.write("<label ");
		rm.writeAttribute("id", oInput.getId() + "-placeholder");
		rm.writeAttribute("for", oInput.getId() + "-inner");
		
		rm.addClass("sapMInputBasePlaceholder");
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oInput.getPlaceholder());
		rm.write("</label>");
	}

	rm.write("<input id=" + oInput.getId() + "-inner");
	rm.writeStyles();

	if (!oInput.getEnabled()) {
		rm.writeAttribute ("disabled", "disabled");
		if (oInput.getType() == "Password") {
			// required for JAWS reader on password fields on desktop:
			rm.writeAttribute("readonly", "readonly");
		}
		rm.addClass("sapMInputBaseDisabled");
	}

	// let the browser handle placeholder
	if (!oInput._showLabelAsPlaceholder && oInput.getPlaceholder()) {
		rm.writeAttribute("placeholder", oInput.getPlaceholder());
	}
	
	this.writeAttributes(rm, oInput);
	
	oInput.getValue() && rm.writeAttributeEscaped("value", oInput.getValue());
	rm.addClass("sapMInputBaseInner");
	if (!oInput.getEditable()) {
		if(oInput.getEnabled()) {
			rm.addClass("sapMInputBaseReadonlyInner");
		}
		rm.writeAttribute("readonly","readonly");
	}
	oInput.getValueState() != "None" && rm.addClass("sapMInputBase" + oInput.getValueState() + "Inner");
	!oInput.getEnabled() && rm.addClass("sapMInputBaseDisabled");
	rm.writeClasses();
	rm.write("></div>");
};

/**
 * This function is reserved for derived class to add extra attributes to Input
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.writeAttributes = function(rm, oControl) {
};

/**
 * Adds extra CSS class
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputBaseRenderer.addClasses = function(rm, oControl) {
	if (oControl.getEnabled()) {
		rm.addClass("sapMInputBaseCursor");
	}
};
}; // end of sap.m.InputBaseRenderer
if ( !jQuery.sap.isDeclared('sap.m.InputRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


jQuery.sap.declare("sap.m.InputRenderer");

/**
 * @class Input renderer.
 * @static
 *
 * InputRenderer extends the InputBaseRenderer
 */
sap.m.InputRenderer = sap.ui.core.Renderer.extend(sap.m.InputBaseRenderer);

/**
 * Adds control specific class
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputRenderer.addClasses = function(rm, oControl) {
	sap.m.InputBaseRenderer.addClasses(rm, oControl);
	rm.addClass("sapMInput");
};

/**
 * add extra attributes to Input
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.InputRenderer.writeAttributes = function(rm, oControl) {
	rm.writeAttribute("type", oControl.getType().toLowerCase());
	if (oControl.getMaxLength() > 0) {
		rm.writeAttribute("maxlength", oControl.getMaxLength());
	}
};

}; // end of sap.m.InputRenderer
if ( !jQuery.sap.isDeclared('sap.m.InstanceManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

// Provides class sap.m.InstanceManager
jQuery.sap.declare("sap.m.InstanceManager");
/**
 * @class Provides methods to manage instances. This is specifically designed for managing the opened Popover, Dialog, ActionSheet,
 * and it's possible to close all of the opened Popover, Dialog, ActionSheet in history handling.
 *
 * As <code>InstanceManager</code> is a static class, a <code>jQuery.sap.require("sap.m.InstanceManager");</code> statement
 * must be explicitly executed before the class can be used. Example:
 * <pre>
 *   jQuery.sap.require("sap.m.InstanceManager");
 *   sap.m.InstanceManager.closeAllPopovers();
 * </pre>
 *
 * @static
 * @public
 * @since 1.9.2
 */
sap.m.InstanceManager = {};

(function() {
	var mRegistry = {},
		aEmptyArray = [];
	
	var sPopoverCategoryId = "_POPOVER_",
		sDialogCategoryId = "_DIALOG_";

	/**
	 * Adds an instance to the given category.
	 *
	 * @param {string} sCategoryId The category's id.
	 * @param {object} oInstance The instance that will be added to the given category.
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.addInstance = function(sCategoryId, oInstance) {
		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.addInstance method, the parameter sCategoryId can't be null or empty string");
		jQuery.sap.assert(oInstance instanceof Object, "In sap.m.InstanceManager.addInstance method, the parameter oInstance should be an object");

		if (!mRegistry[sCategoryId]) {
			mRegistry[sCategoryId] = [];
		}

		mRegistry[sCategoryId].push(oInstance);

		return this;
	};

	/**
	 * Removes a managed instance from the given category.
	 *
	 * @param {string} sCategoryId The category's id.
	 * @param {object} oInstance The instance that will be removed from the given category.
	 * @returns The removed instance or null. If the instance isn't managed, this method returns null instead of the instance object.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.removeInstance = function(sCategoryId, oInstance) {
		var aCategory = mRegistry[sCategoryId],
			i;

		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.removeInstance method, the parameter sCategoryId can't be null or empty string");
		jQuery.sap.assert(oInstance instanceof Object, "In sap.m.InstanceManager.removeInstance method, the parameter oInstance should be an object");

		if (!aCategory) {
			jQuery.sap.log.warning("Can't remove control from a non-managed category id: " + sCategoryId);
			return null;
		}

		i = aCategory.indexOf(oInstance);

		return (i === -1) ? null : aCategory.splice(i, 1);
	};

	/**
	 * Returns an array of managed instances in the given category.
	 *
	 * @param {string} sCategoryId The category's id.
	 * @returns {object} Managed instances in the given category.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.getInstancesByCategoryId = function(sCategoryId) {
		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.getInstancesByCategoryId method, the parameter sCategoryId can't be null or empty string");

		return mRegistry[sCategoryId] || aEmptyArray;
	};

	/**
	 * Checks if an instance is managed under the given category.
	 * 
	 * @param {string} sCategoryId The category that the instance is supposed to be in.
	 * @param {object} oInstance The instance that needs to be checked.
	 * @returns {boolean} Whether the instance is managed in the given category.
	 * @protected
	 * @function
	 */
	sap.m.InstanceManager.isInstanceManaged = function(sCategoryId, oInstance) {
		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.isInstanceManaged method, the parameter sCategoryId can't be null or empty string");
		jQuery.sap.assert(oInstance instanceof Object, "In sap.m.InstanceManager.isInstanceManaged method, the parameter oInstance should be an object");

		var aCategory = mRegistry[sCategoryId];

		if (!aCategory || !oInstance) {
			return false;
		}

		return aCategory.indexOf(oInstance) !== -1;
	};

	/**
	 * Returns if there's no managed instance in the given category.
	 *
	 * @param {string} sCategoryId The category's id.
	 * @returns {boolean} Whether the category is empty.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.isCategoryEmpty = function(sCategoryId) {
		jQuery.sap.assert(sCategoryId, "In sap.m.InstanceManager.isCategoryEmpty method, the parameter sCategoryId can't be null or empty string");

		var aCategory = mRegistry[sCategoryId];

		return !aCategory || aCategory.length === 0;
	};

	/**
	 * Adds a control to predefined popover category in instance manager.
	 *
	 * @param {sap.ui.core.Control} oPopover Popover to be added to instance manager. Custom popover which doesn't inherit from sap.m.Popover can also be added as long as it has a close method.
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.addPopoverInstance = function(oPopover){
		if (typeof oPopover.close === "function") {
			sap.m.InstanceManager.addInstance(sPopoverCategoryId, oPopover);
		}else{
			jQuery.sap.log.warning("In method addPopoverInstance: the parameter doesn't have a close method and can't be managed.");
		}
		return this;
	};
	
	/**
	 * Adds a control to predefined dialog category in instance manager.
	 *
	 * @param {sap.ui.core.Control} oDialog Dialog to be added to instance manager. Dialog which doesn't inherit from sap.m.Dialog can also be added as long as it has a close method.
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.addDialogInstance = function(oDialog){
		if (typeof oDialog.close === "function" ) {
			sap.m.InstanceManager.addInstance(sDialogCategoryId, oDialog);
		}else{
			jQuery.sap.log.warning("In method addDialogInstance: the parameter doesn't have a close method and can't be managed.");
		}
		return this;
	};
	
	/**
	 * Removes control from predefined popover category in instance manager.
	 *
	 * @param {sap.ui.core.Control} Popover to be removed from instance manager.
	 * @returns The removed popover or null. If the popover isn't managed, this method returns null instead of the removed popover.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.removePopoverInstance = function(oPopover){
		return sap.m.InstanceManager.removeInstance(sPopoverCategoryId, oPopover);
	};
	
	/**
	 * Removes control from predefined dialog category in instance manager.
	 *
	 * @param {sap.ui.core.Control} Dialog to be removed from instance manager.
	 * @returns The removed popover or null. If the popover isn't managed, this method returns null instead of the removed popover.
	 * @protected
	 * @function
	*/
	sap.m.InstanceManager.removeDialogInstance = function(oDialog){
		return sap.m.InstanceManager.removeInstance(sDialogCategoryId, oDialog);
	};
	
	/**
	 * Returns true if there's popover(s) managed in predefined popover category, otherwise it returns false.
	 *
	 * @returns {boolean} Whether there's popover(s) open.
	 * @public
	 * @function
	*/
	sap.m.InstanceManager.hasOpenPopover = function(){
		return !sap.m.InstanceManager.isCategoryEmpty(sPopoverCategoryId);
	};
	
	/**
	 * Returns true if there's dialog(s) managed in predefined dialog category, otherwise it returns false.
	 *
	 * @returns {boolean} Whether there's dialog(s) open.
	 * @public
	 * @function
	*/
	sap.m.InstanceManager.hasOpenDialog = function(){
		return !sap.m.InstanceManager.isCategoryEmpty(sDialogCategoryId);
	};
	
	/**
	 * Check if the given dialog instance is managed under the dialog category.
	 * For dialog instances, managed means the dialog is open.
	 * 
	 * This function is specially provided for customized controls which doesn't have the possibility to check whether it's open.
	 * If the given dialog is an instance of sap.m.Dialog, sap.m.ActionSheet, the isOpen() method on the instance is 
	 * preferred to be called than this function.
	 * 
	 * @param {sap.ui.core.Control} oDialog The dialog that is checked for the openness.
	 * @returns Whether the given dialog is open.
	 * @public
	 * @function
	 */
	sap.m.InstanceManager.isDialogOpen = function(oDialog){
		return sap.m.InstanceManager.isInstanceManaged(sDialogCategoryId, oDialog);
	};
	
	/**
	 * Check if the given popover instance is managed under the popover category.
	 * For popover instances, managed means the popover is open.
	 * 
	 * This function is specially provided for customized controls which doesn't have the possibility to check whether it's open. 
	 * If the given popover is an instance of sap.m.Popover, sap.m.ActionSheet, the isOpen() method on the instance is 
	 * preferred to be called than this function.
	 * 
	 * @param {sap.ui.core.Control} oPopover The popover that is checked for the openness.
	 * @returns Whether the given popover is open.
	 * @public
	 * @function
	 */
	sap.m.InstanceManager.isPopoverOpen= function(oPopover){
		return sap.m.InstanceManager.isInstanceManaged(sPopoverCategoryId, oPopover);
	};
	
	/**
	 * Gets all of the open popovers. If there's no popover open, it returns an empty array.
	 *
	 * @return {sap.ui.core.Control[]} The open popovers.
	 * @public
	 * @function
	*/
	sap.m.InstanceManager.getOpenPopovers = function(){
		return sap.m.InstanceManager.getInstancesByCategoryId(sPopoverCategoryId);
	};
	
	/**
	 * Gets all of the open dialogs. If there's no dialog open, it returns an empty array.
	 *
	 * @return {sap.ui.core.Control[]} The open dialogs.
	 * @public
	 * @function
	*/
	sap.m.InstanceManager.getOpenDialogs = function(){
		return sap.m.InstanceManager.getInstancesByCategoryId(sDialogCategoryId);
	};
	
	/**
	 * Closes all open popovers.
	 *
	 * @public
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @function
	*/
	sap.m.InstanceManager.closeAllPopovers = function(){
		var aIntances = sap.m.InstanceManager.getOpenPopovers(), i;
		for(i = 0 ; i < aIntances.length ; i++){
			aIntances[i].close();
		}
		return this;
	};
	
	/**
	 * Closes all of the open dialogs.
	 *
	 * @public
	 * @returns {sap.m.InstanceManager} Enable method chaining.
	 * @function
	*/
	sap.m.InstanceManager.closeAllDialogs = function(){
		var aIntances = sap.m.InstanceManager.getOpenDialogs(), i;
		for(i = 0 ; i < aIntances.length ; i++){
			aIntances[i].close();
		}
		return this;
	};
}());
}; // end of sap.m.InstanceManager
if ( !jQuery.sap.isDeclared('sap.m.LabelRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

 
jQuery.sap.declare("sap.m.LabelRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Label renderer. 
 * @static
 */
sap.m.LabelRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oLabel an object representation of the control that should be rendered
 */
sap.m.LabelRenderer.render = function(rm, oLabel){
	// return immediately if control is invisible
	if (!oLabel.getVisible()) {
		return;
	}

	// convenience variable
	var r = sap.m.LabelRenderer;
	var myStyles = "";
	
	// write the HTML into the render manager  
	rm.write("<label");
	rm.writeControlData(oLabel);
	
	// Styles
	rm.addClass("sapMLabel");    
	//set design to bold
	if (oLabel.getDesign() == sap.m.LabelDesign.Bold) {
		rm.addClass("sapMLabelBold");
	}

	if (oLabel.getRequired()){
		rm.addClass("sapMLabelRequired");
	}

	
	if (oLabel.getLabelForRendering()) {
		var oFor = sap.ui.getCore().byId(oLabel.getLabelForRendering());
		rm.write(" for=\"");
		// for some controls the label must point to a special HTML element, not the outer one.
		if ( oFor && oFor.getIdForLabel) {
			rm.write(oFor.getIdForLabel());
		} else{
			rm.write(oLabel.getLabelForRendering());
		}
		rm.write("\"");
	}
	
	// Text direction
	var oTextDir = oLabel.getTextDirection();
	if (oTextDir) {
		rm.writeAttribute("dir", oTextDir);
	}
	
	// Style for width
	var sWidth = oLabel.getWidth();
	if(sWidth) {
		myStyles += "width:" + sWidth + ";";
	}
	
	// Style for text alignment
	var oTextAlign = oLabel.getTextAlign();
	if(oTextAlign) {
		myStyles += "text-align:" + r.getTextAlign(oTextAlign, oTextDir) + ";";
	}
	
	rm.writeAttribute("style", myStyles);
	rm.writeClasses();
	
	var sTooltip = oLabel.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	
	rm.write(">"); 

	// Write the label text
	if (oLabel.getText()) {
		rm.writeEscaped(oLabel.getText());
	}
	rm.write("</label>");
};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.m.LabelRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;

}; // end of sap.m.LabelRenderer
if ( !jQuery.sap.isDeclared('sap.m.LinkRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
 
 jQuery.sap.declare("sap.m.LinkRenderer");

/**
 * @class Link renderer
 * @static
 */
sap.m.LinkRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.LinkRenderer.render = function(rm, oControl) { 
	// Return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	// Link is rendered as a "<a>" element
	rm.write("<a");
	rm.writeControlData(oControl);

	rm.addClass("sapMLnk");
	if (!oControl.getEnabled()) {
		rm.addClass("sapMLnkDsbl");
		rm.writeAttribute("disabled", "true");
		rm.writeAttribute("tabIndex", "-1");
	} else {
		rm.writeAttribute("tabIndex", "0");
	}
	rm.writeClasses();

	if (oControl.getTooltip_AsString()) {
		rm.writeAttributeEscaped("title", oControl.getTooltip_AsString());
	}

	if (oControl.getHref()) {
		rm.writeAttributeEscaped("href", oControl.getHref());
	}	else {
		rm.writeAttribute("href", "javascript:void(0);");
	}

	if (oControl.getTarget()) {
		rm.writeAttributeEscaped("target", oControl.getTarget());
	}

	if (oControl.getWidth()) {
		rm.addStyle("width", oControl.getWidth());
	}
	rm.writeStyles();
	rm.write(">"); // opening <a> tag

	if (oControl.getText()) {
		rm.writeEscaped(oControl.getText());
	}

	rm.write("</a>");
};

}; // end of sap.m.LinkRenderer
if ( !jQuery.sap.isDeclared('sap.m.ListItemBaseRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ListItemBaseRenderer");
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * @class ListitemBase renderer.
 * @static
 */
sap.m.ListItemBaseRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ListItemBaseRenderer.render = function(rm, oLI) {
	// return immediately if control is invisible
	if (!oLI.getVisible()) {
		return;
	}

	var _bShowUnreadBubble = (sap.ui.core.theming.Parameters.get("sapUiLIUnreadAsBubble") == "true");

	// define behavior: list or table
	var sId = oLI.getId(),
		oParent = oLI.getParent(),
		oListTypes = sap.m.ListType,	// cache globals
		oListModes = sap.m.ListMode,
		isTable = !oLI.hasOwnProperty("_renderInList") && oParent && oParent.getColumns && oParent.getColumns().length,
		rowEndTag, rowStartTag, openCellTag, closeCellTag, isColumnLI, hasPopin,
		sTooltip = oLI.getTooltip_AsString();

	if (!isTable) {
		rowEndTag = "</li>";
		rowStartTag = "<li";
		openCellTag = function() {
			rm.write("<div");
		};
		closeCellTag = function() {
			rm.write("</div>");
		};
	} else {
		rowEndTag = "</tr>";
		rowStartTag = "<tr";
		isColumnLI = sap.m.ColumnListItem && oLI instanceof sap.m.ColumnListItem;
		hasPopin = oParent._hasPopin && isColumnLI;
		openCellTag = function(cls) {
			rm.write("<td");
			if (cls) {
				rm.addClass(cls);
				rm.writeClasses();
			}
			rm.write("><div");
		};
		closeCellTag = function() {
			rm.write("</div></td>");
		};
	}

	rm.write(rowStartTag);
	sTooltip && rm.writeAttributeEscaped("title", sTooltip);
	rm.writeControlData(oLI);
	rm.addClass("sapMLIB");
	rm.addClass("sapMLIB-CTX");
	if(oLI._showSeparators  == sap.m.ListSeparators.None){
		rm.addClass("sapMLIBShowSeparatorNone");
	}
	if (oLI._includeItemInSelection || (oLI.getType() != oListTypes.Inactive && oLI.getType() != oListTypes.Detail)) {
		rm.addClass("sapMLIBCursor");
	}

	//unread is shown as bold text
	if (oLI._showUnread && oLI.getUnread() && !_bShowUnreadBubble) {
		rm.addClass("sapMLIBUnread");
	}
	if (hasPopin) {
		rm.addClass("sapMListTblSupRow");
	}

	// TODO: Remove this unnecessary class name sapMLIBUnread is enough
	if (oLI._showUnread && oLI.getUnread()) {
		rm.addClass("sapMLIBUnreadRow");
	}

	// LI attributes hook
	if (this.renderLIAttributes) {
		this.renderLIAttributes(rm, oLI);
	}

	// LI content hook
	if (this.renderLIContent) {

		// depending on the mode of the list a checkbox or radiobutton will be
		// rendered. If a switch between list modes happens, an animation will be
		// added for the selection area
		var oSelectControl = null;

		switch (oLI._mode) {
		case oListModes.SingleSelectLeft:
			oSelectControl = oLI._getRadioButton((sId + "-selectSingle"), oLI._listId + "_selectGroup");
			if (oSelectControl.getSelected()) {
				rm.addClass("sapMLIBSelected");
			}
			rm.writeClasses();
			rm.write(">");

			openCellTag("sapMListTblSelCol");
			rm.addClass("sapMLIBSelectSL");
			if (oLI._oldMode === oListModes.None && oLI._modeAnimationOn) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", sId + "-mode");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oSelectControl);
			closeCellTag();
			oLI._oldMode = oLI._mode;
			break;
		case oListModes.SingleSelect:
			oSelectControl = oLI._getRadioButton((sId + "-selectSingle"), oLI._listId + "_selectGroup");
			if (oSelectControl.getSelected()) {
				rm.addClass("sapMLIBSelected");
			}
			rm.writeClasses();
			rm.write(">");
			break;
		case oListModes.SingleSelectMaster:
			oSelectControl = oLI._getRadioButton((sId + "-selectSingleMaster"), oLI._listId + "_selectMasterGroup");
			rm.writeClasses();
			rm.write(">");
			openCellTag("sapMListTblNone");
			rm.addClass("sapMLIBSelectSM");
			rm.writeAttribute("id", sId + "-mode");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oSelectControl);
			closeCellTag();
			oLI._oldMode = oLI._mode;
			break;
		case oListModes.MultiSelect:
			oSelectControl = oLI._getCheckBox((sId + "-selectMulti"));
			if (oSelectControl.getSelected()) {
				rm.addClass("sapMLIBSelected");
			}
			rm.writeClasses();
			rm.write(">");
			openCellTag("sapMListTblSelCol");
			rm.addClass("sapMLIBSelectM");
			if (oLI._oldMode === oListModes.None && oLI._modeAnimationOn) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", sId + "-mode");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oSelectControl);
			closeCellTag();
			oLI._oldMode = oLI._mode;
			break;
		case oListModes.Delete:
			rm.writeClasses();
			rm.write(">");
			openCellTag("sapMListTblSelCol");
			rm.addClass("sapMLIBSelectD");
			if (oLI._oldMode === oListModes.None && oLI._modeAnimationOn) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", sId + "-mode");
			rm.writeClasses();
			rm.write(">");
			var delIcon = null;
			if (sap.ui.core.theming.Parameters.get("sapUiLIDelIcon") == "false"){
				delIcon = oLI._getDelImage((sId + "-imgDel"), "sapMLIBImgDel", "delete_icon.png");
			}
			else{
				var sURI = sap.ui.core.IconPool.getIconURI("delete");
				delIcon = oLI._delIcon || new sap.ui.core.Icon(sId + "-imgDel",{src:sURI}).setParent(oLI, null, true).addStyleClass("sapMLIBIconDel").attachPress(oLI._delete);;
			}
			if (delIcon) {
				oLI._delIcon = delIcon;
				rm.renderControl(delIcon);
			}
			closeCellTag();
			oLI._oldMode = oLI._mode;
			break;
		case oListModes.None:
			rm.writeClasses();
			rm.write(">");
			if (!isTable && oLI._oldMode && oLI._oldMode !== oListModes.None && oLI._oldMode !== oListModes.SingleSelect && oLI._modeAnimationOn) {
				openCellTag();
				rm.addClass("sapMLIBUnselectAnimation");
				rm.writeAttribute("id", sId + "-mode");
				rm.writeClasses();
				rm.write(">");
				closeCellTag();
			}
			break;
		}

		if (oLI._showUnread && _bShowUnreadBubble) {
			openCellTag("sapMListTblUnreadCol");
			rm.writeAttribute("id", sId + "-unread");
			rm.addClass("sapMLIBUnread");
			if (oLI.getUnread()) {
				rm.addClass("sapMLIBUnreadBG");
			}
			rm.writeClasses();
			rm.write(">");
			closeCellTag();
		}

		var type = oLI.getType(), navIcon;
		switch (type) {
			case oListTypes.Navigation:
				navIcon = "NAV";
				break;
			case oListTypes.Detail:
			case oListTypes.DetailAndActive:
				navIcon = "DET";
				break;
		}

		if (isTable) {
			if (isColumnLI) {
				this.renderLIContent(rm, oLI, oParent);
			} else {
				// this is for spanning all rows except navigation
				// we need colspan calculation if we want to show selection or unread indicator
				this.renderLIContent(rm, oLI, oParent._colCount - 1);
			}
		} else {
			openCellTag();
			rm.addClass("sapMLIBContent");

			// there will be a margin on the right, if no navigation icon or counter is shown
			if ((type == oListTypes.Active || type == oListTypes.Inactive)  && !oLI.getCounter()) {
				rm.addClass("sapMLIBContentMargin");
			}

			rm.writeClasses();
			rm.write(">");
			this.renderLIContent(rm, oLI);
			closeCellTag();
		}

		// if we are not in table mode than counter different than 0 bubble will be shown
		if (!isTable && oLI.getCounter()) {
			rm.write("<div");
			rm.writeAttribute("id", sId + "-counter");
			rm.addClass("sapMLIBCounter");
			if (!navIcon) {
				rm.addClass("sapMLIBContentMargin");
			}
			rm.writeClasses();
			rm.write(">");
			rm.write(oLI.getCounter());
			rm.write("</div>");
		}

		if (navIcon == "NAV" && jQuery.os.ios && oLI.getType() == oListTypes.Navigation) {
			openCellTag("sapMListTblNavCol");
			rm.addClass("sapMLIBImgNav");
			rm.writeAttribute("id", sId + "-imgNav");
			rm.writeClasses();
			rm.write(">");
			closeCellTag();
			oParent._navRenderedBy = sId + "-imgNav";
		} else if (navIcon == "DET") {
			openCellTag("sapMListTblNavCol");
			rm.addClass("sapMLIBCursor");
			rm.writeClasses();
			rm.write(">");
			var detailIcon = null;
			if (sap.ui.core.theming.Parameters.get("sapUiLIDetailIcon") == "false"){
				detailIcon = oLI._getNavImage((sId + "-imgDet"), "sapMLIBImgDet", "detail_disclosure.png", "detail_disclosure_pressed.png");
			}
			else{
				var sURI = sap.ui.core.IconPool.getIconURI("edit");
				detailIcon = oLI._detailIcon || new sap.ui.core.Icon(sId + "-imgDet",{src:sURI}).setParent(oLI, null, true).addStyleClass("sapMLIBIconDet");
			}
			if (detailIcon) {
				oLI._detailIcon = detailIcon;
				rm.renderControl(detailIcon);
			}
			
			closeCellTag();
			oParent._navRenderedBy = sId + "-imgDet";
		} else if (isTable) {
			// create empty cells for table
			rm.write("<td></td>");
		}

		switch (oLI._mode) {
		case oListModes.SingleSelect:
			openCellTag("sapMListTblSelCol");
			rm.addClass("sapMLIBSelectS");
			if (oLI._oldMode === oListModes.None && oLI._modeAnimationOn) {
				rm.addClass("sapMLIBSelectAnimation");
			}
			rm.writeAttribute("id", sId + "-mode");
			rm.writeClasses();
			rm.write(">");
			rm.renderControl(oSelectControl);
			closeCellTag();
			oLI._oldMode = oLI._mode;
			break;
		case oListModes.None:
			if (!isTable && oLI._oldMode && oLI._oldMode !== oListModes.None && oLI._oldMode === oListModes.SingleSelect && oLI._modeAnimationOn) {
				openCellTag();
				rm.addClass("sapMLIBUnselectAnimation");
				rm.writeAttribute("id", sId + "-mode");
				rm.writeClasses();
				rm.write(">");
				closeCellTag();
			}
			oLI._oldMode = oLI._mode;
			break;
		}
	} else {
		rm.writeClasses();
		rm.write(">");
	}
	rm.write(rowEndTag);
	
	if (hasPopin) {
		this.renderPopin(rm, oLI, oParent);
	}
};
}; // end of sap.m.ListItemBaseRenderer
if ( !jQuery.sap.isDeclared('sap.m.ListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ListRenderer");
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained



/**
 * @class List renderer.
 * @static
 */
sap.m.ListRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ListRenderer.render = function(rm, oControl) {

    // return immediately if control is invisible
    if (!oControl.getVisible()) {
        return;
    }
    
    var bInset = oControl.getInset(),
        isTable = !!oControl.getColumns().length;

    rm.write("<div");
    rm.addClass("sapMList");
    if (bInset) {
        rm.addClass("sapMListInsetBG");
    }
    if (isTable) {
    	oControl._bRendering = true;
    	rm.addClass("sapMListTblCnt");
    }

    rm.writeClasses();
    rm.writeControlData(oControl);
    if (oControl.getWidth()) {
        rm.addStyle("width", oControl.getWidth());
        rm.writeStyles();
    }
    rm.write(">");

    // header
    if (oControl.getHeaderText()) {
        rm.write("<header");
        rm.writeAttribute("id", oControl.getId() + "-listHeader");
        if(oControl.getHeaderDesign() == sap.m.ListHeaderDesign.Plain)
        	rm.addClass((bInset ? "sapMListHdrPlainInset" : "sapMListHdrPlain"));
        else{
        	rm.addClass((bInset ? "sapMListHdrInset" : "sapMListHdr"));
        }
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oControl.getHeaderText());
        rm.write("</header>");
    }

    // start building list/table
    if (isTable) {
        rm.write("<table");
        rm.addClass("sapMListTbl");
    } else {
        rm.write("<ul");
    }
    rm.writeAttribute("id", oControl.getId() + "-listUl");
    rm.addClass("sapMListUl");

    //separators
    switch(oControl.getShowSeparators()){
    case sap.m.ListSeparators.All:
    	rm.addClass("sapMListShowSeparatorsAll");
    	break;
    case sap.m.ListSeparators.Inner:
    	rm.addClass("sapMListShowSeparatorsInner");
    	break;
    case sap.m.ListSeparators.None:
    	rm.addClass("sapMListShowSeparatorsNone");
    	break;
    
    }
    
    // for theming add selection name as class
    if (isTable && oControl.getMode() != "None") {
        rm.addClass("sapMListTbl" + oControl.getMode());
    }

    if (bInset) {
        rm.addClass("sapMListInset");
        if (oControl.getHeaderText()) {
            rm.addClass("sapMListInsetHdr");
        }
        if (oControl.getFooterText()) {
            rm.addClass("sapMListInsetFtr");
        }
    }

    rm.writeClasses();
    rm.write(">");

    if (isTable) {
        this._renderColumns(rm, oControl, "Head");
    }

    // check if selection mode has changed - remove current selection
    if (oControl._mode != sap.m.ListMode.None && oControl._mode != oControl.getMode()) {
        oControl._removeCurrentSelection();
    }

    // set new current selection mode
    oControl._mode = oControl.getMode();
    if (oControl._mode == sap.m.ListMode.SingleSelectMaster) {
        oControl.setIncludeItemInSelection(true);
    }

    // render child controls
    var aItems = oControl.getItems();
    for (var i = 0; i < aItems.length; i++) {
        aItems[i]._mode = oControl.getMode();
        aItems[i]._includeItemInSelection = oControl.getIncludeItemInSelection();
        aItems[i]._select = oControl._select;
        aItems[i]._delete = oControl._delete;
        aItems[i]._listId = oControl.getId();
        aItems[i]._showUnread = oControl.getShowUnread();
        aItems[i]._modeAnimationOn = oControl.getModeAnimationOn();
        aItems[i]._showSeparators = oControl.getShowSeparators();
        rm.renderControl(aItems[i]);
    }

    // render no-data if needed
    if (aItems.length <= 0 && oControl.getShowNoData()) {
        var oRB = sap.ui.getCore().getLibraryResourceBundle("sap.m");
        if (!oControl.getNoDataText()) {
            oControl.setNoDataText(oRB.getText("LIST_NO_DATA"));
        }

        if (isTable) {
            rm.write("<tr class='sapMLIB sapMListTblRow'>");
            rm.write("<td id='" + oControl.getId() + "-listNoData' colspan='" + oControl._colCount + "' class='sapMListTblCell sapMListTblCellNoData'>");
            rm.writeEscaped(oControl.getNoDataText());
            rm.write("</td></tr>");
        } else {
            rm.write("<li id="+ oControl.getId() + "-listNoData" +" class='sapMListNoData'>");
            rm.writeEscaped(oControl.getNoDataText());
            rm.write("</li>");
        }
    }

    if (isTable) {
    	oControl._bRendering = false;
    	rm.write("</table>");
    } else {
    	rm.write("</ul>");
    }

    // growing list render hook
    if (this.renderGrowingListContent) {
        this.renderGrowingListContent(rm, oControl);
    }

    // footer
    if (oControl.getFooterText()) {
        rm.write("<footer");
        rm.writeAttribute("id", oControl.getId() + "-listFooter");
        rm.addClass((bInset ? "sapMListFtrInset" : "sapMListFtr"));
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oControl.getFooterText());
        rm.write("</footer>");
    }

    rm.write("</div>");
};


/**
 * Renders the Header and/or Footer of the Table like List Control
 *
 * @private
 *
 * @param {sap.ui.core.RenderManager} rm RenderManager
 * @param {sap.m.List} oList List control
 * @param {String|undefined} type Whether "Head" or "Foot"
 */
sap.m.ListRenderer._renderColumns = function(rm, oList, type) {
    var index = 0,
        hiddens = 0,
        hasPopin = false,
        hasFooter = false,
        mode = oList.getMode(),
        clsPrefix = "sapMListTbl",
        idPrefix = oList.getId() + "-tbl",
        cellTag = (type == "Head") ? "th" : "td",
        groupTag = "t" + type.toLowerCase(),
        aColumns = oList.getColumns(),
        isHeaderHidden = (type == "Head") && aColumns.every(function(oColumn) {
            return	!oColumn.getHeader() ||
                    !oColumn.getVisible() ||
                    oColumn.isPopin() ||
                    oColumn.isNeverVisible() ||
                    oColumn.isHidden();
        }),
        hasOneHeader = (type == "Head") && aColumns.filter(function(oColumn) {
            return	oColumn.getVisible() &&
                    !oColumn.isPopin() &&
                    !oColumn.isNeverVisible() &&
                    !oColumn.isHidden();
        }).length == 1,
        createBlankCell = function(cls, id, noWidth) {
            rm.write("<");
            rm.write(cellTag);
            id && rm.writeAttribute("id", idPrefix + id);
            if (noWidth) {
                rm.addStyle("width", "0");
                rm.writeStyles();
            }
            rm.addClass(clsPrefix + cls);
            rm.writeClasses();
            rm.write("></");
            rm.write(cellTag);
            rm.write(">");
            index++;
        };

    rm.write("<" + groupTag + ">");
    rm.write("<tr");

    if (isHeaderHidden) {
        rm.addClass("sapMListTblHeaderNone");
    } else {
        rm.addClass("sapMListTblRow sapMListTbl" + type + "er");
    }

    rm.writeClasses();
    rm.write(">");

    if (mode != "None" && mode != "SingleSelect") {
        if (mode == "SingleSelectMaster") {
            createBlankCell("None");
            hiddens++;
        } else {
            createBlankCell("SelCol");
        }
    }

    if (sap.ui.core.theming.Parameters.get("sapUiLIUnreadAsBubble") == "true" && oList.getShowUnread()) {
        createBlankCell("UnreadCol");
    }

    aColumns.forEach(function(oColumn) {
        if (!oColumn.getVisible()) {
            return;
        }
        if (oColumn.isPopin()) {
            hasPopin = true;
            return;
        }
        if (oColumn.isNeverVisible()) {
            return;
        }
        if (oColumn.isHidden()) {
            hiddens++;
        }

        var control = oColumn["get" + type + "er"](),
            width = hasOneHeader ? "" : oColumn.getWidth(),
            cls = oColumn.getStyleClass(true);

        rm.write("<" + cellTag);
        cls && rm.addClass(cls);
        rm.addClass(clsPrefix + "Cell");
        rm.writeAttribute("id", idPrefix + type + index);
        rm.writeAttribute("data-sap-orig-width", oColumn.getWidth());
        width && rm.addStyle("width", width);
        rm.addStyle("text-align", oColumn.getCssAlign());
        rm.writeClasses();
        rm.writeStyles();
        rm.write(">");
        if (control) {
            oColumn.applyAlignTo(control);
            rm.renderControl(control);
            if (type == "Head" && !hasFooter) {
                hasFooter = !!oColumn.getFooter();
            }
        }
        rm.write("</" + cellTag + ">");
        oColumn.setIndex(index++);
    });

    createBlankCell("NavCol", type + "Nav", true);

    if (mode == "SingleSelect") {
        createBlankCell("SelCol");
    }

    rm.write("</tr></" + groupTag + ">");

    if (type == "Head") {
        oList._hasPopin = hasPopin;
        oList._colCount = index - hiddens;
        hasFooter && this._renderColumns(rm, oList, "Foot");
    }
};


}; // end of sap.m.ListRenderer
if ( !jQuery.sap.isDeclared('sap.m.MessageToast') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.MessageToast");
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained



/**
 * @class
 * A message toast notification offers simple feedback about an operation in a Pop-up.
 * Toasts automatically disappear after a timeout and will never receive focus in order to be
 * unobtrusive as possible.
 * Toasts appears close the bottom of the screen, centered horizontally, but you can change
 * this position which is not dependent on the default values of the position settings.
 * The default position applies as long as the application does not do any position setting.
 * Position settings are "my, at, of and offset".
 *
 * Beware that only one message toast can be shown at a time in the same place.
 * If you want to have multiple message toasts visible at the same time, you need to position
 * the message toasts in different places.
 * This positioning needs to be handled in the application logic.
 *
 * As <code>MessageToast</code> is a static class, a <code>jQuery.sap.require("sap.m.MessageToast");</code>
 * statement must be explicitly executed before the class can be used.
 *
 * Basic example:
 *
 * <pre>
 * jQuery.sap.require("sap.m.MessageToast");
 *
 * sap.m.MessageToast.show("This message should appear in the message toast");
 * </pre>
 *
 * Other example:
 * <pre>
 * jQuery.sap.require("sap.m.MessageToast");
 *
 * sap.m.MessageToast.show("This message should appear in the message toast", {
 *     duration: 3000,                  // default
 *     width: "15em",                   // default
 *     my: "center bottom",             // default
 *     at: "center bottom",             // default
 *     of: document,                    // default
 *     offset: "0 0",                   // default
 *     collision: "fit fit"             // default
 *     onClose: null,                   // default
 *     autoClose: true,                 // default
 *     animationTimingFunction: "ease", // default
 *     animationDuration: 1000          // default
 * });
 * </pre>
 *
 * @author SAP AG
 * @since 1.9.2
 *
 * @static
 * @public
 * @name sap.m.MessageToast
 */
sap.m.MessageToast = {};

/* =========================================================== */
/*        begin: internal methods and properties               */
/* =========================================================== */

sap.m.MessageToast._aPopups = [];

sap.m.MessageToast._iOpenedPopups = 0;

sap.m.MessageToast._bNotBoundToOrientationChange = true;

sap.m.MessageToast._validateSettings = function(mSettings) {
	var aMy = mSettings.my.split(" "),
		aAt = mSettings.at.split(" "),
		core = sap.ui.core,
		Dock = core.Popup.Dock,
		sMy = this._getDockFormat(aMy),
		sAt = this._getDockFormat(aAt),
		rValidTimingFn = /^(ease|linear|ease-in|ease-out|ease-in-out)$/i,
		rValidCollisions = /^(fit|flip|none)$/i,
		sCollitionErrorMessage = '"collision" needs to be a single value “fit”, “flip” or “none”, or a pair for horizontal and vertical e.g. "fit flip”, "fit none"';

	// duration
	if (typeof mSettings.duration !== "number" || !isFinite(mSettings.duration) || !(Math.floor(mSettings.duration) === mSettings.duration) || mSettings.duration <= 0) {
		throw new Error('"duration" needs to be a finite positive nonzero integer');
	}

	// width
	if (!core.CSSSize.isValid(mSettings.width)) {
		throw new Error(mSettings.width + ' is not of type ' + '"sap.ui.core.CSSSize" for property "width"');
	}

	// my
	if (typeof sMy !== "string" || !(sMy in Dock)) {
		throw new Error(mSettings.my + ' is not of type ' + '"sap.ui.core.Popup.Dock" for property "my"');
	}

	// at
	if (typeof sAt !== "string" || !(sAt in Dock)) {
		throw new Error(mSettings.at + ' is not of type ' + '"sap.ui.core.Popup.Dock" for property "at"');
	}

	// offset
	if (typeof mSettings.offset !== "string") {
		throw new Error(mSettings.offset + ' is of type ' + typeof mSettings.offset + ', expected "string" for property "offset"');
	}

	// collision
	if (mSettings.collision.split(" ").length === 1) {
		if (!rValidCollisions.test(mSettings.collision)) {
			throw new Error(sCollitionErrorMessage);
		}
	} else if (mSettings.collision.split(" ").length === 2) {
		if (!rValidCollisions.test(mSettings.collision.split(" ")[0]) || !rValidCollisions.test(mSettings.collision.split(" ")[1])) {
			throw new Error(sCollitionErrorMessage);
		}
	} else {
		throw new Error(sCollitionErrorMessage);
	}

	// onClose
	if (typeof mSettings.onClose !== "function" && mSettings.onClose !== null) {
		throw new Error('"onClose" should be a function or null');
	}

	// autoClose
	if (typeof mSettings.autoClose !== "boolean") {
		throw new Error('"autoClose" should be a boolean');
	}

	// animationTimingFunction
	if (!rValidTimingFn.test(mSettings.animationTimingFunction)) {
		throw new Error('"animationTimingFunction" should be a string, expected values: ' + "ease, linear, ease-in, ease-out, ease-in-out");
	}

	// animationDuration
	if (typeof mSettings.animationDuration !== "number" || !isFinite(mSettings.animationDuration) || !(Math.floor(mSettings.animationDuration) === mSettings.animationDuration) || mSettings.animationDuration < 0) {
		throw new Error('"animationDuration" needs to be a finite positive integer'); // TODO
	}
};

sap.m.MessageToast._getDockFormat = function(aMy) {
	return aMy.map(function(sMy) {
		return sMy.charAt(0).toUpperCase() + sMy.slice(1);
	}).join("");
};

sap.m.MessageToast._handleOrientationChange = function() {
	var i = 0,
		oPopup,
		mPos;

	for (; i < this._aPopups.length; i++) {
		oPopup = this._aPopups[i];
		if (oPopup instanceof sap.ui.core.Popup) {
			mPos = oPopup._oPosition;	// TODO _oPosition is a private property, use a public method when available because Popup.js does not have a getPosition() method.
			oPopup.setPosition(mPos.my, mPos.at, mPos.of, mPos.offset);
		}
	}
};

sap.m.MessageToast._isDefaulPosition = function(mOptions) {
	var mProp = ["my", "at", "of", "offset"],
		i = 0;

	for (; i < mProp.length; i++) {
		if (mOptions[mProp[i]] !== undefined) {
			return false;
		}
	}

	return true;
};

/* =========================================================== */
/*       end: internal methods and properties                  */
/* =========================================================== */


/* =========================================================== */
/*                   begin: API method and properties          */
/* =========================================================== */

/**
 * Creates and displays a simple message toast notification message with the given text, and optionally other options.
 *
 * The only mandatory parameter is <code>sMessage</code>.
 *
 * @param {string} sMessage The message to be displayed.
 * @param {object} [mOptions] Optionally other options.
 * @param {int} [mOptions.duration=3000] Time in milliseconds before the close animation starts. Needs to be a finite positive nonzero integer.
 * @param {sap.ui.core/CSSSize} [mOptions.width="15em"] The width of the message toast, this value can be provided in %, em, px and all possible CSS measures.
 * @param {sap.ui.core.Popup.Dock} [mOptions.my="center bottom"] Specifies which point of the message toast should be aligned.
 * @param {sap.ui.core.Popup.Dock} [mOptions.at="center bottom"] Specifies the point of the reference element to which the message toast should be aligned.
 * @param {string|sap.ui.core.Control|Element|jQuery} [mOptions.of=document] Specifies the reference element to which the message toast should be aligned.
 * @param {string} [mOptions.offset="0 0"] The offset relative to the docking point, specified as a string with space-separated pixel values (e.g. "0 10" to move the message toast 10 pixels to the right).
 * @param {string} [mOptions.collision="fit fit"] Specifies how the position of the message toast should be adjusted in case it overflows the screen in some direction. Possible values “fit”, “flip”, “none”, or a pair for horizontal and vertical e.g. "fit flip”, "fit none".
 * @param {function} [mOptions.onClose=null] Function to be called when the message toast closes.
 * @param {boolean} [mOptions.autoClose=true] Specify whether the message toast should close as soon as the end user touches the screen.
 * @param {string} [mOptions.animationTimingFunction="ease"] Describes how the close animation will progress. Possible values "ease", "linear", "ease-in", "ease-out", "ease-in-out".
 * @param {int} [mOptions.animationDuration=1000] Time in milliseconds that the close animation takes to complete. Needs to be a finite positive integer. For not animation set to 0.
 *
 * @type void
 * @public
 * @name sap.m.MessageToast.show
 * @function
 */
sap.m.MessageToast.show = function(sMessage, mOptions) {
	var self = this,
		$ = jQuery,
		mSettings = jQuery.extend({
			duration: 3000,
			width: "15em",
			my: "center bottom",
			at: "center bottom",
			of: document,
			offset: "0 0",
			collision: "fit fit",
			onClose: null,
			animationTimingFunction: "ease",
			animationDuration: 1000,
			autoClose: true
		}, {message: sMessage}),
		oPopup = new sap.ui.core.Popup(),
		handleMTClosed,
		iPos,
		$MTRef;

	if (mOptions) {

		// if no additional position options are provided, change the default offset
		if (this._isDefaulPosition(mOptions)) {
			mOptions.offset = "0 -64";
		}

		// merge mOptions into mSettings
		$.extend(mSettings, mOptions);
	} else {
		mSettings.offset = "0 -64";
	}

	// validate all settings
	this._validateSettings.call(this, mSettings);

	// create the markup
	$MTRef = $('<div class="sapMMT" style="width:' + mSettings.width + '">' + $.sap.escapeHTML(mSettings.message) + '</div>');

	// save this Popup instance and the position,
	// to be used inside fnMTAttachClosed closure
	iPos = this._aPopups.push(oPopup) - 1;

	// sets the content of the Popup
	oPopup.setContent($MTRef[0]);

	// sets the position of the Popup
	oPopup.setPosition(mSettings.my, mSettings.at, mSettings.of, mSettings.offset, mSettings.collision);

	if (jQuery.support.cssTransitions) {

		// sets the animation functions to use for opening and closing the Popup
		// note: this custom animations are using css3 transitions
		oPopup.setAnimations(function fnMTOpen($MTRef, iDuration, fnOpened) {
			fnOpened();
		}, function fnMTClose($MTRef, iDuration, fnClose) {
			var sCssTransition = "opacity " + mSettings.animationTimingFunction + " " + mSettings.animationDuration + "ms";
	
			if (mSettings.animationDuration > 0) {
				$MTRef.css({
					"-webkit-transition": sCssTransition,
					"transition": sCssTransition,
					opacity: 0
				}).bind("webkitTransitionEnd transitionend", function handleMTTransitionEnd() {	// one() method unbound the event handler after its first invocation
					jQuery(this).unbind("webkitTransitionEnd transitionend");
					fnClose();	// handleMTClosed() function is called
				});
			} else {
				fnClose();
			}
		});
	}

	// no default shadow
	oPopup.setShadow(false);

	oPopup.setAutoClose(mSettings.autoClose);

	sap.m.InstanceManager.addPopoverInstance(oPopup);

	// do not bind if already bound
	if (this._bNotBoundToOrientationChange) {
		this._bNotBoundToOrientationChange = false;

		// bind to the resize event to handle orientation change
		$(window).on("resize.sapMMessageToast", jQuery.proxy(this._handleOrientationChange, this));
	}

	// opens the popup's content at the position specified via #setPosition
	oPopup.open();
	this._iOpenedPopups++;

	// attach event handler fnFunction to the 'closed' event
	oPopup.attachClosed(function handleMTClosed() {
		sap.m.InstanceManager.removePopoverInstance(self._aPopups[iPos]);
		$(self._aPopups[iPos].getContent()).remove();
		self._aPopups[iPos].detachClosed(handleMTClosed);
		self._aPopups[iPos].destroy();
		self._aPopups[iPos] = null;
		self._iOpenedPopups--;

		if (self._iOpenedPopups === 0) {
			self._aPopups = [];
			$(window).off("resize.sapMMessageToast");
			self._bNotBoundToOrientationChange = true;
		}

		if (typeof mSettings.onClose === "function") {
			mSettings.onClose.call(self);
		}
	});

	setTimeout(function() {
		var sOpenState = oPopup.getOpenState();

		// closes the Popup if is not already closed
		if (!(sOpenState === "CLOSED" || sOpenState === "CLOSING")) {
			oPopup.close();
		}

	}, mSettings.duration);
};

/* =========================================================== */
/*                  end: API method and properties             */
/* =========================================================== */
}; // end of sap.m.MessageToast
if ( !jQuery.sap.isDeclared('sap.m.NavContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.NavContainerRenderer");

/**
 * @class NavContainer renderer. 
 * @static
 */
sap.m.NavContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.NavContainerRenderer.render = function(rm, oControl) { 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}
	
	rm.write("<div");
	rm.writeControlData(oControl);
	
	rm.addClass("sapMNav");
	rm.addStyle("width", oControl.getWidth());
	rm.addStyle("height", oControl.getHeight());

	if (this.renderAttributes) {
		this.renderAttributes(rm, oControl); // may be used by inheriting renderers, but DO NOT write class or style attributes! Instead, call addClass/addStyle.
	}
	
	rm.writeClasses();
	rm.writeStyles();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">"); // div element

	if (this.renderBeforeContent) {
		this.renderBeforeContent(rm, oControl); // may be used by inheriting renderers
	}
	
	var oContent = oControl.getCurrentPage();
	if (oContent) {
		rm.renderControl(oContent);
	}

	rm.write("</div>");
};

}; // end of sap.m.NavContainerRenderer
if ( !jQuery.sap.isDeclared('sap.m.ObjectAttributeRenderer') ) {
/*
 * @copyright
 */
jQuery.sap.declare("sap.m.ObjectAttributeRenderer");

/**
 * @class ObjectAttributeA renderer. 
 * @static
 */
sap.m.ObjectAttributeRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ObjectAttributeRenderer.render = function(oRm, oOA) {

	// return immediately if control is invisible
	if(oOA.getVisible() && !oOA._isEmpty()) {
		oRm.write("<div");
		oRm.writeControlData(oOA);
		oRm.addClass("sapMObjectAttributeDiv"); 
		if(oOA.getActive()){
			oRm.addClass("sapMObjectAttributeActive");
		}
		oRm.writeClasses();
		
		var sTooltip = oOA.getTooltip_AsString();
		if (sTooltip) {
			oRm.writeAttributeEscaped("title", sTooltip);
		}		
		
		oRm.write(">");
		oRm.write("<span>");
		oRm.writeEscaped(oOA.getText());
		oRm.write("</span>");
		oRm.write("</div>");
	}
};

}; // end of sap.m.ObjectAttributeRenderer
if ( !jQuery.sap.isDeclared('sap.m.ObjectHeaderRenderer') ) {
/*
 * @copyright
 */
jQuery.sap.declare("sap.m.ObjectHeaderRenderer");

/**
 * @class ObjectHeader renderer.
 * @static
 */
sap.m.ObjectHeaderRenderer = {};

/**
 * Renders the HTML for single line of Attribute and Status.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.ObjectHeader}
 *            oOH an object to be rendered
 * @param {sap.m.ObjectAttribute}
 *            oAttribute an attribute to be rendered
 * @param {sap.m.ObjectStatus}
 *            oStatus a status to be rendered
 */
sap.m.ObjectHeaderRenderer.renderAttributeStatus = function(rm, oOH, oAttribute, oStatus) {

	if ((!oAttribute || oAttribute._isEmpty()) && (!oStatus || oStatus._isEmpty())) {
		return; // nothing to render
	}

	rm.write("<div"); // Start attribute row container
	rm.addClass("sapMOHAttrRow");
	rm.writeClasses();
	rm.write(">");

	if (oAttribute && !oAttribute._isEmpty()) {
		rm.write("<div");
		rm.addClass("sapMOHAttr");
		rm.writeClasses();
		if (!oStatus || oStatus._isEmpty()) {
			rm.addStyle("width", "100%");
			rm.writeStyles();
		}
		rm.write(">");
		rm.renderControl(oAttribute);		
		rm.write("</div>");
	}

	if (oStatus && !oStatus._isEmpty()) {
		rm.write("<div");		
		rm.addClass("sapMOHStatus");		
		rm.writeClasses();
		if (!oAttribute || oAttribute._isEmpty()) {
			rm.addStyle("width", "100%");
			rm.writeStyles();
		}
		rm.write(">");
		rm.renderControl(oStatus);
		rm.write("</div>");
	}

	rm.write("</div>"); // Start attribute row container
};

/**
 * Renders the HTML for attributes and statuses, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.ObjectHeader}
 *            oOH an object to be rendered
 */
sap.m.ObjectHeaderRenderer.renderAttributesAndStatuses = function(rm, oOH) {

	var aAttribs = oOH.getAttributes();
	var iAttribsLength = aAttribs && aAttribs.length ? aAttribs.length : 0;

	// render the first line of attribute and status
	if (iAttribsLength > 0) {
		this.renderAttributeStatus(rm, oOH, aAttribs[0], oOH.getFirstStatus());
	} else {
		this.renderAttributeStatus(rm, oOH, null, oOH.getFirstStatus());
	}

	// render the second line of attribute and status
	if (iAttribsLength > 1) {
		this.renderAttributeStatus(rm, oOH, aAttribs[1], oOH.getSecondStatus());
	} else {
		this.renderAttributeStatus(rm, oOH, null, oOH.getSecondStatus());
		return;
	}

	// render the rest of the attributes
	for ( var i = 2; i < aAttribs.length; i++) {
		this.renderAttributeStatus(rm, oOH, aAttribs[i]);
	}
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.Control}
 *            oOH an object representation of the control that should be rendered
 */
sap.m.ObjectHeaderRenderer.render = function(rm, oOH) {

	// return immediately if control is invisible
	if (!oOH.getVisible()) {
		return;
	}

	rm.write("<div"); // Start Main container
	rm.writeControlData(oOH);
	rm.addClass("sapMOH");	
	rm.writeClasses();
	var sTooltip = oOH.getTooltip_AsString();
	if (sTooltip) {
	      rm.writeAttributeEscaped("title", sTooltip);
	}
	
	rm.write(">");

	// Introductory text at the top of the item, like "On behalf of Julie..."
	if (oOH.getIntro()) {
		rm.write("<div");
		rm.addClass("sapMOHIntro");
		if (oOH.getIntroActive()) {
			rm.addClass("sapMOHIntroActive");
		}
		rm.writeClasses();
		rm.write(">");
		rm.write("<span");
		rm.writeAttribute("id", oOH.getId() + "-intro");
		rm.write(">");
		rm.writeEscaped(oOH.getIntro());
		rm.write("</span>");
		rm.write("</div>");
	}

	// Container for fields placed on the top half of the item, below the intro. This
	// includes title, number, and number units.
	rm.write("<div"); // Start Top row container
	rm.addClass("sapMOHTopRow");
	rm.writeClasses();
	rm.write(">");

	// Title container displayed to the left of the number and number units container.
	rm.write("<div"); // Start Title container
	rm.writeAttribute("id", oOH.getId() + "-titlediv");
	rm.addClass("sapMOHTitleDiv");
	if (oOH._hasIcon()){
		rm.addClass("sapMOHTitleIcon");
	}
	if (!oOH.getNumber()){
		rm.addClass("sapMOHTitleDivFull");
	}
	rm.writeClasses();
	rm.write(">");

	// Container for icon
	if (oOH._hasIcon()) {
		rm.write("<div"); // Start icon container
		rm.addClass("sapMOHIcon");
		if (oOH.getIconActive()) {
			rm.addClass("sapMPointer");
		}
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oOH._getImage());
		rm.write("</div>"); // end icon container
	}

	if (oOH.getTitle()) {
		rm.write("<span"); // Start Title Text container
		rm.writeAttribute("id", oOH.getId() + "-title");
		rm.addClass("sapMOHTitle");
		if (oOH.getTitleActive()) {
			rm.addClass("sapMOHTitleActive");
		}
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oOH.getTitle());
		rm.write("</span>"); // End Title Text container
	}
	rm.write("</div>"); // End Title container

	if (oOH.getNumber()) {
	// Container for a number and a units qualifier.
	rm.write("<div"); // Start Number/units container
	rm.writeAttribute("id", oOH.getId() + "-numberdiv");
	rm.addClass("sapMOHNumberDiv");
	rm.writeClasses();
	rm.write(">");

		rm.write("<span");
		rm.writeAttribute("id", oOH.getId() + "-number");
		rm.addClass("sapMOHNumber");

		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oOH.getNumber());

		rm.write("</span>");

		if (oOH.getNumberUnit()) {
			rm.write("<span");
			rm.writeAttribute("id", oOH.getId() + "-numberUnit");
			rm.addClass("sapMOHNumberUnit");

			rm.writeClasses();
			rm.write(">");
			rm.writeEscaped(oOH.getNumberUnit());
			rm.write("</span>");
		}

	rm.write("</div>"); // End Number/units container
	}
	rm.write("<div style='clear:both'/>");
	rm.write("</div>"); // End Top row container
	
	if (oOH._hasBottomContent()) {
		rm.write("<div"); // Start Bottom row container
		rm.addClass("sapMOHBottomRow");
		rm.writeClasses();
		rm.write(">");

		this.renderAttributesAndStatuses(rm, oOH);

		rm.write("<div style='clear:both'/>");
		rm.write("</div>"); // End Bottom row container
	}
	rm.write("<div style='clear:both'/>");
	rm.write("</div>"); // End Main container
};

}; // end of sap.m.ObjectHeaderRenderer
if ( !jQuery.sap.isDeclared('sap.m.ObjectIdentifierRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ObjectIdentifierRenderer");

/**
 * @class ObjectIdentifier renderer.
 * @static
 */
sap.m.ObjectIdentifierRenderer = {};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oOI an object representation of the control that should be
 *            rendered
 */
sap.m.ObjectIdentifierRenderer.render = function(oRm, oOI) {

	// write the HTML into the render manager
	oRm.write("<div"); // Identifier begins
	oRm.writeControlData(oOI);
	oRm.addClass("sapMObjectIdentifier");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div"); // Top row begins
	oRm.addClass("sapMObjectIdentifierTopRow");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div"); // Icons begin
	oRm.addClass("sapMObjectIdentifierIcons");
	oRm.writeClasses();
	oRm.write(">");

	if (oOI.getBadgeAttachments()) {
		oRm.write("<span"); // Icon span begins
		oRm.addClass("sapMObjectIdentifierIconSpan");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oOI._getAttachmentsIcon());
		oRm.write("</span>"); // Icon span ends
	}
	if (oOI.getBadgeNotes()) {
		oRm.write("<span"); // Icon span begins
		oRm.addClass("sapMObjectIdentifierIconSpan");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oOI._getNotesIcon());
		oRm.write("</span>"); // Icon span ends
	}
	if (oOI.getBadgePeople()) {
		oRm.write("<span"); // Icon span begins
		oRm.addClass("sapMObjectIdentifierIconSpan");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oOI._getPeopleIcon());
		oRm.write("</span>"); // Icon span ends
	}
	
	oRm.write("</div>"); // Icons end

	oRm.write("<div"); // Title begins
	oRm.addClass("sapMObjectIdentifierTitle");
	oRm.writeClasses();
	oRm.write(">");
	oRm.writeEscaped(oOI.getTitle());
	oRm.write("</div>"); // Title ends

	oRm.write("</div>"); // Top row ends

	oRm.write("<div"); // Text begins
	oRm.addClass("sapMObjectIdentifierText");
	oRm.writeClasses();
	oRm.write(">");
	oRm.writeEscaped(oOI.getText());
	oRm.write("</div>"); // Text ends

	oRm.write("</div>"); // Identifier ends
};

}; // end of sap.m.ObjectIdentifierRenderer
if ( !jQuery.sap.isDeclared('sap.m.ObjectNumberRenderer') ) {
/*
 * @copyright
 */

jQuery.sap.declare("sap.m.ObjectNumberRenderer");

/**
 * @class ObjectNumber renderer. 
 * @static
 */
sap.m.ObjectNumberRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ObjectNumberRenderer.render = function(oRm, oON){
	// return immediately if control is invisible
	if (!oON.getVisible()) {
		return;
	}

	 // write the HTML into the render manager
	 oRm.write("<div"); // Number begins
         oRm.writeControlData(oON);
         oRm.addClass("sapMObjectNumber");
         oRm.writeClasses();
         oRm.write(">"); 
	 	 
	 oRm.write("<span"); // Number text begins
	 oRm.addClass("sapMObjectNumberText");
	 oRm.writeClasses();
	 oRm.write(">");
	 oRm.writeEscaped(oON.getNumber()); 
	 oRm.write("</span>"); // Number text ends
	 
	 oRm.write("<span"); // Number unit begins	 
	 oRm.addClass("sapMObjectNumberUnit");
	 oRm.writeClasses();
	 oRm.write(">");
	 oRm.writeEscaped(oON.getNumberUnit()); 
	 oRm.write("</span>"); // Number unit ends
	 
	 oRm.write("</div>"); // Number ends
};

}; // end of sap.m.ObjectNumberRenderer
if ( !jQuery.sap.isDeclared('sap.m.ObjectStatusRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ObjectStatusRenderer");

/**
 * @class ObjectStatus renderer. 
 * @static
 */
sap.m.ObjectStatusRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ObjectStatusRenderer.render = function(oRm, oObjStatus){
	
	if(!oObjStatus._isEmpty()) {
		oRm.write("<div");
		oRm.writeControlData(oObjStatus);
		
		var sTooltip = oObjStatus.getTooltip_AsString();
		if (sTooltip) {
			oRm.writeAttributeEscaped("title", sTooltip);
		}
		
		oRm.addClass("sapMObjStatus"); 
		oRm.addClass("sapMObjStatus" + oObjStatus.getState());
		oRm.writeClasses();
		oRm.write(">");
				
		if (oObjStatus.getIcon()) {
			oRm.write("<span");
			oRm.addClass("sapMObjStatusIcon");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oObjStatus._getImage());
			oRm.write("</span>");
		}

		if (oObjStatus.getText()) {
			oRm.write("<span");
			oRm.addClass("sapMObjStatusText");
			oRm.writeClasses();
			oRm.write(">");
			oRm.writeEscaped(oObjStatus.getText());
			oRm.write("</span>");
		}
		oRm.write("</div>");			
	}
};
}; // end of sap.m.ObjectStatusRenderer
if ( !jQuery.sap.isDeclared('sap.m.PageRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.PageRenderer");

/**
 * @class Page renderer.
 * @static
 */
sap.m.PageRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.PageRenderer.render = function(rm, oPage) {
	var oHeader = null,
		sEnableScrolling = oPage.getEnableScrolling() ? " sapMPageScrollEnabled" : "";

	if (oPage.getShowHeader()) {
		oHeader = oPage._getAnyHeader();
	}

	var oSubHeader = oPage.getSubHeader();

	var oFooter = oPage.getFooter();
	rm.write("<div");
	rm.writeControlData(oPage);
	rm.addClass("sapMPage");

	if (oHeader) {
		rm.addClass("sapMPageWithHeader");
	}

	if (oSubHeader) {
		rm.addClass("sapMPageWithSubHeader");
	}

	if (oFooter) {

		// it is used in the PopOver to remove additional margin bottom for page with footer
		rm.addClass("sapMPageWithFooter");
	}

	rm.writeClasses();

	var sTooltip = oPage.getTooltip_AsString();

	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}

	rm.write(">");

	// render header
	if (oHeader) {
		rm.renderControl(oHeader);
	}

	if (oSubHeader) {
		oSubHeader._context = 'header';
		rm.renderControl(oSubHeader.addStyleClass('sapMPageSubHeader'));
	}

	// render child controls
	rm.write('<section id="' + oPage.getId() + '-cont" class="sapMPageBg' + oPage.getBackgroundDesign() + '">');
	rm.write('<div id="' + oPage.getId() + '-scroll" class="sapMPageScroll' + sEnableScrolling + '">');

	var aContent = oPage.getContent();
	var l = aContent.length;

	for (var i = 0; i < l; i++) {
		rm.renderControl(aContent[i]);
	}

	rm.write("</div>");

	rm.write("</section>");

	// render footer Element
	if (oFooter) {
		oFooter._context = 'footer';
		rm.renderControl(oFooter);
	}

	rm.write("</div>");
};
}; // end of sap.m.PageRenderer
if ( !jQuery.sap.isDeclared('sap.m.PerformanceRecorder') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* EXPERIMENTAL */
// This function will probably be moved and in that process be renamed
// So don't rely on the current naming

jQuery.sap.declare("sap.m.PerformanceRecorder");

/**
 * @class Performance Recorder
 * @static
 */

sap.m.PerformanceRecorder = {};

/**
 * Initialize and start the recording of performance measurements
 *
 * @param oConfig The object holding the configuration
 * @param aInteractionSteps The array holding the interaction steps
 * @return void
 * @function
 * @public
 */
sap.m.PerformanceRecorder.start = function(oConfig, aInteractionSteps) {
	sap.m.PerformanceRecorder.config = oConfig;
	sap.m.PerformanceRecorder.interactionSteps = aInteractionSteps;
	sap.m.PerformanceRecorder.interactionPointer = 0;
	sap.m.PerformanceRecorder.stepPointer = 0;

	jQuery.sap.measure.setActive(true);

	sap.m.PerformanceRecorder.processStepStart();
};

/**
 * Process a step's start trigger
 *
 * @return void
 * @function
 * @private
 */
sap.m.PerformanceRecorder.processStepStart = function() {
	var currentInteraction = sap.m.PerformanceRecorder.interactionSteps[sap.m.PerformanceRecorder.interactionPointer];
	var currentStep = currentInteraction.steps[sap.m.PerformanceRecorder.stepPointer];

	// Start timer or attach trigger event or delegate
	if (currentStep.startTriggerEvent == "immediate") {
		// Start timer for interaction step
		if (sap.m.PerformanceRecorder.stepPointer == 0) {
			jQuery.sap.measure.start(currentInteraction.id, currentInteraction.description);
		}
		jQuery.sap.measure.start(currentStep.id, currentInteraction.id);
		sap.m.PerformanceRecorder.processStepStop();
	} else if (currentStep.startTriggerEvent == "UIUpdated") {
		sap.ui.getCore().attachEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, function() {
			// Start timer for interaction step
			if (sap.m.PerformanceRecorder.stepPointer == 0) {
				jQuery.sap.measure.start(currentInteraction.id, currentInteraction.description);
			}
			jQuery.sap.measure.start(currentStep.id, currentInteraction.id);
			sap.m.PerformanceRecorder.processStepStop();
		});
	} else if (currentStep.startTriggerId && currentStep.startTriggerEvent) {
		var oTrigger = sap.ui.getCore().byId(currentStep.startTriggerId);
		sap.m.PerformanceRecorder.oTriggerEvent = {};
		sap.m.PerformanceRecorder.oTriggerEvent[currentStep.startTriggerEvent] = function() {
			// Start timer for interaction step
			if (sap.m.PerformanceRecorder.stepPointer == 0) {
				jQuery.sap.measure.start(currentInteraction.id, currentInteraction.description);
			}
			jQuery.sap.measure.start(currentStep.id, currentInteraction.id);
			sap.m.PerformanceRecorder.processStepStop();
		};
		oTrigger.addDelegate(sap.m.PerformanceRecorder.oTriggerEvent, true);
	}
};

/**
 * Process a step's stop trigger
 *
 * @return void
 * @function
 * @private
 */
sap.m.PerformanceRecorder.processStepStop = function() {
	var currentInteraction = sap.m.PerformanceRecorder.interactionSteps[sap.m.PerformanceRecorder.interactionPointer];
	var currentStep = currentInteraction.steps[sap.m.PerformanceRecorder.stepPointer];

	// Detach trigger event or delegate
	if (currentStep.startTriggerEvent == "UIUpdated") {
		sap.ui.getCore().detachEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, sap.m.PerformanceRecorder.processStepStop);
	} else if (currentStep.startTriggerId && currentStep.startTriggerEvent) {
		var oTrigger = sap.ui.getCore().byId(currentStep.startTriggerId);
		oTrigger.removeDelegate(sap.m.PerformanceRecorder.oTriggerEvent);
	}

	if (currentStep.stopTriggerEvent == "UIUpdated") {
		sap.ui.getCore().attachEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, sap.m.PerformanceRecorder.concludeStep);
	}
};

/**
 * Conclude step/interaction/recording
 *
 * @return void
 * @function
 * @private
 */
sap.m.PerformanceRecorder.concludeStep = function() {
	var currentInteraction = sap.m.PerformanceRecorder.interactionSteps[sap.m.PerformanceRecorder.interactionPointer];
	var currentStep = currentInteraction.steps[sap.m.PerformanceRecorder.stepPointer];
	var lastInteraction = sap.m.PerformanceRecorder.interactionSteps.length - 1;
	var lastStep = currentInteraction.steps.length - 1;
	
	// Record stop time
	jQuery.sap.measure.end(currentStep.id);

	// Detach trigger event
	if (currentStep.stopTriggerEvent == "UIUpdated") {
		sap.ui.getCore().detachEvent(sap.ui.core.Core.M_EVENTS.UIUpdated, sap.m.PerformanceRecorder.concludeStep);
	}

	// Stop timer for interaction step
	if (sap.m.PerformanceRecorder.stepPointer == lastStep) {
		jQuery.sap.measure.end(currentInteraction.id);
	}

	// Advance pointers or end recording
	if (sap.m.PerformanceRecorder.interactionPointer < lastInteraction) {
		if (sap.m.PerformanceRecorder.stepPointer < lastStep) {
			sap.m.PerformanceRecorder.stepPointer++;
		} else {
			sap.m.PerformanceRecorder.interactionPointer++;
			sap.m.PerformanceRecorder.stepPointer = 0;
		}
		sap.m.PerformanceRecorder.processStepStart();
	} else {
		sap.m.PerformanceRecorder.endRecording();
	}
};

/**
 * End recording and beacon results
 *
 * @return void
 * @function
 * @private
 */
sap.m.PerformanceRecorder.endRecording = function() {
	var measurements = sap.m.PerformanceRecorder.getAllMeasurementsAsHAR();
	var data = {
	    log: {
	    	version: "1.2",
	    	creator: {
	    		name: "SAPUI5 Performance Recorder",
	    		version: "1.0"
	    	},
	    	browser: {
	    		name: navigator.userAgent,
	    		version: jQuery.browser.version
	    	}
	    }
	};

	var pages = [];
	var entries = [];
	for(var i in measurements) {
		if(measurements[i].id.substr(-5) === "_page") {
			var page = {
		        startedDateTime: measurements[i].startedDateTime,
		        id: measurements[i].id,
		        title: measurements[i].pageref,
		        pageTimings: {
		        	onContentLoad: -1,
		        	onLoad: measurements[i].time
		        }
			};

			pages.push(page);
		} else {
			entries.push(measurements[i]);
		}
	}

	data.log.pages = pages;
	data.log.entries = entries;

	jQuery.ajax({
		type: 'POST',
		url: sap.m.PerformanceRecorder.config.url,
		data: data,
		dataType: 'text'
	});
};

/**
 * Gets all performance measurements in HAR format
 *
 * @return {object} [] current measurement (false if error)
 * @function
 * @private
 */
sap.m.PerformanceRecorder.getAllMeasurementsAsHAR = function() {
	var origMeasurements = jQuery.sap.measure.getAllMeasurements();
	var aMeasurements = new Array();
	var oFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
		pattern: "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
	});

	//TODO Improve the data that is being written into the fields
	jQuery.each(origMeasurements, function(sId, oMeasurement){
		var isoDate = oFormat.format(new Date(oMeasurement.start), true);

		aMeasurements.push({
			id: oMeasurement.id,
            pageref: oMeasurement.info,
            startedDateTime: isoDate,
            time: oMeasurement.duration,
            request: {
            	method: "GET",
            	url: oMeasurement.id,
            	httpVersion: "HTTP/1.1",
            	cookies: [
            	    {
            	    	dummy: ""
            	    }
            	],
            	headers: [
            	    {
            	    	name: "",
            	    	value: ""
            	    }
            	],
            	queryString: [
            	    {
            	    	name: "",
            	    	value: ""
            	    }
            	],
            	headersSize: 0,
            	bodySize: 0
            },
            response: {
            	status: 200,
            	statusText: "OK",
            	httpVersion: "HTTP/1.1",
            	cookies: [
            	    {
            	    	dummy: ""
            	    }
            	],
            	headers: [
            	    {
            	    	name: "",
            	    	value: ""
            	    }
            	],
            	content: {
                    size: 0,
                    compression: 0,
                    mimeType: "text/html; charset=utf-8",
                    text: "\n"
                },
            	redirectURL: "",
                headersSize: 0,
                bodySize: 0
            },
            cache: {
            	beforeRequest: {
            		lastAccess: "",
            		eTag: "",
            		hitCount: ""
            	},
                afterRequest: {
                	lastAccess: "",
            		eTag: "",
            		hitCount: ""
                }
            },
            timings: {
            	blocked: -1,
                dns: -1,
                connect: -1,
                send: -1,
                wait: -1,
                receive: oMeasurement.duration,
                ssl: -1,
            }
	    });
	});
	return aMeasurements;
};

}; // end of sap.m.PerformanceRecorder
if ( !jQuery.sap.isDeclared('sap.m.PopoverRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.PopoverRenderer");

/**
 * @class Popover renderer. 
 * @static
 */
sap.m.PopoverRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.PopoverRenderer.render = function(rm, oControl){ 
	var sId = oControl.getId(),
		i = 0,
		contents = oControl.getContent(),
		oFooter = oControl.getFooter(),
		oHeaderControl,
		sContentWidth = oControl.getContentWidth(),
		sContentHeight = oControl.getContentHeight(),
		bScrollable = oControl.getEnableScrolling() && !oControl._forceDisableScrolling,
		sFooterClass = "sapMPopoverFooter ";
		
	if(oControl.getShowHeader()){
		oHeaderControl = oControl._getAnyHeader();
	}

	//container
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapMPopover");
	if(oHeaderControl){
		rm.addClass("sapMPopoverWithBar");
	}else{
		rm.addClass("sapMPopoverWithoutBar");
	}
	if(oControl._hasSingleNavContent()){
		rm.addClass("sapMPopoverNav");
	}
	
	if(oControl._hasSinglePageContent()){
		rm.addClass("sapMPopoverPage");
	}
	if(oFooter){
		rm.addClass("sapMPopoverWithFooter");
	}else{
		rm.addClass("sapMPopoverWithoutFooter");
	}
	
	if(oControl.getPlacement() === sap.m.PlacementType.Top){
		rm.addClass("sapMPopoverPlacedTop");
	}
	rm.writeClasses();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	
	
	if(!jQuery.os.ios && !sap.m.Popover._bOneDesign){
		//arrow
		rm.write("<span");
		rm.writeAttribute("id", sId+"-arrow");
		rm.addClass("sapMPopoverArr");
		rm.writeClasses();
		rm.write("></span>");//arrow tip
	}

	//header
	if(oHeaderControl){
		rm.renderControl(oControl._getAnyHeader().addStyleClass("sapMPopoverHeader sapMPageHeader"));
	}//header
	
	// content container
	rm.write("<div");
	rm.writeAttribute("id",sId + "-cont");
	if(sContentWidth){
		rm.addStyle("width",sContentWidth);
	}
	if(sContentHeight){
		rm.addStyle("height",sContentHeight);
	}
	rm.writeStyles();
	rm.addClass("sapMPopoverCont");
	rm.writeClasses();
	rm.write(">");
	
	//scroll area
	rm.write("<div id='" + oControl.getId() + "-scroll" +"' class='sapMPopoverScroll " + (bScrollable ? '' : "sapMPopoverScrollDisabled")  +"'>");
	for(i = 0 ; i < contents.length ; i++){
		rm.renderControl(contents[i]);
	}
	rm.write("</div>");//scrollArea
	
	rm.write("</div>");//content container
	
	//footer
	if (oFooter) {
		oFooter._context = 'footer';
		if(this.isButtonFooter(oFooter)){
			sFooterClass += "sapMPopoverSpecialFooter";
		}
		rm.renderControl(oFooter.addStyleClass(sFooterClass));
	}//footer
	
	if(jQuery.os.ios || sap.m.Popover._bOneDesign){
		//arrow
		rm.write("<span");
		rm.writeAttribute("id", sId+"-arrow");
		rm.addClass("sapMPopoverArr");
		rm.writeClasses();
		rm.write("></span>");//arrow tip
	}
	

	rm.write("</div>");// container
};

sap.m.PopoverRenderer.isButtonFooter = function(footer){
	if(footer instanceof sap.m.Bar){
		var aContentLeft = footer.getContentLeft(),
			aContentRight = footer.getContentRight(),
			aContentMiddle = footer.getContentMiddle(),
			bLeftEmpty = (!aContentLeft || aContentLeft.length === 0),
			bRightEmpty = (!aContentRight || aContentRight.length === 0),
			bMiddleTwoButtons = false;

		if(aContentMiddle && aContentMiddle.length ===2){
			if((aContentMiddle[0] instanceof sap.m.Button) && (aContentMiddle[1] instanceof sap.m.Button)){
				bMiddleTwoButtons = true;
			}
		}
		
		return bLeftEmpty && bRightEmpty && bMiddleTwoButtons;
	}else{
		return false;
	}
};

}; // end of sap.m.PopoverRenderer
if ( !jQuery.sap.isDeclared('sap.m.PullToRefreshRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.PullToRefreshRenderer");
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
 // TODO: consider making this conditional 
sap.ui.core.IconPool.insertFontFaceStyle();

/**
 * @class PullToRefresh renderer. 
 * @static
 */
sap.m.PullToRefreshRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.PullToRefreshRenderer.render = function(oRm, oControl){ 
	// write the HTML into the render manager

	var bShowIcon = oControl.getShowIcon();
	var sCustomIcon = oControl.getCustomIcon();

	oRm.write("<div");
	oRm.writeControlData(oControl);
	oRm.addClass("sapMPullDown");
	if (!oControl._bTouchMode) {
		oRm.addClass("sapMPullDownNontouch");
	} else {
		oRm.addClass("sapMPullDownTouch");
	}
	if(bShowIcon && !sCustomIcon){ // if no custom icon is provided, use SAP logo as background
		oRm.addClass("sapMPullDownLogo");
	}
	oRm.writeClasses();
	oRm.write(">"); // div element

	if(bShowIcon && sCustomIcon){
		var oCustomImage = oControl.getCustomIconImage();
		if(oCustomImage){
			oRm.write("<div class=\"sapMPullDownCI\">");
			oRm.renderControl(oCustomImage);
			oRm.write("</div>");
		}
	}

	// Pull down arrow icon
	oRm.write("<span class=\"sapMPullDownIcon\"></span>");

	// Busy Indicator
	oRm.write("<span class=\"sapMPullDownBusy\">");
	oRm.renderControl(oControl._oBusyIndicator);
	oRm.write("</span>");

	// Text - Pull down to refresh
	oRm.write("<span id=" + oControl.getId() + "-T class=\"sapMPullDownText\">");
	oRm.writeEscaped(oControl.oRb.getText(oControl._bTouchMode ? "PULL2REFRESH_PULLDOWN" : "PULL2REFRESH_REFRESH"));
	oRm.write("</span>");

	// Info - last updated at xx:xx:xx
	oRm.write("<span id=" + oControl.getId() + "-I class=\"sapMPullDownInfo\">");
	oRm.writeEscaped(oControl.getDescription());
	oRm.write("</span>");

	oRm.write("</div>");
};

}; // end of sap.m.PullToRefreshRenderer
if ( !jQuery.sap.isDeclared('sap.m.RadioButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.RadioButtonRenderer");
jQuery.sap.require('sap.ui.core.ValueStateSupport'); // unlisted dependency retained


/**
 * @class RadioButton renderer. 
 * @static
 */
sap.m.RadioButtonRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oRadioButton an object representation of the control that should be rendered
 */
sap.m.RadioButtonRenderer.render = function(oRm, oRadioButton){ 
	// Return immediately if control is invisible
	if (!oRadioButton.getVisible()) {
		return;
	}

	// get control properties
	var bEnabled = oRadioButton.getEnabled();
	var bReadOnly = false;
	var myTabIndex = 0;

	// Radio Button style class
	oRm.addClass("sapMRb");
	
	if(bEnabled) {
		oRm.addClass("sapMPointer");
	}

	// write the HTML into the render manager
	oRm.write("<div");						// Control - DIV
	oRm.writeControlData(oRadioButton);

	// ARIA
	oRm.writeAccessibilityState(oRadioButton, {
		role: "radio",
		checked: oRadioButton.getSelected() === true,
		disabled: !bEnabled
	});

	// Add classes and properties depending on the state
	if (oRadioButton.getSelected()) {
		oRm.addClass("sapMRbSel");
	}

	if (!bEnabled) {
		bReadOnly = true;
		oRm.addClass("sapMRbDis");
		myTabIndex = -1;
	}

	oRm.writeClasses();
	oRm.writeAttribute("tabIndex", myTabIndex);
	
	var sTooltip = sap.ui.core.ValueStateSupport.enrichTooltip(oRadioButton, oRadioButton.getTooltip_AsString());
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	
	oRm.write(">");		// DIV element

	oRm.write("<div class='sapMRbB'>");
//	if(jQuery.os.android || jQuery.os.blackberry) {
		oRm.write("<div");	
		oRm.addClass("sapMRbBOut");
		oRm.writeClasses();
		oRm.write(">");		// DIV element
		oRm.write("<div");	
		oRm.addClass("sapMRbBInn");
		oRm.writeClasses();
		oRm.write(">");		// DIV element
//	}

	// Write the real - potentially hidden - HTML RadioButton element
	oRm.write("<input type='radio' tabindex='-1'");
	oRm.writeAttribute("id", oRadioButton.getId() + "-RB");
	oRm.writeAttribute("name", oRadioButton.getGroupName());
	if (oRadioButton.getSelected()) {
		oRm.writeAttribute("checked", "checked");
	}
	if (!bEnabled) {
		oRm.writeAttribute("disabled", "disabled")
	}
	//oRm.writeAttributeEscaped("title", oRadioButton.getTooltip_AsString());
	if(bReadOnly) {
		oRm.writeAttribute("readonly", "readonly");
		oRm.writeAttribute("disabled", "disabled");
	}	
	oRm.write(" />");	// Close RadioButton-input-element
//	if(jQuery.os.android || jQuery.os.blackberry) {
		oRm.write("</div></div>");	// Control - DIVs close
//	}
	oRm.write("</div>");
	oRm.renderControl(oRadioButton._oLabel);
	oRm.write("</div>");	// Control - DIVs close
};
}; // end of sap.m.RadioButtonRenderer
if ( !jQuery.sap.isDeclared('sap.m.ScrollContainerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ScrollContainerRenderer");

/**
 * @class ScrollContainer renderer. 
 * @static
 */
sap.m.ScrollContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ScrollContainerRenderer.render = function(oRm, oControl) { 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	oRm.write("<div");
	oRm.writeControlData(oControl);

	var width = oControl.getWidth(),
	height = oControl.getHeight();
	if (width) {
		oRm.addStyle("width", width);
	}
	if (height) {
		oRm.addStyle("height", height);
	}
	oRm.writeStyles();

	if (oControl.getVertical()) {
		if (!oControl.getHorizontal()) {
			oRm.addClass("sapMScrollContV");
		} else {
			oRm.addClass("sapMScrollContVH");
		}
	} else if (oControl.getHorizontal()) {
		oRm.addClass("sapMScrollContH");
	}

	oRm.addClass("sapMScrollCont");
	oRm.writeClasses();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	
	oRm.write("><div id='" + oControl.getId() + "-scroll' class='sapMScrollContScroll'>");

	// render child controls
	var aContent = oControl.getContent(), 
	l = aContent.length;
	for (var i = 0; i < l; i++) {
		oRm.renderControl(aContent[i]);
	}

	oRm.write("</div></div>");
};

}; // end of sap.m.ScrollContainerRenderer
if ( !jQuery.sap.isDeclared('sap.m.SearchFieldRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SearchFieldRenderer");

/**
 * @class SearchField renderer. 
 * @static
 */
sap.m.SearchFieldRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.SearchFieldRenderer.render = function(oRenderManager, oSF){ 
	// render nothing if control is invisible
	if (!oSF.getVisible()) {
		return;
	}

	var rm = oRenderManager;
	var bShowMagnifier = oSF.getShowMagnifier();

	// container
	rm.write("<div");
	rm.writeControlData(oSF);
	rm.addClass("sapMSF");
	if (bShowMagnifier) { rm.addClass("sapMSFM"); }
	if(jQuery.os.android && !(jQuery.browser.chrome)){
		if(jQuery.os.fVersion < 3){
			rm.addClass("sapMSFA2"); // specific Android 2.+ rendering
		} else if (jQuery.os.fVersion <= 4){
			rm.addClass("sapMSFA4"); // specific Android 4.0* rendering
		}
	}
	if (!oSF.getEnabled()){
		rm.addClass("sapMSFDisabled");
	}
	rm.writeClasses();
	var sTooltip = oSF.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");

	// 1. magnifier icon
	if (bShowMagnifier) { rm.write('<div class="sapMSFMG"></div>'); }
	
	// 2. Input type="search". 
	//    Enclose input into a <form> to show a correct keyboard
	//    method="post" to prevent unneeded "?" at the end of URL
	rm.write('<form method="post" action="javascript:void(0);">');
	rm.write('<input type="search" autocorrect="off"');
	rm.writeAttribute("id", oSF.getId() + "-I");

	rm.addClass("sapMSFI");

	if (jQuery.os.ios && jQuery.os.fVersion > 5) {
			rm.addClass("sapMSFIIos6"); // specific Ios6+ rendering
	}

	if (!oSF.getEnabled()){
		// hide the reset button even if value is not empty: user cannot press it
		rm.addClass("sapMSFIDisabled");
	}
	rm.writeClasses();

	if (!oSF.getEnabled()) { rm.writeAttribute("disabled","disabled"); }
	if (bShowMagnifier) { rm.writeAttribute("results", 0); }
	if (oSF.getPlaceholder()) { rm.writeAttributeEscaped("placeholder", oSF.getPlaceholder()); }
	if (oSF.getMaxLength()) { rm.writeAttribute("maxLength", oSF.getMaxLength()); }
	if (oSF.getValue()) { rm.writeAttributeEscaped("value", oSF.getValue()); }
	if (oSF.getWidth()) { rm.writeAttribute("style", "width:" + oSF.getWidth() + ";"); }

	rm.write("></form>");

	// 3. Reset button (transparent, lies over "X" of input, reacts on touch correctly)
	// in sap_bluecrystal: x is placed on the reset button
	if (oSF.getEnabled()) {
		rm.write("<div");
		rm.writeAttribute("id", oSF.getId() + "-reset");
		rm.addClass("sapMSFR");
		if(oSF.getValue()){
			rm.addClass("sapMSFVal");
		}
		rm.writeClasses();
		rm.write("></div>");
	}
	rm.write("</div>");

};

}; // end of sap.m.SearchFieldRenderer
if ( !jQuery.sap.isDeclared('sap.m.SegmentedButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SegmentedButtonRenderer");

/**
 * @class Segmented renderer. 
 * @static
 */
sap.m.SegmentedButtonRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.SegmentedButtonRenderer.render = function(rm, oControl){ 
	// return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}

	var aItems = oControl.getButtons(),
	aItemsLength = aItems.length;
	if(!oControl.getVisible()) {
		return;
	}
	// write the HTML into the render manager
	rm.write("<ul");
	rm.addClass("sapMSegB");
	rm.writeClasses();
	if (oControl.getWidth() && oControl.getWidth() !== '') {
		rm.addStyle('width', oControl.getWidth());
	}
	rm.writeStyles();
	rm.writeControlData(oControl);
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	
	for (var i = 0; i < aItemsLength; i++) {
		var oItem = aItems[i];
		
		rm.write("<li");
		rm.writeControlData(oItem);
		rm.addClass("sapMSegBBtn");
		if(oControl.getSelectedButton() === oItem.getId()) {
			rm.addClass("sapMSegBBtnSel");
		}
		if(!oItem.getEnabled()) {
			rm.addClass("sapMSegBBtnDis");
		}
		var tooltip = oItem.getTooltip_AsString();
		if (tooltip) {
			rm.writeAttributeEscaped("title", tooltip);
		}
		rm.writeClasses();
		rm.write('>');
		if(oItem.getIcon() === '' && oItem.getText() !== '') {
			rm.writeEscaped(oItem.getText(), false);
		} else if (oItem.getIcon() !== '' && oItem.getText() === '') {
			var oImage = oItem._getImage((oItem.getId() + "-img"), oItem.getIcon());
			//oImage.mProperties.height = "1.5em";
			//oImage.mProperties.width = "1.5em";
			rm.renderControl(oImage);	

		} else {
			jQuery.sap.log.error("SEGMENTED: "+oItem.getId()+": Icon and Label is not allowed");
		}
		rm.write("</li>");
	}
	rm.write("</ul>");
	
};

}; // end of sap.m.SegmentedButtonRenderer
if ( !jQuery.sap.isDeclared('sap.m.SelectRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SelectRenderer");

/**
 * @class Select renderer.
 * @static
 */
sap.m.SelectRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oSelect an object representation of the select that should be rendered
 */
sap.m.SelectRenderer.render = function(oRm, oSelect) {
	var	sName = oSelect.getName(),
		sTitle = oSelect.getTitle(),
		aItems = oSelect.getItems(),
		oSelectedItem = oSelect.getSelectedItem(),
		sSelectedItemText = oSelectedItem ? oSelectedItem.getText() : oSelect._sNoData,
		sSelectedItemId = oSelect.getAssociation("selectedItem"),
		aItemsLength = aItems.length,
		sTooltip = oSelect.getTooltip_AsString(),
		sId = oSelect.getId() + "-nat",
		i = 0;

	// suppress rendering if not visible
	if (!oSelect.getVisible()) {
		return;
	}

	oRm.write("<div");
	oRm.addClass("sapMSlt");

	if (!oSelect.getEnabled()) {
		oRm.addClass("sapMSltDisabled");
	}

	oRm.addStyle("width", oSelect.getWidth());
	oRm.addStyle("max-width", oSelect.getMaxWidth());
	oRm.addStyle("visibility", "hidden");

	oRm.writeControlData(oSelect);

	oRm.writeStyles();
	oRm.writeClasses();

	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}

	oRm.write(">");
		oRm.write('<label class="sapMSltLabel"');
		oRm.writeAttribute("for", sId);
		oRm.write(">");
			oRm.writeEscaped(sSelectedItemText);
		oRm.write('</label>');

		oRm.write('<span class="sapMSltIcon"></span>');

		oRm.write("<select");

		oRm.writeAttribute("id", sId);

		if (sName !== "") {
			oRm.writeAttributeEscaped("name", sName);
		}

		if (sTitle !== "") {
			oRm.writeAttributeEscaped("title", sTitle);
		}

		if (!oSelect.getEnabled()) {
			oRm.write(" disabled");
		}

		oRm.write(">");

			// rendering items
			for (; i < aItemsLength; i++) {
				oRm.write("<option");
					oRm.writeAttribute("id", aItems[i].getId());
					oRm.writeAttributeEscaped("value", (aItems[i].getKey() !== "") ? aItems[i].getKey() : aItems[i].getId());

					if (aItems[i].getId() === sSelectedItemId) {
						oRm.write(" selected");
					}

					if (!aItems[i].getEnabled()) {
						oRm.write(" disabled");
					}

					oRm.write(">");
					oRm.writeEscaped(aItems[i].getText());
				oRm.write("</option>");
			}

			if (aItemsLength === 0) {
				oRm.write("<option>" + sSelectedItemText + "</option>");
			}

		oRm.write("</select>");

	oRm.write("</div>");
};
}; // end of sap.m.SelectRenderer
if ( !jQuery.sap.isDeclared('sap.m.ShellRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
 
 jQuery.sap.declare("sap.m.ShellRenderer");

/**
 * @class Shell renderer. 
 * @static
 */
sap.m.ShellRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.ShellRenderer.render = function(rm, oControl) { 
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapMShell");
	if (oControl.getAppWidthLimited()) {
		rm.addClass("sapMShellAppWidthLimited");
	}
	
	sap.m.BackgroundHelper.addBackgroundColorStyles(rm, oControl.getBackgroundColor(),  oControl.getBackgroundImage());
	
	rm.writeClasses();
	rm.writeStyles();
	
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	
	rm.write(">");
	
	sap.m.BackgroundHelper.renderBackgroundImageTag(rm, oControl, "sapMShellBG",  oControl.getBackgroundImage(), oControl.getBackgroundRepeat(), oControl.getBackgroundOpacity());
	
	rm.write("<div class='sapMShellBrandingBar'></div>");
	
	
	
	// header
	rm.write("<header class='sapMShellHeader'>");
	
	// logo
	var sImage = oControl.getLogo(); // configured logo
	if (!sImage) {
		jQuery.sap.require("sap.ui.core.theming.Parameters");
		sImage = sap.ui.core.theming.Parameters.get('sapUiGlobalLogo'); // theme logo
		if (sImage) {
			var match = /url[\s]*\('?"?([^\'")]*)'?"?\)/.exec(sImage);
			if (match) {
				sImage = match[1];
			} else if (sImage === "''"){ // theme default
				sImage = null;
			}
		}
	}
	
	if (sImage) {
		rm.write("<div class='sapMShellLogo'>");
		if (jQuery.browser.msie) {
			rm.write("<span class='sapMShellLogoImgAligner'></span>");
		}
		rm.write("<img id='" + oControl.getId() + "-logo' class='sapMShellLogoImg' src='");
		rm.writeEscaped(sImage);
		rm.write("' /></div>");
	}
	
	// header title
	rm.write("<h1 id='" + oControl.getId() + "-hdrTxt' class='sapMShellHeaderText'>");
	rm.writeEscaped(oControl.getTitle());
	rm.write("</h1>");
	
	// header right area
	rm.write("<span class='sapMShellHeaderRight'>");
	
	// headerRightText
	if (oControl.getHeaderRightText()) {
		rm.write("<span class='sapMShellHeaderRightText'>" + oControl.getHeaderRightText() + "</span>");
	}
	
	// logout button
	if (oControl.getShowLogout()) {
		var rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");
		rm.write("<a id='" + oControl.getId() + "-logout' tabindex='0' role='button' class='sapMShellHeaderLogout'>" + rb.getText("SHELL_LOGOUT") + "</a>");
	}
	
	rm.write("</span></header>");
	
	
	
	// content
	rm.write("<section class='sapMShellContent' id='" + oControl.getId() + "-content'>");

	rm.renderControl(oControl.getApp());
	
	rm.write("</section></div>");
};

}; // end of sap.m.ShellRenderer
if ( !jQuery.sap.isDeclared('sap.m.SliderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SliderRenderer");

/**
 * @class Slider renderer.
 * @static
 */
sap.m.SliderRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oSlider an object representation of the slider that should be rendered
 */
sap.m.SliderRenderer.render = function(oRm, oSlider) {
	var fMin = oSlider.getMin(),
		fMax = oSlider.getMax(),
		fStep = oSlider.getStep(),
		sName = oSlider.getName(),
		bEnabled = oSlider.getEnabled();

	// avoid render when not visible
	if (!oSlider.getVisible()) {
		return;
	}

	oRm.write("<div");
	oRm.addClass("sapMSliCont");

	if (!bEnabled) {
		oRm.addClass("sapMSliContDisabled");
	} else {
		oRm.addClass("sapMPointer");
	}

	oRm.addStyle("width", oSlider.getWidth());
	oRm.addStyle("visibility", "hidden");
	oRm.writeClasses();
	oRm.writeStyles();
	oRm.writeControlData(oSlider);
	var sTooltip = oSlider.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	oRm.write(">");

		oRm.write('<div');
			oRm.addClass("sapMSli");

			if (!bEnabled) {
				oRm.addClass("sapMSliDisabled");
			}

			oRm.writeClasses();
			oRm.writeStyles();

			oRm.write(">");

			if (oSlider.getProgress()) {
				oRm.write('<div class="sapMSliProgress" style="width: ' +  oSlider._fProgressValue + '%"></div>');
			}

			// start render slider handle
			oRm.write('<span class="sapMSliHandle"');
				oRm.addStyle("left", oSlider._fProgressValue + "%");
				oRm.writeStyles();
			oRm.write('><span class="sapMSliHandleInner"></span></span>');
			// end render slider handle
		oRm.write("</div>");

		// start render input range for screen readers
		oRm.write('<input type="range" class="sapMSliInput"');

			if (!bEnabled) {
				oRm.write("disabled");
			}

			if (sName !== "") {
				oRm.writeAttributeEscaped("name", sName);
			}

			oRm.writeAttribute("min", fMin);
			oRm.writeAttribute("max", fMax);
			oRm.writeAttribute("step", fStep);
			oRm.writeAttribute("value", oSlider.getValue());
		oRm.write("/>");
		// end render input range for screen readers

	oRm.write("</div>");
};
}; // end of sap.m.SliderRenderer
if ( !jQuery.sap.isDeclared('sap.m.SplitAppRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

 
jQuery.sap.declare("sap.m.SplitAppRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class SplitApp renderer. 
 * @static
 */
sap.m.SplitAppRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.SplitAppRenderer.render = function(rm, oControl){
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapMSplitApp");
	
	sap.m.BackgroundHelper.addBackgroundColorStyles(rm, oControl.getBackgroundColor(),  oControl.getBackgroundImage());
	
	if(!jQuery.device.is.phone) {
		if(jQuery.device.is.portrait) {
			rm.addClass("sapMSplitAppPortrait");
		}
		switch(oControl.getMode()) {
			case "ShowHideMode":
				rm.addClass("sapMSplitAppShowHide");
				break;
			case "StretchCompress":
				rm.addClass("sapMSplitAppStretchCompress");
				break;
			case "PopoverMode":
				rm.addClass("sapMSplitAppPopover");
				break;
		}
	}
	rm.writeClasses();
	rm.writeStyles();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">"); // div element
	
	sap.m.BackgroundHelper.renderBackgroundImageTag(rm, oControl, "sapMAppBG",  oControl.getBackgroundImage(), oControl.getBackgroundRepeat(), oControl.getBackgroundOpacity());
	
	if(!jQuery.device.is.phone) {
		if(oControl.getMode() === "PopoverMode" && jQuery.device.is.portrait) {
			oControl._oDetailNav.addStyleClass("sapMSplitAppDetail");
			rm.renderControl(oControl._oDetailNav);
			//add master to popover if it's not yet added
			if(oControl._oPopOver.getContent().length === 0){
				oControl._oPopOver.addAggregation("content", oControl._oMasterNav, true);
			}
		} else {
			oControl._oMasterNav.addStyleClass("sapMSplitAppMaster");
			rm.renderControl(oControl._oMasterNav);
			
			oControl._oDetailNav.addStyleClass("sapMSplitAppDetail");
			rm.renderControl(oControl._oDetailNav);
		}
	}else {
		oControl._oMasterNav.addStyleClass("sapMSplitAppMobile");
		rm.renderControl(oControl._oMasterNav);
	}
	
	 rm.write("</div>");
};
}; // end of sap.m.SplitAppRenderer
if ( !jQuery.sap.isDeclared('sap.m.StandardListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.StandardListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class StandardListItem renderer.
 * @static
 */
sap.m.StandardListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.StandardListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMSLI");		
	if(oLI._showSeparators  == sap.m.ListSeparators.None && !oLI.getIconInset()){
		rm.addClass("sapMSLIShowSeparatorNoneThumb");
		rm.addClass("sapMSLIShowSeparatorNone");
	}
	if(oLI.getIcon())
		rm.addClass("sapMSLIIcon");
	if(!oLI.getIconInset())
		rm.addClass("sapMSLIIconThumb");
	if(oLI.getDescription() && oLI.getIcon() &&  oLI.getIconInset())
		rm.addClass("sapMSLIDescIcon");
	if(oLI.getDescription() && !oLI.getIcon())
		rm.addClass("sapMSLIDescNoIcon");
	if(!oLI.getDescription() && oLI.getIcon())
		rm.addClass("sapMSLINoDescIcon");
	if(!oLI.getDescription() && !oLI.getIcon())
		rm.addClass("sapMSLINoDescNoIcon");
	if(oLI.getType() == sap.m.ListType.Detail || oLI.getType() == sap.m.ListType.DetailAndActive)
		rm.addClass("sapMSLIDetail");
	
};

sap.m.StandardListItemRenderer.renderLIContent = function(rm, oLI) {

	// image
	if (oLI.getIcon()) {
		if (oLI.getIconInset()) {
			var oList = sap.ui.getCore().byId(oLI._listId);
			if(oList && oList.getMode() == sap.m.ListMode.None &! oList.getShowUnread()){
				rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapMSLIImgFirst", oLI.getIcon(), oLI.getIconDensityAware()));
			}
			else{
				rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapMSLIImg", oLI.getIcon(), oLI.getIconDensityAware()));
			}
		} else {
			rm.renderControl(oLI._getImage((oLI.getId() + "-img"), "sapMSLIImgThumb", oLI.getIcon(), oLI.getIconDensityAware()));
		}
	}

	var isDescription = oLI.getTitle() && oLI.getDescription() || (oLI._showSeparators  == sap.m.ListSeparators.None && !oLI.getIconInset());
	var isInfo = oLI.getInfo();

	if (isDescription) {
		rm.write("<div");
		rm.addClass("sapMSLIDiv");
		rm.writeClasses();
		rm.write(">");
	}

	rm.write("<div");
	if (!isDescription){
		rm.addClass("sapMSLIDiv");
	} 
	rm.addClass("sapMSLITitleDiv");
	rm.writeClasses();
	rm.write(">");
	// List item text (also written when no title for keeping the space)
	rm.write("<div");
	if (isDescription) {
		rm.addClass("sapMSLITitle");
	} else {
		rm.addClass("sapMSLITitleOnly");
	}
	rm.writeClasses();
	rm.write(">");
	rm.writeEscaped(oLI.getTitle());
	rm.write("</div>");
	
	//info div top when @sapUiInfoTop: true;
	if(isInfo && (sap.ui.core.theming.Parameters.get("sapUiInfoTop") == "true" || !isDescription)){
		rm.write("<div");
		rm.writeAttribute("id", oLI.getId() + "-info");
		rm.addClass("sapMSLIInfo");
		if(oLI._showSeparators == sap.m.ListSeparators.None && oLI.getInfoState() == sap.ui.core.ValueState.None)
			rm.addClass("sapMSLIInfo" + oLI.getInfoState() + "ShowSeparatorNone");
		else
			rm.addClass("sapMSLIInfo" + oLI.getInfoState());
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(isInfo);
		rm.write("</div>");
	}

	rm.write("</div>");

	rm.write("<div");
	rm.addClass("sapMSLIDescriptionDiv");
	rm.writeClasses();
	rm.write(">");

	// List item text
	if (isDescription) {
		rm.write("<div");
		rm.addClass("sapMSLIDescription");
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oLI.getDescription());
		rm.write("</div>");
	}
	
		if(isInfo && sap.ui.core.theming.Parameters.get("sapUiInfoTop") == "false" && isDescription){
		rm.write("<div");
		rm.writeAttribute("id", oLI.getId() + "-info");
		rm.addClass("sapMSLIInfo");
		if(oLI._showSeparators == sap.m.ListSeparators.None && oLI.getInfoState() == sap.ui.core.ValueState.None)
			rm.addClass("sapMSLIInfo" + oLI.getInfoState() + "ShowSeparatorNone");
		else
			rm.addClass("sapMSLIInfo" + oLI.getInfoState());
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(isInfo);
		rm.write("</div>");
	}
	rm.write("</div>");
	
	if (isDescription) {
		rm.write("</div>");
	}

};

}; // end of sap.m.StandardListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.Support') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.Support");

/**
 * @class
 * <code>sap.m.Support</code> shows the technical information for SAPUI5 Mobile Applications.
 * This technical information includes
 *  * SAPUI5 Version
 *  * User Agent
 *  * Configurations (Bootstrap and Computed)
 *  * URI parameters
 *  * All loaded module names
 *
 * In order to show the device information, the user must follow the following gestures.
 * 	1 - Hold the device in "landscape" mode
 * 	2 - Tap on any element (possibly element which does not have touch event e.g text or header (because of the stopPropagation))
 * 	3 - Hold finger minimum 2 seconds, up to 5 seconds
 * 	4 - Change device rotation to "portrait" mode
 *  5 - Release finger
 *
 * NOTE: This class is internal and all its functions must not be used by an application
 *
 * As <code>sap.m.Support</code> is a static class, a <code>jQuery.sap.require("sap.m.Support");</code>
 * statement must be implicitly executed before the class is used.
 *
 * Enable Support:
 * <pre>
 * //import library
 * jQuery.sap.require("sap.m.Support");
 *
 * //By default after require, support is enabled but implicitly we can call
 * sap.m.Support.on();
 * </pre>
 *
 * Disable Support:
 * <pre>
 * sap.m.Support.off();
 * </pre>
 *
 * @author SAP AG
 * @since 1.11.0
 *
 * @static
 * @protected
 * @namespace
 * @name sap.m.Support
 */
sap.m.Support = (function($, document) {

	var dialog,
		startTime,
		isEventRegistered,
		timeMinLimit = 2000,
		timeMaxLimit = 5000,
		orientations = {
		    start : "landscape",
		    end : "portrait"
		};

	// copied from core
	function line(buffer, right, border, label, content) {
		buffer.push("<tr><td class='sapUiSupportTechInfoBorder'><label class='sapUiSupportLabel'>", jQuery.sap.escapeHTML(label), "</label><br>");
		var ctnt = content;
		if ($.isFunction(content)) {
			ctnt = content(buffer) || "";
		}
		buffer.push($.sap.escapeHTML(ctnt));
		buffer.push("</td></tr>");
	}

	// copied from core
	function multiline(buffer, right, border, label, content) {
		line(buffer, right, border, label, function(buffer) {
			buffer.push("<table border='0' cellspacing='5' cellpadding='5' width='100%'>");
			$.each(content, function(i, v) {
				var val = "";
				if (v) {
					if (typeof(v) == "string" || typeof(v) == "boolean" || ($.isArray(v) && v.length == 1)) {
						val = v;
					} else if(($.isArray(v) || $.isPlainObject(v)) && window.JSON) {
						val = window.JSON.stringify(v);
					}
				}
				line(buffer, false, false, i, "" + val);
			});
			buffer.push("</table>");
		});
	}

	// copied from core
	function getTechnicalContent() {
		var html = "",
			oConfig = sap.ui.getCore().getConfiguration(),
			oData = {
				version: sap.ui.version,
				build: sap.ui.buildinfo.buildtime,
				change: sap.ui.buildinfo.lastchange,
				useragent: navigator.userAgent,
				docmode: document.documentMode ||  "",
				debug: $.sap.debug(),
				bootconfig: window["sap-ui-config"] || {},
				modules: $.sap.getAllDeclaredModules(),
				uriparams: $.sap.getUriParameters().mParams,
				appurl: window.location.href,
				config: {
					theme: oConfig.getTheme(),
					language: oConfig.getLanguage(),
					formatLocale: oConfig.getFormatLocale(),
					accessibility: "" + oConfig.getAccessibility(),
					animation: "" + oConfig.getAnimation(),
					rtl: "" + oConfig.getRTL(),
					debug: "" + oConfig.getDebug(),
					inspect: "" + oConfig.getInspect(),
					originInfo: "" + oConfig.getOriginInfo(),
					noDuplicateIds: "" + oConfig.getNoDuplicateIds()
				}
			};

		html = ["<table border='0' cellspacing='5' cellpadding='5' width='100%'"];
		line(html, true, true, "SAPUI5 Version", function(buffer){
			buffer.push(oData.version, " (build at ", oData.build, ", last change ", oData.change, ")");
		});
		line(html, true, true, "User Agent", function(buffer) {
			buffer.push(oData.useragent, (oData.docmode ? ", Document Mode '" + oData.docmode + "'" : ""));
		});
		line(html, true, true, "Debug Sources", function(buffer) {
			buffer.push((oData.debug ? "ON" : "OFF") );
		});
		line(html, true, true, "Application", oData.appurl);
		multiline(html, true, true, "Configuration (bootstrap)", oData.bootconfig);
		multiline(html, true, true, "Configuration (computed)", oData.config);
		multiline(html, true, true, "URI Parameters", oData.uriparams);
		line(html, true, true, "Loaded Modules (" + oData.modules.length + ")", function(buffer) {
			buffer.push("<ul>");
			$.each(oData.modules.sort(), function(i, v) {
				if (v.indexOf("sap.ui.core.support") < 0) {
					buffer.push("<li>", v, "</li>");
				}
			});
			buffer.push("</ul>");
		});
		html.push("</table>");

		return new sap.ui.core.HTML({
			content : html.join("")
		});
	}

	// get or create dialog instance and return
	function getDialog() {
		if (dialog) {
			return dialog;
		}

		$.sap.require("sap.m.Dialog");
		$.sap.require("sap.m.Button");
		$.sap.require("sap.ui.core.HTML");

		dialog = new sap.m.Dialog({
			title : "Technical Information",
			content : new sap.m.ScrollContainer({
				horizontal : true,
				vertical : true
			}),
			leftButton : new sap.m.Button({
				text : "Close",
				type : "Reject",
				tap : function() {
					dialog.close();
				}
			}),
			afterOpen : function() {
				sap.m.Support.off();
			},
			afterClose : function() {
				sap.m.Support.on();
			}
		}).addStyleClass("sapMSupport");

		// set width as much as possible
		dialog._setDimensions = function() {
			var width = $(window).width() * (($.device.is.tablet || $.device.is.desktop) ? 0.8 : 1);
			sap.m.Dialog.prototype._setDimensions.call(dialog);
			dialog.$().css({
				width : width,
				minWidth: width,
				maxWidth : width,
				height : "100%"
			});
		};

		return dialog;
	}

	function onTouchStart() {
		var orientation = $.event.special.orientationchange.orientation();
		if (orientation == orientations.start) {
			startTime = +new Date();
			document.addEventListener('touchend', onTouchEnd);
		}
	}

	function onTouchEnd() {
		var timeDiff = new Date() - startTime,
			orientation = $.event.special.orientationchange.orientation();

		document.removeEventListener('touchend', onTouchEnd);
		if (orientation == orientations.end && timeDiff > timeMinLimit && timeDiff < timeMaxLimit) {
			show();
		}
	}

	function show() {
		var container = getDialog().getContent()[0];
		container.removeAllAggregation("content");
		container.addAggregation("content", getTechnicalContent());
		dialog.open();
	}

	return ({
		/**
		 * Enables support.
		 *
		 * @return {object} sap.m.Support
		 * @protected
		 * @name sap.m.Support.on
		 * @function
		 */
		on : function() {
			if (!isEventRegistered && "ontouchstart" in document) {
				isEventRegistered = true;
				document.addEventListener("touchstart", onTouchStart);
			}
			return this;
		},

		/**
		 * Disables support.
		 *
		 * @return {object} sap.m.Support
		 * @protected
		 * @name sap.m.Support.off
		 * @function
		 */
		off : function() {
			if (isEventRegistered) {
				isEventRegistered = false;
				document.removeEventListener("touchstart", onTouchStart);
			}
			return this;
		}
	}).on();

}(jQuery, document));
}; // end of sap.m.Support
if ( !jQuery.sap.isDeclared('sap.m.SwitchRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.SwitchRenderer");

/**
 * @class Switch renderer.
 * @static
 */
sap.m.SwitchRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oSwitch an object representation of the control that should be rendered
 */
sap.m.SwitchRenderer.render = function(oRm, oSwitch) {
	var bState = oSwitch.getState(),
		sState = bState ? oSwitch._sOn : oSwitch._sOff,
		sTooltip = oSwitch.getTooltip_AsString(),
		sType = oSwitch.getType(),
		bDefault = (sType === "Default"),
		bEnabled = oSwitch.getEnabled();

	// suppress rendering if not visible
	if (!oSwitch.getVisible()) {
		return;
	}

	oRm.write('<div');
	oRm.addClass("sapMSwtCont");

	if (!bEnabled) {
		oRm.addClass("sapMSwtContDisabled");
	}

	oRm.writeClasses();
	oRm.writeStyles();
	oRm.writeControlData(oSwitch);

	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}

	oRm.write(">");

		oRm.write("<div");
		oRm.addClass("sapMSwt");
		bState ? oRm.addClass("sapMSwtOn") : oRm.addClass("sapMSwtOff");
		oRm.addClass("sapMSwt" + sType);

		if (!bEnabled) {
			oRm.addClass("sapMSwtDisabled");
		}

		oRm.writeClasses();
		oRm.write('>');
			oRm.write('<div class="sapMSwtInner">');

				// on
				oRm.write('<div class="sapMSwtText sapMSwtTextOn">');
					oRm.write("<span>");
						if (bDefault) {
							oRm.writeEscaped(oSwitch._sOn);
						}
					oRm.write("</span>");
				oRm.write("</div>");

				// off
				oRm.write('<div class="sapMSwtText sapMSwtTextOff">');
					oRm.write("<span>");
						if (bDefault) {
							oRm.writeEscaped(oSwitch._sOff);
						}
					oRm.write("</span>");
				oRm.write("</div>");

				// handle
				oRm.write('<div class="sapMSwtHandle"');
				oRm.writeAttribute("data-sap-ui-swt", sState);
				oRm.write("></div>");

			oRm.write("</div>");

		oRm.write("</div>");

		// checkbox
		oRm.write('<input type="checkbox"');

		if (oSwitch.getName() !== "") {
			oRm.writeAttributeEscaped("name", oSwitch.getName());
		}

		oRm.writeAttribute("id", oSwitch.getId() + "-input");

		if (bState) {
			oRm.writeAttribute("checked", "checked");
		}

		if (!bEnabled) {
			oRm.writeAttribute("disabled", "disabled");
		}

		oRm.writeAttribute("value", sState);
		oRm.write(">");

	oRm.write("</div>");
};
}; // end of sap.m.SwitchRenderer
if ( !jQuery.sap.isDeclared('sap.m.TextAreaRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.TextAreaRenderer");

/**
 * @class TextArea renderer.
 * @static
 */
sap.m.TextAreaRenderer = {};


/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oTextArea an object representation of the control that should be
 *            rendered
 */

sap.m.TextAreaRenderer.render = function(oRm, oTextArea) {
	// To inherit all styles from input
	var sRootClass = "sapMInputBase";
	
	// if not visible then do not render	
	if (!oTextArea.getVisible()) {
		return;
	}
	
	// write control data for parent div
	oRm.write("<div ");
	oRm.writeControlData(oTextArea);
	!oTextArea.getEnabled() && oRm.addClass(sRootClass + "Disabled");
	oTextArea.getValueState() != "None" && oRm.addClass(sRootClass + oTextArea.getValueState());
	oTextArea.getWidth() && oRm.addStyle("width", oTextArea.getWidth()) && oRm.writeStyles();
	oRm.addClass(sRootClass + " sapMTextArea");
	oRm.writeClasses();
	oRm.write(">");
	
	// write attributes
	oRm.write("<textarea id=" + oTextArea.getId() + "-inner");
	oRm.writeAttribute("rows", oTextArea.getRows());
	oRm.writeAttribute("cols", oTextArea.getCols());
	!oTextArea.getEnabled() && oRm.writeAttribute ("disabled", "disabled");
	oTextArea.getEnabled() && !oTextArea.getEditable() && oRm.writeAttribute("readonly", "readonly");
	oTextArea.getMaxLength() > 0 && oRm.writeAttribute("maxlength", oTextArea.getMaxLength());
	oTextArea.getPlaceholder() && oRm.writeAttributeEscaped("placeholder", oTextArea.getPlaceholder());
	oTextArea.getWrapping() && oTextArea.getWrapping() != "None" && oRm.writeAttribute("wrap", oTextArea.getWrapping());
	
	// do styling
	oRm.addClass(sRootClass + "Inner sapMTextAreaInner");
	oTextArea.getValueState() != "None" && oRm.addClass(sRootClass + oTextArea.getValueState() + "Inner");
	!oTextArea.getEditable() && oRm.addClass(sRootClass + "ReadonlyInner");
	oTextArea.getHeight() && oRm.addStyle("height", oTextArea.getHeight());
	oTextArea.getWidth() && oRm.addStyle("width", "100%");
	oRm.writeClasses();
	oRm.writeStyles();	
	oRm.write(">");
	oRm.writeEscaped(oTextArea.getValue());
	oRm.write("</textarea></div>");
};

}; // end of sap.m.TextAreaRenderer
if ( !jQuery.sap.isDeclared('sap.m.TextRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.m.Text
jQuery.sap.declare("sap.m.TextRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Text renderer
 * @author SAP AG
 * @static
 */
sap.m.TextRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oText An object representation of the control that should be rendered.
 */
sap.m.TextRenderer.render = function(oRenderManager, oText) {
	// return immediately if control is invisible
	if (!oText.getVisible()) {
		return;
	}

	var rm = oRenderManager;

	// add styles for non-wrapping
	if(!oText.getWrapping()){
		rm.addStyle("white-space", "nowrap");
		rm.addStyle("overflow", "hidden");
		rm.addStyle("text-overflow", "ellipsis");
	}

	// add styles for width
	if (oText.getWidth() && oText.getWidth() != '') {
		rm.addStyle("width", oText.getWidth());
	}

	// start writing html
	rm.write("<span");
	rm.writeControlData(oText);
	rm.addClass("sapMText");

	// write direction
	var oTextDir = oText.getTextDirection();
	if (oTextDir) {
		rm.writeAttribute("dir", oTextDir);
	}

	// write alignment
	var oTextAlign = oText.getTextAlign();
	if (oTextAlign) {
		rm.addStyle("text-align", sap.m.TextRenderer.getTextAlign(oTextAlign, oTextDir));
	}

	// finish writing html
	rm.writeClasses();
	rm.writeStyles();
	var sTooltip = oText.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	rm.writeEscaped(oText.getText(), true);
	rm.write("</span>");
};

/**
 * Dummy inheritance of static methods/functions.
 * @see sap.ui.core.Renderer.getTextAlign
 * @private
 */
sap.m.TextRenderer.getTextAlign = sap.ui.core.Renderer.getTextAlign;
}; // end of sap.m.TextRenderer
if ( !jQuery.sap.isDeclared('sap.m.TileContainerRenderer') ) {

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.TileContainerRenderer");

/**
 * @class Bar renderer. 
 * @static
 */
sap.m.TileContainerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.TileContainerRenderer.render = function(rm, oControl) { 

	rm.write("<div tabindex=\"0\""); 
	rm.writeControlData(oControl);
	rm.addStyle("height",oControl.getWidth());
	rm.addStyle("width",oControl.getHeight());
	rm.addStyle("visibility","hidden");
	rm.writeStyles();
	rm.addClass("sapMTC");
	rm.writeClasses();
	rm.write(" >");
	rm.write("<div id=\""+ oControl.getId()+"-scrl\" class=\"sapMTCScrl\" style=\"overflow:hidden;height:0px\" >");
	rm.write("<div id=\""+ oControl.getId()+"-blind\" class=\"sapMTCBlind\"></div>");
	rm.write("<div id=\""+ oControl.getId()+"-cnt\" class=\"sapMTCCnt sapMTCAnim\" style=\"height:0px\">");
	var aTiles = oControl.getTiles();
	for (var i=0;i<aTiles.length;i++) {
		rm.renderControl(aTiles[i]);
	}
	rm.write("</div>");
	rm.write("</div>");
	rm.write("<div id=\""+ oControl.getId()+"-pager\" class=\"sapMTCPager\">"); 
	rm.write("</div>");
	rm.write("<div id=\""+ oControl.getId()+"-leftedge\" class=\"sapMTCEdgeLeft\"></div>"); 
	rm.write("<div id=\""+ oControl.getId()+"-rightedge\" class=\"sapMTCEdgeRight\"></div>"); 
	rm.write("<div id=\""+ oControl.getId()+"-leftscroller\" class=\"sapMTCScroller sapMTCLeft\"><div class=\"sapMTCInner\"></div></div>"); 
	rm.write("<div id=\""+ oControl.getId()+"-rightscroller\" class=\"sapMTCScroller sapMTCRight\"><div class=\"sapMTCInner\"></div></div>"); 
	rm.write("</div>");
};
}; // end of sap.m.TileContainerRenderer
if ( !jQuery.sap.isDeclared('sap.m.TileGroupRenderer') ) {

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.TileGroupRenderer");

/**
 * @class Bar renderer. 
 * @static
 */
sap.m.TileGroupRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.TileGroupRenderer.render = function(rm, oControl) { 

	rm.write('<div '); 
	rm.writeControlData(oControl);
	rm.addStyle("height",oControl.getWidth());
	rm.addStyle("width",oControl.getHeight());
	rm.writeStyles();
	rm.writeClasses();
	rm.write(">");
	rm.write("</div>");
		
};

}; // end of sap.m.TileGroupRenderer
if ( !jQuery.sap.isDeclared('sap.m.TilePageRenderer') ) {

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.TilePageRenderer");

/**
 * @class TilePage renderer. 
 * @static
 */
sap.m.TilePageRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */

sap.m.TilePageRenderer = sap.ui.core.Renderer.extend(sap.m.PageRenderer);
//sap.m.TilePageRenderer.render = function(rm, oControl) { 

//			rm.write('<div '); 
//			rm.writeControlData(oControl);
//			rm.addClass('sapMTCP')
//			rm.writeClasses();
//			rm.write(">");
			
//			this.getTiles().forEach(rm.renderControl);
			
//			rm.write("</div>");

//};

}; // end of sap.m.TilePageRenderer
if ( !jQuery.sap.isDeclared('sap.m.TileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

// Provides default renderer for control sap.m.Text
jQuery.sap.declare("sap.m.TileRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class Text renderer
 * @author SAP AG
 * @static
 */
sap.m.TileRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * @param {sap.ui.core.RenderManager} oRenderManager The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.ui.core.Control} oControl An object representation of the control that should be rendered.
 */
sap.m.TileRenderer.render = function(rm, oControl) {
	rm.write("<div tabindex=\"-1\"");
	rm.writeControlData(oControl);
	rm.addClass("sapMTile");
	rm.addClass("sapMPointer");
    rm.writeClasses();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		rm.writeAttributeEscaped("title", sTooltip);
	}
	rm.write(">");
	if (oControl.getRemovable()) {
		rm.write("<div id=\"" + oControl.getId() + "-remove\" class=\"sapMTCRemove\"></div>");
	} else {
		rm.write("<div id=\"" + oControl.getId() + "-remove\" class=\"sapMTCNoRemove\"></div>");
	}
	rm.write("<div class=\"sapMTileContent\">");
	this._renderContent(rm,oControl);
	rm.write("</div></div>");
};


sap.m.TileRenderer._renderContent = function(rm, oControl) {
};


}; // end of sap.m.TileRenderer
if ( !jQuery.sap.isDeclared('sap.m.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.m (1.12.1)
 */
jQuery.sap.declare("sap.m.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAPUI5 library with controls specialized for mobile devices.
 *
 * @namespace
 * @name sap.m
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.m",
  dependencies : ["sap.ui.core"],
  types: [
    "sap.m.ButtonType",
    "sap.m.DateTimeInputType",
    "sap.m.DialogType",
    "sap.m.FlexAlignItems",
    "sap.m.FlexAlignSelf",
    "sap.m.FlexDirection",
    "sap.m.FlexJustifyContent",
    "sap.m.FlexRendertype",
    "sap.m.InputType",
    "sap.m.LabelDesign",
    "sap.m.ListHeaderDesign",
    "sap.m.ListMode",
    "sap.m.ListSeparators",
    "sap.m.ListType",
    "sap.m.PageBackgroundDesign",
    "sap.m.PlacementType",
    "sap.m.ScreenSize",
    "sap.m.SplitAppMode",
    "sap.m.StandardTileType",
    "sap.m.SwipeDirection",
    "sap.m.SwitchType"
  ],
  interfaces: [
    "sap.m.IconTab"
  ],
  controls: [
    "sap.m.ActionListItem",
    "sap.m.ActionSheet",
    "sap.m.App",
    "sap.m.Bar",
    "sap.m.BusyDialog",
    "sap.m.BusyIndicator",
    "sap.m.Button",
    "sap.m.Carousel",
    "sap.m.CheckBox",
    "sap.m.ColumnListItem",
    "sap.m.CustomListItem",
    "sap.m.CustomTile",
    "sap.m.DateTimeInput",
    "sap.m.Dialog",
    "sap.m.DisplayListItem",
    "sap.m.FeedListItem",
    "sap.m.FlexBox",
    "sap.m.GroupHeaderListItem",
    "sap.m.GrowingList",
    "sap.m.HBox",
    "sap.m.IconTabBar",
    "sap.m.Image",
    "sap.m.Input",
    "sap.m.InputBase",
    "sap.m.InputListItem",
    "sap.m.Label",
    "sap.m.Link",
    "sap.m.List",
    "sap.m.ListItemBase",
    "sap.m.NavContainer",
    "sap.m.ObjectAttribute",
    "sap.m.ObjectHeader",
    "sap.m.ObjectIdentifier",
    "sap.m.ObjectListItem",
    "sap.m.ObjectNumber",
    "sap.m.ObjectStatus",
    "sap.m.Page",
    "sap.m.Popover",
    "sap.m.PullToRefresh",
    "sap.m.RadioButton",
    "sap.m.ScrollContainer",
    "sap.m.SearchField",
    "sap.m.SegmentedButton",
    "sap.m.Select",
    "sap.m.Shell",
    "sap.m.Slider",
    "sap.m.SplitApp",
    "sap.m.StandardListItem",
    "sap.m.StandardTile",
    "sap.m.Switch",
    "sap.m.Text",
    "sap.m.TextArea",
    "sap.m.Tile",
    "sap.m.TileContainer",
    "sap.m.TileGroup",
    "sap.m.TilePage",
    "sap.m.VBox"
  ],
  elements: [
    "sap.m.Column",
    "sap.m.FlexItemData",
    "sap.m.IconTabFilter",
    "sap.m.IconTabSeparator"
  ],
  version: "1.12.1"});

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ButtonType.
jQuery.sap.declare("sap.m.ButtonType");

/**
 * @class Different types for a button (predefined types)
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.ButtonType = {
  
    /**
     * default type (no special styling) 
     * @public
     */
    Default : "Default",

    /**
     * back type (back navigation button for header) 
     * @public
     */
    Back : "Back",

    /**
     * accept type (blue button) 
     * @public
     */
    Accept : "Accept",

    /**
     * reject style (red button) 
     * @public
     */
    Reject : "Reject",

    /**
     * transparent type 
     * @public
     */
    Transparent : "Transparent",

    /**
     * up type (up navigation button for header) 
     * @public
     */
    Up : "Up",

    /**
     * Unstyled type (no styling) 
     * @public
     */
    Unstyled : "Unstyled",

    /**
     * emphasized type 
     * @public
     */
    Emphasized : "Emphasized"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.DateTimeInputType.
jQuery.sap.declare("sap.m.DateTimeInputType");

/**
 * @class A subset of DateTimeInput types that fit to a simple API returning one string.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.DateTimeInputType = {
  
    /**
     * An input control for specifying a date value. The user can select a month, day of the month, and year. 
     * @public
     */
    Date : "Date",

    /**
     * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day. 
     * @public
     */
    DateTime : "DateTime",

    /**
     * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM. 
     * @public
     */
    Time : "Time"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.DialogType.
jQuery.sap.declare("sap.m.DialogType");

/**
 * @class Enum for the type of sap.m.Dialog control.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.DialogType = {
  
    /**
     * This is the default value for Dialog type. Stardard dialog in iOS has a header on the top and the left, right buttons are put inside the header. In android, the left, right buttons are put to the bottom of the Dialog. 
     * @public
     */
    Standard : "Standard",

    /**
     * Dialog with type Message looks the same as the Stardard Dialog in Android. And it puts the left, right buttons to the bottom of the Dialog in iOS. 
     * @public
     */
    Message : "Message"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexAlignItems.
jQuery.sap.declare("sap.m.FlexAlignItems");

/**
 * @class Available options for the layout of all elements along the cross axis of the flexbox layout.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.FlexAlignItems = {
  
    /**
     * The cross-start margin edges of the box items are placed flush with the cross-start edge of the line. 
     * @public
     */
    Start : "Start",

    /**
     * The cross-start margin edges of the box items are placed flush with the cross-end edge of the line. 
     * @public
     */
    End : "End",

    /**
     * The box items' margin boxes are centered in the cross axis within the line. 
     * @public
     */
    Center : "Center",

    /**
     * If the box items' inline axes are the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line. 
     * @public
     */
    Baseline : "Baseline",

    /**
     * Make the cross size of the items' margin boxes as close to the same size as the line as possible. 
     * @public
     */
    Stretch : "Stretch",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexAlignSelf.
jQuery.sap.declare("sap.m.FlexAlignSelf");

/**
 * @class Available options for the layout of individual elements along the cross axis of the flexbox layout overriding the default alignment.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.FlexAlignSelf = {
  
    /**
     * Takes up the value of alignItems from the parent FlexBox 
     * @public
     */
    Auto : "Auto",

    /**
     * The cross-start margin edges of the box item is placed flush with the cross-start edge of the line. 
     * @public
     */
    Start : "Start",

    /**
     * The cross-start margin edges of the box item is placed flush with the cross-end edge of the line. 
     * @public
     */
    End : "End",

    /**
     * The box item's margin box is centered in the cross axis within the line. 
     * @public
     */
    Center : "Center",

    /**
     * If the box item's inline axis is the same as the cross axis, this value is identical to ?start?. Otherwise, it participates in baseline alignment: all participating box items on the line are aligned such that their baselines align, and the item with the largest distance between its baseline and its cross-start margin edge is placed flush against the cross-start edge of the line. 
     * @public
     */
    Baseline : "Baseline",

    /**
     * Make the cross size of the item's margin box as close to the same size as the line as possible. 
     * @public
     */
    Stretch : "Stretch",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexDirection.
jQuery.sap.declare("sap.m.FlexDirection");

/**
 * @class Available directions for flex layouts.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.FlexDirection = {
  
    /**
     * Elements are layed out along the direction of the inline axis (text direction). 
     * @public
     */
    Row : "Row",

    /**
     * Elements are layed out along the direction of the block axis (usually top to bottom). 
     * @public
     */
    Column : "Column",

    /**
     * Elements are layed out along the reverse direction of the inline axis (against the text direction). 
     * @public
     */
    RowReverse : "RowReverse",

    /**
     * Elements are layed out along the reverse direction of the block axis (usually bottom to top). 
     * @public
     */
    ColumnReverse : "ColumnReverse",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexJustifyContent.
jQuery.sap.declare("sap.m.FlexJustifyContent");

/**
 * @class Available options for the layout of elements along the main axis of the flexbox layout.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.FlexJustifyContent = {
  
    /**
     * Box items are packed toward the start of the line. 
     * @public
     */
    Start : "Start",

    /**
     * Box items are packed toward the end of the line. 
     * @public
     */
    End : "End",

    /**
     * Box items are packed toward the center of the line. 
     * @public
     */
    Center : "Center",

    /**
     * Box items are evenly distributed in the line. 
     * @public
     */
    SpaceBetween : "SpaceBetween",

    /**
     * Box items are evenly distributed in the line, with half-size spaces on either end. 
     * @public
     */
    SpaceAround : "SpaceAround",

    /**
     * Inherits the value from its parent. 
     * @public
     */
    Inherit : "Inherit"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.FlexRendertype.
jQuery.sap.declare("sap.m.FlexRendertype");

/**
 * @class Determines the type of HTML elements used for rendering controls.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.FlexRendertype = {
  
    /**
     * DIV elements are used for rendering 
     * @public
     */
    Div : "Div",

    /**
     * Unordered lists are used for rendering. 
     * @public
     */
    List : "List"

  };
  
/**
 * 
 *   Marker interface for controls which are suitable as items for the IconTabBar.
 *   These controls must implement a method isSelectable().
 *   
 *
 * @name sap.m.IconTab
 * @interface
 * @public
 */

/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.InputType.
jQuery.sap.declare("sap.m.InputType");

/**
 * @class A subset of input types that fit to a simple API returning one string.
 * Not available on purpose: button, checkbox, hidden, image, password, radio, range, reset, search, submit.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.InputType = {
  
    /**
     * default (text) 
     * @public
     */
    Text : "Text",

    /**
     * An input control for specifying a date value. The user can select a month, day of the month, and year. 
     * @public
     * @deprecated Since version 1.9.1. 
     * Please use sap.m.DateTimeInput control with type "Date" to create date input.
     */
    Date : "Date",

    /**
     * An input control for specifying a date and time value. The user can select a month, day of the month, year, and time of day. 
     * @public
     * @deprecated Since version 1.9.1. 
     * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
     */
    Datetime : "Datetime",

    /**
     * An input control for specifying a date and time value where the format depends on the locale. 
     * @public
     * @deprecated Since version 1.9.1. 
     * Please use dedicated sap.m.DateTimeInput control with type "DateTime" to create date-time input.
     */
    DatetimeLocale : "DatetimeLocale",

    /**
     * A text field for specifying an email address. Brings up a keyboard optimized for email address entry. 
     * @public
     */
    Email : "Email",

    /**
     * An input control for selecting a month. 
     * @public
     * @deprecated Since version 1.9.1. 
     * There is no cross-platform support. Please do not use this Input type.
     */
    Month : "Month",

    /**
     * A text field for specifying a number. Brings up a number pad keyboard. Specifying an input type of \d* or [0-9]* is equivalent to using this type. 
     * @public
     */
    Number : "Number",

    /**
     * A text field for specifying a phone number. Brings up a phone pad keyboard. 
     * @public
     */
    Tel : "Tel",

    /**
     * An input control for specifying a time value. The user can select the hour, minute, and optionally AM or PM. 
     * @public
     * @deprecated Since version 1.9.1. 
     * Please use dedicated sap.m.DateTimeInput control with type "Time" to create time input.
     */
    Time : "Time",

    /**
     * A text field for specifying a URL. Brings up a keyboard optimized for URL entry. 
     * @public
     */
    Url : "Url",

    /**
     * An input control for selecting a week. 
     * @public
     * @deprecated Since version 1.9.1. 
     * There is no cross-platform support. Please do not use this Input type.
     */
    Week : "Week",

    /**
     * Password input where the user entry cannot be seen. 
     * @public
     */
    Password : "Password"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.LabelDesign.
jQuery.sap.declare("sap.m.LabelDesign");

/**
 * @class Available label display modes.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.LabelDesign = {
  
    /**
     * Displays the label in bold. 
     * @public
     */
    Bold : "Bold",

    /**
     * Displays the label in normal mode. 
     * @public
     */
    Standard : "Standard"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListHeaderDesign.
jQuery.sap.declare("sap.m.ListHeaderDesign");

/**
 * @class Defines the differnet header styles.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.ListHeaderDesign = {
  
    /**
     * Standard header style 
     * @public
     */
    Standard : "Standard",

    /**
     * Plain header style 
     * @public
     */
    Plain : "Plain"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListMode.
jQuery.sap.declare("sap.m.ListMode");

/**
 * @class Different modes for the list selection (predefined modes)
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.ListMode = {
  
    /**
     * default mode (no selection) 
     * @public
     */
    None : "None",

    /**
     * right positioned single selection mode (only one list item can be selected) 
     * @public
     */
    SingleSelect : "SingleSelect",

    /**
     * multi selection mode (whole list item including checkbox will be selected) 
     * @public
     */
    MultiSelect : "MultiSelect",

    /**
     * delete mode (only one list item can be deleted) 
     * @public
     */
    Delete : "Delete",

    /**
     * Single selection master mode (only one list item can be selected), selected item is highlighted but no radiobutton is visible. 
     * @public
     */
    SingleSelectMaster : "SingleSelectMaster",

    /**
     * left positioned single selection mode (only one list item can be selected) 
     * @public
     */
    SingleSelectLeft : "SingleSelectLeft"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListSeparators.
jQuery.sap.declare("sap.m.ListSeparators");

/**
 * @class Defines which separator style will be taken.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.ListSeparators = {
  
    /**
     * Separators around all items. 
     * @public
     */
    All : "All",

    /**
     * Separators only between the items. 
     * @public
     */
    Inner : "Inner",

    /**
     * No Separators are used. 
     * @public
     */
    None : "None"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ListType.
jQuery.sap.declare("sap.m.ListType");

/**
 * @class List types
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.ListType = {
  
    /**
     * Inactive 
     * @public
     */
    Inactive : "Inactive",

    /**
     * Detail 
     * @public
     */
    Detail : "Detail",

    /**
     * Navigation 
     * @public
     */
    Navigation : "Navigation",

    /**
     * Active 
     * @public
     */
    Active : "Active",

    /**
     * DetailAndActive 
     * @public
     */
    DetailAndActive : "DetailAndActive"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.PageBackgroundDesign.
jQuery.sap.declare("sap.m.PageBackgroundDesign");

/**
 * @class Available Page Background Design.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.PageBackgroundDesign = {
  
    /**
     * Standard Page background color. 
     * @public
     */
    Standard : "Standard",

    /**
     * Page background color when a List is set as the Page content. 
     * @public
     */
    List : "List"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.PlacementType.
jQuery.sap.declare("sap.m.PlacementType");

/**
 * @class Types for the placement of popover control.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.PlacementType = {
  
    /**
     * Popover will be placed at the left side of the reference control. 
     * @public
     */
    Left : "Left",

    /**
     * Popover will be placed at the right side of the reference control. 
     * @public
     */
    Right : "Right",

    /**
     * Popover will be placed at the top of the reference control. 
     * @public
     */
    Top : "Top",

    /**
     * Popover will be placed at the bottom of the reference control. 
     * @public
     */
    Bottom : "Bottom"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.ScreenSize.
jQuery.sap.declare("sap.m.ScreenSize");

/**
 * @class Breakpoint names for different screen sizes.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.ScreenSize = {
  
    /**
     * 240px wide 
     * @public
     */
    Phone : "Phone",

    /**
     * 600px wide 
     * @public
     */
    Tablet : "Tablet",

    /**
     * 1024px wide 
     * @public
     */
    Desktop : "Desktop",

    /**
     * 240px wide 
     * @public
     */
    XXSmall : "XXSmall",

    /**
     * 320px wide 
     * @public
     */
    XSmall : "XSmall",

    /**
     * 480px wide 
     * @public
     */
    Small : "Small",

    /**
     * 560px wide 
     * @public
     */
    Medium : "Medium",

    /**
     * 768px wide 
     * @public
     */
    Large : "Large",

    /**
     * 960px wide 
     * @public
     */
    XLarge : "XLarge",

    /**
     * 1120px wide 
     * @public
     */
    XXLarge : "XXLarge"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.SplitAppMode.
jQuery.sap.declare("sap.m.SplitAppMode");

/**
 * @class [Beschreibung f�r SplitAppMode eingeben]
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.SplitAppMode = {
  
    /**
     * Master will automatically be hidden in portrait mode. 
     * @public
     */
    ShowHideMode : "ShowHideMode",

    /**
     * Master will always be shown but in a compressed version when in portrait mode. 
     * @public
     */
    StretchCompressMode : "StretchCompressMode",

    /**
     * Master will be shown inside a Popover when in portrait mode 
     * @public
     */
    PopoverMode : "PopoverMode"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.StandardTileType.
jQuery.sap.declare("sap.m.StandardTileType");

/**
 * @class Types for StandardTile
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.StandardTileType = {
  
    /**
     * Tile representing that something needs to be created 
     * @public
     */
    Create : "Create",

    /**
     * Monitor tile 
     * @public
     */
    Monitor : "Monitor",

    /**
     * Default type 
     * @public
     */
    None : "None"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.SwipeDirection.
jQuery.sap.declare("sap.m.SwipeDirection");

/**
 * @class Directions for swipe event.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.SwipeDirection = {
  
    /**
     * Swipe from left to right 
     * @public
     */
    LeftToRight : "LeftToRight",

    /**
     * Swipe from right to left. 
     * @public
     */
    RightToLeft : "RightToLeft",

    /**
     * Both directions (left to right or right to left) 
     * @public
     */
    Both : "Both"

  };
  
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.m.SwitchType.
jQuery.sap.declare("sap.m.SwitchType");

/**
 * @class Enumaration for different switch types.
 *
 * @version 1.12.1
 * @static
 * @public
 */
sap.m.SwitchType = {
  
    /**
     * Will show "ON" and "OFF" translated to the current language or the custom text if provided 
     * @public
     */
    Default : "Default",

    /**
     * Switch with accept and reject icons 
     * @public
     */
    AcceptReject : "AcceptReject"

  };
  

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

/*global Element: true */

/*!
 * @copyright@
 */

// In case the Core decides to throw it out... This module shall always be available when using the mobile lib.
jQuery.sap.require('jquery.sap.mobile'); // unlisted dependency retained


//enable support feature



// central mobile functionality that should not go into the UI5 Core can go from here
// ----------------------------------------------------------------------------------

jQuery.sap._touchToMouseEvent = false;

if (typeof jQuery.sap.disableTouchToMouseHandling === "function") {
	jQuery.sap.disableTouchToMouseHandling();
}
/**
 * Touch helper.
 *
 * @namespace
 * @name sap.m.touch
 * @public
 **/

if (sap.m && !sap.m.touch) {
	sap.m.touch = {};
}

/**
 * Given a list of touch objects, find the touch that matches the given one.
 *
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {Touch|number} oTouch A touch object to find or a Touch.identifier that uniquely identifies the current finger in the touch session.
 * @return {object|undefined} The touch matching if any.
 * @public
 * @name sap.m.touch.find
 * @function
*/
sap.m.touch.find = function(oTouchList, oTouch) {
	var i;

	if (!(oTouchList instanceof Object)) {
		jQuery.sap.assert(false, 'sap.m.touch.find(): oTouchList must be a touch list object');
		return;
	}

	if (oTouch instanceof Object && typeof oTouch.identifier !== "undefined") {
		oTouch = oTouch.identifier;
	} else if (typeof oTouch !== "number") {
		jQuery.sap.assert(false, 'sap.m.touch.find(): oTouch must be a touch object or a number');
		return;
	}

	// A TouchList is an object not an array, so we shouldn't use
	// Array.prototype.forEach, etc.
	for (i = 0; i < oTouchList.length; i++) {
		if (oTouchList[i].identifier === oTouch) {
			return oTouchList[i];
		}
	}

	// if the given touch object or touch identifier is not found in the touches list, then return undefined
};

/**
 * Given a list of touches, count the number of touches related with the given element.
 *
 * @param {TouchList} oTouchList The list of touch objects to search.
 * @param {jQuery|Element|string} vElement A jQuery element or an element reference or an element id.
 * @return {number} The number of touches related with the given element.
 * @public
 * @name sap.m.touch.countContained
 * @function
*/
sap.m.touch.countContained = function(oTouchList, vElement) {
	var i,
		iTouchCount = 0,
		iElementChildrenL,
		$TouchTarget;

	if (!(oTouchList instanceof Object)) {
		jQuery.sap.assert(false, 'sap.m.touch.countContained(): oTouchList must be a TouchList object');
		return;
	}

	if (vElement instanceof Element) {
		vElement = jQuery(vElement);
	} else if (typeof vElement === "string") {
		vElement = jQuery.sap.byId(vElement);
	} else if (!(vElement instanceof jQuery)) {
		jQuery.sap.assert(false, 'sap.m.touch.countContained(): vElement must be a jQuery object or Element reference or a string');
		return;
	}

	iElementChildrenL = vElement.children().length;

	// A TouchList is an object not an array, so we shouldn't use
	// Array.prototype.forEach, etc.
	for (i = 0; i < oTouchList.length; i++) {
		$TouchTarget = jQuery(oTouchList[i].target);

		//	If the current target have only one HTML element or
		//	have a HTML element antecessor that match with the given element id.
		if ((iElementChildrenL === 0  && $TouchTarget.is(vElement)) ||
			($TouchTarget.closest(vElement).length === 1)) {

			iTouchCount++;
		}
	}

	return iTouchCount;
};


!function(oLib) {

	/**
	 * Returns invalid date value of UI5 according to TimeZone
	 * You can use this value to check return value of date parser method
	 *
	 * @return {Date} JS Date Object ( e.g for Germany new Date(-360000) )
	 * @public
	 * @since 1.10
	 * @name sap.m#getInvalidDate
	 * @function
	 */
	oLib.getInvalidDate = function() {
		jQuery.sap.require("sap.ui.core.format.DateFormat");
		var oDate = sap.ui.core.format.DateFormat.getDateInstance().parse("");

		oLib.getInvalidDate = function() {
			return oDate;
		};

		return oDate;
	};


	/**
	 * Finds default locale settings once and returns always the same.
	 * We should not need to create new instance to get same locale settings
	 * This method keep the locale instance in the scope and returns the same after first run
	 *
	 * @return {Object} sap.ui.core.Locale instane
	 * @public
	 * @since 1.10
	 * @name sap.m#getLocale
	 * @function
	 */
	oLib.getLocale = function() {
		var oConfig = sap.ui.getCore().getConfiguration(),
			sLocale = oConfig.getFormatSettings().getFormatLocale().toString(),
			oLocale = new sap.ui.core.Locale(sLocale);

		oLib.getLocale = function() {
			return oLocale;
		};

		return oLocale;
	};

	/**
	 * Finds default locale data once and returns always the same
	 *
	 * @return {Object} sap.ui.core.LocaleData instance
	 * @public
	 * @since 1.10
	 * @name sap.m#getLocaleData
	 * @function
	 */
	oLib.getLocaleData = function() {
		var oLocale = oLib.getLocale(),
			oLocaleData = sap.ui.core.LocaleData.getInstance(oLocale);

		oLib.getLocaleData = function() {
			return oLocaleData;
		};

		return oLocaleData;
	};

	/**
	 * Checks if the given parameter is a valid JsDate Object
	 *
	 * @param value Any variable to test.
	 * @return {Boolean}
	 * @public
	 * @since 1.10
	 * @name sap.m#isDate
	 * @function
	 */
	oLib.isDate = function(value) {
		return value && Object.prototype.toString.call(value) == "[object Date]" && !isNaN(value);
	};


	/**
	 * Search given control's parents and try to find iScroll
	 *
	 * @param {sap.ui.core.Control} oControl
	 * @return {iScroll|undefined} iScroll reference or undefined if cannot find
	 * @name sap.m#getIScroll
	 * @public
	 * @since 1.11
	 */
	oLib.getIScroll = function(oControl) {
		if (typeof window.iScroll != "function" || !(oControl instanceof sap.ui.core.Control)) {
			return;
		}

		var parent, scroller;
		for (parent = oControl; parent = parent.oParent;) {
			scroller = parent.getScrollDelegate ? parent.getScrollDelegate()._scroller : null;
			if (scroller && scroller instanceof window.iScroll) {
				return scroller;
			}
		}
	};


	/**
	 * Search given control's parents and try to find ScrollDelegate
	 *
	 * @param {sap.ui.core.Control} oControl
	 * @return {Object|undefined} ScrollDelegate or undefined if cannot find
	 * @name sap.m#getScrollDelegate
	 * @public
	 * @since 1.11
	 */
	oLib.getScrollDelegate = function(oControl) {
		if (!(oControl instanceof sap.ui.core.Control)) {
			return;
		}

		for (var parent = oControl; parent = parent.oParent;) {
			if (typeof parent.getScrollDelegate == "function") {
				return parent.getScrollDelegate();
			}
		}
	};

	/**
	 * screen size definitions in pixel
	 * if you change any value here, please also change
	 * 	1. the documentation of sap.m.ScreenSize
	 *  2. media queries in list.css
	 *
	 * @private
	 * @since 1.12
	 * @name sap.m#ScreenSizes
	 */
	oLib.ScreenSizes = {
		phone : 240,
		tablet : 600,
		desktop : 1024,
		xxsmall : 240,
		xsmall : 320,
		small : 480,
		medium : 560,
		large : 768,
		xlarge : 960,
		xxlarge : 1120
	};

	/**
	 * Base font-size
	 * @private
	 * @since 1.12
	 * @name sap.m#BaseFontSize
	 */
	oLib.BaseFontSize = jQuery(document.documentElement).css("font-size");
}(sap.m);



/**
 * URL(Uniform Resource Locator) Helper
 *
 * @namespace
 * @name sap.m.URLHelper
 * @since 1.10
 * @public
 */
sap.m.URLHelper = (function($, window) {

	var navigator = window.navigator,
		toString = Object.prototype.toString,
		rgxPhone = /[^0-9\+\*#]/g,
		rgxSpace = / /g;

	/**
	 * @private
	 */
	function isString(value) {
		return toString.call(value) == "[object String]";
	}

	/**
	 * @private
	 */
	function formatTel(sTel) {
		return sTel && isString(sTel) ? sTel.replace(rgxPhone, "") : "";
	}

	return $.extend(new sap.ui.base.EventProvider(), {
		/**
		 * Sanitize the given telephone number and returns telephone URI scheme
		 *
		 * @param {String} [sTel] telephone number.
		 * @return {String} telephone URI scheme.
		 * @public
		 * @name sap.m.URLHelper#normalizeTel
		 * @function
		 */
		normalizeTel : function(sTel) {
			return "tel:" + formatTel(sTel);
		},

		/**
		 * Sanitize the given telephone number and returns SMS URI scheme
		 *
		 * @param {String} [sTel] telephone number.
		 * @return {String} SMS URI scheme.
		 * @public
		 * @name sap.m.URLHelper#normalizeSms
		 * @function
		 */
		normalizeSms : function(sTel) {
			return "sms:" + formatTel(sTel);
		},

		/**
		 * Builds Email URI from given parameter.
		 * Trims spaces from email addresses
		 *
		 * @param {String} [sEmail] Destination email address.
		 * @param {String} [sSubject] Subject of the email address.
		 * @param {String} [sBody] Default message text.
		 * @param {String} [sCC] Carbon Copy email address.
		 * @param {String} [sBCC] Blind carbon copy email address.
		 * @return {String} Email URI scheme.
		 * @public
		 * @name sap.m.URLHelper#normalizeEmail
		 * @function
		 */
		normalizeEmail : function(sEmail, sSubject, sBody, sCC, sBCC) {
			var aParams = [],
				sURL = "mailto:";

			isString(sEmail) && (sURL += $.trim(sEmail));
			isString(sSubject) && aParams.push("subject=" + sSubject);
			isString(sBody) && aParams.push("body=" + sBody);
			isString(sBCC) && aParams.push("bcc=" + $.trim(sBCC));
			isString(sCC) && aParams.push("cc=" + $.trim(sCC));

			if (aParams.length) {
				sURL += "?" + aParams.join("&").replace(rgxSpace, "%20");
			}
			return sURL;
		},

		/**
		 * Redirects to given URL
		 * This method fires "redirect" event before open the URL
		 *
		 * @param {String} sURL Uniform resource locator.
		 * @param {Boolean} [bNewWindow] Opens URL in a new browser window
		 * @public
		 * @name sap.m.URLHelper#redirect
		 * @function
		 */
		redirect : function (sURL, bNewWindow) {
			$.sap.assert(isString(sURL), "sap.m.URLHelper#redirect: URL must be a string" );

			this.fireEvent("redirect", sURL);
			if (!bNewWindow) {
				window.location.href = sURL;
			} else if (navigator.app && typeof navigator.app.loadUrl == "function") {
				navigator.app.loadUrl(sURL, {openExternal : true});	// PhoneGap
			} else {
				window.open(sURL);
			}
		},

		/**
		 * Adds an event registration for redirect
		 *
		 * @param {Function} fnFunction The function to call, when the event occurs.
		 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs
		 * @return {Object} sap.m.URLHelper instance
		 * @public
		 * @name sap.m.URLHelper#attachRedirect
		 * @function
		 */
		attachRedirect : function (fnFunction, oListener) {
			return this.attachEvent("redirect", fnFunction, oListener);
		},

		/**
		 * Detach already registered redirect event
		 *
		 * @param {Function} fnFunction The function to call, when the event occurs.
		 * @param {Object} [oListener] The object, that wants to be notified, when the event occurs
		 * @return {Object} sap.m.URLHelper instance
		 * @public
		 * @name sap.m.URLHelper#detachRedirect
		 * @function
		 */
		detachRedirect : function (fnFunction, oListener) {
			return this.detachEvent("redirect", fnFunction, oListener);
		},

		/**
		 * Trigger telephone to call given telephone number
		 *
		 * @param {String} [sTel] telephone number.
		 * @public
		 * @name sap.m.URLHelper#triggerTel
		 * @function
		 */
		triggerTel : function(sTel) {
			this.redirect(this.normalizeTel(sTel));
		},

		/**
		 * Trigger SMS application to send SMS to given telephone number
		 *
		 * @param {String} [sTel] telephone number.
		 * @public
		 * @name sap.m.URLHelper#triggerSms
		 * @function
		 */
		triggerSms : function(sTel) {
			this.redirect(this.normalizeSms(sTel));
		},

		/**
		 * Trigger email application to send email
		 * Trims spaces from email addresses
		 *
		 * @param {String} [sEmail] Destination email address.
		 * @param {String} [sSubject] Subject of the email address.
		 * @param {String} [sBody] Default message text.
		 * @param {String} [sCC] Carbon Copy email address.
		 * @param {String} [sBCC] Blind carbon copy email address.
		 * @public
		 * @name sap.m.URLHelper#triggerEmail
		 * @function
		 */
		triggerEmail : function(sEmail, sSubject, sBody, sCC, sBCC) {
			this.redirect(this.normalizeEmail.apply(0, arguments));
		}
	});

}(jQuery, window));


/**
 * Helper for rendering themable background
 *
 * @namespace
 * @name sap.m.BackgroundHelper
 * @since 1.12
 * @protected
 */
sap.m.BackgroundHelper = (function($, window) {

	return {
		/**
		 * Adds CSS classes and styles to the given RenderManager, depending on the given configuration for background color and background image.
		 * To be called by control renderers supporting the global themable background image within their root tag, before they call writeClasses() and writeStyles().
		 * 
		 * @param {sap.ui.core.RenderManager} rm the RenderManager
		 * @param {String} [sBgColor] a configured custom background color for the control, if any 
		 * @param {sap.ui.core.URI} [sBgImgUrl] the configured custom background image for the control, if any
		 * @returns
		 * 
		 * @protected
		 * @name sap.m.BackgroundHelper#addBackgroundColorStyles
		 * @function
		 */
		addBackgroundColorStyles: function(rm, sBgColor, sBgImgUrl) {
			rm.addClass("sapMGlobalBackgroundColor");
			
			if (sBgColor || sBgImgUrl) { // when an image or color is configured, the gradient needs to be removed, so the color can be seen behind the image
				rm.addStyle("background-image", "none");
				rm.addStyle("filter", "none");
			}
			if (sBgColor) {
				rm.addStyle("background-color", jQuery.sap.escapeHTML(sBgColor));
			}
		},
		
		
		/**
		 * @private
		 * @returns
		 */
		/* unused
		isThemeBackgroundImageModified: function() {
			jQuery.sap.require("sap.ui.core.theming.Parameters");
			var sBgImgUrl = sap.ui.core.theming.Parameters.get('sapUiGlobalBackgroundImage'); // the global background image from the theme
			if (sBgImgUrl) {
				var sBgImgUrlDefault = sap.ui.core.theming.Parameters.get('sapUiGlobalBackgroundImageDefault');
				if (sBgImgUrl !== sBgImgUrlDefault) {
					return true;
				}
			}
			return false;
		},
		*/
		
		/**
		 * Renders an HTML tag into the given RenderManager which carries the background image which is either configured and given or coming from the current theme.
		 * Should be called right after the opening root tag has been completed, so this is the first child element inside the control. 
		 * 
		 * @param rm the RenderManager
		 * @param {sap.ui.core.Control} oControl the control within which the tag will be rendered; its ID will be used to generate the element ID
		 * @param {String}  sCssClass a css class to add to the element
		 * @param {sap.ui.core.URI}  [sBgImgUrl] the image of a configured background image; if this is not given, the theme background will be used and also the other settings are ignored.
		 * @param {boolean} [bRepeat] whether the background image should be repeated/tiled (or stretched)
		 * @param {float}   [fOpacity] the background image opacity, if any
		 * @returns
		 * 
		 * @protected
		 * @name sap.m.BackgroundHelper#renderBackgroundImageTag
		 * @function
		 */
		renderBackgroundImageTag: function(rm, oControl, sCssClass, sBgImgUrl, bRepeat, fOpacity) {
			rm.write("<div id='" + oControl.getId() + "-BG' ");
			rm.addClass(sCssClass);
			rm.addClass("sapMGlobalBackgroundImage"); // this adds the background image from the theme
		
			if (sBgImgUrl) { // use the settings only if a background image is configured
				rm.addStyle("display", "block"); // enforce visibility even if a parent has also a background image
				rm.addStyle("background-image", "url(" + jQuery.sap.encodeHTML(sBgImgUrl) + ")");
				
				rm.addStyle("background-repeat", bRepeat ? "repeat" : "no-repeat");
				if (!bRepeat) {
					rm.addStyle("background-size", "cover");
					rm.addStyle("background-position", "center");
				} else { // repeat
					rm.addStyle("background-position", "left top");
				}
				
				rm.addStyle("opacity", fOpacity);
			
			} else { 
				// the theme defines the background
			}
			
			rm.writeClasses();
			rm.writeStyles();
			rm.write("></div>");
		}
	};
}());
}; // end of sap.m.library
if ( !jQuery.sap.isDeclared('sap.m.ActionListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ActionListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class ActionListItem renderer.
 * @static
 */
sap.m.ActionListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ActionListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMALI");
};

sap.m.ActionListItemRenderer.renderLIContent = function(rm, oLI) {

	var isText = oLI.getText();

	// List item label
	if (isText) {
		rm.write("<div class='sapMALIText'>");
		rm.writeEscaped(isText);
		rm.write("</div>");
	}
};

}; // end of sap.m.ActionListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.AppRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.AppRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class App renderer. 
 * @static
 */
sap.m.AppRenderer = {
};

sap.m.AppRenderer = sap.ui.core.Renderer.extend(sap.m.NavContainerRenderer);

sap.m.AppRenderer.renderAttributes = function(rm, oControl) {
	sap.m.BackgroundHelper.addBackgroundColorStyles(rm, oControl.getBackgroundColor(),  oControl.getBackgroundImage());
};

sap.m.AppRenderer.renderBeforeContent = function(rm, oControl) {
	sap.m.BackgroundHelper.renderBackgroundImageTag(rm, oControl, "sapMAppBG",  oControl.getBackgroundImage(), oControl.getBackgroundRepeat(), oControl.getBackgroundOpacity());
};

}; // end of sap.m.AppRenderer
if ( !jQuery.sap.isDeclared('sap.m.Bar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Bar.
jQuery.sap.declare("sap.m.Bar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Bar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getEnableFlexBox enableFlexBox} : boolean (default: false)</li>
 * <li>{@link #getTranslucent translucent} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContentLeft contentLeft} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentMiddle contentMiddle} : sap.ui.core.Control[]</li>
 * <li>{@link #getContentRight contentRight} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A bar that is usually used on top of pages
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Bar
 */
sap.ui.core.Control.extend("sap.m.Bar", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"enableFlexBox" : {type : "boolean", group : "Misc", defaultValue : false},
		"translucent" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	aggregations : {
    	"contentLeft" : {type : "sap.ui.core.Control", multiple : true, singularName : "contentLeft"}, 
    	"contentMiddle" : {type : "sap.ui.core.Control", multiple : true, singularName : "contentMiddle"}, 
    	"contentRight" : {type : "sap.ui.core.Control", multiple : true, singularName : "contentRight"}
	}
}});


/**
 * Creates a new subclass of class sap.m.Bar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Bar.extend
 * @function
 */


/**
 * Getter for property <code>enableFlexBox</code>.
 * If this flag is set to true, ContentMiddle will be rendered as a HBox and layoutData can be used to allocate available space
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableFlexBox</code>
 * @public
 * @name sap.m.Bar#getEnableFlexBox
 * @function
 */

/**
 * Setter for property <code>enableFlexBox</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableFlexBox  new value for property <code>enableFlexBox</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#setEnableFlexBox
 * @function
 */


/**
 * Getter for property <code>translucent</code>.
 * A boolean value indicating whether the bar is partially translucent.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>translucent</code>
 * @public
 * @since 1.12
 * @name sap.m.Bar#getTranslucent
 * @function
 */

/**
 * Setter for property <code>translucent</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTranslucent  new value for property <code>translucent</code>
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @name sap.m.Bar#setTranslucent
 * @function
 */


/**
 * Getter for aggregation <code>contentLeft</code>.<br/>
 * this is the left content area, usually containing button or App Icon
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Bar#getContentLeft
 * @function
 */


/**
 * Inserts a contentLeft into the aggregation named <code>contentLeft</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContentLeft the contentLeft to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentLeft should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentLeft is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentLeft is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#insertContentLeft
 * @function
 */

/**
 * Adds some contentLeft <code>oContentLeft</code> 
 * to the aggregation named <code>contentLeft</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#addContentLeft
 * @function
 */

/**
 * Removes an contentLeft from the aggregation named <code>contentLeft</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContentLeft the contentLeft to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentLeft or null
 * @public
 * @name sap.m.Bar#removeContentLeft
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>contentLeft</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Bar#removeAllContentLeft
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentLeft</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContentLeft the contentLeft whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Bar#indexOfContentLeft
 * @function
 */
	

/**
 * Destroys all the contentLeft in the aggregation 
 * named <code>contentLeft</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#destroyContentLeft
 * @function
 */


/**
 * Getter for aggregation <code>contentMiddle</code>.<br/>
 * This is the middle content area. Controls such as label, segmented buttons, Select should be placed here. Content that are placed here will always be centrally positioned
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Bar#getContentMiddle
 * @function
 */


/**
 * Inserts a contentMiddle into the aggregation named <code>contentMiddle</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContentMiddle the contentMiddle to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentMiddle should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentMiddle is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentMiddle is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#insertContentMiddle
 * @function
 */

/**
 * Adds some contentMiddle <code>oContentMiddle</code> 
 * to the aggregation named <code>contentMiddle</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#addContentMiddle
 * @function
 */

/**
 * Removes an contentMiddle from the aggregation named <code>contentMiddle</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContentMiddle the contentMiddle to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentMiddle or null
 * @public
 * @name sap.m.Bar#removeContentMiddle
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>contentMiddle</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Bar#removeAllContentMiddle
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentMiddle</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContentMiddle the contentMiddle whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Bar#indexOfContentMiddle
 * @function
 */
	

/**
 * Destroys all the contentMiddle in the aggregation 
 * named <code>contentMiddle</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#destroyContentMiddle
 * @function
 */


/**
 * Getter for aggregation <code>contentRight</code>.<br/>
 * this is the right content area. Controls such as Action buttons or Search field could be placed here.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Bar#getContentRight
 * @function
 */


/**
 * Inserts a contentRight into the aggregation named <code>contentRight</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContentRight the contentRight to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the contentRight should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the contentRight is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the contentRight is inserted at 
 *             the last position        
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#insertContentRight
 * @function
 */

/**
 * Adds some contentRight <code>oContentRight</code> 
 * to the aggregation named <code>contentRight</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight to add; if empty, nothing is inserted
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#addContentRight
 * @function
 */

/**
 * Removes an contentRight from the aggregation named <code>contentRight</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContentRight the contentRight to remove or its index or id
 * @return {sap.ui.core.Control} the removed contentRight or null
 * @public
 * @name sap.m.Bar#removeContentRight
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>contentRight</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Bar#removeAllContentRight
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>contentRight</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContentRight the contentRight whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Bar#indexOfContentRight
 * @function
 */
	

/**
 * Destroys all the contentRight in the aggregation 
 * named <code>contentRight</code>.
 * @return {sap.m.Bar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Bar#destroyContentRight
 * @function
 */


// Start of sap/m/Bar.js
/**
 * @private
 */

sap.m.Bar.prototype.init = function() { 
};

sap.m.Bar.prototype.onBeforeRendering = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

sap.m.Bar.prototype.onAfterRendering = function() {
	this._updatePosition();

	//listen to resize
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(),  jQuery.proxy(this._updatePosition, this));
};

/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.Bar.prototype.exit = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

/*
 * @private
 */
sap.m.Bar.prototype._updatePosition = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	
	var $bar = this.$();
	if ($bar.length == 0 || !$bar.is(":visible")) {
		return; // if Bar is not rendered anymore do no check and do not re-register the resize handler
	}
	
	var iBarWidth = $bar.outerWidth(true);
	var $leftBar = jQuery.sap.byId( this.getId() + "-BarLeft");
	// reset to default
	$leftBar.css({'width': 'auto'});
	
	// Chrome browser has a problem in providing the correct div size when image inside does not have width explicitly set
	var aLBChildren = $leftBar.children();
	var iTotalWidth = 0;
	for(var i= 0; i < aLBChildren.length ; i++){
		iTotalWidth += jQuery(aLBChildren[i]).outerWidth(true);
	}
	var iLBWidth = $leftBar.outerWidth(true);
	if (iLBWidth < iTotalWidth){
		iLBWidth = iTotalWidth;
		$leftBar.css({'width': iLBWidth});
	}
	
	var $midBar  = jQuery.sap.byId( this.getId() + "-BarMiddle");
	var iMBWidth = $midBar.outerWidth(true);
	var $midBarPH = jQuery.sap.byId( this.getId() + "-BarPH");
	// reset to default
	$midBarPH.css({'position': 'static', 'width': 'auto', 'visibility': 'hidden'});
	var iMBPHWidth = $midBarPH.outerWidth(true);
	var oMBPHPosition = $midBarPH.position(); 
	var $rightBar = jQuery.sap.byId( this.getId() + "-BarRight");
	// reset to default
	$rightBar.css({'width': 'auto'});
	var iRBWidth = $rightBar.outerWidth(true);
	var oRBPosition = $rightBar.position();
	
	if (this.getEnableFlexBox()){
		$midBarPH.css({'position': 'absolute', 'left': iLBWidth});
		$midBarPH.width(iBarWidth - iLBWidth - iRBWidth - parseInt($midBarPH.css('margin-left'), 10) - parseInt($midBarPH.css('margin-right'), 10));
	} else {
		// during flip animation, it happens that the right area is not correctly positioned by the browser yet; If so, the rest of the calculation should be skipped
		if( oRBPosition.left + iRBWidth >= iBarWidth){
			// handle the case when left and right content are wider than the bar itself
			if (iBarWidth < (iLBWidth + iRBWidth)){
				// this scenario happens mostly when a very long title text is set in the left content area
				// hence we make sure the rightContent always has enough space and reduce the left content area width accordingly
				if (iRBWidth > iBarWidth){
					$rightBar.width(iBarWidth);
				}
				if (iBarWidth < iRBWidth){
					$leftBar.width(0);
				} else {
					$leftBar.width(iBarWidth - iRBWidth);
				}
			}
			
			if (oMBPHPosition.left < iLBWidth){
				// place the middle positioned element directly next to the end of left content area
				$midBarPH.css({'position': 'absolute', 'left': iLBWidth});
				oMBPHPosition = $midBarPH.position();
			} else {
				// middle content is smaller than the available space, position content in the middle manually
			}
			
			// check if middle content area width overlaps with right content area, if yes, shorten the width of middle content area
			if ((oMBPHPosition.left + iMBPHWidth) > oRBPosition.left){
				if (oRBPosition.left < oMBPHPosition.left){
					$midBarPH.width(0);
				} else {
					$midBarPH.width(oRBPosition.left - oMBPHPosition.left);
				}
			}
		
			if ($midBarPH.outerWidth() > iMBWidth){
				$midBarPH.width(iMBWidth);
			}
		}
	}
	$midBarPH.css({'visibility': 'inherit'});
	
	//listen to resize
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(),  jQuery.proxy(this._updatePosition, this));
};
}; // end of sap.m.Bar
if ( !jQuery.sap.isDeclared('sap.m.BusyDialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.BusyDialog.
jQuery.sap.declare("sap.m.BusyDialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new BusyDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.BusyDialog#event:close close} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Busy Dialog is used to indicate that the system is busy with some task and the user has to wait. During this time the UI is blocked.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.BusyDialog
 */
sap.ui.core.Control.extend("sap.m.BusyDialog", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"open", "close"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"customIcon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"customIconRotationSpeed" : {type : "int", group : "Appearance", defaultValue : 1000},
		"customIconDensityAware" : {type : "boolean", group : "", defaultValue : true},
		"customIconWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"customIconHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"cancelButtonText" : {type : "string", group : "Misc", defaultValue : null},
		"showCancelButton" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	aggregations : {
    	"_busyLabel" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	events : {
		"close" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.BusyDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.BusyDialog.extend
 * @function
 */

sap.m.BusyDialog.M_EVENTS = {'close':'close'};


/**
 * Getter for property <code>text</code>.
 * Optional text shown inside the popup.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.BusyDialog#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setText
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Sets a title to the busy dialog. Default is no title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.BusyDialog#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setTitle
 * @function
 */


/**
 * Getter for property <code>customIcon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIcon
 * @function
 */

/**
 * Setter for property <code>customIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIcon
 * @function
 */


/**
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a gif is used, the speed has to be set to 0. The unit is in ms.
 *
 * Default value is <code>1000</code>
 *
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconRotationSpeed
 * @function
 */

/**
 * Setter for property <code>customIconRotationSpeed</code>.
 *
 * Default value is <code>1000</code> 
 *
 * @param {int} iCustomIconRotationSpeed  new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconRotationSpeed
 * @function
 */


/**
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconDensityAware
 * @function
 */

/**
 * Setter for property <code>customIconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCustomIconDensityAware  new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconDensityAware
 * @function
 */


/**
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconWidth
 * @function
 */

/**
 * Setter for property <code>customIconWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconWidth  new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconWidth
 * @function
 */


/**
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * @name sap.m.BusyDialog#getCustomIconHeight
 * @function
 */

/**
 * Setter for property <code>customIconHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconHeight  new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCustomIconHeight
 * @function
 */


/**
 * Getter for property <code>cancelButtonText</code>.
 * The text of the cancel button. The default text is "Cancel" (translated to the respective language).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>cancelButtonText</code>
 * @public
 * @name sap.m.BusyDialog#getCancelButtonText
 * @function
 */

/**
 * Setter for property <code>cancelButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCancelButtonText  new value for property <code>cancelButtonText</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setCancelButtonText
 * @function
 */


/**
 * Getter for property <code>showCancelButton</code>.
 * A cancel button will be rendered inside the busy dialog if this property is set to true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showCancelButton</code>
 * @public
 * @name sap.m.BusyDialog#getShowCancelButton
 * @function
 */

/**
 * Setter for property <code>showCancelButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowCancelButton  new value for property <code>showCancelButton</code>
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#setShowCancelButton
 * @function
 */


/**
 * This event will be fired when the busy dialog is closed. 
 *
 * @name sap.m.BusyDialog#close
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.BusyDialog</code>.<br/> itself. 
 *  
 * This event will be fired when the busy dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.BusyDialog</code>.<br/> itself.
 *
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#attachClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'close' event of this <code>sap.m.BusyDialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyDialog#detachClose
 * @function
 */

/**
 * Fire event close to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.BusyDialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.BusyDialog#fireClose
 * @function
 */


/**
 * Open the busy popup.
 *
 * @name sap.m.BusyDialog.prototype.open
 * @function

 * @type sap.m.BusyDialog
 * @public
 */


/**
 * Close the busy popup.
 *
 * @name sap.m.BusyDialog.prototype.close
 * @function

 * @type sap.m.BusyDialog
 * @public
 */


// Start of sap/m/BusyDialog.js
///**
// * This file defines behavior for the control,
// */
//sap.m.BusyDialog.prototype.init = function(){
//   // do something for initialization...
//};
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.m.BusyDialog.prototype.init = function(){
	var that = this;
	this._$window = jQuery(window);
	this._isPlatformDependent = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true";
	
	this._oLabel = new sap.m.Label(this.getId() + "-busyLabel", {}).addStyleClass("sapMBusyDialogLabel");
	this.setAggregation("_busyLabel", this._oLabel, true);
	this.iOldWinHeight = 0;
	this._oPopup = new sap.ui.core.Popup();
	(jQuery.os.ios && this._isPlatformDependent) ? this._oPopup.setShadow(true): this._oPopup.setShadow(false);
	this._oPopup.setModal(true, 'sapMDialogBLyInit');
	this._oPopup.setAnimations(this.openAnimation, this.closeAnimation);

	//the orientationchange event listener
	this._fOrientationChange = jQuery.proxy(this._reposition, this);
	
	this._oPopup._applyPosition = function(oPosition){
		that._setDimensions();
		sap.ui.core.Popup.prototype._applyPosition.call(this, oPosition);
	};
	this._oPopup._showBlockLayer = function(){
		sap.ui.core.Popup.prototype._showBlockLayer.call(this);
		var $BlockRef = jQuery("#sap-ui-blocklayer-popup"), $BlockBarRef;
		$BlockRef.toggleClass("sapMDialogBLyInit", true);
		if (!jQuery.os.ios && this._isPlatformDependent) {
			$BlockBarRef = jQuery("#sap-ui-blocklayer-popup-bar");
			$BlockRef.css('top', '48px');
			if($BlockBarRef.length === 0){
				var className = "sapUiBLy" + (this._sModalCSSClass ? " " + this._sModalCSSClass : "") + ' sapUiBLyBar';
				var $BlockBarRef = jQuery("<div id=\"sap-ui-blocklayer-popup-bar\" tabindex=\"0\" class=\"" + className + "\" style=\"display:block; z-index:" +  $BlockRef.css('z-index') +"; visibility:visible\"></div>");
				//need to add $BlockBarRef before the busydialog dom node, otherwise have problem with popup.js
				$BlockBarRef.insertBefore(that.$());
			} else {
				var $BlockBarRef = jQuery("#sap-ui-blocklayer-popup-bar");
				$BlockBarRef.css({"z-index" : $BlockRef.css('z-index'),
								"visibility": "visible",
								"display" : "block"});
			}
		}//Without timeout the animation is not visible from the second time.
		/*setTimeout(function() {
			$BlockRef.toggleClass('sapMDialogBLyShown', true);
		}, 0);*/
	};
	this._oPopup._hideBlockLayer = function(){
		var $BlockRef = jQuery("#sap-ui-blocklayer-popup");
		var $BlockBarRef = jQuery("#sap-ui-blocklayer-popup-bar");//$BlockRef.next('div');
		/*$BlockRef.one("webkitTransitionEnd", function(){*/
			$BlockBarRef.css({'visibility': '', 'display': 'none'});
			$BlockRef.toggleClass('sapMDialogBLyInit', false);
			$BlockRef.css("top", "");
			sap.ui.core.Popup.prototype._hideBlockLayer.call(this);
		/*});*/
		/*$BlockRef.toggleClass('sapMDialogBLyShown', false);*/
		
	};
};

sap.m.BusyDialog.prototype.openAnimation = function($Ref, iRealDuration, fnOpened) {
	if(jQuery.os.ios && this._isPlatformDependent) {
		$Ref.css('display', 'block');
		$Ref.bind("webkitAnimationEnd animationend", function(){
		jQuery(this).unbind("webkitAnimationEnd animationend");
			fnOpened();
		});
		$Ref.css('-webkit-animation-name', 'sapMDialogBounce')
			.css('animation-name', 'sapMDialogBounce');
	} else {
		fnOpened();
	}
};

sap.m.BusyDialog.prototype.closeAnimation = function($Ref, iRealDuration, fnClose) {
	fnClose();
};

/**
 * Destroys the dialog control
 * @private
 */
sap.m.BusyDialog.prototype.exit = function(){
	this._oPopup.close();
	this._oPopup.destroy();
	this._oPopup = null;
	
	if(this._oLabel){
		this._oLabel.destroy();
		this._oLabel = null;
	}
	if(this._oButton){
		this._oButton.destroy();
		this._oButton = null;
	}
	if(this._busyIndicator){
		this._busyIndicator.destroy();
		this._busyIndicator = null;
	}
	this._$window.unbind("resize", this._fOrientationChange);
};

/**
 * Opens the dialog
 *
 * @public
 *
 */
sap.m.BusyDialog.prototype.open = function(){
	jQuery.sap.log.debug("sap.m.BusyDialog.open called at " + new Date().getTime());
	
	var oPopup = this._oPopup;
	if (oPopup.isOpen()){
		return this;
	}
	// Open popup
	oPopup.setContent(this);
	oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
	oPopup.setPosition("center center", "center center", document, "0 0", "fit");

	this._bOpenRequested = true;
	this._openNowIfPossibleAndRequested();

	return this;
};


sap.m.BusyDialog.prototype._openNowIfPossibleAndRequested = function(){
	if (!this._bOpenRequested) {
		return;
	}
	
	// If body/Core are not available yet, give them some more time and open later if still required
	if (!document.body || !sap.ui.getCore().isInitialized()) {
		jQuery.sap.delayedCall(50, this, "_openNowIfPossibleAndRequested");
		return;
	}
	
	this._bOpenRequested = false; // opening request is handled
	this._oPopup.open();
};

/**
 * Closes the dialog
 *
 * @public
 *
 */
sap.m.BusyDialog.prototype.close = function(){
	this._bOpenRequested = false;
	var oPopup = this._oPopup;

	var eOpenState = this._oPopup.getOpenState();
	if(!(eOpenState === sap.ui.core.OpenState.CLOSED || eOpenState === sap.ui.core.OpenState.CLOSING)){
		oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
		jQuery.sap.log.debug("sap.m.BusyDialog.close called at " + new Date().getTime());
		oPopup.close();
		this.fireClose();
	}
	return this;
};

sap.m.BusyDialog.prototype.setText = function(sText){
	this.setProperty("text", sText, true);
	this._oLabel.setText(sText);
};

sap.m.BusyDialog.prototype._reposition = function() {
	var ePopupState = this._oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return;
	}
	this._oPopup._applyPosition(this._oPopup._oLastPosition);
	
};

sap.m.BusyDialog.prototype._handleOpened = function(){
	this._oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
	// bind to window resize
	// In android, the orientationchange fires before the size of the window changes
	//  that's why the resize event is used here.
	this._$window.bind("resize", this._fOrientationChange);
};

sap.m.BusyDialog.prototype._handleClosed = function(){
	this._oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
	this._$window.unbind("resize", this._fOrientationChange);
};

sap.m.BusyDialog.prototype._setDimensions = function() {
	// Derive width and height from viewport
	var iWindowHeight = (jQuery.os.ios || !this._isPlatformDependent) ? this._$window.height() : ( this._$window.height() - 50);
	var $this = this.$();;
	//reset
	$this.css({
		"left": "0px",
		"top": "0px",
		"max-height": this._$window.height() + "px"
	});
	if(iWindowHeight <= this.iOldWinHeight) {
		if(!this.$().hasClass("sapMBsyDSmall")) {
			this._checkSize(iWindowHeight);
		}
	}
	if(iWindowHeight > this.iOldWinHeight) {
		if((this.$().hasClass("sapMBsyDSmall"))) {
			this._checkSize(iWindowHeight);
		}
	}
	if(this.iOldWinHeight == 0) {
		this._checkSize(iWindowHeight);
	}
	this.iOldWinHeight = (jQuery.os.ios || !this._isPlatformDependent) ? this._$window.height() : (this._$window.height() - 50);
};

sap.m.BusyDialog.prototype._checkSize = function(iWindowHeight) {
	if(iWindowHeight < this.$()[0].scrollHeight) {
		this.$().toggleClass("sapMBsyDSmall", true);
		if(!jQuery.os.ios && this._isPlatformDependent) {
			this.$().css("width", this._$window.width() * 0.7);
		}
	} else {
		this.$().toggleClass("sapMBsyDSmall", false);
		if(!jQuery.os.ios && !this._isPlatformDependent) {
			this.$().css("width", "18.75em");
		}
	}
};
}; // end of sap.m.BusyDialog
if ( !jQuery.sap.isDeclared('sap.m.BusyIndicator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.BusyIndicator.
jQuery.sap.declare("sap.m.BusyIndicator");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new BusyIndicator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li>
 * <li>{@link #getCustomIconRotationSpeed customIconRotationSpeed} : int (default: 1000)</li>
 * <li>{@link #getCustomIconDensityAware customIconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getCustomIconWidth customIconWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getCustomIconHeight customIconHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getSize size} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDesign design} : string (default: 'auto')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Control to indicate that the system is busy with some task and the user has to wait. When no image or gif is provided, the control renders the platforms native indicator using css.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.BusyIndicator
 */
sap.ui.core.Control.extend("sap.m.BusyIndicator", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Data", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"customIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"customIconRotationSpeed" : {type : "int", group : "Appearance", defaultValue : 1000},
		"customIconDensityAware" : {type : "boolean", group : "", defaultValue : true},
		"customIconWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"customIconHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"size" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"design" : {type : "string", group : "Appearance", defaultValue : 'auto'}
	}
}});


/**
 * Creates a new subclass of class sap.m.BusyIndicator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.BusyIndicator.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the busy indicator (optional)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.BusyIndicator#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setText
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.BusyIndicator#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setTextDirection
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible control is not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.BusyIndicator#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setVisible
 * @function
 */


/**
 * Getter for property <code>customIcon</code>.
 * Icon url if an icon is used as the busy indicator.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIcon
 * @function
 */

/**
 * Setter for property <code>customIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIcon
 * @function
 */


/**
 * Getter for property <code>customIconRotationSpeed</code>.
 * Defines the rotation speed of the given image. If a .gif is used, the speed has to be set to 0. The unit is in ms.
 *
 * Default value is <code>1000</code>
 *
 * @return {int} the value of property <code>customIconRotationSpeed</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconRotationSpeed
 * @function
 */

/**
 * Setter for property <code>customIconRotationSpeed</code>.
 *
 * Default value is <code>1000</code> 
 *
 * @param {int} iCustomIconRotationSpeed  new value for property <code>customIconRotationSpeed</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconRotationSpeed
 * @function
 */


/**
 * Getter for property <code>customIconDensityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>customIconDensityAware</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconDensityAware
 * @function
 */

/**
 * Setter for property <code>customIconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bCustomIconDensityAware  new value for property <code>customIconDensityAware</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconDensityAware
 * @function
 */


/**
 * Getter for property <code>customIconWidth</code>.
 * Width of the provided icon. By default 44px are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconWidth</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconWidth
 * @function
 */

/**
 * Setter for property <code>customIconWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconWidth  new value for property <code>customIconWidth</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconWidth
 * @function
 */


/**
 * Getter for property <code>customIconHeight</code>.
 * Height of the provided icon. By default 44px are used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>customIconHeight</code>
 * @public
 * @name sap.m.BusyIndicator#getCustomIconHeight
 * @function
 */

/**
 * Setter for property <code>customIconHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sCustomIconHeight  new value for property <code>customIconHeight</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setCustomIconHeight
 * @function
 */


/**
 * Getter for property <code>size</code>.
 * Defines the size of the busy indicator.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>size</code>
 * @public
 * @name sap.m.BusyIndicator#getSize
 * @function
 */

/**
 * Setter for property <code>size</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sSize  new value for property <code>size</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setSize
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * The design defines how the BusyIndicator should look like. There are 3 possiblities:
 * auto: automatically sets the design according to the context
 * dark: dark theme, useful within a light context
 * light: light theme, useful within a dark context
 *
 * Default value is <code>auto</code>
 *
 * @return {string} the value of property <code>design</code>
 * @public
 * @name sap.m.BusyIndicator#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {string} sDesign  new value for property <code>design</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.BusyIndicator#setDesign
 * @function
 */


// Start of sap/m/BusyIndicator.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.m.BusyIndicator.prototype.init = function(){
	this._bUseCanvas = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") != "true";
	this._bIosStyle = jQuery.os.ios;
	this._sBColor = sap.ui.core.theming.Parameters.get("sapUiPageBG") || "rgba(0, 0, 0, 0)";
};

sap.m.BusyIndicator.prototype.exit = function(){
	this._cancelAnimation();
};

// Request canvas animation
// @private 
if(window.requestAnimationFrame){
	sap.m.BusyIndicator.prototype._requestAnimation = function(fCallback){
		return window.requestAnimationFrame(fCallback);
	};
} else if(window.webkitRequestAnimationFrame){
	sap.m.BusyIndicator.prototype._requestAnimation = function(fCallback, oDOM){
		return window.webkitRequestAnimationFrame(fCallback, oDOM);
	};	
} else if(window.mozRequestAnimationFrame){
	sap.m.BusyIndicator.prototype._requestAnimation = function(fCallback){
		return window.mozRequestAnimationFrame(fCallback);
	};
} else {
	sap.m.BusyIndicator.prototype._requestAnimation = function(fCallback){
		return window.setTimeout(fCallback, 1000 / 60);
	};
};

// Stop canvas animation
// @private 
sap.m.BusyIndicator.prototype._cancelAnimation = function(){
	if(!this._animationId){ return;}
	
	if(window.cancelAnimationFrame){
		window.cancelAnimationFrame(this._animationId);
	} else if(window.webkitCancelAnimationFrame){
		window.webkitCancelAnimationFrame(this._animationId);
	} else if(window.mozCancelAnimationFrame){
		window.mozCancelAnimationFrame(this._animationId);
	} else{	
		window.cancelTimeout(this._animationId); 
	};
	this._animationId = undefined;
};

// Do the next animation step
// @private 
sap.m.BusyIndicator.prototype._animateCanvas = function(){
	if(!this.oCanvas){ return; }
	
	var clientWidth = this.oCanvas.clientWidth,
		clientHeight = this.oCanvas.clientHeight;
	
	if(!clientWidth || !clientHeight){
			// if the indicator becomes invisible, client width and height are set to 0. 
			// Stop animation
			this._animationId = undefined;
			return;  
	}
	
	// Adjust the canvas size to avoid aliasing artifacts
	// This is needed only once after first rendering and only for custom size
	if(clientWidth != this.oCanvas.width){ 
		this.oCanvas.setAttribute("width", clientWidth);
	}
	if(clientHeight != this.oCanvas.height){
		this.oCanvas.setAttribute("height", clientHeight);
	}
	
	var context = this.oCanvas.getContext("2d"),
		w = this.oCanvas.width,
		h = this.oCanvas.height,
		x = Math.round(w/2),
		y = Math.round(h/2),
		r = Math.round(x * 0.7),
		t = new Date(),
		startAngle = 0.9 * (t.getSeconds() + t.getMilliseconds() / 1000) * 2 * Math.PI,
		endAngle = startAngle + 1.25 * Math.PI, // 225 grad
		counterClock = false,
		strokeStyle = window.getComputedStyle(this.oCanvas).color,
		lineWidth = Math.round(w / 10) * 2;
	
	context.clearRect(0,0,w,h);
	
	// clearRect does not clear canvas in Android browser 4.1, 
	// workaround: draw a white circle underneath
	if(jQuery.os.android && jQuery.os.fVersion == 4.1 && !jQuery.browser.chrome){
		context.strokeStyle = this._sBColor; 
		context.lineWidth = lineWidth + 2;
		context.beginPath();
		context.arc(x, y, r, 0, 2 * Math.PI);
		context.stroke();
	}
	
	context.strokeStyle = strokeStyle;
	context.lineWidth = lineWidth;
	context.beginPath();
	context.arc(x, y, r, startAngle, endAngle, counterClock);
	context.stroke();
	
	this._animationId = this._requestAnimation(this._fAnimateCallback, this.oCanvas);
};

// Start the canvas based animation
// @private 
sap.m.BusyIndicator.prototype._doCanvas = function(){
	this.oCanvas = jQuery.sap.domById(this.getId()+"-canvas");
	this._fAnimateCallback = jQuery.proxy(this._animateCanvas, this);
	this._animationId = this._requestAnimation(this._fAnimateCallback, this.oCanvas);
};

// Set rotation speed for the custom icon
// @private 
sap.m.BusyIndicator.prototype._doCustomIcon = function(){
	if(this.getCustomIconRotationSpeed()){
		var sRotationSpeed = this.getCustomIconRotationSpeed() + "ms";
		this.$().children('img')
			.css("-webkit-animation-duration", sRotationSpeed)
			.css("animation-duration", sRotationSpeed);
	}
};

// Do the "old style" css based platform dependent animation
// @private 
sap.m.BusyIndicator.prototype._doPlatformDependent = function(){
	var $_elem = this.$();
	
	var parentElement = this.getParent() ? this.getParent()._context : '';
	//Set the color to the first parents color which is not transparent. Skip this when inside Dialog or Bar.
	if(!this._bIosStyle) {
		if(!this.getCustomIcon() && this.$().parent('.sapMBusyDialog').length === 0 && parentElement !== 'header') {
			var bFoundCss = true;
			
			while( $_elem.css('background-color') === "rgba(0, 0, 0, 0)" ) {
				$_elem = $_elem.parent();
				
				//Do not ask '#document' for its css. this will cause trouble. Therefore
				//'$_elem.parent().length' is checked
				if($_elem.parent().length == 0) {
					bFoundCss = false;
					break;
				}
			}
			//This is the default color
			var sBColor = bFoundCss? $_elem.css('background-color') : this._sBColor;
			this.$().children().children('.sapMSpinBar3').children('.sapMSpinBar4').css('background-color', sBColor);
		}
	}
};

sap.m.BusyIndicator.prototype.onBeforeRendering = function(){
	this._cancelAnimation();
};

sap.m.BusyIndicator.prototype.onAfterRendering = function(){
	if(this.getCustomIcon()){
		this._doCustomIcon();		
	} else if(this._bUseCanvas) {
		this._doCanvas();
	} else {
		this._doPlatformDependent();
	};
};

sap.m.BusyIndicator.prototype.setCustomIconRotationSpeed = function(iSpeed){
	if(iSpeed){
		if(iSpeed !== this.getCustomIconRotationSpeed()) {
			this.setProperty("customIconRotationSpeed", iSpeed, true);
		}
	}
	return this;
};

sap.m.BusyIndicator.prototype.setDesign = function(sDesign) {
	this.setProperty("design", sDesign, true);
	this.$().toggleClass("sapMBusyIndicatorLight", (this.getDesign() === "light"));
	this.$().toggleClass("sapMBusyIndicatorDark", (this.getDesign() === "dark"));
};

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.BusyIndicator} <code>this</code> to allow method chaining
 * @public
 *
 * The MessageBar.API.js "setVisible" function is enhanced in order to
 * toggle the "visibility:hidden;" attribute over the control.
 */
sap.m.BusyIndicator.prototype.setVisible = function(bVisible){
	this.setProperty("visible", bVisible, true);
	if(!this.getDomRef()){ return; }
	this.getDomRef().style.visibility = bVisible? "visible" : "hidden";
	if(bVisible && !this._animationId){
		this._animateCanvas();
	}
	return this;
}
}; // end of sap.m.BusyIndicator
if ( !jQuery.sap.isDeclared('sap.m.Button') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Button.
jQuery.sap.declare("sap.m.Button");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Button.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getType type} : sap.m.ButtonType (default: sap.m.ButtonType.Default)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Button#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Button#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to trigger actions. For the button UI, you can define some text or an icon, or both.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Button
 */
sap.ui.core.Control.extend("sap.m.Button", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"type" : {type : "sap.m.ButtonType", group : "Appearance", defaultValue : sap.m.ButtonType.Default},
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"iconFirst" : {type : "boolean", group : "Appearance", defaultValue : true},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconDensityAware" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"tap" : {}, 
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Button with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Button.extend
 * @function
 */

sap.m.Button.M_EVENTS = {'tap':'tap','press':'press'};


/**
 * Getter for property <code>text</code>.
 * Button text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Button#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setText
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type of a button (e.g. default, accept, reject, back, icon, etc.)
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.m.ButtonType} the value of property <code>type</code>
 * @public
 * @name sap.m.Button#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.m.ButtonType} oType  new value for property <code>type</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setType
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the button.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Button#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Button#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible buttons are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Button#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setVisible
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the button. This can be an image or an icon from the icon font.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.Button#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setIcon
 * @function
 */


/**
 * Getter for property <code>iconFirst</code>.
 * If set to true (default), the display sequence is 1. icon 2. control text
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * @name sap.m.Button#getIconFirst
 * @function
 */

/**
 * Setter for property <code>iconFirst</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconFirst  new value for property <code>iconFirst</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setIconFirst
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * The source property when this icon is tapped. Graphical element is changed to the new source as long as the icon is tapped.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.Button#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If only one version of image is provided, set this value to false to avoid the attempt of fetching density perfect image.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.Button#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#setIconDensityAware
 * @function
 */


/**
 * Event is fired when the user taps the control. (This event is deprecated, use the press event instead) 
 *
 * @name sap.m.Button#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Button</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Button</code>.<br/> itself. 
 *  
 * Event is fired when the user taps the control. (This event is deprecated, use the press event instead) 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.
 *
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#attachTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Button</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#detachTap
 * @function
 */

/**
 * Fire event tap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Button#fireTap
 * @function
 */


/**
 * Event is fired when the user clicks on the control. 
 *
 * @name sap.m.Button#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Button</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Button</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Button</code>.<br/> itself.
 *
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Button</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Button#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Button} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Button#firePress
 * @function
 */


// Start of sap/m/Button.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained



/**
 * Function is called to define the behavior for the control.
 * 
 * @private
 */
sap.m.Button.prototype.init = function() { 
	this.orientationProxy = jQuery.proxy(this._handleOrientationChange, this);
	jQuery(window).bind("orientationchange", this.orientationProxy);
};


/**
 * Function is called when exiting the control.
 * 
 * @private
 */
sap.m.Button.prototype.exit = function(oEvent) {
	// destroy image controls if initialized
	if (this._image) {
		this._image.destroy();
	}
	if (this._iconBtn) {
		this._iconBtn.destroy();
	}
	// unbind orientation change proxy
	if (this.orientationProxy) {
		jQuery(window).unbind("orientationchange", this.orientationProxy);
	}
};


/**
 * This overrides the default setter of the iconDensityAware property in order to avoid the rerendering.

 * @public *
 */
sap.m.Image.prototype.setIconDensityAware = function(bIconDensityAware){
	this.setProperty("iconDensityAware", bIconDensityAware, true);
	
	if (this._image) {
		this._image.setDensityAware(bIconDensityAware);
	}
};


/**
 * Function is called when touchstart occurs on button .
 * 
 * @private
 */
sap.m.Button.prototype.ontouchstart = function(oEvent) {
	// for control who need to know if they should handle events from the button control
	oEvent.originalEvent._sapui_handledByControl = true;
	// change the source only when the first finger is on the control, the
	// following fingers doesn't affect
	if ((oEvent.targetTouches && oEvent.targetTouches.length === 1) || !oEvent.targetTouches) {
		this._touchedY = oEvent.targetTouches[0].clientY;
		this._touchedX = oEvent.targetTouches[0].clientX;
		if (!this._touchEndProxy) {
			this._touchEndProxy = jQuery.proxy(this._ontouchend, this);
		}
		// bind touch proxy
		if (!jQuery.support.touch) {
			// binding to document when runs in desktop browser
			// here also bound to the mouseup event to enable it working in
			// desktop browsers
			jQuery(window.document).bind("mouseup", this._touchEndProxy);
		} else {
			// binding to the image itself when runs in mobile device
			// Galaxy Note (4.0.4) can't bubble the touchend event to document
			this.$().bind("touchcancel touchend", this._touchEndProxy);
		}
		// set active button state
		this._activeButton();
		// set target which started the event
		this._target = oEvent.target;
	}
};


/**
 * Function is called when touchmove occurs on button .
 * 
 * @private
 */	
sap.m.Button.prototype.ontouchmove = function(oEvent) {
	var touchMovement = oEvent.targetTouches && ((Math.abs(this._touchedY - oEvent.targetTouches[0].clientY) > 10) || Math.abs(this._touchedX - oEvent.targetTouches[0].clientX) > 10);
	// check if target which started the event is the same
	if ( ((!!this._target) && (this._target != oEvent.target)) || touchMovement) {
		this._ontouchend(oEvent);
	}
};


/**
 * Function is called when touchend occurs on button .
 * 
 * @private
 */
sap.m.Button.prototype._ontouchend = function(oEvent) {
	// set inactive button state
	this._inactiveButton();
	// unbind touch proxy
	if (!jQuery.support.touch) {
		jQuery(window.document).unbind("mouseup", this._touchEndProxy);
	} else {
		this.$().unbind("touchcancel touchend", this._touchEndProxy);
	}
};


/**
 * Function is called when tap occurs on button.
 * 
 * @private
 */
sap.m.Button.prototype.ontap = function(oEvent) {
	// fire tap event
	if (this.getEnabled()) {
		// if target is empty set target (specially for selenium test)
		if (!this._target) {
			this._target = oEvent.target;
		}
		// check if target which started the event is the same
		if ((!!this._target) && (this._target === oEvent.target)) {
			this.focus();
			this.fireTap({/* no parameters */}); // (This event is deprecated, use the "press" event instead)
			this.firePress({/* no parameters */});
		}
	}
	// reset target which started the event
	delete this._target;
};


/**
 * Function is called when the orientation of the device changes.
 * 
 * @private
 */
sap.m.Button.prototype._handleOrientationChange = function() {
	//console.log("---------> _handleOrientationChange");
};


/**
 * Function is called when button is active.
 * 
 * @private
 */
sap.m.Button.prototype._activeButton = function() {
	// active handling for android/blackberry
	//if (jQuery.os.android || jQuery.os.blackberry) {
		this.$().addClass("sapMBtnActive");
	//}
	// handling active icon
	if (this.getEnabled()) {
		if (this.getIcon() && this.getActiveIcon() && this._image instanceof sap.m.Image) {
			this._image.setSrc(this.getActiveIcon());
		}
	}
};


/**
 * Function is called when button is inactive.
 * 
 * @private
 */
sap.m.Button.prototype._inactiveButton = function() {
	// active handling for android/blackberry
	//if (jQuery.os.android || jQuery.os.blackberry) {
		this.$().removeClass("sapMBtnActive");
	//}
	// handling active icon
	if (this.getEnabled()) {
		if (this.getIcon() && this.getActiveIcon() && this._image instanceof sap.m.Image) {
			this._image.setSrc(this.getIcon());
		}
	}
};


/**
 * Function is called when image control needs to be loaded.
 * 
 * @private
 */
sap.m.Button.prototype._getImage = function(sImgId, sSrc, sActiveSrc, bIconDensityAware) {
	// check if image source has changed - if yes destroy and reset image control
	if(this._image && (this._image.getSrc() != sSrc)){
		this._image.destroy();
		this._image = undefined;
	}
	// update or create image control
	var oImage = this._image;
	if (!!oImage) {
		oImage.setSrc(sSrc);
		if(oImage instanceof sap.m.Image) {
			oImage.setActiveSrc(sActiveSrc);
			oImage.setDensityAware(bIconDensityAware);
		}
	} else {
		oImage = sap.ui.core.IconPool.createControlByURI({
			id: sImgId,
			src : sSrc,
			activeSrc : sActiveSrc,
			densityAware : bIconDensityAware
		}, sap.m.Image).addStyleClass("sapMBtnCustomIcon").setParent(this, null, true);
	}
	return this._image = oImage;
};


/**
 * Function is called when internal image control needs to be loaded.
 * 
 * @private
 */
sap.m.Button.prototype._getInternalIconBtn = function(sImgId, sSrc) {
	var oIcon = this._iconBtn;
	if (!!oIcon) {
		oIcon.setSrc(sSrc);
	} else {
		oIcon = sap.ui.core.IconPool.createControlByURI(sSrc, sap.m.Image);
	}
	return this._iconBtn = oIcon;
};

}; // end of sap.m.Button
if ( !jQuery.sap.isDeclared('sap.m.Carousel') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Carousel.
jQuery.sap.declare("sap.m.Carousel");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Carousel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getLoop loop} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getShowPageIndicator showPageIndicator} : boolean (default: true)</li>
 * <li>{@link #getPageIndicatorPlacement pageIndicatorPlacement} : sap.m.PlacementType (default: sap.m.PlacementType.Bottom)</li>
 * <li>{@link #getShowBusyIndicator showBusyIndicator} : boolean (default: true)</li>
 * <li>{@link #getBusyIndicatorSize busyIndicatorSize} : sap.ui.core.CSSSize (default: '6em')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getActivePage activePage} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Carousel#event:loadPage loadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Carousel#event:unloadPage unloadPage} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Carousel#event:pageChanged pageChanged} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Carousel control can be used to navigate through a list of sap.m controls just like flipping through the pages of a book by swiping right or left. An indicator shows the current position within the control list.
 * 
 * This carousel implementation always renders three controls: the one which is currently active, the one to the right and the one to the left. After a swipe, these pages are exchanged accordingly, the next control in the list is loaded, the control which is out of scope is released.
 * 
 * Similar to the NavContainer control, the carousel triggers events on it pages, when flipping through them. These events are:
 * - 'BeforeFirstShow': triggered, when a page is rendered for the first time wthin the carousel
 * - 'BeforeShow': triggered whenever a page is rendered (analogous to 'loadPage event)
 * - 'AfterHide': triggered when the page is discarded from the carousel's 'viewport' (analogous to 'unloadPage event)
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Carousel
 */
sap.ui.core.Control.extend("sap.m.Carousel", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"next", "previous"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"loop" : {type : "boolean", group : "Misc", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"showPageIndicator" : {type : "boolean", group : "Appearance", defaultValue : true},
		"pageIndicatorPlacement" : {type : "sap.m.PlacementType", group : "Appearance", defaultValue : sap.m.PlacementType.Bottom},
		"showBusyIndicator" : {type : "boolean", group : "Appearance", defaultValue : true},
		"busyIndicatorSize" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '6em'}
	},
	defaultAggregation : "pages",
	aggregations : {
    	"pages" : {type : "sap.ui.core.Control", multiple : true, singularName : "page"}
	},
	associations : {
		"activePage" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"loadPage" : {}, 
		"unloadPage" : {}, 
		"pageChanged" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Carousel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Carousel.extend
 * @function
 */

sap.m.Carousel.M_EVENTS = {'loadPage':'loadPage','unloadPage':'unloadPage','pageChanged':'pageChanged'};


/**
 * Getter for property <code>height</code>.
 * The height of the carousel. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.Carousel#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setHeight
 * @function
 */


/**
 * Getter for property <code>loop</code>.
 * Defines whether the carousel should loop, i.e show the first page after the last page is reached and vice versa.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>loop</code>
 * @public
 * @name sap.m.Carousel#getLoop
 * @function
 */

/**
 * Setter for property <code>loop</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLoop  new value for property <code>loop</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setLoop
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Hide carousel. Actually, it is not even rendered anymore if it is not 'visible'
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Carousel#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the carousel. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Carousel#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setWidth
 * @function
 */


/**
 * Getter for property <code>showPageIndicator</code>.
 * Show or hide carousel's page indicator.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPageIndicator</code>
 * @public
 * @name sap.m.Carousel#getShowPageIndicator
 * @function
 */

/**
 * Setter for property <code>showPageIndicator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPageIndicator  new value for property <code>showPageIndicator</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setShowPageIndicator
 * @function
 */


/**
 * Getter for property <code>pageIndicatorPlacement</code>.
 * This is the information about where the carousel's page indicator shall be displayed. Possible values are sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. Other values are ignored and the default value will be applied. The default value is sap.m.PlacementType.Bottom.
 *
 * Default value is <code>Bottom</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>pageIndicatorPlacement</code>
 * @public
 * @name sap.m.Carousel#getPageIndicatorPlacement
 * @function
 */

/**
 * Setter for property <code>pageIndicatorPlacement</code>.
 *
 * Default value is <code>Bottom</code> 
 *
 * @param {sap.m.PlacementType} oPageIndicatorPlacement  new value for property <code>pageIndicatorPlacement</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setPageIndicatorPlacement
 * @function
 */


/**
 * Getter for property <code>showBusyIndicator</code>.
 * Show or hide a busy indicator in the carousel when loading pages after swipe. These busy indicators are part of the can be swiped as well: they do not block the carousel.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showBusyIndicator</code>
 * @public
 * @name sap.m.Carousel#getShowBusyIndicator
 * @function
 */

/**
 * Setter for property <code>showBusyIndicator</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowBusyIndicator  new value for property <code>showBusyIndicator</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setShowBusyIndicator
 * @function
 */


/**
 * Getter for property <code>busyIndicatorSize</code>.
 * Size of the busy indicators which can be displayed in the carousel, when loading pages after swipe.
 *
 * Default value is <code>6em</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>busyIndicatorSize</code>
 * @public
 * @name sap.m.Carousel#getBusyIndicatorSize
 * @function
 */

/**
 * Setter for property <code>busyIndicatorSize</code>.
 *
 * Default value is <code>6em</code> 
 *
 * @param {sap.ui.core.CSSSize} sBusyIndicatorSize  new value for property <code>busyIndicatorSize</code>
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setBusyIndicatorSize
 * @function
 */


/**
 * Getter for aggregation <code>pages</code>.<br/>
 * The content entities between which this Carousel navigates.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Carousel#getPages
 * @function
 */


/**
 * Inserts a page into the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the page should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the page is inserted at 
 *             the last position        
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#insertPage
 * @function
 */

/**
 * Adds some page <code>oPage</code> 
 * to the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#addPage
 * @function
 */

/**
 * Removes an page from the aggregation named <code>pages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vPage the page to remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * @name sap.m.Carousel#removePage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Carousel#removeAllPages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Carousel#indexOfPage
 * @function
 */
	

/**
 * Destroys all the pages in the aggregation 
 * named <code>pages</code>.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#destroyPages
 * @function
 */


/**
 * Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
 * The getter will return the control id
 *
 * @return {string} Id of the element which is the current target of the <code>activePage</code> association, or null
 * @public
 * @name sap.m.Carousel#getActivePage
 * @function
 */

/**
 * Provides getter and setter for the currently displayed page. For the setter, argument may be the control itself, which must be member of the carousel's page list, or the control's id.
 * The getter will return the control id
 *
 * @param {string | sap.ui.core.Control} vActivePage 
 *    Id of an element which becomes the new target of this <code>activePage</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#setActivePage
 * @function
 */


	
/**
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page 
 *
 * @name sap.m.Carousel#loadPage
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.pageId Id of the page which is will be loaded
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 *  
 * Carousel requires a new page to be loaded. This event may be used to fill the content of that page 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 *
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#attachLoadPage
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'loadPage' event of this <code>sap.m.Carousel</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#detachLoadPage
 * @function
 */

/**
 * Fire event loadPage to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code> Id of the page which is will be loaded</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Carousel#fireLoadPage
 * @function
 */


/**
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page. 
 *
 * @name sap.m.Carousel#unloadPage
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.pageId Id of the page which is will be unloaded
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 *  
 * Carousel does not display a page any longer and unloads it. This event may be used to clean up the content of that page. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 *
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#attachUnloadPage
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'unloadPage' event of this <code>sap.m.Carousel</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#detachUnloadPage
 * @function
 */

/**
 * Fire event unloadPage to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'pageId' of type <code>string</code> Id of the page which is will be unloaded</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Carousel#fireUnloadPage
 * @function
 */


/**
 * This event is thrown after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions. 
 *
 * @name sap.m.Carousel#pageChanged
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.oldActivePageId Id of the page which was active before the page change.
 * @param {string} oControlEvent.getParameters.newActivePageId Id of the page which is active after the page change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Carousel</code>.<br/> itself. 
 *  
 * This event is thrown after a carousel swipe has been completed. It is triggered both by physical swipe events and through API carousel manipulations such as calling 'next', 'previous' or 'setActivePageId' functions. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Carousel</code>.<br/> itself.
 *
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#attachPageChanged
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pageChanged' event of this <code>sap.m.Carousel</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Carousel#detachPageChanged
 * @function
 */

/**
 * Fire event pageChanged to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'oldActivePageId' of type <code>string</code> Id of the page which was active before the page change.</li>
 * <li>'newActivePageId' of type <code>string</code> Id of the page which is active after the page change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Carousel} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Carousel#firePageChanged
 * @function
 */


/**
 * Call this method to display the next page (corresponds to a swipe right). Returns 'this' for method chaining.
 *
 * @name sap.m.Carousel.prototype.next
 * @function

 * @type sap.m.Carousel
 * @public
 */


/**
 * Call this method to display the previous page (corresponds to a swipe left). Returns 'this' for method chaining.
 *
 * @name sap.m.Carousel.prototype.previous
 * @function

 * @type sap.m.Carousel
 * @public
 */


// Start of sap/m/Carousel.js
jQuery.sap.require('sap.ui.thirdparty.swipe-view'); // unlisted dependency retained


/**
 * Initialize member variables which are needed later on.
 * 
 * @private
 */
sap.m.Carousel.prototype.init = function() {
};

/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.Carousel.prototype.exit = function() {
	if(!!this._oSwipeView) {
		this._oSwipeView.destroy();
	}
	if(!!this._prevButton) {
		this._prevButton.destroy();
	}
	if(!!this._nextButton) {
		this._nextButton.destroy();
	}
	if(this._aBusyIndicators) {
		var i;
		for (i=0; i<3; i++) {
			this._aBusyIndicators[i].destroy();
		}
	}
	this._cleanUpTapBindings();
	
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

/**
 * Cleans up bindings of 'previous' and 'next' button
 * 
 * @private
 */
sap.m.Carousel.prototype._cleanUpTapBindings = function() {
	if(!!this.previousProxy) {
		jQuery.sap.byId(this._getPrevBtnId()).unbind("tap", this.previousProxy);
		delete this.previousProxy;
	}
	if(!!this.nextProxy) {
		jQuery.sap.byId(this._getNextBtnId()).unbind("tap", this.nextProxy);
		delete this.nextProxy;
	}
};

/**
 * Cleans up bindings of 'previous' and 'next' button
 * 
 * @private
 */
sap.m.Carousel.prototype._createTapBindings = function() {
	if(!this.previousProxy) {
		this.previousProxy = jQuery.proxy(this.previous, this);
		jQuery.sap.byId(this._getPrevBtnId()).bind("tap", this.previousProxy);
	}
	if(!this.nextProxy) {
		this.nextProxy = jQuery.proxy(this.next, this);
		jQuery.sap.byId(this._getNextBtnId()).bind("tap", this.nextProxy);
	}
};


/**
 * Cleans up bindings
 * 
 * @private
 */
sap.m.Carousel.prototype.onBeforeRendering = function() {
	this._cleanUpTapBindings();
	
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

/**
 * When this method is called for the first time, a swipe-view instance is created which is renders
 * itself into its dedicated spot within the DOM tree. This instance is used throughout the
 * Carousel instance's lifecycle.
 * 
 * @private
 */
sap.m.Carousel.prototype.onAfterRendering = function() {	
	
	var oScrollParent = jQuery.sap.byId(this.getId()).parent('.sapMPageScroll');
	if(oScrollParent.length > 0) {
		oScrollParent.css('height', '100%');
		jQuery.sap.log.warning(false, "sap.m.Carousel.onAfterRendering: carousel is contained in scroll container. Changed its height to 100%");
	}
	
	var pageList = this.getPages();
	var contentDomRef = jQuery.sap.domById(this._getContentId());
	
	if(!this._oSwipeView) {
		
		if(!this.getActivePage() && pageList.length > 0) {
			//initialize active page id
			this.setActivePage(pageList[0].getId());
		}
		
		this._oSwipeView = new window.SwipeView(contentDomRef, 
			{	numberOfPages : pageList.length,
				loop: this.getLoop()
			});
		
		
		//remove touch listeners because carousel will delegate
		//corresponding events (see carousel's'ontouchstart', ontouchmove', ontouchend' functions)
		var aTEvts = ['touchstart', 'touchmove', 'touchend', 'mousedown', 'mousemove', 'mouseup'];
		var i;
		for (i = 0; i < aTEvts.length; i++) {
			contentDomRef.removeEventListener(aTEvts[i], this._oSwipeView, false);
		}
		//add css class to manipulate slider's properties
		var sCubicBezier = "cubic-bezier(0.33, 0.66, 0.66, 1)";
		jQuery(this._oSwipeView.slider)
			.css("-webkit-transition-timing-function", sCubicBezier)
			.css("transition-timing-function", sCubicBezier);
		
		this._oSwipeView.fnLoadingCallback = jQuery.proxy( this._toggleBusyIcon, this);
		this._oSwipeView.onFlip(jQuery.proxy( this._doSwipeCompleted, this));
		this._oSwipeView.onMoveOut(jQuery.proxy( this._doSwipeStarted, this));
		this._oSwipeView.onMoveIn(jQuery.proxy( this._doMoveIn, this));
		this._oSwipeView.updatePageCount(this.getPages().length);
		
		this._aMasterPageDivs = [];
		this._aBusyIndicators = [];
		
		
		this._rerenderBusinessIndicators(true);
		
		if(!this._moveToActivePage()){
			//this means that initial page has not changed. Since this
			//is the first time, 'unloadPage' must not
			//be fired for initial rendering
			this._doSwipeCompleted(null, true);
		}
	} else {
		//Called after re-rendering
		if(this.getPageIndicatorPlacement() == sap.m.PlacementType.Top) {
			//The page indicator is already rendered as first child of carousel. Since it must stay
			//on TOP, the wrapper, which contains the carousel content is inserted
			//after the page indicator
			jQuery.sap.byId(this.getId()).append(this._oSwipeView.wrapper);
		} else {
			//Page indicator shall displayed at bottom and is already in DOM. Therefore, the 
			//wrapper which contains the carousel elements must be inserted before the page indicator
			jQuery(this._oSwipeView.wrapper).insertBefore(jQuery.sap.byId(this._getNavId()));
		}
		
		this._doSwipeCompleted(null, true);
	}

	//Add tap events to 'Previous' and 'Next' div
	this._createTapBindings();
	
	//listen to resize events
	if(!!contentDomRef /*May be null if carousel is invisible*/) {
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(contentDomRef,  jQuery.proxy(this._handleResize, this));
	}
	
};


/**
 * Called when the control touch start. Delegates corresponding event to swipe-view.
 *
 * @private
 */
sap.m.Carousel.prototype.ontouchstart = function(oEvent) {
	//for controls which need to know if they should handle events from the Carousel control
	if(this._oSwipeView) {
		var oElement = jQuery(oEvent.target).control(0);
		if(!(oElement instanceof sap.m.Slider || oElement instanceof sap.m.Switch)) {
			//Make sure that swipe is executed for all controls except slider
			//and Switch, which themselves require horizontal swiping
			oEvent.originalEvent._sapui_handledByControl = false;
		}
		this._oSwipeView.__start(oEvent);
	}
	oEvent.originalEvent._sapui_handledByControl = true;
};

/**
 * Called when the control touch is moved. Delegates corresponding event to swipe-view.
 *
 * @private
 */
sap.m.Carousel.prototype.ontouchmove = function(oEvent) {
	//for control who need to know if they should handle events from the Carousel control
	if(this._oSwipeView) {
		this._oSwipeView.__move(oEvent);
	}
};

/**
 * Called when the control touch ends. Delegates corresponding event to swipe-view.
 *
 * @private
 */
sap.m.Carousel.prototype.ontouchend = function(oEvent) {
	if(this._oSwipeView) {
		this._oSwipeView.__end(oEvent);
		this._updateActivePage();
	}
};

/**
 * API method to set carousel's active page during runtime.
 * 
 * @param oPage Id of the page or page which shall become active
 *
 */
sap.m.Carousel.prototype.setActivePage = function (oPage) {
	var oPageId = undefined;
	if(typeof(oPage) == 'string') {
		oPageId = oPage;
	} else if (oPage instanceof sap.ui.core.Control) {
		oPageId = oPage.getId();
	}
	
	if(oPageId) {
		this.setAssociation("activePage", oPageId, true);
		var iPageNr = this._getPageNumber(oPageId);
		
		if(!isNaN(iPageNr)) {
			if(!!this._oSwipeView) {
				this._oSwipeView.goToPage(iPageNr);
			}
		} 
	} else {
		jQuery.sap.assert(false, "sap.m.Carousel.prototype.setActivePage: Cannot set active page '" + 
				oPage + "' because it is neither of type 'string' nor a *sap.ui.core.Control'");
	}
	
	return this;
};

/**
 * Private method to add a control to the list of pages which is 
 * displayed in the carousel or to to insert a control at a certain 
 * position into the list of pages.
 * 
 * If the page has already been added, an error message is written 
 * into the log and nothing is done.
 * 
 * @param oPage page which is added to the list of pages to be 
 *		displayed in the carousel
 * @param iIndex position at which oPage shall be added
 */	
sap.m.Carousel.prototype._addPage = function(oPage, iIndex) {
	//Check if page has already been added
	if(jQuery.sap.byId(oPage.getId()).length > 0) {
		jQuery.sap.assert(false, "sap.m.Carousel.prototype._addPage: Cannot add page '" + 
				oPage.getId() + "' because it already has been added. Please remove that page from DOM before adding it to carousel'");
		return;
	}
	
	//Add a css class to views, to make sure they are visible. 
	//There have been issues when the view contains a page
	if(oPage instanceof sap.ui.core.mvc.View) {
		oPage.addStyleClass("sapMCarView");
	}
	
	//Re-render only if there are no pages currently
	//(in this case there is no dom entry available)
	var bDoRerender = this.getPages().length == 0; 
	var bIsInsert = typeof(iIndex) == 'number';
	
	if(bIsInsert){
		this.insertAggregation("pages", oPage, iIndex, !bDoRerender);
	} else {
		this.addAggregation("pages", oPage, !bDoRerender);
	}
	
	//update page indicator if swipe view instance is already present
	if(!!this._oSwipeView) {
		this._oSwipeView.updatePageCount(this.getPages().length);
		
		if(!bDoRerender) {
			if(bIsInsert){
				//removed page may be displayed already. To make sure
				//that this does not cause problems, We will refill all 
				//master pages' content
				var ithContId;
				var i;
				for (i=0; i<3; i++) {
					ithContId = this._getContentId() + "-MstPgCont-" + i;
					jQuery.sap.byId(ithContId).empty();
				}
			}
			//This is necessary because the number of pages has changed
			this._rerenderPageIndicatorDots();
		}
		//Calling 'goToPage' triggers re-calculation of upcoming indices
		//in swipe-view's master pages
		//The currently active page is not changed
		this._oSwipeView.goToPage(this._oSwipeView.page);
	}
	return this;
};

	

/**
 * API method to add a control to the list of pages which is 
 * displayed in the carousel.
 * 
 * @param oPage page which is added to the list of pages to be 
 *		displayed in the carousel
 * @public
 */	
sap.m.Carousel.prototype.addPage = function(oPage) {
	return this._addPage(oPage);
};

/**
 * API method to insert a control at a certain position to the list of
 * pages which is displayed in the carousel.
 * 
 * @param oPage page which is added to the list of pages to be 
 *		displayed in the carousel
 * @param iIndex position at which oPage shall be added
 * @public
 */	
sap.m.Carousel.prototype.insertPage = function(oPage, iIndex) {
	return this._addPage(oPage, iIndex);
};

/**
 * Private method to remove one or all control from the list of pages which is 
 * displayed in the carousel. Used to model removePage, removeAllPages, destroyPages
 * 
 * @param bAll remove all pages
 * @param bDestroy destroy all pages. Only taken into consideration if bAll is true
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return sap.m.Carousel the Carousel instance for method chaining 
 */	
sap.m.Carousel.prototype._removePages = function(bAll, bDestroy, oPage) {
	var result = this;
	if(bAll) {
		if(bDestroy) {
			this.destroyAggregation("pages", true);
		} else {
			result = this.removeAllAggregation("pages", true);
		}
	} else {
		result = this.removeAggregation("pages", oPage, true);
	}
	//re-render if swipe view instance is already present
	if(!!this._oSwipeView) {
		
		//This is necessary because the number of pages has changed
		this._rerenderPageIndicatorDots();
		this._oSwipeView.updatePageCount(this.getPages().length);
		
		//Removed page may be displayed already. To make sure
		//that this does not cause problems, We will refill all 
		//master pages' content
		var ithContId;
		var i;
		for (i=0; i<3; i++) {
			ithContId = this._getContentId() + "-MstPgCont-" + i;
			jQuery.sap.byId(ithContId).empty();
		}
		
		//calling 'goToPage' triggers re-calculation of upcoming indices
		//in swipe-view's master pages
		this._oSwipeView.goToPage(this._oSwipeView.page);
	}
	return result;
};

/**
 * API method to remove a control from the list of pages which is 
 * displayed in the carousel.
 * 
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return the removed page or null
 * @public
 */	
sap.m.Carousel.prototype.removePage = function(oPage) {
	return this._removePages(false, false, oPage); 
};

/**
 * API method to remove all pages which are displayed in the carousel.
 * These pages can be re-used afterwards though, as opposed to 
 * 'destroyPages'.
 * 
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return an array of the removed pages (might be empty)
 * @public
 */	
sap.m.Carousel.prototype.removeAllPages = function() {
	return this._removePages(true, false); 
};

/**
 * API method to remove and destroy all pages which are displayed in the carousel.
 * These pages can not be re-used afterwards.
 * 
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return sap.m.Carousel the Carousel instance for method chaining 
 * @public
 */	
sap.m.Carousel.prototype.destroyPages = function() {
	return this._removePages(true, true); 
};

/**
 * API method to remove all pages which are displayed in the carousel.
 * These pages can be re-used afterwards though, as opposed to 
 * 'destroyPages'.
 * 
 * @param oPage page which shall be removed from the list of pages to be 
 *		displayed in the carousel
 * @return sap.m.Carousel the Carousel instance for method chaining 
 * @public
 */	
sap.m.Carousel.prototype.removePage = function(oPage) {
	return this._removePages(false, false, oPage); 
};


/**
 * API method to set the carousel's height
 *
 * @param oHeight the new height as CSSSize
 * @public
 */
sap.m.Carousel.prototype.setHeight = function(oHeight) {
	//do suppress rerendering
	this.setProperty("height", oHeight, true);
	jQuery.sap.byId(this.getId()).css("height", oHeight);
	return this;
};

/**
 * API method to set the carousel's width
 *
 * @param oWidth the new width as CSSSize
 * @public
 */
sap.m.Carousel.prototype.setWidth = function(oWidth) {
	//do suppress rerendering
	this.setProperty("width", oWidth, true);
	jQuery.sap.byId(this.getId()).css("width", oWidth);
	return this;
};

/**
 * API method to place the page inidicator. 
 *
 * @param oPlacement either sap.m.PlacementType.Top or sap.m.PlacementType.Bottom
 * @public
 */
sap.m.Carousel.prototype.setPageIndicatorPlacement = function(oPlacement) {
	if(sap.m.PlacementType.Top != oPlacement &&
			sap.m.PlacementType.Bottom != oPlacement) {
		jQuery.sap.assert(false, "sap.m.Carousel.prototype.setPageIndicatorPlacement: invalid value '" + 
				oPlacement + "'. Valid values: sap.m.PlacementType.Top, sap.m.PlacementType.Bottom." +
						"\nUsing default value sap.m.PlacementType.Bottom");
		oPlacement = sap.m.PlacementType.Bottom;
	}
	
	//do NOT suppress rerendering
	this.setProperty("pageIndicatorPlacement", oPlacement);
	return this;
};

/**
 * API method to set whether the carousel should loop, i.e
 * show the first page after the last page is reached and vice 
 * versa.
 *
 * @param bLoop the new loop property
 * @public
 */
sap.m.Carousel.prototype.setLoop = function(bLoop) {
	if(!!this._oSwipeView) {
		this._oSwipeView.options.loop = bLoop;
	}
	
	//do suppress rerendering
	this.setProperty("loop", bLoop, true);
	return this;
};

/**
 * API method to set whether the carousel should display the page indicator
 *
 * @param bShowPageIndicator the new show property
 * @public
 */
sap.m.Carousel.prototype.setShowPageIndicator = function(bShowPageIndicator) {
	
	var $PageInd = jQuery.sap.byId(this._getNavId());
	
	if(!!$PageInd) {
		if(bShowPageIndicator) {
			$PageInd.show();
		} else {
			$PageInd.hide();
		}
	}
	
	//do suppress rerendering
	this.setProperty("showPageIndicator", bShowPageIndicator, true);
	return this;
};

/**
 * API method to set whether the carousel should display the busy indicators
 *
 * @param bShowBusyIndicator the new loop property
 * @public
 */
sap.m.Carousel.prototype.setShowBusyIndicator = function(bShowBusyIndicator) {
	//do suppress rerendering
	this.setProperty("showBusyIndicator", bShowBusyIndicator, true);
	this._rerenderBusinessIndicators(false);
	
	
	return this;
};

/**
 * API method to set whether the carousel's busy indicator's.
 *
 * @param sBusyIndicatorSize thet new size. Should be a CSS size, for example '1em' or '24px'.
 * @public
 */
sap.m.Carousel.prototype.setBusyIndicatorSize = function(sBusyIndicatorSize) {
	//do suppress rerendering
	this.setProperty("busyIndicatorSize", sBusyIndicatorSize, true);
	this._rerenderBusinessIndicators(false);
	
	return this;
};

/**
 * API method to show the next page in the page list.
 * @public
 */
sap.m.Carousel.prototype.previous = function () {
	if (!!this._oSwipeView) {
		this._oSwipeView.prev();
		this._updateVisualIndicator(this._oSwipeView.pageIndex);
	}
	return this;
}; 

/**
 * API method to show the previous page in the page list.
 * @public
 */
sap.m.Carousel.prototype.next = function () {
	if (!!this._oSwipeView) {
		this._oSwipeView.next();
		this._updateVisualIndicator(this._oSwipeView.pageIndex);
	}
	return this;
};

/**
 * Called when page swipe is initiated. 
 * 
 * @private
 */
sap.m.Carousel.prototype._doSwipeStarted = function () {
	
	this._oSwipeView.initialSizeCheck();
	
	var pageList = this.getPages();
	var activePageNr = this._oSwipeView.pageIndex;
	//counter in 'for'-loop
	var i;
	
	//show neighboring pages are visible, when the swipe starts, except....
	if(pageList.length > 0) {
		var ithCurrentNr;
		for (i=0; i<3; i++) {
			
			ithCurrentNr = parseInt(this._oSwipeView.masterPages[i].dataset.pageIndex, 10);
			
			if(i != this._oSwipeView.currentMasterPage) {
				//...except for the previous page of the first page and
				//the next page of the last page, if carousel is not looping
				if(!this.getLoop()) {
					if(pageList.length > 2) {
						if((activePageNr == 0 && ithCurrentNr == pageList.length -1) || 
								(activePageNr == pageList.length -1 && ithCurrentNr == 0)) {
							//This way of CSS style manipulation does not comply with our code conventions
							//It is used though, because it is how it's done in the underlying swipe-view.js
							//which I prefer, not to adapt as well.
							this._oSwipeView.masterPages[i].style.visibility = 'hidden';
						}
					} else {
						this._toggleBusyIcon(i, false);
					}
				} else {
					if(pageList.length < 3) {
						this._toggleBusyIcon(i, false);
					}
				}
			}
		}
	}
	
	
	
	//Make sure the visual indicator is updated when pages 
	//are flipped quickly
	this._updateVisualIndicator(this._oSwipeView.pageIndex);
};


/**
 * 'MoveIn' event is triggered instead 'flip' during 'hasty' page flips. Contains
 * a workaround to prevent swipe view from getting stuck after 'hasty' page flip
 * 
 * @private
 */
sap.m.Carousel.prototype._doMoveIn = function () {
	//Delayed call to make sure, any pending rendering is completed
	setTimeout(jQuery.proxy(function() {
		//sync currently displayed page with swipeview index
		if(!!this._oSwipeView) {
			this._doSwipeCompleted();
		}
	}, this), 250);
	
	
};


/**
 * Called after page change is complete. Takes care of the necessary 
 * re-rendering and property updates
 * 
 * @param oEvent generic event parameter
 * @param bInitialLoad if true, 'unloadPage' will not be fired. This is necessary on initial load.
 * @private
 */
sap.m.Carousel.prototype._doSwipeCompleted = function (oEvent, bInitialLoad) {
	var upcoming, i;
	var pageList = this.getPages();
	
	if(pageList.length == 0) {
		return;
	}
	
	//Page swipe is complete. Prepare to fire 'SwipeCompleted' event
	//Figure out ids of previous and next page
	var pPId =  pageList[this._oSwipeView.pageIndex - 1] ?  pageList[this._oSwipeView.pageIndex - 1].getId() : null;
	var nPId =  pageList[this._oSwipeView.pageIndex + 1] ?  pageList[this._oSwipeView.pageIndex + 1].getId() : null;
	
	if(this.getLoop()) {
		if(!pPId) {
			//if in loop mode, the page left to first page is the last page
			pPId = pageList[pageList.length-1].getId();
		} 
		if(!nPId) {
			//if in loop mode, the page right to last page is the first page
			nPId = pageList[0].getId();
		} 
	}
	
	//Put down active page id before for teh 'pageChanged' event 
	var sOldActivePageId = this.getActivePage();
	var rm = sap.ui.getCore().createRenderManager();
	//Reminder for the pages which will be kicked out after swipe. May be more than one if it is a fast swipe
	var aDeletedPages = [];

	//If there are less than 3 pages to display, we do not need
	//to populate all master pages
	var first = pageList.length > 2 ? 0 : 1;
	var last = pageList.length == 1 ? 2 : 3;
	
	for (i=first; i<last; i++) {
		//make sure 'upcoming' is a number. This is necessary if it is used to update
		//swipe view's current page nr
		upcoming = parseInt(this._oSwipeView.masterPages[i].dataset.upcomingPageIndex, 10);
		//first condition in if clause: masterPage needs new child
		//second condition: pageIndex is the dame as upcoming but there is no dom ref
		//this may happen when '_doSwipeCompleted' is triggered during startup
		var current = parseInt(this._oSwipeView.masterPages[i].dataset.pageIndex, 10);
		
		if (upcoming != current || !pageList[upcoming].getDomRef()) {
			aDeletedPages[i] = current; 
			
			//Check if page has been shown before. If not fire 'BeforeFirstShow'
			if(!pageList[upcoming]._bShownInMCarousel) {
				pageList[upcoming]._bShownInMCarousel = true;
				var oBeforeFirstShowEvent = jQuery.Event("BeforeFirstShow");
				oBeforeFirstShowEvent.srcControl = this;
				pageList[upcoming]._handleEvent(oBeforeFirstShowEvent);
			}

			//Fire 'BeforeShow' on upcoming control
			var oBeforeShowEvent = jQuery.Event("BeforeShow");
			oBeforeShowEvent.srcControl = this;
			pageList[upcoming]._handleEvent(oBeforeShowEvent);
			
			if(!!pageList[upcoming].getDomRef()) {
				// Need to remove this element from DOM because it will
				// be added again somewhere else
				jQuery(pageList[upcoming].getDomRef()).remove();
			}
			
			rm.renderControl(pageList[upcoming]);
			rm.flush(jQuery.sap.domById(this._getContentId() + "-MstPgCont-" + i ), false);
			
			//Event is fired before rendering of new page takes place to let clients
			//prepare these pages
			this.fireLoadPage({pageId: pageList[upcoming].getId()});
			
		} 
		var $ithMasterPage = jQuery(this._oSwipeView.masterPages[i]);
		//Page is loaded, remove busy indicator
		if($ithMasterPage.hasClass("swipeview-loading") || bInitialLoad) {
			$ithMasterPage.removeClass("swipeview-loading");
			this._toggleBusyIcon(i, false);
		}
		
		//Make sure that swipe-view pointer to current page is
		//up to date. This may sometimes not be the case, especially after
		//hasty page flips
		if($ithMasterPage.hasClass("swipeview-active")) {
			this._oSwipeView.pageIndex = upcoming; 
			//Also make sure that the master page is not hidden
			//Using same coding style as in swipe-view-js here
			if(bInitialLoad) {
				this._oSwipeView.masterPages[i].style.visibility = '';
			}
		} 
	}
	
	this._updatePageWidths();
	
	//this updates the active page member and the visual indicator
	if(!bInitialLoad) {
		for(i=0; i<3; i++) {
			if(!isNaN(aDeletedPages[i]) && !!pageList[aDeletedPages[i]]) {
				this.fireUnloadPage({ pageId: pageList[aDeletedPages[i]].getId()});
				//Fire 'AfterHide' on discarded control
				var oEvent = jQuery.Event("AfterHide");
				oEvent.srcControl = this;
				pageList[aDeletedPages[i]]._handleEvent(oEvent);
			}
		}
	} 
	this._updateActivePage();
	
	
	
	//Delayed call to make sure, any pending rendering is completed
	setTimeout(jQuery.proxy(function() {
		this._oSwipeView.__resize();
		if(!bInitialLoad) {
			this.firePageChanged({ oldActivePageId: sOldActivePageId,
				newActivePageId: this.getActivePage()});
		}
	}, this), 50);
	//clean up
	rm.destroy();
	//reset global swipe event flag
	this.bSuppressFireSwipeEvents = false;
};

/**
 * Moves the carousel to the currently active page by calling 'next' or 'prev'
 * several times.
 * 
 * @param newActivePageNr number of the new active page. Saves one call of the '_getPageNumber' method
 * @return true if move was necessary
 * @private
 */
sap.m.Carousel.prototype._moveToActivePage = function () {
	var bResult = false;
	var pageList = this.getPages();
	if (!!this._oSwipeView && pageList.length > 0) {
		this.bSuppressFireSwipeEvents = true;
		var lastActivePageNr = this._oSwipeView.pageIndex;
		var newActivePageNr = this._getPageNumber(this.getActivePage());
		
		if(isNaN(newActivePageNr)) {
			jQuery.sap.log.warning(false, "sap.m.Carousel._moveToActivePage: Cannot navigate to page '" + 
					this.getActivePage() + "' because it is not contained in the carousel's pages aggregation. Using 1. page instead");
			
			//initialize active page id
			this.setActivePage(pageList[0].getId());
			newActivePageNr = 0;
		}
		
		//Check if we have to step forward or backward to get to the new active page
		var fnMove = lastActivePageNr < newActivePageNr ? this.next : this.previous;  
		
		while (this._oSwipeView.pageIndex != newActivePageNr) {
			fnMove.apply(this);
			bResult = true;
		}
			
		this.bSuppressFireSwipeEvents = false;
	}
	return bResult;
};

/**
 * Determines the position of a given page in the carousel's page list
 * 
 * @return the position of a given page in the carousel's page list or 'undefined' if it does not exist in the list.
 * @private
 */
sap.m.Carousel.prototype._getPageNumber = function(oPage) {
	var i, result;
	
	for(i=0; i<this.getPages().length; i++) {
		if(this.getPages()[i].getId() == oPage) {
			result = i;
			break;
		}
	}
	return result;
};

/**
 * Updates visual indicator
 * 
 * @param iActivePageNr current active page
 * @private
 */
sap.m.Carousel.prototype._updateVisualIndicator = function (iActivePageNr) {
	if (!!this._oSwipeView) {
		//update visual indicator
		var selectedDot = document.querySelector('#' + this._getNavId() + ' .sapMCrslIndLstItSel');
		if(selectedDot) {
			jQuery.sap.byId(selectedDot.id).removeClass('sapMCrslIndLstItSel');
		}
		var dots = document.querySelectorAll('#' + this._getNavId() + ' .sapMCrslIndLstIt');
		//'dots' may be empty if carousel has already been removed from DOM
		if(dots[iActivePageNr]) {
			jQuery.sap.byId(dots[iActivePageNr].id).addClass('sapMCrslIndLstItSel');
		}
	}
};



/**
 * Updates 'ActivePage' association and the visual indicator. 
 * 
 * @param iActivePageNr current active page
 * @private
 */
sap.m.Carousel.prototype._updateActivePage = function () {
	if (!!this._oSwipeView) {
		var activePageNr = this._oSwipeView.pageIndex;
		var oPage = this.getPages()[activePageNr];
		this.setAssociation("activePage", oPage, true);
		//update visual indicator
		this._updateVisualIndicator(activePageNr);
	}
};


/**
 * Provides ID of indicator list for easy css class updates
 * 
 * @private
 */
sap.m.Carousel.prototype._getNavId = function() {
	return this.getId() + '-nav';
};

/**
 * Provides ID of carousel content for easy css class updates
 * 
 * @private
 */
sap.m.Carousel.prototype._getContentId = function() {
	return this.getId() + '-content';
};

/**
 * Provides ID of previous button for easy css class updates
 * 
 * @private
 */
sap.m.Carousel.prototype._getPrevBtnId = function() {
	return this.getId() + '-prevBtn';
};

/**
 * Provides ID of next button for easy css class updates
 * 
 * @private
 */
sap.m.Carousel.prototype._getNextBtnId = function() {
	return this.getId() + '-nextBtn';
};


/**
 * Refresh sizes after resize event
 * @param oEvent the event parameter
 * @private
 */
sap.m.Carousel.prototype._handleResize = function() {
	if(!!this._oSwipeView){
		this._oSwipeView.__resize();
		this._updatePageWidths();
	}
};


/**
 * Displays busy icon and hides content on a given masterpage or vice versa.
 * @param iMasterPage masterPage which shall be updated
 * @param bShowBusyIcon if true, the busy icon will be displayed on the
 * masterpage and the content will be hidden.
 * @private
 */
sap.m.Carousel.prototype._toggleBusyIcon = function(iMasterPage, bShowBusyIcon) {
	if(bShowBusyIcon) {
		this._aBusyIndicators[iMasterPage].$().show();
		this._aMasterPageDivs[iMasterPage].css("visibility", "hidden");
	} else {
		this._aBusyIndicators[iMasterPage].$().hide();
		this._aMasterPageDivs[iMasterPage].css("visibility", "");
	}
};

/**
 * Workaround for an Android Bugfor image pages: sets the width of each image page to the 
 * currently available width within the device.
 * 
 * @private 
 */
sap.m.Carousel.prototype._updatePageWidths = function() {
	if(jQuery.os.android){
		var pageList = this.getPages();
		var domRef = jQuery.sap.domById(this._getContentId());
		var pageWidth = domRef.clientWidth + "px";
		
		//In Android, we overwrite any widths which have been assigned
		//to the carousel pages to avoid a sizing issue
		for(var i=0; i<pageList.length; i++) {
			if(pageList[i] instanceof sap.m.Image) {
				jQuery.sap.byId(pageList[i].getId()).css("max-width", pageWidth);
			}
		}
	}
};


/**
 * Re-renders the carousel's page indicator dots
 *
 * @private
 */
sap.m.Carousel.prototype._rerenderPageIndicatorDots = function() {
	//The Tap bindings for 'next' and 'previous' button get lost 
	//after re-rendering, so we clean them up
	this._cleanUpTapBindings();
	
	var pageIndicator = jQuery.sap.domById(this._getNavId());
	var rm = sap.ui.getCore().createRenderManager();
	sap.m.CarouselRenderer.renderPageIndicatorDots(rm, this);
	rm.flush(pageIndicator);
	rm.destroy();
	
	//Re-create tap bindings for previous - and next- button
	//after rendering
	this._createTapBindings();
};



/**
 * Re-renders the carousel's business indicators on each swipe view master page.
 * @param bWriteMasterDiv if true, a div for the master page is rendered as well
 *
 * @private
 */
sap.m.Carousel.prototype._rerenderBusinessIndicators = function(bWriteMasterDiv) {
	if(!!this._oSwipeView) {
		var i;
		
		for (i=0; i<3; i++) {
			//Remove the busy indicator's dom element
			var ithIndicator = jQuery.sap.byId(this.getId() + "-indicator-" + i);
			if(ithIndicator.length > 0) {
				ithIndicator.remove();
			}
		}
		
		
		var rm = sap.ui.getCore().createRenderManager();
		var ithContId;
		
		// (re-)render busy indicators
		for (i=0; i<3; i++) {
			ithContId = this._getContentId() + "-MstPgCont-" + i;
			//Make sure content div is rendered even if busy indicator is not shown
			if(bWriteMasterDiv) {
				rm.write("<div id='" + ithContId +"' class='sapMCrslContMstPag'></div>");
			}
			
			var $ithMasterPage = jQuery.sap.domById(this._oSwipeView.masterPages[i].id);
			
			if(!this._aBusyIndicators[i]) {
				this._aBusyIndicators[i] = new sap.m.BusyIndicator(this.getId() + "-indicator-" + i, {size: this.getBusyIndicatorSize()});
			} else {
				this._aBusyIndicators[i].setSize(this.getBusyIndicatorSize());
			}
			
			if(this.getShowBusyIndicator()) {
				rm.renderControl(this._aBusyIndicators[i]);
			}
			rm.flush($ithMasterPage, false, true);
			this._aMasterPageDivs[i] = jQuery.sap.byId(ithContId);
			if(this.getShowBusyIndicator()) {
				//add css class to center busy indicator
				this._aBusyIndicators[i].$().addClass("sapMCrslContMstPag");
				this._aBusyIndicators[i].$().css("position", "absolute");
				this._aBusyIndicators[i].$().css("top", "0px");
			}
		}
		rm.destroy();
		
		//Make sure that busy indicators are hidden, initially
		for (i=0; i<3; i++) {
			this._toggleBusyIcon(i, false);
		}
		
	}
	return this;
};




}; // end of sap.m.Carousel
if ( !jQuery.sap.isDeclared('sap.m.CheckBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.CheckBox.
jQuery.sap.declare("sap.m.CheckBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new CheckBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.CheckBox#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * CheckBox control
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.CheckBox
 */
sap.ui.core.Control.extend("sap.m.CheckBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"selected" : {type : "boolean", group : "Data", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"activeHandling" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.CheckBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.CheckBox.extend
 * @function
 */

sap.m.CheckBox.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>selected</code>.
 * Contains the state of the control whether it is flagged with a check mark, or not
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.m.CheckBox#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setSelected
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible control is not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.CheckBox#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Using this property, the control could be disabled, if required.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.CheckBox#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setEnabled
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code, for example for HTML forms that send data to the server via submit.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.CheckBox#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setName
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the check box
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.CheckBox#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setText
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.CheckBox#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setTextDirection
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of Label
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.CheckBox#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setWidth
 * @function
 */


/**
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switched off, there will not be visual changes on active state. Default value is 'true'
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * @name sap.m.CheckBox#getActiveHandling
 * @function
 */

/**
 * Setter for property <code>activeHandling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bActiveHandling  new value for property <code>activeHandling</code>
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#setActiveHandling
 * @function
 */


/**
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox. 
 *
 * @name sap.m.CheckBox#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.selected Checks whether the CheckBox is flagged or not flagged.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.CheckBox</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.CheckBox</code>.<br/> itself. 
 *  
 * Event is triggered when the control status is changed by the user by selecting or deselecting the checkbox. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.CheckBox</code>.<br/> itself.
 *
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.CheckBox</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CheckBox#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selected' of type <code>boolean</code> Checks whether the CheckBox is flagged or not flagged.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.CheckBox} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.CheckBox#fireSelect
 * @function
 */


// Start of sap/m/CheckBox.js

sap.m.CheckBox.prototype.init = function() {
	this.addActiveState(this);
	jQuery.sap.require("sap.ui.core.IconPool");
	sap.ui.core.IconPool.insertFontFaceStyle();
};


/**
 * Called when the control is touched.
 *
 * @private
 */
sap.m.CheckBox.prototype.ontouchstart = function(oEvent) {
	//for control who need to know if they should handle events from the CheckBox control
	oEvent.originalEvent._sapui_handledByControl = true;
};

sap.m.CheckBox.prototype.setSelected = function(bSelected) {
	jQuery.sap.byId(this.getId()+'-CbBg').toggleClass("sapMCbMarkChecked", bSelected);
	var oCheckBox = jQuery.sap.domById(this.getId()+'-CB');
	if (oCheckBox){
		bSelected ? oCheckBox.setAttribute('checked', 'checked') : oCheckBox.removeAttribute('checked');
	}
	this.setProperty("selected", bSelected, true);
	return this;
}

/**
 * Function is called when CheckBox is tapped.
 * 
 * @private
 */
sap.m.CheckBox.prototype.ontap = function(oEvent) {
	if (this.getEnabled()) {
		var bSelected = !this.getSelected();
		this.setSelected(bSelected);
		this.fireSelect({selected:bSelected});
	}
};

/**
 * add ActiveState to non-supported mobile platform
 * @private
 */
 
sap.m.CheckBox.prototype.addActiveState = function(oControl) {
	if (jQuery.os.blackberry || (jQuery.os.android && (jQuery.os.version.match(/[23]\./)))){
		oControl.addDelegate({
			ontouchstart: function(oEvent){
				jQuery(oControl.getDomRef()).addClass("sapMActive");
			},
			ontouchend: function(oEvent){
				jQuery(oControl.getDomRef()).removeClass("sapMActive");
			}
		});
	}
};

sap.m.CheckBox.prototype.setText = function(sText){
	this.setProperty("text", sText, true);	
	if(this._oLabel){
		this._oLabel.setText(this.getText());
	}else{
		this._createLabel("text", this.getText());
	}
	return this;
};

sap.m.CheckBox.prototype.setWidth = function(sWidth){
	this.setProperty("width", sWidth, true);	
	if(this._oLabel){
		this._oLabel.setWidth(this.getWidth());
	}else{
		this._createLabel("width", this.getWidth());
	}
	return this;
};

sap.m.CheckBox.prototype.setTextDirection = function(sDirection){
	this.setProperty("textDirection", sDirection, true);	
	if(this._oLabel){			
		this._oLabel.setTextDirection(this.getTextDirection());
	}else{
		this._createLabel("textDirection", this.getTextDirection());
	}
	return this;
};

sap.m.CheckBox.prototype.exit = function() {
	if(this._oLabel){
		this._oLabel.destroy();
	}
}

sap.m.CheckBox.prototype._createLabel = function(prop, value){
	this._oLabel = new sap.m.Label(this.getId() + "-label", {
					}).addStyleClass("sapMCbLabel").setParent(this, null, true);
	this._oLabel.setProperty(prop, value, false);
}

}; // end of sap.m.CheckBox
if ( !jQuery.sap.isDeclared('sap.m.Column') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Column.
jQuery.sap.declare("sap.m.Column");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new Column.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHAlign hAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getVAlign vAlign} : sap.ui.core.VerticalAlign (default: sap.ui.core.VerticalAlign.Middle)</li>
 * <li>{@link #getStyleClass styleClass} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMinScreenWidth minScreenWidth} : string</li>
 * <li>{@link #getDemandPopin demandPopin} : boolean (default: false)</li>
 * <li>{@link #getPopinHAlign popinHAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getHeader header} : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The column allows to define column specific properties that will be applied when rendering the List.
 * @extends sap.ui.core.Element
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.Column
 */
sap.ui.core.Element.extend("sap.m.Column", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"hAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"vAlign" : {type : "sap.ui.core.VerticalAlign", group : "Appearance", defaultValue : sap.ui.core.VerticalAlign.Middle},
		"styleClass" : {type : "string", group : "Appearance", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"minScreenWidth" : {type : "string", group : "Behavior", defaultValue : null},
		"demandPopin" : {type : "boolean", group : "Behavior", defaultValue : false},
		"popinHAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin}
	},
	defaultAggregation : "header",
	aggregations : {
    	"header" : {type : "sap.ui.core.Control", multiple : false}, 
    	"footer" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.Column with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Column.extend
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of the column.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Column#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setWidth
 * @function
 */


/**
 * Getter for property <code>hAlign</code>.
 * Horizontal alignment of the column content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Controls with a text align do not inherit the horizontal alignment. You have to set the text align directly on the control.
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>hAlign</code>
 * @public
 * @name sap.m.Column#getHAlign
 * @function
 */

/**
 * Setter for property <code>hAlign</code>.
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oHAlign  new value for property <code>hAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setHAlign
 * @function
 */


/**
 * Getter for property <code>vAlign</code>.
 * Vertical alignment of the cells in column. Possible values are "Top", "Middle", "Bottom"
 * This property does not affect the vertical alignment of header and footer.
 *
 * Default value is <code>sap.ui.core.VerticalAlign.Middle</code>
 *
 * @return {sap.ui.core.VerticalAlign} the value of property <code>vAlign</code>
 * @public
 * @name sap.m.Column#getVAlign
 * @function
 */

/**
 * Setter for property <code>vAlign</code>.
 *
 * Default value is <code>sap.ui.core.VerticalAlign.Middle</code> 
 *
 * @param {sap.ui.core.VerticalAlign} oVAlign  new value for property <code>vAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setVAlign
 * @function
 */


/**
 * Getter for property <code>styleClass</code>.
 * CSS class name for column contents(header, cells and footer of column). This property can be used for different column styling. If column is shown as pop-in then this class name is applied to related pop-in row.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>styleClass</code>
 * @public
 * @name sap.m.Column#getStyleClass
 * @function
 */

/**
 * Setter for property <code>styleClass</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStyleClass  new value for property <code>styleClass</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setStyleClass
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Specifies whether or not the column is visible. Invisible columns are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Column#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setVisible
 * @function
 */


/**
 * Getter for property <code>minScreenWidth</code>.
 * By default column is always shown. If you set this property, control checks the minimum width of the screen to show or hide this column.
 * As you can give specific CSS sizes(e.g: "480px" or "40em"), you can also use sap.m.ScreenSize enumeration(e.g: "Phone", "Tablet", "Desktop", "Small", "Medium", "Large", ....).
 * 
 * sap.m.Column.MediaQuery1->Range1 = 199
 * 
 * This property can be used for responsive design. e.g: "40em"(or "640px" or "Tablet") setting shows this column in iPad(and Desktop) but hides in iPhone.
 * Please also see "demandPopin" property
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>minScreenWidth</code>
 * @public
 * @name sap.m.Column#getMinScreenWidth
 * @function
 */

/**
 * Setter for property <code>minScreenWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMinScreenWidth  new value for property <code>minScreenWidth</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setMinScreenWidth
 * @function
 */


/**
 * Getter for property <code>demandPopin</code>.
 * According to your minScreenWidth settings, the column can be hidden in different screen sizes.
 * Setting this property to true, shows this column as pop-in instead of hiding it.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>demandPopin</code>
 * @public
 * @name sap.m.Column#getDemandPopin
 * @function
 */

/**
 * Setter for property <code>demandPopin</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDemandPopin  new value for property <code>demandPopin</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setDemandPopin
 * @function
 */


/**
 * Getter for property <code>popinHAlign</code>.
 * Horizontal alignment of the pop-in content. Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 * 
 * NOTE: Controls with a text align do not inherit the horizontal alignment.
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>popinHAlign</code>
 * @public
 * @name sap.m.Column#getPopinHAlign
 * @function
 */

/**
 * Setter for property <code>popinHAlign</code>.
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oPopinHAlign  new value for property <code>popinHAlign</code>
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setPopinHAlign
 * @function
 */


/**
 * Getter for aggregation <code>header</code>.<br/>
 * Control to be displayed in the column header.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Column#getHeader
 * @function
 */


/**
 * Setter for the aggregated <code>header</code>.
 * @param oHeader {sap.ui.core.Control}
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setHeader
 * @function
 */
	

/**
 * Destroys the header in the aggregation 
 * named <code>header</code>.
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#destroyHeader
 * @function
 */


/**
 * Getter for aggregation <code>footer</code>.<br/>
 * Control to be displayed in the column footer.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Column#getFooter
 * @function
 */


/**
 * Setter for the aggregated <code>footer</code>.
 * @param oFooter {sap.ui.core.Control}
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#setFooter
 * @function
 */
	

/**
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Column} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Column#destroyFooter
 * @function
 */


// Start of sap/m/Column.js
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


// predefined screen size
sap.m.Column.prototype._screen = "";

// default media value
sap.m.Column.prototype._media = null;

// prototype lookup
sap.m.Column.prototype._getTextAlign = sap.ui.core.Renderer.getTextAlign;

/**
 * @private
 */
sap.m.Column.prototype._clearMedia = function() {
	if (this._media && this._minWidth) {
		if (sap.ui.Device.media.removeRangeSet) {
			sap.ui.Device.media.removeRangeSet(this.getId());
		} else {
			sap.ui.Device.media.detachHandler(this.notifyResize, this, this.getId());
		}		
		delete this._media;
	}
};

/**
 * @private
 */
sap.m.Column.prototype._addMedia = function() {
	if (this._minWidth) {		
		sap.ui.Device.media.initRangeSet(this.getId(), [parseInt(this._minWidth, 10)]);
		sap.ui.Device.media.attachHandler(this._notifyResize, this, this.getId());
		this._media = sap.ui.Device.media.getCurrentRange(this.getId());
		if (this._media) {
			this._media.triggered = false;
			this._media.matches = !!this._media.from;
		}
	}
};

/**
 * Notify parent to re-render
 * Also fire media event for listeners
 *
 * @private
 */
sap.m.Column.prototype._notifyResize = function(oMedia) {
	// ignore the first call
	if (!this._media.triggered) {
		this._media.triggered = true;
		return;
	}
	
	// keep media info
	delete this._media;
	this._media = oMedia;
	this._media.triggered = true;
	this._media.matches = !!oMedia.from;

	// wait all events to come
	jQuery.sap.delayedCall(0, this, function() {
		var parent = this.getParent();
		this.fireEvent("media", this);
		if (parent && parent._onColumnResize) {
			parent._onColumnResize(this);
		}
	});
};


/**
 * @private
 */
sap.m.Column.prototype._validateMinWidth = function(sWidth) {
	if (Object.prototype.toString.call(sWidth) != "[object String]") {
		throw new Error('expected string for property "minScreenWidth" of ' + this);
	}
	if (Object.keys(sap.m.ScreenSizes).indexOf(sWidth.toLowerCase()) != -1) {
		return;
	}
	if (!/^\d+(\.\d+)?(px|em|rem)$/i.test(sWidth)) {
		throw new Error('invalid CSS size("px", "em", "rem" required) or sap.m.ScreenSize enumeration for property "minScreenWidth" of ' + this);
	}
};

/**
 * Checks the given width(px or em), if it is a predefined screen value
 *
 * @private
 */
sap.m.Column.prototype._isWidthPredefined = function(sWidth) {
	var that = this,
		unit = sWidth.replace(/[^a-z]/g, ""),
		baseFontSize = parseInt(sap.m.BaseFontSize, 10) || 16;
	
	jQuery.each(sap.m.ScreenSizes, function(screen, size) {
		if (unit != "px") {
			size /= baseFontSize;
		}
		if (size + unit == sWidth) {
			that._minWidth = this + "px";
			that._screen = screen;
			return false;
		}
	});
};

/**
 * Apply alignment of the Column to Text or Label
 * Also set width to 100% to support wrapping
 *
 * @protected
 *
 * @param {sap.ui.core.Control} oControl List control
 * @param {String} [sAlign] TextAlign enumeration
 * @return {sap.ui.core.Control} oControl
 */
sap.m.Column.prototype.applyAlignTo = function(oControl, sAlign) {
	if ((sap.m.Label && oControl instanceof sap.m.Label) || (sap.m.Text && oControl instanceof sap.m.Text)) {
		var width = oControl.getWidth(),
			domref = oControl.getDomRef();
		
		if (!width || width == "auto" || width == "inherit") {
			oControl.setProperty("width", "100%", true);
			domref && (domref.style.width = "100%");
		}
		
		sAlign = sAlign || this.getHAlign();
		oControl.setProperty("textAlign", sAlign, true);
		domref && (domref.style.textAlign = this.getCssAlign(sAlign));
	}

	return oControl;
};


/**
 * Returns CSS alignment according to column hAlign setting or given parameter
 * for Begin/End values checks the locale settings
 *
 * @param {String} [sAlign] TextAlign enumeration
 * @return {String} left|center|right
 * @protected
 */
sap.m.Column.prototype.getCssAlign = function(sAlign) {
	sAlign = sAlign || this.getHAlign();
	if (sAlign == "Begin" || sAlign == "End") {
		sAlign = this._getTextAlign(sAlign);
	}

	return sAlign.toLowerCase();
};

/**
 * Returns styleClass property and extra responsive class
 *
 * @param {Boolean} [bResponsive] Whether responsive class is needed or not
 * @return {String}
 * @protected
 */
sap.m.Column.prototype.getStyleClass = function(bResponsive) {
	var cls = this.getProperty("styleClass");
	if (!bResponsive) {
		return cls;
	}
	if (this._screen && (!this.getDemandPopin() || !window.matchMedia)) {
		cls += " sapMSize-" + this._screen;
	} else if (this._media && !this._media.matches) {
		cls += " sapMListTblNone";
	}
	return cls;
};


/**
 * Returns visible probability of the column
 *
 * @param {Boolean} [bReturnCache] Whether return cache or new result
 * @return {Boolean}
 * @protected
 */
sap.m.Column.prototype.isNeverVisible = function(bReturnCache) {
	if (bReturnCache) {
		return this._isNeverVisible;
	}

	this._isNeverVisible = false;
	if (!this._minWidth) {
		return false;
	}

	var width = parseFloat(this._minWidth),
		unit = this._minWidth.replace(/[^a-z]/g, ""),
		baseFontSize = parseInt(sap.m.BaseFontSize, 10) || 16;

	if (unit != "px") {
		width *= baseFontSize;
	}

	return this._isNeverVisible = (width > Math.max(window.screen.width, window.screen.height));
};


/**
 * Sets the column index
 *
 * @param {Int} nIndex Whether responsive class is needed or not
 * @protected
 */
sap.m.Column.prototype.setIndex = function(nIndex) {
	if (nIndex > 0) {
		this._index = +nIndex;;
	}
};

/**
 * Display or hide the column from given table
 *
 * @param {Object} oTableDomRef Table dom reference
 * @param {String} [sDisplay] given display value
 * @protected
 */
sap.m.Column.prototype.setDisplay = function(oTableDomRef, sDisplay) {
	if (!this.hasOwnProperty("_index")) {
		return;
	}

	var oParent =  this.getParent(),
		bDisplay = this._media && this._media.matches;
		
	if (!this.getDemandPopin() && this._screen && oParent && oParent._setTableHeaderVisibility) {
		// this means CSS media queries already change the column visibility
		// but we still need to set table header visibility
		// make it sure with timeout rendering phase is done 
		return setTimeout(function() {
			oParent._setTableHeaderVisibility(bDisplay);
		}, 0);
	}

	// configure display settings if needed
	sDisplay = sDisplay || (bDisplay ? "table-cell" : "none");

	// go with native we need speed
	var i = this._index + 1,
		cells = oTableDomRef.querySelectorAll("tr > td:nth-child(" + i + ")"),
		header = oTableDomRef.querySelector("tr > th:nth-child(" + i + ")"),
		length = cells.length;

	header.style.display = sDisplay;
	for (i = 0; i < length; i++) {
		cells[i].style.display = sDisplay;
	}
};

/**
 * Decides if we need media query or not according to given settings
 * Checks given value is known screen size
 *
 * @private
 */
sap.m.Column.prototype.setMinScreenWidth = function(sWidth) {
	// check if setting the old value
	if (sWidth == this.getMinScreenWidth()) {
		return this;
	}

	// first validate the value
	this._validateMinWidth(sWidth);

	// initialize

	this._screen = "";
	this._minWidth = 0;
	this._clearMedia();

	if (sWidth) {
		// check given width is known screen-size
		sWidth = sWidth.toLowerCase();
		var width = sap.m.ScreenSizes[sWidth];
		if (width) {
			width += "px";
			this._screen = sWidth;
		} else {
			this._isWidthPredefined(sWidth);
			width = sWidth;
		}

		// keep the minimum width value
		this._minWidth = width;

		/**
		// OLD: if pop-in is requested or if unknown screen-size is given then go with JS media queries
		// NEW: We always need JS media queries to detect table header visibility
		if (this.getDemandPopin() || !this._screen) {
			this._addMedia();
		}
		*/
		this._addMedia();
	}

	return this.setProperty("minScreenWidth", sWidth);
};

/**
 * Decides if we need media query or not according to given settings
 * if pop-in is demanded then we always need JS media queries
 * if not demanded but if screen size is known CSS media query can handle
 *
 * @private
 */
sap.m.Column.prototype.setDemandPopin = function(bValue) {
	// check if setting the old value
	if (bValue == this.getDemandPopin()) {
		return this;
	}

	// minimum width should have been set
	if (!this.getMinScreenWidth()) {
		return this.setProperty("demandPopin", bValue, true);
	}

	/**
	// OLD: if we need to show pop-in and if there is no media query already
	// NEW: We always need JS media queries to detect table header visibility
	if (!this._media && bValue) {
		this._addMedia();
	} else if (this._media && this._screen && !bValue) {
		this._clearMedia();
	}
	*/

	return this.setProperty("demandPopin", bValue);
};


/**
 * Checks the column will be shown as pop-in
 *
 * @protected
 */
sap.m.Column.prototype.isPopin = function() {
	if (!this.getDemandPopin()) {
		return false;
	}
	if (this._media) {
		return !this._media.matches;
	}
	return false;
};

/**
 * Checks the column will be shown as pop-in
 *
 * @protected
 */
sap.m.Column.prototype.isHidden = function() {
	if (this._media) {
		return !this._media.matches;
	}
	if (this._screen && this._minWidth) {
		return parseFloat(this._minWidth, 10) > window.innerWidth;
	}
	return false;
};

}; // end of sap.m.Column
if ( !jQuery.sap.isDeclared('sap.m.ColumnListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ColumnListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained




/**
 * @class ColumnListItem renderer.
 * @static
 */
sap.m.ColumnListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.m.ColumnListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMListTblRow");
};


sap.m.ColumnListItemRenderer.renderLIContent = function(rm, oLI, oList) {
	var aColumns = oList.getColumns();

	// remove cloned headers
	oLI.destroyAggregation("_clonedHeaders", true);

	// remove pop-in if list is not in rendering phase
	// in rendering phase all pop-ins are already removed
	if (!oList._bRendering) {
		oLI.removePopin();
	}

	oLI.getCells().forEach(function(oCell, i) {
		var cls, oColumn = aColumns[i];
		if (!oColumn || !oColumn.getVisible() || oColumn.isNeverVisible(true) || oColumn.isPopin()) {
			return;
		}

		rm.write("<td");
		rm.addClass("sapMListTblCell");
		rm.writeAttribute("id", oLI.getId() + "_cell" + i);

		// check column properties
		if (oColumn) {
			cls = oColumn.getStyleClass(true);
			cls && rm.addClass(cls);
			oColumn.getVAlign() != "Middle" && rm.addStyle("vertical-align", oColumn.getVAlign().toLowerCase());
			rm.addStyle("text-align", oColumn.getCssAlign());
			rm.writeStyles();
		}

		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oColumn.applyAlignTo(oCell));
		rm.write("</td>");
	});
};


/**
 * Renders pop-ins for Table Rows
 *
 * @private
 *
 * @param {sap.ui.core.RenderManager} rm RenderManager
 * @param {sap.m.List} oList List control
 * @param {sap.m.ListItemBase} oLI List item
 * @param {string} cursor class for LI
 */
sap.m.ColumnListItemRenderer.renderPopin = function(rm, oLI, oList) {
	oLI._popinId = oLI.getId() + "-sub";
	rm.write("<tr class='sapMListTblSubRow'");
	rm.writeAttribute("id", oLI._popinId);
	rm.write("><td");
	rm.writeAttribute("colspan", oList._colCount);
	rm.write("><div class='sapMListTblSubCnt'>");

	oList.getColumns().forEach(function(oColumn, i) {
		if (!oColumn.getVisible() || !oColumn.isPopin()) {
			return;
		}

		var cls = oColumn.getStyleClass(),
			hAlign = oColumn.getPopinHAlign(),
			textAlign = oColumn.getCssAlign(hAlign),
			header = oColumn.getHeader(),
			cell = oLI.getCells()[i];

		/* row start */
		rm.write("<div");
		rm.addClass("sapMListTblSubCntRow");
		cls && rm.addClass(cls);
		rm.writeClasses();
		rm.write(">");

		/* header cell */
		rm.write("<div");
		rm.addStyle("text-align", textAlign);
		rm.addClass("sapMListTblSubCntHdr");
		rm.writeClasses();
		rm.writeStyles();
		rm.write(">");
		if (header) {
			header = header.clone();
			oLI.addAggregation("_clonedHeaders", header, true);
			oColumn.applyAlignTo(header, hAlign);
			rm.renderControl(header);
		}
		rm.write("</div>");

		/* separator cell */
		if (header) {
			rm.write("<div class='sapMListTblSubCntSpr'>:</div>");
		}

		/* value cell */
		rm.write("<div");
		rm.addStyle("text-align", textAlign);
		rm.addClass("sapMListTblSubCntVal");
		rm.writeClasses();
		rm.writeStyles();
		rm.write(">");
		if (cell) {
			oColumn.applyAlignTo(cell, hAlign);
			rm.renderControl(cell);
		}
		rm.write("</div>");

		/* row end */
		rm.write("</div>");
	});

	rm.write("</div></td></tr>");
};
}; // end of sap.m.ColumnListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.CustomListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.CustomListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class CustomListItem renderer.
 * @static
 */
sap.m.CustomListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRenderManager the RenderManager that can be used for writing to
 *            the Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.m.CustomListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMCLI");
};

sap.m.CustomListItemRenderer.renderLIContent = function(rm, oLI) {
	var aContent = oLI.getContent();
	var cLength = aContent.length;
	for ( var i = 0; i < cLength; i++) {
		rm.renderControl(aContent[i]);
	}
};
}; // end of sap.m.CustomListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.CustomTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.m.CustomTileRenderer");

/**
 * @class CustomTile renderer. 
 * @static
 */
sap.m.CustomTileRenderer = sap.ui.core.Renderer.extend(sap.m.TileRenderer);

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oControl an object representation of the control that should be rendered
 */
 sap.m.CustomTileRenderer.render = function(rm, oControl) {
	rm.write("<div ");
	rm.writeControlData(oControl);
	rm.addClass("sapMCustomTile");
    rm.writeClasses();
    rm.write(">");
    rm.write("<div id=\"" + oControl.getId() + "-remove\" class=\"sapMTCRemove\"></div>");
	rm.write("<div class=\"sapMCustomTileContent\">");
	this._renderContent(rm,oControl);
	rm.write("</div></div>");
};

sap.m.CustomTileRenderer._renderContent = function (rm, oTile) {
	rm.renderControl(oTile.getContent());
};

}; // end of sap.m.CustomTileRenderer
if ( !jQuery.sap.isDeclared('sap.m.DateTimeInputRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


jQuery.sap.declare("sap.m.DateTimeInputRenderer");


/**
 * @class DateTimeInput renderer.
 * @static
 *
 * For a common look & feel,
 * DateTimeInputRenderer extends the InputRenderer
 */
sap.m.DateTimeInputRenderer = sap.ui.core.Renderer.extend(sap.m.InputBaseRenderer);

/**
 * Adds control specific class
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.DateTimeInputRenderer.addClasses = function(rm, oControl) {
	rm.addClass("sapMDTI");
	if (oControl.getEnabled() && oControl.getEditable()) {
		rm.addClass("sapMPointer");
	}
};
}; // end of sap.m.DateTimeInputRenderer
if ( !jQuery.sap.isDeclared('sap.m.Dialog') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Dialog.
jQuery.sap.declare("sap.m.Dialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Dialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getType type} : sap.m.DialogType (default: sap.m.DialogType.Standard)</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getStretchOnPhone stretchOnPhone} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : string | sap.m.Button</li>
 * <li>{@link #getRightButton rightButton} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Dialog#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Dialog#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Dialog control is used to interrupt the current processing of an application to prompt the user for information or a response.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Dialog
 */
sap.ui.core.Control.extend("sap.m.Dialog", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"open", "close", "isOpen"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"type" : {type : "sap.m.DialogType", group : "Appearance", defaultValue : sap.m.DialogType.Standard},
		"state" : {type : "sap.ui.core.ValueState", group : "Appearance", defaultValue : sap.ui.core.ValueState.None},
		"stretchOnPhone" : {type : "boolean", group : "Appearance", defaultValue : false}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"_header" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"_leftButton" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"_rightButton" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"_title" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}, 
    	"_icon" : {type : "sap.ui.core.Control", multiple : false, visibility : "hidden"}
	},
	associations : {
		"leftButton" : {type : "sap.m.Button", multiple : false}, 
		"rightButton" : {type : "sap.m.Button", multiple : false}
	},
	events : {
		"beforeOpen" : {}, 
		"afterOpen" : {}, 
		"beforeClose" : {}, 
		"afterClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Dialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Dialog.extend
 * @function
 */

sap.m.Dialog.M_EVENTS = {'beforeOpen':'beforeOpen','afterOpen':'afterOpen','beforeClose':'beforeClose','afterClose':'afterClose'};


/**
 * Getter for property <code>icon</code>.
 * Icon that is displayed in the dialog header. This icon is invisible in iOS platform and it's density aware that you can use the density convention (@2, @1.5, etc.) to provide higher resolution image for higher density screen.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.Dialog#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setIcon
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title text appears in the dialog header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Dialog#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setTitle
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * The type of the dialog. It only affects the look and feel in iOS platform, type message is with button at the bottom inside of in the header.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.m.DialogType} the value of property <code>type</code>
 * @public
 * @name sap.m.Dialog#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.m.DialogType} oType  new value for property <code>type</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setType
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * State affects the icon and the title color. If other than None is set, a predefined icon will be added to the dialog. Setting icon property will overwrite the predefined icon. The default value is None which doesn't add any icon to the Dialog control. This property is by now only supported by blue crystal theme.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Dialog#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oState  new value for property <code>state</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Dialog#setState
 * @function
 */


/**
 * Getter for property <code>stretchOnPhone</code>.
 * When it's set to true, the dialog will be full screen when it runs on a phone.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>stretchOnPhone</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Dialog#getStretchOnPhone
 * @function
 */

/**
 * Setter for property <code>stretchOnPhone</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bStretchOnPhone  new value for property <code>stretchOnPhone</code>
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Dialog#setStretchOnPhone
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the dialog.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Dialog#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Dialog#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Dialog#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Dialog#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#destroyContent
 * @function
 */


/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>leftButton</code> association, or null
 * @public
 * @name sap.m.Dialog#getLeftButton
 * @function
 */

/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vLeftButton 
 *    Id of an element which becomes the new target of this <code>leftButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setLeftButton
 * @function
 */


	
/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>rightButton</code> association, or null
 * @public
 * @name sap.m.Dialog#getRightButton
 * @function
 */

/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vRightButton 
 *    Id of an element which becomes the new target of this <code>rightButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#setRightButton
 * @function
 */


	
/**
 * This event will be fired before the dialog is opened. 
 *
 * @name sap.m.Dialog#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired before the dialog is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachBeforeOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachBeforeOpen
 * @function
 */

/**
 * Fire event beforeOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireBeforeOpen
 * @function
 */


/**
 * This event will be fired after the dialog is opened. 
 *
 * @name sap.m.Dialog#afterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired after the dialog is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachAfterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachAfterOpen
 * @function
 */

/**
 * Fire event afterOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireAfterOpen
 * @function
 */


/**
 * This event will be fired before the dialog is closed. 
 *
 * @name sap.m.Dialog#beforeClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired before the dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachBeforeClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachBeforeClose
 * @function
 */

/**
 * Fire event beforeClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'origin' of type <code>sap.m.Button</code> This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireBeforeClose
 * @function
 */


/**
 * This event will be fired after the dialog is closed. 
 *
 * @name sap.m.Dialog#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Button} oControlEvent.getParameters.origin This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Dialog</code>.<br/> itself. 
 *  
 * This event will be fired after the dialog is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Dialog</code>.<br/> itself.
 *
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#attachAfterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Dialog</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Dialog#detachAfterClose
 * @function
 */

/**
 * Fire event afterClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'origin' of type <code>sap.m.Button</code> This indicates the trigger of closing the dialog. If dialog is closed by either leftButton or rightButton, the button that closes the dialog is set to this parameter. Otherwise this parameter is set to null.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Dialog} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Dialog#fireAfterClose
 * @function
 */


/**
 * Open the dialog.
 *
 * @name sap.m.Dialog.prototype.open
 * @function

 * @type void
 * @public
 */


/**
 * Close the dialog.
 *
 * @name sap.m.Dialog.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * The method checks if the Dialog is open. It returns true when the Dialog is currently open (this includes opening and closing animations), otherwise it returns false.
 *
 * @name sap.m.Dialog.prototype.isOpen
 * @function

 * @type boolean
 * @public
 * @since 1.9.1
 */


// Start of sap/m/Dialog.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ValueState'); // unlisted dependency retained


sap.m.Dialog._bOneDesign = (sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== 'true');

sap.m.Dialog._mStateClasses = {};
sap.m.Dialog._mStateClasses[sap.ui.core.ValueState.None] = "";
sap.m.Dialog._mStateClasses[sap.ui.core.ValueState.Success] = "sapMDialogSuccess";
sap.m.Dialog._mStateClasses[sap.ui.core.ValueState.Warning] = "sapMDialogWarning";
sap.m.Dialog._mStateClasses[sap.ui.core.ValueState.Error] = "sapMDialogError";

sap.m.Dialog._mIcons = {};
sap.m.Dialog._mIcons[sap.ui.core.ValueState.Success] = sap.ui.core.IconPool.getIconURI("accept");
sap.m.Dialog._mIcons[sap.ui.core.ValueState.Warning] = sap.ui.core.IconPool.getIconURI("warning2");
sap.m.Dialog._mIcons[sap.ui.core.ValueState.Error] = sap.ui.core.IconPool.getIconURI("alert");

/* =========================================================== */
/*                  begin: Lifecycle functions                 */
/* =========================================================== */
sap.m.Dialog.prototype.init = function(){
	var that = this;
	this._firstOpen = true;
	this._externalIcon = undefined;
	this._sResizeListenerId = null;
	this._$window = jQuery(window);
	
	if(sap.m.Dialog._bOneDesign){
		this._createHeader();
	}

	this.oPopup = new sap.ui.core.Popup();
	this.oPopup.setShadow(true);
	if(jQuery.device.is.iphone && !this._bMessageType){
		this.oPopup.setModal(true, "sapMDialogTransparentBlk");
	}else{
		this.oPopup.setModal(true, "sapMDialogBlockLayerInit");
	}

	//avoid playing fancy animation in android 2.3
	if(jQuery.os.ios || (jQuery.os.android && jQuery.os.fVersion > 2.4)){
		this.oPopup.setAnimations(jQuery.proxy(this._openAnimation, this), jQuery.proxy(this._closeAnimation, this));
	}

	//the orientationchange event listener
	this._fOrientationChange = jQuery.proxy(this._reposition, this);

	this.oPopup._applyPosition = function(oPosition){
		var $that = that.$();
		//hidden is not neccessary for iphone and it causes blinking
		if(!jQuery.device.is.iphone && that.oPopup.getOpenState() === sap.ui.core.OpenState.OPEN){
			$that.css("visibility", "hidden");
		}
		that._setDimensions();
		that._adjustScrollingPane();
		sap.ui.core.Popup.prototype._applyPosition.call(this, oPosition);
		if(!jQuery.device.is.iphone && that.oPopup.getOpenState() === sap.ui.core.OpenState.OPEN){
			$that.css("visibility", "visible");
		}
	};
	
	this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
		horizontal: false,
		vertical: true,
		zynga: false,
		preventDefault: false,
		nonTouchScrolling: "scrollbar"
	});
};

sap.m.Dialog.prototype.onBeforeRendering = function(){
	if(this._sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

sap.m.Dialog.prototype.exit = function(){
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	
	this._$window.unbind("resize", this._fOrientationChange);
	
	if(this.oPopup){
		this.oPopup.destroy();
		this.oPopup = null;
	}
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}

	if(this._header){
		this._header.destroy();
		this._header = null;
	}
	
	if(this._headerTitle){
		this._headerTitle.destroy();
		this._headerTitle = null;
	}

	if(this._iconImage){
		this._iconImage.destroy();
		this._iconImage = null;
	}
};
/* =========================================================== */
/*                   end: Lifecycle functions                  */
/* =========================================================== */

/* =========================================================== */
/*                    begin: public functions                  */
/* =========================================================== */
sap.m.Dialog.prototype.open = function(){
	var oPopup = this.oPopup;
	if (oPopup.isOpen()){
		return this;
	}
	//reset the close trigger
	this._oCloseTrigger = null;
	
	var $blockLayer = jQuery("#sap-ui-blocklayer-popup");
	if($blockLayer.length > 0){
		var bTransparent = jQuery.device.is.iphone && !this._bMessageType && !this.hasStyleClass("sapMActionSheetDialog");
		$blockLayer.toggleClass("sapMDialogTransparentBlk", bTransparent);
		$blockLayer.toggleClass("sapMDialogBlockLayerInit", !bTransparent);
	}

	this.fireBeforeOpen();
	oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);

	// Open popup
	oPopup.setContent(this);
	if(!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType) {
		oPopup.setPosition("center top", "center bottom", document, "0 0", "fit");
	} else {
		oPopup.setPosition("center center", "center center", document, "0 0", "fit");
	}
	oPopup.open();
	
	//register resize listener on scroll area
	if(!this._sResizeListenerId){
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(jQuery.sap.domById(this.getId() + "-scroll"),  this._fOrientationChange);
	}

	sap.m.InstanceManager.addDialogInstance(this);
	return this;
};

sap.m.Dialog.prototype.close = function(){
	var oPopup = this.oPopup;

	var eOpenState = this.oPopup.getOpenState();
	if(!(eOpenState === sap.ui.core.OpenState.CLOSED || eOpenState === sap.ui.core.OpenState.CLOSING)){
		this.fireBeforeClose({origin: this._oCloseTrigger});
		oPopup.attachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);
		oPopup.close();
	}
	return this;
};

sap.m.Dialog.prototype.isOpen = function(){
	return this.oPopup && this.oPopup.isOpen();
};
/* =========================================================== */
/*                     end: public functions                   */
/* =========================================================== */

/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */
sap.m.Dialog.prototype._handleOpened = function(){
	this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.opened, this._handleOpened, this);
	
	// bind to window resize
	// In android, the orientationchange fires before the size of the window changes
	//  that's why the resize event is used here.
	this._$window.bind("resize", this._fOrientationChange);
	this.fireAfterOpen();
	this._firstOpen = false;
};

sap.m.Dialog.prototype._handleClosed = function(){
	this.oPopup.detachEvent(sap.ui.core.Popup.M_EVENTS.closed, this._handleClosed, this);

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	
	this._$window.unbind("resize", this._fOrientationChange);
	sap.m.InstanceManager.removeDialogInstance(this);
	this.fireAfterClose({origin: this._oCloseTrigger});
};
/* =========================================================== */
/*                      end: event handlers                  */
/* =========================================================== */


/* =========================================================== */
/*                      begin: private functions               */
/* =========================================================== */
sap.m.Dialog.prototype._openAnimation = function($Ref, iRealDuration, fnOpened) {
	$Ref.css("display", "block");
	if(!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType) {
		$Ref.addClass("sapMDialogBottom").removeClass("sapMDialogHidden");
		window.setTimeout(function(){
			$Ref.bind("webkitTransitionEnd transitionend", function(){
				jQuery(this).unbind("webkitTransitionEnd transitionend");
				$Ref.removeClass("sapMDialogSliding");
				fnOpened();
			});
			$Ref.addClass("sapMDialogSliding").removeClass("sapMDialogBottom");
		}, 0);
	} else {
		$Ref.bind("webkitAnimationEnd animationend", function(){
			jQuery(this).unbind("webkitTransitionEnd transitionend");
			fnOpened();
			$Ref.removeClass("sapMDialogOpening");
		});
		$Ref.addClass("sapMDialogOpening");
	}
};

sap.m.Dialog.prototype._closeAnimation = function($Ref, iRealDuration, fnClose) {
	if(!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType) {
		$Ref.bind("webkitTransitionEnd transitionend", function(){
			jQuery(this).unbind("webkitTransitionEnd transitionend");
			$Ref.addClass("sapMDialogHidden").removeClass("sapMDialogBottom").removeClass("sapMDialogSliding");
			fnClose();
		});
		$Ref.addClass("sapMDialogSliding").addClass("sapMDialogBottom");
	} else {
		if(sap.m.Dialog._bOneDesign || !jQuery.os.ios){
			$Ref.bind("webkitAnimationEnd animationend", function(){
				jQuery(this).unbind("webkitTransitionEnd transitionend");
				fnClose();
				$Ref.removeClass("sapMDialogClosing");
			});
			//$Ref.addClass("sapMDialogTransparent sapMDialogClosing");
			$Ref.addClass("sapMDialogClosing");
		}else{
			fnClose();
		}
	}
};

sap.m.Dialog.prototype._setDimensions = function() {
	// Derive width and height from viewport
	this._$window = jQuery(window);
	var iWindowWidth = this._$window.width(),
		iWindowHeight = this._$window.height(),
		$this = this.$(),
		bStretch = this.getStretchOnPhone(),
		iHPaddingToScreen = jQuery.device.is.phone ? 64 : 128,
		iVPaddingToScreen = 16,
		iPaddingLeft = window.parseInt($this.css("padding-left"), 10),
		iPaddingRight = window.parseInt($this.css("padding-right"), 10),
		iPaddingTop = window.parseInt($this.css("padding-top"), 10),
		iPaddingBottom = window.parseInt($this.css("padding-bottom"), 10),
		iMaxWidth = iWindowWidth - iHPaddingToScreen - iPaddingLeft - iPaddingRight,
		iMaxHeight = iWindowHeight - iVPaddingToScreen - iPaddingTop - iPaddingBottom,
		$content = jQuery.sap.byId(this.getId() + "-cont");

	//reset
	$this.css({
		"width": "",
		"height": "",
		"min-width": "",
		"max-width": "",
		"left": "0px",
		"top": "0px",
		"right": "",
		"bottom": "",
		"max-height": ""
	});
	
	$content.css("max-height", "");

	if(jQuery.device.is.tablet || jQuery.device.is.desktop){
		$this.css({
			"min-width": "400px",
			"max-width": iMaxWidth + "px",
			"max-height": iMaxHeight + "px"
		});
	}else{
		if(!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType){
			$this.css({width: "100%",  height: "100%"});
		}else{
			if(sap.m.Dialog._bOneDesign && bStretch){
				$this.css({
					"right": "0px",
					"bottom": "0px",
					"max-height": iWindowHeight + "px"
				});
			}else{
				if(jQuery.device.is.portrait){
					$this.css({
						"width": iMaxWidth + "px",
						"max-height": iMaxHeight + "px"
					});
				}else{
					$this.css({
						"min-width": iWindowHeight + "px",
						"max-width": iMaxWidth + "px",
						"max-height": iMaxHeight + "px"
					});
				}
			}
		}
	}
};

sap.m.Dialog.prototype._adjustScrollingPane = function(){
	var $this = this.$(),
		$content = jQuery.sap.byId(this.getId() + "-cont"),
		iContentPaddingTop = window.parseInt($content.css("padding-top"), 10),
		iContentPaddingBottom = window.parseInt($content.css("padding-bottom"), 10),
		$scrollArea = jQuery.sap.byId(this.getId() + "-scroll"),
		//this is a fix for setting useTransform false in ScrollEnablement.js line 236
		bSAreaPosAbs = $scrollArea.css("position") === "absolute",
		iMaxHeight = bSAreaPosAbs ? window.parseInt($this.css("max-height"), 10) : $this.height(),
		bStretch = this.getStretchOnPhone(),
		iHeaderHeight, iFooterHeight, iMaxValue, iScrollAreaHeight;

	if(!sap.m.Dialog._bOneDesign && jQuery.os.ios && !this._bMessageType){
		iHeaderHeight = $this.children(".sapMBar").outerHeight(true);
		iFooterHeight = 0;
	}else{
		iHeaderHeight = $this.children("header").outerHeight(true);
		iFooterHeight = $this.children("footer").outerHeight(true);
	}
	
	iMaxValue = iMaxHeight - iHeaderHeight - iFooterHeight - iContentPaddingTop - iContentPaddingBottom;
	
	if(bSAreaPosAbs){
		//this is a fix for setting useTransform false in ScrollEnablement.js line 236
		$scrollArea.css("width", "100%");
		iScrollAreaHeight = $scrollArea.outerHeight(true);
		if(sap.m.Dialog._bOneDesign && bStretch && jQuery.device.is.phone){
			$content.css("height", iMaxValue);
		}else{
			$content.css("height", Math.min(iMaxValue, iScrollAreaHeight));
		}
	}else{
		$content.css(((sap.m.Dialog._bOneDesign && bStretch && jQuery.device.is.phone) || (!sap.m.Dialog._bOneDesign && jQuery.device.is.iphone && !this._bMessageType)) ? "height" : "max-height", iMaxValue + "px");
	}
	this._oScroller.refresh();
};

sap.m.Dialog.prototype._reposition = function() {
	var that = this;
	var ePopupState = this.oPopup.getOpenState();
	if(ePopupState !== sap.ui.core.OpenState.OPEN || this._sAvoidRepeatTimer){
		return;
	}
	//this is needed for avoiding firing two consecutive resize events when closing the keyboard in iOS6.
	if(jQuery.support.touch && jQuery.os.ios && jQuery.os.fVersion >= 6){
		this._sAvoidRepeatTimer = window.setTimeout(function(){
			that._sAvoidRepeatTimer = null;
		}, 50);
	}
	this.oPopup._applyPosition(this.oPopup._oLastPosition);
};

sap.m.Dialog.prototype._createHeader = function(){
	if(sap.m.Dialog._bOneDesign || (jQuery.os.ios && !this._bMessageType)){
		if(!this._header){
			// set parent of header to detect changes on title
			this._header = new sap.m.Bar(this.getId()+"-header").addStyleClass("sapMHeader-CTX");
			this.setAggregation("_header", this._header, false);
		}
	}
};

sap.m.Dialog.prototype._getHeader = function(){
	if(!sap.m.Dialog._bOneDesign && !this.getTitle() && !this.getLeftButton() & !this.getRightButton()){
		//if there's no title, no left and right buttons, header isn't shown.
		return null;
	}
	
	this._createHeader();
	return this._header;
};


sap.m.Dialog.prototype._initBlockLayerAnimation = function(){
	//!!!now the animation on blocklayer is removed due to
	//problem with calling open, close, open without any interval
	//then blocklayer can't be removed and it blocks the whole UI
	if(!sap.m.Dialog._bOneDesign && (!jQuery.device.is.iphone || this._bMessageType)){
		// Animating also the block layer
		this.oPopup._showBlockLayer = function(){
			sap.ui.core.Popup.prototype._showBlockLayer.call(this);
			var $blockLayer = jQuery("#sap-ui-blocklayer-popup");
			if(jQuery.os.ios){
				$blockLayer.addClass('sapMDialogBLyInit');
//				setTimeout(function() {
//					$blockLayer.addClass('sapMDialogBLyShown');
//				}, 0);
			}else{
				$blockLayer.addClass("sapMDialogBlockLayerAnimation");
				setTimeout(function(){
					$blockLayer.addClass("sapMDialogBlockLayer");
				}, 0);
			}
		};

		this.oPopup._hideBlockLayer = function(){
			var $blockLayer = jQuery("#sap-ui-blocklayer-popup"), that = this;
			
			if(sap.ui.core.Popup.blStack.length > 1){
				// If there's still popups open, hide block layer without animation
				sap.ui.core.Popup.prototype._hideBlockLayer.call(that);
			}else{
				$blockLayer.removeClass('sapMDialogBlockLayerInit');
				if(jQuery.os.ios){
//					$blockLayer.removeClass('sapMDialogBLyShown');
//					$blockLayer.bind("webkitTransitionEnd", function(){
//						$blockLayer.unbind("webkitTransitionEnd");
						$blockLayer.removeClass("sapMDialogBLyInit");
						sap.ui.core.Popup.prototype._hideBlockLayer.call(that);
						
//					});
				}else{
					$blockLayer.removeClass("sapMDialogBlockLayer");
	
					$blockLayer.bind("webkitTransitionEnd transitionend", function(){
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						sap.ui.core.Popup.prototype._hideBlockLayer.call(that);
						$blockLayer.removeClass("sapMDialogBlockLayerAnimation");
					});
				}
			}
		};
	}else{
		this.oPopup._hideBlockLayer = function(){
			var $blockLayer = jQuery("#sap-ui-blocklayer-popup");
			$blockLayer.removeClass("sapMDialogTransparentBlk");
			sap.ui.core.Popup.prototype._hideBlockLayer.call(this);
		};
	}
};


sap.m.Dialog.prototype._clearBlockLayerAnimation = function(){
	if(jQuery.device.is.iphone && !this._bMessageType){
		delete this.oPopup._showBlockLayer;
		this.oPopup._hideBlockLayer = function(){
			var $blockLayer = jQuery("#sap-ui-blocklayer-popup");
			$blockLayer.removeClass("sapMDialogTransparentBlk");
			sap.ui.core.Popup.prototype._hideBlockLayer.call(this);
		};
	}
};

/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 *
 * @private
 */
sap.m.Dialog.prototype.getScrollDelegate = function() {
	return this._oScroller;
};
/* =========================================================== */
/*                      end: private functions                 */
/* =========================================================== */

/* =========================================================== */
/*                         begin: setters                      */
/* =========================================================== */
sap.m.Dialog.prototype.setLeftButton = function(oButton){
	var that = this;
	if(typeof(oButton) === "string"){
		oButton = sap.ui.getCore().byId(oButton);
	}

	var oOldLeftButton = this.getLeftButton();

	if(oButton && oOldLeftButton === oButton.getId()){
		return this;
	}
	
	if(!this._oLeftButtonDelegate){
		this._oLeftButtonDelegate = {
			ontap: function(){
				that._oCloseTrigger = this;
			}
		};
	}
	
	if(oOldLeftButton){
		oOldLeftButton = sap.ui.getCore().byId(oOldLeftButton);
		oOldLeftButton.removeDelegate(this._oLeftButtonDelegate);
	}
	
	if(oButton){
		oButton.addDelegate(this._oLeftButtonDelegate, true, oButton);
		if(sap.m.Dialog._bOneDesign){
			if( !(oButton.getType() === sap.m.ButtonType.Accept || oButton.getType() === sap.m.ButtonType.Reject)){
				oButton.setType(sap.m.ButtonType.Transparent);
			}
		}
	}
	
	if(!sap.m.Dialog._bOneDesign && jQuery.os.ios && !this._bMessageType){
		this._createHeader();
		if(oButton){
			if(oOldLeftButton){
				this._header.removeAggregation("contentLeft", oOldLeftButton, true);
			}
			this._header.addAggregation("contentLeft", oButton, true);
			this._header.invalidate();
		}else{
			if(oOldLeftButton){
				this._header.removeContentLeft(oOldLeftButton);
			}
		}
	}else{
		if(oButton){
			this.setAggregation("_leftButton", oButton);
		}else{
			if(oOldLeftButton){
				this.removeAggregation("_leftButton", oOldLeftButton);
			}
		}
	}
	return this.setAssociation("leftButton", oButton, !sap.m.Dialog._bOneDesign && jQuery.os.ios && !this._bMessageType);
};

sap.m.Dialog.prototype.setRightButton = function(oButton){
	var that = this;
	if(typeof(oButton) === "string"){
		oButton = sap.ui.getCore().byId(oButton);
	}

	var oOldRightButton = this.getRightButton();

	if(oButton && oOldRightButton === oButton.getId()){
		return this;
	}
	
	if(!this._oRightButtonDelegate){
		this._oRightButtonDelegate = {
			ontap: function(){
				that._oCloseTrigger = this;
			}
		};
	}
	
	if(oOldRightButton){
		oOldRightButton = sap.ui.getCore().byId(oOldRightButton);
		oOldRightButton.removeDelegate(this._oRightButtonDelegate);
	}
	
	if(oButton){
		oButton.addDelegate(this._oRightButtonDelegate, true, oButton);
		if(sap.m.Dialog._bOneDesign){
			if( !(oButton.getType() === sap.m.ButtonType.Accept || oButton.getType() === sap.m.ButtonType.Reject)){
				oButton.setType(sap.m.ButtonType.Transparent);
			}
		}
	}

	if(!sap.m.Dialog._bOneDesign && jQuery.os.ios && !this._bMessageType){
		this._createHeader();
		if(oButton){
			if(oOldRightButton){
				this._header.removeAggregation("contentRight", oOldRightButton, true);
			}
			this._header.addAggregation("contentRight", oButton, true);
			this._header.invalidate();
		}else{
			if(oOldRightButton){
				this._header.removeContentRight(oOldRightButton);
			}
		}
	}else{
		if(oButton){
			this.setAggregation("_rightButton", oButton);
		}else{
			if(oOldRightButton){
				this.removeAggregation("_leftButton", oOldRightButton);
			}
		}
	}
	
	this.setAssociation("rightButton", oButton, !sap.m.Dialog._bOneDesign && jQuery.os.ios && !this._bMessageType);
	return this;
};

sap.m.Dialog.prototype.setTitle = function(sTitle){
	this.setProperty("title", sTitle, true);

	if(this._headerTitle){
		this._headerTitle.setText(sTitle);
	}else{
		this._headerTitle = new sap.m.Label(this.getId() + "-title", {
			text: sTitle
		}).addStyleClass("sapMDialogTitle");
		
		if(sap.m.Dialog._bOneDesign || (jQuery.os.ios && !this._bMessageType)){
			this._createHeader();
			this._header.addContentMiddle(this._headerTitle);
		}else{
			this.setAggregation("_title", this._headerTitle);
		}
	}
	return this;
};

sap.m.Dialog.prototype.setState = function(sState){
	var mFlags = {}, 
		$this = this.$(),
		sName;
	mFlags[sState] = true;
	
	this.setProperty("state", sState, true);
	if(sap.m.Dialog._bOneDesign){
		for(sName in sap.m.Dialog._mStateClasses){
			$this.toggleClass(sap.m.Dialog._mStateClasses[sName], !!mFlags[sName]);
		}
		this.setIcon(sap.m.Dialog._mIcons[sState], true);
	}
};

sap.m.Dialog.prototype.setIcon = function(sIcon, bInternal){
	if(!bInternal){
		this._externalIcon = sIcon;
	}else{
		if(this._externalIcon){
			sIcon = this._externalIcon;
		}
	}
	
	if(sap.m.Dialog._bOneDesign || !jQuery.os.ios){
		//icon is only shown in non iOS platform
		if(sIcon){
			if(sIcon!==this.getIcon()){
				if(this._iconImage){
					this._iconImage.setSrc(sIcon);
				}else{
					this._iconImage = sap.ui.core.IconPool.createControlByURI({
						id: this.getId() + "-icon",
						src: sIcon
					}, sap.m.Image).addStyleClass("sapMDialogIcon");
					
					if(sap.m.Dialog._bOneDesign){
						this._createHeader();
						this._header.insertAggregation("contentMiddle", this._iconImage, 0);
					}else{
						this.setAggregation("_icon", this._iconImage);
					}
				}
			}
		}else{
			var sDialogState = this.getState();
			if(!bInternal && sDialogState !== sap.ui.core.ValueState.None && sap.m.Dialog._bOneDesign){
				if(this._iconImage){
					this._iconImage.setSrc(sap.m.Dialog._mIcons[sDialogState]);
				}
			}else{
				if(this._iconImage){
					this._iconImage.destroy();
					this._iconImage = null;
				}
			}
		}
	}
	
	this.setProperty("icon", sIcon, true);
	return this;
};

sap.m.Dialog.prototype.setType = function(sType){
	if(!sap.m.Dialog._bOneDesign){
		var sOldType = this.getType();
		var $blockRef = jQuery("#sap-ui-blocklayer-popup");
		
		if(sOldType === sType){
			return;
		}
		
		this._bMessageType = (sType === sap.m.DialogType.Message);
	
		//reset blocklayer css and popup animation for iphone when changing the type
		if(jQuery.device.is.iphone){
			if(this._bMessageType){
				if($blockRef.length === 0){
					this.oPopup.setModal(true, "sapMDialogBlockLayerInit");
				}else{
					$blockRef.removeClass("sapMDialogTransparentBlk").addClass("sapMDialogBlockLayerInit");
					if(this.oPopup.isOpen()){
						$blockRef.addClass("sapMBusyBLyInit sapMBusyBLyShown");
					}	
				}
				this.oPopup.setPosition("center center", "center center", document, "0 0", "fit");
				this._initBlockLayerAnimation();
			}else{
				if($blockRef.length === 0){
					this.oPopup.setModal(true, "sapMDialogTransparentBlk");
				}else{
					$blockRef.removeClass("sapMBusyBLyShown sapMBusyBLyInit").addClass("sapMDialogTransparentBlk");
				}
				this.oPopup.setPosition("center top", "center bottom", document, "0 0", "fit");
				this._clearBlockLayerAnimation();
			}
		}
	}
	
	return this.setProperty("type", sType, false);
};
/* =========================================================== */
/*                           end: setters                      */
/* =========================================================== */

sap.m.Dialog.prototype.forceInvalidate = sap.ui.core.Control.prototype.invalidate;

//stop propagating the invalidate to static UIArea before the popover is opened once
//otherwise the open animation can't be seen for the first time
sap.m.Dialog.prototype.invalidate = function(oOrigin){
	if(!this._firstOpen){
		this.forceInvalidate();
	}
};

}; // end of sap.m.Dialog
if ( !jQuery.sap.isDeclared('sap.m.DisplayListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.DisplayListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class DisplayListItem renderer.
 * @static
 */
sap.m.DisplayListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.DisplayListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMDLI");
};

sap.m.DisplayListItemRenderer.renderLIContent = function(rm, oLI) {

	var isLabel = oLI.getLabel();

	// List item label
	if (isLabel) {
		rm.write("<label for='" + oLI.getId() + "-value' class='sapMDLILabel'>");
		rm.writeEscaped(oLI.getLabel());
		rm.write("</label>");
	}
	
	var isValue = oLI.getValue();
	
	// List item value
	if (isValue) {
		rm.write("<div id='" + oLI.getId() + "-value' class='sapMDLIValue'>");
		rm.writeEscaped(oLI.getValue());
		rm.write("</div>");
	}
};

}; // end of sap.m.DisplayListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.FeedListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

// Provides default renderer for the sap.m.FeedListItem
jQuery.sap.declare("sap.m.FeedListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class FeedListItem renderer.
 * @static
 */
sap.m.FeedListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Make sure that parent li is displayed as a horizontal webkit-box.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the
 *            Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oFeedListItem an object representation of the feed list item that
 *            should be rendered
 */
sap.m.FeedListItemRenderer.renderLIAttributes = function(rm, oFeedListItem) {
	rm.addClass("sapMFeedListItemTitleDiv");
	if(oFeedListItem._showSeparators == sap.m.ListSeparators.None)
		rm.addClass("sapMFeedListShowSeparatorsNone");
	else{
		rm.addClass("sapMFeedListShowSeparatorsAll");
	}
	
};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the
 *            Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *            oFeedListItem an object representation of the feed list item that
 *            should be rendered
 */
sap.m.FeedListItemRenderer.renderLIContent = function(rm, oFeedListItem) {
	// convenience variable
	var sMyId = oFeedListItem.getId();
	var bIsDesktop = jQuery.device.is.desktop;

	rm.write('<ARTICLE');
	rm.writeControlData(oFeedListItem);
	rm.addClass('sapMFeedListItem');

	rm.writeClasses();
	rm.write('>');
	
	
	// icon
	if(!!oFeedListItem.getIcon()) {
		rm.write('<figure id="' + sMyId + '-figure" class ="sapMFeedListItemFigure">');
		if(bIsDesktop && !!oFeedListItem.getIconActive()) {
			rm.write('<a id="' + sMyId + '-iconRef" ');
			rm.writeAttribute('href', 'javascript:void(0);');
			rm.write('>');
		}
		rm.writeIcon(oFeedListItem.getIcon(), ['sapMFeedListItemImage'], 
			{ 	id:  sMyId + '-icon',
				alt:  oFeedListItem.getSender(),
			});
		if(bIsDesktop && !!oFeedListItem.getIconActive()) {
			rm.write('</a>');
		}
		rm.write('</figure>');
	}

	// text (starting with sender)
	rm.write('<DIV class= "sapMFeedListItemText ');
	if(!!oFeedListItem.getIcon()) {
		rm.write('sapMFeedListItemHasFigure ');
	}
	
	rm.write('" >');
	rm.write('<p id="' + sMyId + '-text" class="sapMFeedListItemTextText">');
	
	
	
	if(!!oFeedListItem.getSender()) {
		rm.renderControl(oFeedListItem._getLinkControl());
		rm.write(': ');
	}
	rm.writeEscaped(oFeedListItem.getText(), true);
	rm.write('</p class="sapMFeedListItemFooter">');
	// info and date
	rm.write('<p class="sapMFeedListItemFooter">');
	if(!!oFeedListItem.getInfo()) {
		rm.write('<span class="sapMFeedListItemInfo">');
		rm.writeEscaped(oFeedListItem.getInfo());
		rm.write('</span>');
		//Write Interpunct separator if necessary
		if(!!oFeedListItem.getTimestamp()) {
			rm.write('<span class="sapMFeedListItemInterpunct">');
			rm.write("&#x00B7");
			rm.write('</span>');
		}
	}
	if(!!oFeedListItem.getTimestamp()) {
		rm.write('<span class="sapMFeedListItemTimestamp">');
		rm.writeEscaped(oFeedListItem.getTimestamp());
		rm.write('</span>');
	}
	
	rm.write('</p>');
	rm.write('</DIV>');

	rm.write('</ARTICLE>');
};



}; // end of sap.m.FeedListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.FlexBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FlexBox.
jQuery.sap.declare("sap.m.FlexBox");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new FlexBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getDisplayInline displayInline} : boolean (default: false)</li>
 * <li>{@link #getDirection direction} : sap.m.FlexDirection (default: sap.m.FlexDirection.Row)</li>
 * <li>{@link #getFitContainer fitContainer} : boolean (default: false)</li>
 * <li>{@link #getRenderType renderType} : sap.m.FlexRendertype (default: sap.m.FlexRendertype.Div)</li>
 * <li>{@link #getJustifyContent justifyContent} : sap.m.FlexJustifyContent (default: sap.m.FlexJustifyContent.Start)</li>
 * <li>{@link #getAlignItems alignItems} : sap.m.FlexAlignItems (default: sap.m.FlexAlignItems.Stretch)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The FlexBox control builds the container for a flexible box layout.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.FlexBox
 */
sap.ui.core.Control.extend("sap.m.FlexBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"displayInline" : {type : "boolean", group : "Appearance", defaultValue : false},
		"direction" : {type : "sap.m.FlexDirection", group : "Appearance", defaultValue : sap.m.FlexDirection.Row},
		"fitContainer" : {type : "boolean", group : "Appearance", defaultValue : false},
		"renderType" : {type : "sap.m.FlexRendertype", group : "Misc", defaultValue : sap.m.FlexRendertype.Div},
		"justifyContent" : {type : "sap.m.FlexJustifyContent", group : "Appearance", defaultValue : sap.m.FlexJustifyContent.Start},
		"alignItems" : {type : "sap.m.FlexAlignItems", group : "Appearance", defaultValue : sap.m.FlexAlignItems.Stretch}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.core.Control", multiple : true, singularName : "item"}
	}
}});


/**
 * Creates a new subclass of class sap.m.FlexBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FlexBox.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Is the control visible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.FlexBox#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setVisible
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the FlexBox. Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @since 1.9.1
 * @name sap.m.FlexBox#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * @name sap.m.FlexBox#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the FlexBox. Note that when a percentage is given, for the width to work as expected, the width of the surrounding container must be defined.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @since 1.9.1
 * @name sap.m.FlexBox#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * @name sap.m.FlexBox#setWidth
 * @function
 */


/**
 * Getter for property <code>displayInline</code>.
 * Determines whether the flexbox is in block or inline mode
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>displayInline</code>
 * @public
 * @name sap.m.FlexBox#getDisplayInline
 * @function
 */

/**
 * Setter for property <code>displayInline</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisplayInline  new value for property <code>displayInline</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setDisplayInline
 * @function
 */


/**
 * Getter for property <code>direction</code>.
 * Determines the direction of the layout of child elements
 *
 * Default value is <code>Row</code>
 *
 * @return {sap.m.FlexDirection} the value of property <code>direction</code>
 * @public
 * @name sap.m.FlexBox#getDirection
 * @function
 */

/**
 * Setter for property <code>direction</code>.
 *
 * Default value is <code>Row</code> 
 *
 * @param {sap.m.FlexDirection} oDirection  new value for property <code>direction</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setDirection
 * @function
 */


/**
 * Getter for property <code>fitContainer</code>.
 * Determines whether the flexbox will be sized to completely fill its container. If the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>fitContainer</code>
 * @public
 * @name sap.m.FlexBox#getFitContainer
 * @function
 */

/**
 * Setter for property <code>fitContainer</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bFitContainer  new value for property <code>fitContainer</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setFitContainer
 * @function
 */


/**
 * Getter for property <code>renderType</code>.
 * Determines whether the layout is rendered as a series of divs or as an unordered list (ul)
 *
 * Default value is <code>Div</code>
 *
 * @return {sap.m.FlexRendertype} the value of property <code>renderType</code>
 * @public
 * @name sap.m.FlexBox#getRenderType
 * @function
 */

/**
 * Setter for property <code>renderType</code>.
 *
 * Default value is <code>Div</code> 
 *
 * @param {sap.m.FlexRendertype} oRenderType  new value for property <code>renderType</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setRenderType
 * @function
 */


/**
 * Getter for property <code>justifyContent</code>.
 * Determines the layout behavior along the main axis. "SpaceAround" is currently not supported in most non-Webkit browsers.
 *
 * Default value is <code>Start</code>
 *
 * @return {sap.m.FlexJustifyContent} the value of property <code>justifyContent</code>
 * @public
 * @name sap.m.FlexBox#getJustifyContent
 * @function
 */

/**
 * Setter for property <code>justifyContent</code>.
 *
 * Default value is <code>Start</code> 
 *
 * @param {sap.m.FlexJustifyContent} oJustifyContent  new value for property <code>justifyContent</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setJustifyContent
 * @function
 */


/**
 * Getter for property <code>alignItems</code>.
 * Determines the layout behavior of items along the cross-axis. "Baseline" is not supported in Internet Explorer <10.
 *
 * Default value is <code>Stretch</code>
 *
 * @return {sap.m.FlexAlignItems} the value of property <code>alignItems</code>
 * @public
 * @name sap.m.FlexBox#getAlignItems
 * @function
 */

/**
 * Setter for property <code>alignItems</code>.
 *
 * Default value is <code>Stretch</code> 
 *
 * @param {sap.m.FlexAlignItems} oAlignItems  new value for property <code>alignItems</code>
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#setAlignItems
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Flex items within the FlexBox layout
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.FlexBox#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Control} vItem the item to remove or its index or id
 * @return {sap.ui.core.Control} the removed item or null
 * @public
 * @name sap.m.FlexBox#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.FlexBox#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.FlexBox#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.FlexBox} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexBox#destroyItems
 * @function
 */


// Start of sap/m/FlexBox.js


sap.m.FlexBox.prototype.init = function() {
	// Make sure that HBox and VBox have a valid direction
	if(this instanceof sap.m.HBox && (this.getDirection() !== "Row" || this.getDirection() !== "RowReverse")) {
		this.setDirection('Row');
	}
	if(this instanceof sap.m.VBox && (this.getDirection() !== "Column" || this.getDirection() !== "ColumnReverse")) {
		this.setDirection('Column');
	}
};

sap.m.FlexBox.prototype.setDisplayInline = function(bInline) {
	var sDisplay = "";

	this.setProperty("displayInline", bInline, false);
	if(bInline) {
		sDisplay = "inline-flex";
	} else {
		sDisplay = "flex";
	}
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "display", sDisplay);
	return this;
};

sap.m.FlexBox.prototype.setDirection = function(sValue) {
	this.setProperty("direction", sValue, false);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-direction", sValue);
	return this;
};

sap.m.FlexBox.prototype.setFitContainer = function(sValue) {
	if(sValue && !(this.getParent() instanceof sap.m.FlexBox)) {
		jQuery.sap.log.info("FlexBox fitContainer set to true. Remember, if the FlexBox is inserted into a Page, the property 'enableScrolling' of the Page needs to be set to 'false' for the FlexBox to fit the entire viewport.");
		var $flexContainer = jQuery.sap.byId(this.getId());
		$flexContainer.css("width", "auto");
		$flexContainer.css("height", "100%");
	}
	
	this.setProperty("fitContainer", sValue, false);

	return this;
};

//TODO Enable wrapping when any browser supports it
/*sap.m.FlexBox.prototype.setJustifyContent = function(sValue) {
	this.setProperty("wrap", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-wrap", sValue);
	return this;
}*/

sap.m.FlexBox.prototype.setJustifyContent = function(sValue) {
	this.setProperty("justifyContent", sValue, false);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "justify-content", sValue);
	return this;
};

sap.m.FlexBox.prototype.setAlignItems = function(sValue) {
	this.setProperty("alignItems", sValue, false);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "align-items", sValue);
	return this;
};

sap.m.FlexBox.prototype.setAlignContent = function(sValue) {
	this.setProperty("alignContent", sValue, false);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "align-content", sValue);
	return this;
};

sap.m.FlexBox.prototype.onAfterRendering = function() {
	if(jQuery.support.useFlexBoxPolyfill) {
		// Check for parent FlexBoxes. Size calculations need to be made from top to bottom
		// while the renderer goes from bottom to top.
		var currentElement = this;
		var parent = null;
		jQuery.sap.log.info("Check #"+currentElement.getId()+" for nested FlexBoxes");

		for (parent = currentElement.getParent();
			parent !== null && parent !== undefined && 
			(parent instanceof sap.m.FlexBox
			|| (parent.getLayoutData() !== null && parent.getLayoutData() instanceof sap.m.FlexItemData));
			) {
			currentElement = parent;
			parent = currentElement.getParent();
		}

		this.sanitizeChildren(this);
		this.renderFlexBoxPolyFill();
	}
};

/*
 * @private
 */
sap.m.FlexBox.prototype.sanitizeChildren = function(oControl) {
	// Check the flex items
	var aChildren = oControl.getItems();
	for (var i = 0; i < aChildren.length; i++) {
		if(aChildren[i].getVisible === undefined || aChildren[i].getVisible()) {
			var $child = "";
			if(aChildren[i] instanceof sap.m.FlexBox) {
				$child = jQuery.sap.byId(aChildren[i].getId());
			} else {
				$child = jQuery.sap.byId(aChildren[i].getId()).parent();	// Get wrapper <div>
			}
			var domchild =  jQuery.sap.domById(aChildren[i].getId());
			$child.width("auto");
			//$child.height("100%");
			if(aChildren[i] instanceof sap.m.FlexBox) {
				this.sanitizeChildren(aChildren[i]);
			}
		}
	}
};

/*
 * @private
 */
sap.m.FlexBox.prototype.renderFlexBoxPolyFill = function() {
	var flexMatrix = [];
	var ordinalMatrix = [];

	// Prepare flex and ordinal matrix
	var aChildren = this.getItems();
	for (var i = 0; i < aChildren.length; i++) {
		// If no visible property or if visible
		if(aChildren[i].getVisible === undefined || aChildren[i].getVisible()) {
			// Get layout properties
			var oLayoutData = aChildren[i].getLayoutData();

			if(oLayoutData !== "undefined" && oLayoutData !== null && oLayoutData instanceof sap.m.FlexItemData) {
				if(oLayoutData.getGrowFactor() !== 1) {
					flexMatrix.push(oLayoutData.getGrowFactor());
				} else {
					flexMatrix.push(1);		// default value
				}
				if(oLayoutData.getOrder() != 0) {
					ordinalMatrix.push(oLayoutData.getOrder());
				} else {
					ordinalMatrix.push(0);	// default value
				}
			}
		}
	}

	if(flexMatrix.length === 0) flexMatrix = null;
	if(ordinalMatrix.length === 0) ordinalMatrix = null;

	if(this.getFitContainer()) {
		// Call setter for fitContainer to apply the appropriate styles which are normally applied by the FlexBoxStylingHelper
		this.setFitContainer(true);
	}

	var oSettings = {
	    direction : this.getDirection(),
	    alignItems : this.getAlignItems(),
	    justifyContent : this.getJustifyContent(),
	    flexMatrix : flexMatrix,
	    ordinalMatrix : ordinalMatrix
	};

	sap.m.FlexBoxStylingHelper.applyFlexBoxPolyfill(this.getId(), oSettings);
};

}; // end of sap.m.FlexBox
if ( !jQuery.sap.isDeclared('sap.m.FlexBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.FlexBoxRenderer");

/**
 * @class FlexBox renderer
 * @static
 */
sap.m.FlexBoxRenderer = {};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.FlexBoxRenderer.render = function(oRm, oControl) {
	// Return immediately if control is invisible
	if (!oControl.getVisible()) {
		return;
	}
	
	if (!jQuery.support.flexBoxLayout && !jQuery.support.newFlexBoxLayout && !jQuery.support.ie10FlexBoxLayout) {
		jQuery.sap.log.warning("This browser does not support Flexible Box Layouts natively.");
		sap.m.FlexBoxRenderer.usePolyfill = true;
	}

	// Make sure HBox and VBox don't get the wrong direction and get the appropriate class
	var hvClass = "";
	if(oControl.getDirection() === "Row" || oControl.getDirection() === "RowReverse") {
		if(oControl instanceof sap.m.VBox) {
			jQuery.sap.log.error("Flex direction cannot be set to Row or RowReverse on VBox controls.");
		} else {
			hvClass = "sapMHBox";
		}
	} else if(oControl.getDirection() === "Column" || oControl.getDirection() === "ColumnReverse"){
		if(oControl instanceof sap.m.HBox) {
			jQuery.sap.log.error("Flex direction cannot be set to Column or ColumnReverse on HBox controls.");
		} else {
			hvClass = "sapMVBox";
		}
	}

	// Special treatment if FlexBox is itself an item of a parent FlexBox
	var oParent = oControl.getParent();
	if(oControl.getParent() instanceof sap.m.FlexBox) {
		oRm.addClass("sapMFlexItem");


		// Set layout properties
		var oLayoutData = oControl.getLayoutData();
		if(oLayoutData instanceof sap.m.FlexItemData && !sap.m.FlexBoxRenderer.usePolyfill) {
			sap.m.FlexBoxStylingHelper.setFlexItemStyles(oRm, oLayoutData);
		}

		if(oParent.getRenderType() === 'List') {
			oRm.write('<li');
			oRm.writeClasses();
			oRm.writeStyles();
		}
	}

	if(oControl.getRenderType() === 'List') {
		oRm.write('<ul');
	} else {
		oRm.write('<div');
	}

	oRm.writeControlData(oControl);
	oRm.addClass("sapMFlexBox");
	oRm.addClass(hvClass);
	oRm.writeClasses();
	oRm.addStyle("width", oControl.getWidth());
	oRm.addStyle("height", oControl.getHeight());
	if(!sap.m.FlexBoxRenderer.usePolyfill) {
		sap.m.FlexBoxStylingHelper.setFlexBoxStyles(oRm, oControl);
	}
	oRm.writeStyles();
	var sTooltip = oControl.getTooltip_AsString();
	if (sTooltip) {
		oRm.writeAttributeEscaped("title", sTooltip);
	}
	oRm.write(">");

	// Now render the flex items
	var aChildren = oControl.getItems();
	for (var i = 0; i < aChildren.length; i++) {
		if(aChildren[i].getVisible === undefined || aChildren[i].getVisible()) {
			// Create wrapper
			if(!(aChildren[i] instanceof sap.m.FlexBox)) {
				if(oControl.getRenderType() === 'List') {
					oRm.write('<li');
				} else {
					oRm.write('<div');
				}

				// Set layout properties
				var oLayoutData = aChildren[i].getLayoutData();
				if(oLayoutData instanceof sap.m.FlexItemData) {
					if(oLayoutData.getId()) {
						oRm.write(" id='" + oLayoutData.getId() + "'");
					}
					if(oLayoutData.getStyleClass()) {
						oRm.addClass(oLayoutData.getStyleClass());
					}
					
					if(!sap.m.FlexBoxRenderer.usePolyfill) {
						sap.m.FlexBoxStylingHelper.setFlexItemStyles(oRm, oLayoutData);
					}

					// ScrollContainer needs height:100% on the flex item
					if(aChildren[i] instanceof sap.m.ScrollContainer) {
						oRm.addStyle("height", "100%");
					}
					oRm.writeStyles();
				}

				oRm.addClass("sapMFlexItem");
				oRm.writeClasses();
				oRm.write(">");

				// Render control
				oRm.renderControl(aChildren[i]);

				// Close wrapper
				if(oControl.getRenderType() === 'List') {
					oRm.write('</li>');
				} else {
					oRm.write('</div>');
				}
			} else {
				// Render control
				oRm.renderControl(aChildren[i]);
			}
		}
	}
	
	// Close the flexbox
	if(oControl.getRenderType() === "List") {
		oRm.write("</ul>");
	} else {
		oRm.write("</div>");
	}
};
}; // end of sap.m.FlexBoxRenderer
if ( !jQuery.sap.isDeclared('sap.m.FlexItemData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FlexItemData.
jQuery.sap.declare("sap.m.FlexItemData");

jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained


/**
 * Constructor for a new FlexItemData.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAlignSelf alignSelf} : sap.m.FlexAlignSelf (default: sap.m.FlexAlignSelf.Auto)</li>
 * <li>{@link #getOrder order} : int (default: 0)</li>
 * <li>{@link #getGrowFactor growFactor} : float (default: 0)</li>
 * <li>{@link #getStyleClass styleClass} : string (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.LayoutData#constructor sap.ui.core.LayoutData}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Holds layout data for a FlexBox
 * @extends sap.ui.core.LayoutData
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.FlexItemData
 */
sap.ui.core.LayoutData.extend("sap.m.FlexItemData", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"alignSelf" : {type : "sap.m.FlexAlignSelf", group : "Misc", defaultValue : sap.m.FlexAlignSelf.Auto},
		"order" : {type : "int", group : "Misc", defaultValue : 0},
		"growFactor" : {type : "float", group : "Misc", defaultValue : 0},
		"styleClass" : {type : "string", group : "Misc", defaultValue : '', deprecated: true}
	}
}});


/**
 * Creates a new subclass of class sap.m.FlexItemData with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FlexItemData.extend
 * @function
 */


/**
 * Getter for property <code>alignSelf</code>.
 * Determines cross-axis alignment of individual element (not currently supported in Internet Explorer)
 *
 * Default value is <code>Auto</code>
 *
 * @return {sap.m.FlexAlignSelf} the value of property <code>alignSelf</code>
 * @public
 * @name sap.m.FlexItemData#getAlignSelf
 * @function
 */

/**
 * Setter for property <code>alignSelf</code>.
 *
 * Default value is <code>Auto</code> 
 *
 * @param {sap.m.FlexAlignSelf} oAlignSelf  new value for property <code>alignSelf</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setAlignSelf
 * @function
 */


/**
 * Getter for property <code>order</code>.
 * Determines the display order of flex items independent of their source code order.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>order</code>
 * @public
 * @name sap.m.FlexItemData#getOrder
 * @function
 */

/**
 * Setter for property <code>order</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iOrder  new value for property <code>order</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setOrder
 * @function
 */


/**
 * Getter for property <code>growFactor</code>.
 * Determines the flexibility of the flex item when allocatable space is remaining.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>growFactor</code>
 * @public
 * @name sap.m.FlexItemData#getGrowFactor
 * @function
 */

/**
 * Setter for property <code>growFactor</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fGrowFactor  new value for property <code>growFactor</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FlexItemData#setGrowFactor
 * @function
 */


/**
 * Getter for property <code>styleClass</code>.
 * The style class will be applied to the flex item and can be used for CSS selectors
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>styleClass</code>
 * @public
 * @deprecated Since version 1.11.2. 
 * Generic addStyleClass method is available on the control
 * @name sap.m.FlexItemData#getStyleClass
 * @function
 */

/**
 * Setter for property <code>styleClass</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sStyleClass  new value for property <code>styleClass</code>
 * @return {sap.m.FlexItemData} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.11.2. 
 * Generic addStyleClass method is available on the control
 * @name sap.m.FlexItemData#setStyleClass
 * @function
 */


// Start of sap/m/FlexItemData.js


sap.m.FlexItemData.prototype.setAlignSelf = function(sValue) {
	this.setProperty("alignSelf", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "align-self", sValue);
	return this;
};

sap.m.FlexItemData.prototype.setOrder = function(sValue) {
	this.setProperty("order", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "order", sValue);
	return this;
};

sap.m.FlexItemData.prototype.setGrowFactor = function(sValue) {
	this.setProperty("growFactor", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-grow", sValue);
	return this;
};

//TODO Uncomment when property is supported by any browser
/*sap.m.FlexItemData.prototype.setShrinkFactor = function(sValue) {
	this.setProperty("shrinkFactor", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-shrink", sValue);
	return this;
};*/

//TODO Uncomment when property is supported by any browser
/*sap.m.FlexItemData.prototype.setBaseSize = function(sValue) {
	this.setProperty("baseSize", sValue, true);
	sap.m.FlexBoxStylingHelper.setStyle(null, this, "flex-basis", sValue);
	return this;
};*/

}; // end of sap.m.FlexItemData
if ( !jQuery.sap.isDeclared('sap.m.GroupHeaderListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.GroupHeaderListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class GroupHeaderListItem renderer.
 * @static
 */
sap.m.GroupHeaderListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.GroupHeaderListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMGHLI");
};


/**
 * Renders the List item content
 *
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 * @param [{Int}] nColColunt
 *          If this control is inside the table then this param can be used for row spanning
 */
sap.m.GroupHeaderListItemRenderer.renderLIContent = function(rm, oLI, nColColunt) {

	var sTitle = oLI.getTitle();
	nColColunt && rm.write("<td colspan='" + nColColunt + "'>");

	// List item label
	if (sTitle) {
		rm.write("<label for='" + oLI.getId() + "-value' class='sapMGHLITitle'>");
		rm.writeEscaped(sTitle);

		var iCount = oLI.getCount();
		if (iCount !== undefined && iCount !== "") {
			rm.writeEscaped(" (" + iCount + ")");
		}
		rm.write("</label>");
	}

	nColColunt && rm.write("</td>");
};

}; // end of sap.m.GroupHeaderListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.GrowingListRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */


jQuery.sap.declare("sap.m.GrowingListRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained




/**
 * @class GrowingList renderer. 
 * @static
 */
sap.m.GrowingListRenderer = sap.ui.core.Renderer.extend(sap.m.ListRenderer);


/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.GrowingListRenderer.renderGrowingListContent = function(rm, oControl) {
	rm.write("<ul id='" + oControl.getId() + "-triggerList'");
	
	if (oControl.getScrollToLoad()) {
		rm.addStyle("display", "none");
		rm.writeStyles();
	}	
	
	// no header or footer no div
	rm.addClass("sapMListUl");
	rm.addClass("sapMGrowingList");

	if (oControl.getInset()) {
		rm.addClass("sapMListInset");
		if (oControl.getHeaderText()) {
			rm.addClass("sapMListInsetHdr");
		}
		if (oControl.getFooterText()) {
			rm.addClass("sapMListInsetFtr");
		}
	}
	rm.writeClasses();
	rm.write(">");
	
	var oActionItem;
	if (oControl.getScrollToLoad()) {
		oActionItem = oControl._getLoading(oControl.getId() + "-loading");
	} else {
		oActionItem = oControl._getTrigger(oControl.getId() + "-trigger");
	}

	// this variable is needed to render loading indicator in list even in table mode
	oActionItem._renderInList = true;

	rm.renderControl(oActionItem);
	
	rm.write("</ul>");
}; 
}; // end of sap.m.GrowingListRenderer
if ( !jQuery.sap.isDeclared('sap.m.HBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.HBox.
jQuery.sap.declare("sap.m.HBox");



/**
 * Constructor for a new HBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The HBox control builds the container for a horizontal flexible box layout. HBox is a convenience control as it is just a specialized FlexBox control.
 * @extends sap.m.FlexBox
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.HBox
 */
sap.m.FlexBox.extend("sap.m.HBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m"
}});


/**
 * Creates a new subclass of class sap.m.HBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.HBox.extend
 * @function
 */


// Start of sap/m/HBox.js

}; // end of sap.m.HBox
if ( !jQuery.sap.isDeclared('sap.m.HBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.HBoxRenderer");


/**
 * @class HBox renderer.
 * @static
 */
sap.m.HBoxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.HBoxRenderer.render = function(oRm, oControl){
	sap.m.FlexBoxRenderer.render.apply(this, [oRm, oControl]);
};

}; // end of sap.m.HBoxRenderer
if ( !jQuery.sap.isDeclared('sap.m.IconTabBar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.IconTabBar.
jQuery.sap.declare("sap.m.IconTabBar");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new IconTabBar.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowSelection showSelection} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.IconTab[]</li>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.IconTabBar#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A tab bar with large icons
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.IconTabBar
 */
sap.ui.core.Control.extend("sap.m.IconTabBar", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"showSelection" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	aggregations : {
    	"items" : {type : "sap.m.IconTab", multiple : true, singularName : "item"}, 
    	"content" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.IconTabBar with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.IconTabBar.extend
 * @function
 */

sap.m.IconTabBar.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>showSelection</code>.
 * Defines whether the current selection should be visualized
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showSelection</code>
 * @public
 * @name sap.m.IconTabBar#getShowSelection
 * @function
 */

/**
 * Setter for property <code>showSelection</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowSelection  new value for property <code>showSelection</code>
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#setShowSelection
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items displayed in the IconTabBar
 * 
 * @return {sap.m.IconTab[]}
 * @public
 * @name sap.m.IconTabBar#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.m.IconTab}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.m.IconTab}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.m.IconTab} vItem the item to remove or its index or id
 * @return {sap.m.IconTab} the removed item or null
 * @public
 * @name sap.m.IconTabBar#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.IconTab[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.IconTabBar#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.IconTab</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.IconTab}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.IconTabBar#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#destroyItems
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content displayed below the IconTabBar
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.IconTabBar#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param oContent {sap.ui.core.Control}
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#destroyContent
 * @function
 */


/**
 * This event will be fired before an item is selected. 
 *
 * @name sap.m.IconTabBar#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.IconTabFilter} oControlEvent.getParameters.item The selected item.
 * @param {string} oControlEvent.getParameters.key The key of the selected item.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.IconTabBar</code>.<br/> itself. 
 *  
 * This event will be fired before an item is selected. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.IconTabBar</code>.<br/> itself.
 *
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.IconTabBar</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabBar#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'item' of type <code>sap.m.IconTabFilter</code> The selected item.</li>
 * <li>'key' of type <code>string</code> The key of the selected item.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.IconTabBar} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.IconTabBar#fireSelect
 * @function
 */


// Start of sap/m/IconTabBar.js
/**
 * Init
 */
sap.m.IconTabBar.prototype.init = function() {

};

/**
 * Exit
 */
sap.m.IconTabBar.prototype.exit = function() {

};

/**
 * setSelectedItem
 */
sap.m.IconTabBar.prototype.setSelectedItem = function(oItem) {
	this.oSelectedItem = oItem;
	this.adjustArrow();
	this.fireSelect({
		selectedItem: this.oSelectedItem,
		selectedKey: this.oSelectedItem.getKey()
	});
};

/**
 * adjustArrow
 */
sap.m.IconTabBar.prototype.adjustArrow = function(){
	var $arrow = jQuery.sap.byId(this.getId() + "-arrow"),
		$item;
	if (this.oSelectedItem) {
		$item = this.oSelectedItem.$();
		var iLeft = $item[0].offsetLeft + $item.outerWidth() / 2 - $arrow.width() / 2;
		$arrow.css("left", iLeft + "px");
	}
};

/**
 * afterRendering
 */
sap.m.IconTabBar.prototype.onAfterRendering = function(){
	if (!this.oSelectedItem) {
		this.oSelectedItem = this.getItems()[0];
	}
	this.adjustArrow();
};

/**
 * Called after the theme has been switched, required for new width calc
 * @private
 */
sap.m.IconTabBar.prototype.onThemeChanged = function(oEvent){
	this.adjustArrow();
};

}; // end of sap.m.IconTabBar
if ( !jQuery.sap.isDeclared('sap.m.IconTabFilter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.IconTabFilter.
jQuery.sap.declare("sap.m.IconTabFilter");

jQuery.sap.require('sap.ui.core.Item'); // unlisted dependency retained


/**
 * Constructor for a new IconTabFilter.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getCount count} : string (default: '')</li>
 * <li>{@link #getShowAll showAll} : boolean (default: false)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li>
 * <li>{@link #getIconColor iconColor} : sap.ui.core.IconColor (default: sap.ui.core.IconColor.Default)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Item#constructor sap.ui.core.Item}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The filter item class
 * @extends sap.ui.core.Item
 * @implements sap.m.IconTab
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.IconTabFilter
 */
sap.ui.core.Item.extend("sap.m.IconTabFilter", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.m.IconTab"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"count" : {type : "string", group : "Data", defaultValue : ''},
		"showAll" : {type : "boolean", group : "Misc", defaultValue : false},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : ''},
		"iconColor" : {type : "sap.ui.core.IconColor", group : "Appearance", defaultValue : sap.ui.core.IconColor.Default}
	}
}});


/**
 * Creates a new subclass of class sap.m.IconTabFilter with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.IconTabFilter.extend
 * @function
 */


/**
 * Getter for property <code>count</code>.
 * The number of available items if this filter is applied
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>count</code>
 * @public
 * @name sap.m.IconTabFilter#getCount
 * @function
 */

/**
 * Setter for property <code>count</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCount  new value for property <code>count</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setCount
 * @function
 */


/**
 * Getter for property <code>showAll</code>.
 * Enables special visualiation for disabled filter (show all items)
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showAll</code>
 * @public
 * @name sap.m.IconTabFilter#getShowAll
 * @function
 */

/**
 * Setter for property <code>showAll</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowAll  new value for property <code>showAll</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setShowAll
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The icon to display for this item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.IconTabFilter#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setIcon
 * @function
 */


/**
 * Getter for property <code>iconColor</code>.
 * If an icon font is used, the color can be chosen from the semantic icon colors.
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.ui.core.IconColor} the value of property <code>iconColor</code>
 * @public
 * @name sap.m.IconTabFilter#getIconColor
 * @function
 */

/**
 * Setter for property <code>iconColor</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.ui.core.IconColor} oIconColor  new value for property <code>iconColor</code>
 * @return {sap.m.IconTabFilter} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabFilter#setIconColor
 * @function
 */


// Start of sap/m/IconTabFilter.js
/**
 * touchstart handler
 */
sap.m.IconTabFilter.prototype.ontouchstart = function(oEvent) {
	if (this.getCount() != "0") {
		this.highlight();
	}
}

/**
 * touchend handler
 */
sap.m.IconTabFilter.prototype.ontouchend = function(oEvent) {
	if (this.getCount() != "0") {
		this.unhighlight();
		this.getParent().setSelectedItem(this);
	}
}

/**
 * touchcancel handler
 */
sap.m.IconTabFilter.prototype.ontouchcancel = function(oEvent) {
	if (this.getCount() != "0") {
		this.unhighlight();
	}
}

/**
 * highlights the tab
 */
sap.m.IconTabFilter.prototype.highlight = function(oEvent) {
	this.$().addClass("sapMITHighlight");
}

/**
 * unhighlights the tab
 */
sap.m.IconTabFilter.prototype.unhighlight = function(oEvent) {
	this.$().removeClass("sapMITHighlight")
}


}; // end of sap.m.IconTabFilter
if ( !jQuery.sap.isDeclared('sap.m.IconTabSeparator') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.IconTabSeparator.
jQuery.sap.declare("sap.m.IconTabSeparator");

jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained


/**
 * Constructor for a new IconTabSeparator.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.core.Element#constructor sap.ui.core.Element}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A tab separator item class
 * @extends sap.ui.core.Element
 * @implements sap.m.IconTab
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.IconTabSeparator
 */
sap.ui.core.Element.extend("sap.m.IconTabSeparator", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.m.IconTab"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : ''}
	}
}});


/**
 * Creates a new subclass of class sap.m.IconTabSeparator with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.IconTabSeparator.extend
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * The icon to display for this separator. If no icon is given, a separator line will be used instead.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.IconTabSeparator#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.IconTabSeparator} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.IconTabSeparator#setIcon
 * @function
 */


// Start of sap/m/IconTabSeparator.js

}; // end of sap.m.IconTabSeparator
if ( !jQuery.sap.isDeclared('sap.m.Image') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Image.
jQuery.sap.declare("sap.m.Image");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Image.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : sap.ui.core.URI</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getDecorative decorative} : boolean (default: true)</li>
 * <li>{@link #getAlt alt} : string</li>
 * <li>{@link #getUseMap useMap} : string</li>
 * <li>{@link #getDensityAware densityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveSrc activeSrc} : sap.ui.core.URI (default: "")</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Image#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Image#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A wrapper around the IMG tag. The image can be loaded from a remote or local server.
 * 
 * Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided. The valid desity values are 1, 1.5, 2. If the original devicePixelRatio isn't one of the three valid numbers, it's rounded up to the nearest one.
 * 
 * There are various size setting options available, and the images can be combined with actions.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Image
 */
sap.ui.core.Control.extend("sap.m.Image", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"src" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"decorative" : {type : "boolean", group : "Accessibility", defaultValue : true},
		"alt" : {type : "string", group : "Accessibility", defaultValue : null},
		"useMap" : {type : "string", group : "Misc", defaultValue : null},
		"densityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"activeSrc" : {type : "sap.ui.core.URI", group : "Data", defaultValue : ""}
	},
	events : {
		"tap" : {}, 
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Image with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Image.extend
 * @function
 */

sap.m.Image.M_EVENTS = {'tap':'tap','press':'press'};


/**
 * Getter for property <code>src</code>.
 * Relative or absolute path to URL where the image file is stored. The path will be adapted to the density aware format according to the density of the device following the convention that [imageName]@[densityValue].[extension]
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>src</code>
 * @public
 * @name sap.m.Image#getSrc
 * @function
 */

/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sSrc  new value for property <code>src</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setSrc
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible images are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Image#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Image#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * When the empty value is kept, the original size is not changed. It is also possible to make settings for width or height only, the original ratio between width/height is maintained.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.Image#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setHeight
 * @function
 */


/**
 * Getter for property <code>decorative</code>.
 * A decorative image is included for design reasons. Accessibility tools will ignore decorative images.
 * 
 * Note: If the Image has an image map (useMap is set), this property will be overridden (the image will not be rendered as decorative).
 * A decorative image has no ALT attribute, so the Alt property is ignored if the image is decorative.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>decorative</code>
 * @public
 * @name sap.m.Image#getDecorative
 * @function
 */

/**
 * Setter for property <code>decorative</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDecorative  new value for property <code>decorative</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setDecorative
 * @function
 */


/**
 * Getter for property <code>alt</code>.
 * The alternative text that is displayed in case the Image is not available, or cannot be displayed.
 * If the image is set to decorative this property is ignored.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>alt</code>
 * @public
 * @name sap.m.Image#getAlt
 * @function
 */

/**
 * Setter for property <code>alt</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAlt  new value for property <code>alt</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setAlt
 * @function
 */


/**
 * Getter for property <code>useMap</code>.
 * The name of the image map that defines the clickable areas
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>useMap</code>
 * @public
 * @name sap.m.Image#getUseMap
 * @function
 */

/**
 * Setter for property <code>useMap</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUseMap  new value for property <code>useMap</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setUseMap
 * @function
 */


/**
 * Getter for property <code>densityAware</code>.
 * If this is set to false, the src image will be loaded directly without attempting to fetch the density perfect image for high density device.
 * 
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>densityAware</code>
 * @public
 * @name sap.m.Image#getDensityAware
 * @function
 */

/**
 * Setter for property <code>densityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bDensityAware  new value for property <code>densityAware</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setDensityAware
 * @function
 */


/**
 * Getter for property <code>activeSrc</code>.
 * The source property when this image is tapped.
 *
 * Default value is <code>""</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeSrc</code>
 * @public
 * @name sap.m.Image#getActiveSrc
 * @function
 */

/**
 * Setter for property <code>activeSrc</code>.
 *
 * Default value is <code>""</code> 
 *
 * @param {sap.ui.core.URI} sActiveSrc  new value for property <code>activeSrc</code>
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#setActiveSrc
 * @function
 */


/**
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead) 
 *
 * @name sap.m.Image#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.Image</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Image</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. (This event is deprecated, use the press event instead) 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.
 *
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#attachTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.Image</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#detachTap
 * @function
 */

/**
 * Fire event tap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Image#fireTap
 * @function
 */


/**
 * Event is fired when the user clicks on the control. 
 *
 * @name sap.m.Image#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Image</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Image</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Image</code>.<br/> itself.
 *
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Image</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Image#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Image} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Image#firePress
 * @function
 */


// Start of sap/m/Image.js
sap.m.Image._currentDevicePixelRatio = (function(){
	// if devicePixelRatio property is not available, value 1 is assumed by default.
	var ratio = (window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio);
	
	//for ratio in our library, only 1 1.5 2 are valid
	if(ratio <= 1){
		ratio = 1;
	}else{
	//round it to the nearest valid value
		ratio *= 2;
		ratio = Math.round(ratio);
		ratio /= 2;
	}
	
	if(ratio > 2){
		ratio = 2;
	}
	return ratio;
}());

/**
 * Function is called when image is loaded successfully.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Image.prototype.onload = function(oEvent){
	//this is used to fix the late load event handler problem on ios platform, if the event handler 
	//has not been called right after image is loaded, event is triggered manually in onAfterRendering
	//method. 
	if(!this._defaultEventTriggered){
		this._defaultEventTriggered = true;
	}
	
	var $domNode = this.$(), domRef = $domNode[0];
	
	if(!this._isWidthOrHeightSet()){
		if(this._iLoadImageDensity > 1){
			if(($domNode.width() === domRef.naturalWidth) && ($domNode.height() === domRef.naturalHeight)){
				$domNode.width( $domNode.width() / this._iLoadImageDensity );
			}
		}
	}
	$domNode.removeClass("sapMNoImg");
};

/**
 * Function is called when error occurs during image loading.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Image.prototype.onerror = function(oEvent){
	//this is used to fix the late load event handler problem on ios platform, if the event handler 
	//has not been called right after image is loaded with errors, event is triggered manually in onAfterRendering
	//method.
	if(!this._defaultEventTriggered){
		this._defaultEventTriggered = true;
	}
	
	var $domNode = this.$(), 
		sCurrentSrc = $domNode.attr("src"),
		d = sap.m.Image._currentDevicePixelRatio;

	$domNode.addClass("sapMNoImg");
	
	//if src is empty or there's no image existing, just stop
	if(!sCurrentSrc || this._iLoadImageDensity === 1){
		return;
	}
	
	if(d === 2 || d < 1){
		//load the default image
		this._iLoadImageDensity = 1;
		$domNode.attr("src", this._generateSrcByDensity(this._isActiveState ? this.getActiveSrc() : this.getSrc(), 1));
	}else if(d === 1.5){
		if(this._bVersion2Tried){
			//if version 2 isn't on the server, load the default image
			this._iLoadImageDensity = 1;
			$domNode.attr("src", this._generateSrcByDensity(this._isActiveState ? this.getActiveSrc() : this.getSrc(), 1));
		}else{
			//special treatment for density 1.5
			//verify if the version for density 2 is provided or not
			this._iLoadImageDensity = 2;
			$domNode.attr("src", this._generateSrcByDensity(this._isActiveState ? this.getActiveSrc() : this.getSrc(), 2));
			this._bVersion2Tried = true;
		}
	}
};


/**
 * This function is called to register event handlers for load and error event on the image DOM after it's rendered.
 * It also check if the event handlers are called accordingly after the image is loaded, if not the event handlers are triggered
 * manually.
 * @private
 */
sap.m.Image.prototype.onAfterRendering = function(){
	//if densityAware is set to true, we need to do extra steps for getting and resizing the density perfect version of the image.
	if(this.getDensityAware()){
		var $DomNode = this.$();
	
		//bind the load and error event handler
		$DomNode.bind("load", jQuery.proxy(this.onload, this));
		$DomNode.bind("error", jQuery.proxy(this.onerror, this));
		
		var domRef = this.getDomRef();
		
		//if image has already been loaded and the load or error event handler hasn't been called, trigger it manually.
		if(domRef.complete && !this._defaultEventTriggered){
			//need to use the naturalWidth property instead of jDomNode.width(), the later one returns positive value even in case of broken image
			if(domRef.naturalWidth > 0){
				//image loaded successfully
				$DomNode.trigger("load");
			}else{
				//image loaded with error
				$DomNode.trigger("error");
			}
		}
	}
};

/**
 * This binds to the touchstart event to change the src property of the image to the activeSrc
 * @private
 *
 */
sap.m.Image.prototype.ontouchstart = function(oEvent){
	//for control who need to know if they should handle events from the image control
	if(oEvent.srcControl.mEventRegistry["press"] || oEvent.srcControl.mEventRegistry["tap"]){
			oEvent.originalEvent._sapui_handledByControl = true;
	}

	var sActiveSrc = this.getActiveSrc();
	if(sActiveSrc){
		//change the source only when the first finger is on the image, the following fingers doesn't affect
		if((oEvent.targetTouches && oEvent.targetTouches.length === 1) || !oEvent.targetTouches){
			this.$().attr("src", this._getDensityAwareActiveSrc());

			this._isActiveState = true;
			if(!this._touchEndProxy){
				this._touchEndProxy = jQuery.proxy(this._ontouchend, this);
			}
			
			if(!jQuery.support.touch){
				//binding to document when runs in desktop browser
				//here also bound to the mouseup event to enable it working in desktop browsers
				jQuery(window.document).bind("vmouseup", this._touchEndProxy);
			}else{
				//binding to the image itself when runs in mobile device
				//Galaxy Note (4.0.4) can't bubble the touchend event to document
				this.$().bind("touchcancel touchend", this._touchEndProxy);
			}
		}
	}
	
	//disable the select callout in android
	//-webkit-touch-callout: none doesn't work in android
	//preventDefault causes issues for ios
	if(jQuery.os.android){
		oEvent.preventDefault();
	}
};

/**
 * This changes the src property of the image back to the src property of the image control.
 * @private
 *
 */
sap.m.Image.prototype._ontouchend = function(oEvent){
	//change the source back only when all fingers leave the image
	if((oEvent.targetTouches && oEvent.targetTouches.length === 0) || !oEvent.targetTouches){
		this._isActiveState = false;
		this.$().attr("src", this._getDensityAwareSrc()).removeClass("sapMNoImg");
		if(!jQuery.support.touch){
			jQuery(window.document).unbind("vmouseup", this._touchEndProxy);
		}else{
			this.$().unbind("touchcancel touchend", this._touchEndProxy);
		}
	}
};

/**
 * This overrides the default setter of the src property and update the dom node.
 * @public
 */
sap.m.Image.prototype.setSrc = function(sSrc){
	if(sSrc === this.getSrc()){
		return;
	}
	this.setProperty("src", sSrc, true);
	
	var oDomRef = this.getDomRef();
	if(oDomRef){
		this.$().attr("src", this._getDensityAwareSrc());
	}
};

/**
 * This overrides the default setter of the activeSrc property in order to avoid the rerendering.
 * @public
 *
 */
sap.m.Image.prototype.setActiveSrc = function(sActiveSrc){
	if(!sActiveSrc){
		sActiveSrc = "";
	}
	this.setProperty("activeSrc", sActiveSrc, true);
};


/**
 * Function is called when image is clicked.
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Image.prototype.ontap = function(oEvent) {
	this.fireTap({/* no parameters */}); // (This event is deprecated, use the press event instead)
	this.firePress({/* no parameters */});
};


/**
 * Test if at least one of the width and height properties is set.
 * @private
 */
sap.m.Image.prototype._isWidthOrHeightSet = function(){
	return (this.getWidth() && this.getWidth() !== '') || (this.getHeight() && this.getHeight() !== '');
};


/**
 * This function returns the density aware source based on the deviceDensityRatio value. 
 * The return value is in the format [src]@[densityValue].[extension] if the densityValue not equal 1, otherwise it returns the src property.
 * @private
 */
sap.m.Image.prototype._getDensityAwareSrc = function(){
	var d = sap.m.Image._currentDevicePixelRatio,
		sSrc = this.getSrc();
	
	//this property is used for resizing the higher resolution image when image is loaded.
	this._iLoadImageDensity = d;

	//if devicePixelRatio equals 1 or densityAware set to false, simply return the src property
	if(d === 1 || !this.getDensityAware()){
		return sSrc;
	}
	
	return this._generateSrcByDensity(sSrc, d);
};

/**
 * This function returns the density aware version of the Active source base on the deviceDensityRatio value.
 * @private
 */
sap.m.Image.prototype._getDensityAwareActiveSrc = function(){
	var d = sap.m.Image._currentDevicePixelRatio,
		sActiveSrc = this.getActiveSrc();
	
	//this property is used for resizing the higher resolution image when image is loaded.
	this._iLoadImageDensity = d;

	//if devicePixelRatio equals 1 or densityAware set to false, simply return the src property
	if(d === 1 || !this.getDensityAware()){
		return sActiveSrc;
	}
	
	return this._generateSrcByDensity(sActiveSrc, d);
};

/**
 * This function generates the density aware version of the src property according to the iDensity provided. 
 * It returns the density aware version of the src property.
 * @private
 */
sap.m.Image.prototype._generateSrcByDensity = function(sSrc, iDensity){	
	if(!sSrc){
		return "";
	}
	
	// if src is in data uri format, disable the density handling
	if(this._isDataUri(sSrc)){
		this._iLoadImageDensity = 1;
		return sSrc;
	}

	var iPos = sSrc.lastIndexOf("."),
		sName = sSrc.substring(0, iPos),
		sExtension = sSrc.substring(iPos);
//		iAtPos = sName.lastIndexOf("@");
	
	//if there's no extension
	if(iPos == -1){
		return sSrc + "@" + iDensity;
	}
	
	//remove the existing density information
	//this is disabled because the orignal src or activeSrc is used
//	if(iAtPos !== -1 && sName.length - iAtPos < 6){//@2 @1.5 @0.75 only these three cases, if the image itself has a @, these are the only checks we can do.
//		sName = sName.substring(0, iAtPos);
//	}
	
	if(iDensity === 1){
		return sName + sExtension;
	}

	sName = sName + "@" + iDensity;
	return sName + sExtension;
};


sap.m.Image.prototype._isDataUri = function(src){
	if(src){
		return src.indexOf("data:") === 0;
	}else{
		return false;
	}
};
}; // end of sap.m.Image
if ( !jQuery.sap.isDeclared('sap.m.InputBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.InputBase.
jQuery.sap.declare("sap.m.InputBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new InputBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.InputBase#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Base control for Input fields.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12.0
 * @name sap.m.InputBase
 */
sap.ui.core.Control.extend("sap.m.InputBase", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"value" : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"placeholder" : {type : "string", group : "Misc", defaultValue : null},
		"editable" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.InputBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.InputBase.extend
 * @function
 */

sap.m.InputBase.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>value</code>.
 * Input Value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.InputBase#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setValue
 * @function
 */


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#bindValue
 * @function
 */

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#unbindValue
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.InputBase#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.InputBase#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible inputs are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.InputBase#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setVisible
 * @function
 */


/**
 * Getter for property <code>valueState</code>.
 * Visualizes warnings or errors related to the text field. Possible values: Warning, Error, Success.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.m.InputBase#getValueState
 * @function
 */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setValueState
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The 'name' property to be used in the HTML code (e.g. for HTML forms that send data to the server via 'submit').
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.InputBase#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setName
 * @function
 */


/**
 * Getter for property <code>placeholder</code>.
 * text shown when no value available
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * @name sap.m.InputBase#getPlaceholder
 * @function
 */

/**
 * Setter for property <code>placeholder</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPlaceholder  new value for property <code>placeholder</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#setPlaceholder
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Controls if a user can change the value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @since 1.12.0
 * @name sap.m.InputBase#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.0
 * @name sap.m.InputBase#setEditable
 * @function
 */


/**
 * This event gets fired when the input operation has finished and the value has changed. 
 *
 * @name sap.m.InputBase#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new value of the input
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.InputBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.InputBase</code>.<br/> itself. 
 *  
 * This event gets fired when the input operation has finished and the value has changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.InputBase</code>.<br/> itself.
 *
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.InputBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputBase#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new value of the input</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.InputBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.InputBase#fireChange
 * @function
 */


// Start of sap/m/InputBase.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();

sap.m.InputBase.prototype.init = function() {
	this._changeProxy = jQuery.proxy(this._onChange, this);
};

// use labels as placeholder configuration
sap.m.InputBase.prototype._showLabelAsPlaceholder = (function($) {
	if ($.browser.msie && $.browser.fVersion <= 9) {
		return true;
	}
	
	var useLabel = $.support.touch;
	if (useLabel && (
		// these OS supports right alignable placeholder natively
		// so we do not need selfmade placeholder
		// test page :  http://jsfiddle.net/qKPX2/3/
		($.os.ios && $.os.fVersion >= 6) ||
		($.os.android && $.browser.chrome)) ||
		($.os.blackberry && $.os.fVersion >= 10)) {
		useLabel = null;	//this means derived class can make it's own checking
	}	
	return useLabel;	
}(jQuery));

sap.m.InputBase.prototype.onBeforeRendering = function() {
	this._unbind();
};

sap.m.InputBase.prototype.onAfterRendering = function() {
	this._$input = this.$().find('input');
	this._$input.bind("change.input", this._changeProxy);

	if (this._showLabelAsPlaceholder) {
		this._$label = this.$().find('label');
		this._setLabelVisibility();
	}
};

sap.m.InputBase.prototype.exit = function() {
	this._unbind();
	delete this._$input;
	delete this._$label;
};

sap.m.InputBase.prototype.getFocusDomRef = function() {
	return jQuery.sap.domById(this.getId() + '-inner');
};

sap.m.InputBase.prototype.getIdForLabel = function() {
	return this.getId() + '-inner';
};

sap.m.InputBase.prototype.ontouchstart = function(oEvent) {
	//for control who need to know if they should handle events from the input control
	oEvent.originalEvent._sapui_handledByControl = true;
};

/*
 * Protect from rerender on value state changes
 * @private
 */
sap.m.InputBase.prototype.setValueState = function(sValueState) {
	var sOldValueState = this.getValueState();

	if (sValueState == sOldValueState) {
		return this;
	}
	if (!(this._$input instanceof jQuery)) {
		return this.setProperty("valueState", sValueState);
	}

	this.setProperty("valueState", sValueState, true);

	var $input = this._$input,
		$container = this.$();

	if (sOldValueState && sOldValueState != "None") {
		$container.removeClass("sapMInputBase" + sOldValueState);
		$input.removeClass("sapMInputBase" + sOldValueState + "Inner");
	}
	if (sValueState && sValueState != "None") {
		$container.addClass("sapMInputBase" + sValueState);
		$input.addClass("sapMInputBase" + sValueState + "Inner");
	}

	return this;
};

sap.m.InputBase.prototype._onChange = function(oEvent) {
	var value = this._$input.val();

	this.setProperty("value", value, true);
	this._setLabelVisibility();
	this.fireChange({
		newValue : value
	});
};

sap.m.InputBase.prototype._setLabelVisibility = function() {
	if (this._showLabelAsPlaceholder) {
		// TODO: Check visibility is better then display
		this._$label.css("display", this.getProperty("value") ? "none" : "inline");
	}
};

sap.m.InputBase.prototype._unbind = function() {
	if (this._$input instanceof jQuery) {
		this._$input.unbind(".input");
	}
};
}; // end of sap.m.InputBase
if ( !jQuery.sap.isDeclared('sap.m.InputListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.InputListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained



/**
 * @class InputListItem renderer.
 * @static
 */
sap.m.InputListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.InputListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMILI");
};

sap.m.InputListItemRenderer.renderLIContent = function(rm, oLI) {

	var sLabel = oLI.getLabel();

	// List item label
	if (sLabel) {
		rm.write("<label for='" + oLI.getId() + "-content' class='sapMILILabel'>");
		rm.writeEscaped(oLI.getLabel());
		rm.write("</label>");
	}

	// List item input content
	rm.write("<div class='sapMILIDiv sapMILI-CTX'>");

	var aContent = oLI.getContent();
	var cLength = aContent.length;
	for ( var i = 0; i < cLength; i++) {
		rm.renderControl(aContent[i]);
	}
	rm.write("</div>");
};

}; // end of sap.m.InputListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.Label') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Label.
jQuery.sap.declare("sap.m.Label");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Label.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDesign design} : sap.m.LabelDesign (default: sap.m.LabelDesign.Standard)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getRequired required} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLabelFor labelFor} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Label control is used in a UI5 mobile application to provide label text for other controls. Design such as bold, and text alignment can be specified.
 * @extends sap.ui.core.Control
 * @implements sap.ui.core.Label
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Label
 */
sap.ui.core.Control.extend("sap.m.Label", { metadata : {

	// ---- object ----
	interfaces : [
		"sap.ui.core.Label"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"design" : {type : "sap.m.LabelDesign", group : "Appearance", defaultValue : sap.m.LabelDesign.Standard},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"required" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	associations : {
		"labelFor" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.Label with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Label.extend
 * @function
 */


/**
 * Getter for property <code>design</code>.
 * set design of a label to either Standard or Bold
 *
 * Default value is <code>sap.m.LabelDesign.Standard</code>
 *
 * @return {sap.m.LabelDesign} the value of property <code>design</code>
 * @public
 * @name sap.m.Label#getDesign
 * @function
 */

/**
 * Setter for property <code>design</code>.
 *
 * Default value is <code>sap.m.LabelDesign.Standard</code> 
 *
 * @param {sap.m.LabelDesign} oDesign  new value for property <code>design</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setDesign
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Label Text to be displayed
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Label#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setText
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible labels are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Label#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setVisible
 * @function
 */


/**
 * Getter for property <code>textAlign</code>.
 * Available alignment settings are "Begin", "Center", "End", "Left", and "Right".
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.m.Label#getTextAlign
 * @function
 */

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>sap.ui.core.TextAlign.Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setTextAlign
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.Label#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setTextDirection
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of Label
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Label#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setWidth
 * @function
 */


/**
 * Getter for property <code>required</code>.
 * Indicates that user input is required in the input this label labels.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>required</code>
 * @public
 * @name sap.m.Label#getRequired
 * @function
 */

/**
 * Setter for property <code>required</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRequired  new value for property <code>required</code>
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setRequired
 * @function
 */


/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @return {string} Id of the element which is the current target of the <code>labelFor</code> association, or null
 * @public
 * @name sap.m.Label#getLabelFor
 * @function
 */

/**
 * Association to the labeled control.
 * By default the label set the for attribute to the ID of the labeled control. This can be changed implementing function getIdForLabel on the labelled control.
 *
 * @param {string | sap.ui.core.Control} vLabelFor 
 *    Id of an element which becomes the new target of this <code>labelFor</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Label} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Label#setLabelFor
 * @function
 */


	
// Start of sap/m/Label.js

/*
 * As own function to make possible to overwrite it (e.G. from Form).
 */
sap.m.Label.prototype.getLabelForRendering = function(){

	return this.getLabelFor();

};
}; // end of sap.m.Label
if ( !jQuery.sap.isDeclared('sap.m.Link') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Link.
jQuery.sap.declare("sap.m.Link");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Link.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getWidth width} : string</li>
 * <li>{@link #getHref href} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Link#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A hyperlink control which can be used to trigger actions or to navigate to other applications or web pages.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.Link
 */
sap.ui.core.Control.extend("sap.m.Link", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Data", defaultValue : ''},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"target" : {type : "string", group : "Behavior", defaultValue : null},
		"width" : {type : "string", group : "Dimension", defaultValue : null},
		"href" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null}
	},
	events : {
		"press" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.m.Link with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Link.extend
 * @function
 */

sap.m.Link.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>text</code>.
 * Link text to be displayed.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Link#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setText
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Whether the link can be triggered by the user.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Link#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible links are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Link#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setVisible
 * @function
 */


/**
 * Getter for property <code>target</code>.
 * Options are _self, _top, _blank, _parent, _search. Alternatively, a frame name can be entered.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>target</code>
 * @public
 * @name sap.m.Link#getTarget
 * @function
 */

/**
 * Setter for property <code>target</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setTarget
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of text link. When it is set (CSS-size such as % or px), this is the exact size. When left blank, the text defines the size.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>width</code>
 * @public
 * @name sap.m.Link#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sWidth  new value for property <code>width</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setWidth
 * @function
 */


/**
 * Getter for property <code>href</code>.
 * The link target URI. Supports standard hyperlink behavior. If an action should be triggered, this should not be set, but instead an event handler for the "press" event should be registered.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>href</code>
 * @public
 * @name sap.m.Link#getHref
 * @function
 */

/**
 * Setter for property <code>href</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sHref  new value for property <code>href</code>
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#setHref
 * @function
 */


/**
 * Event is fired when the user triggers the link control. 
 *
 * @name sap.m.Link#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Link</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Link</code>.<br/> itself. 
 *  
 * Event is fired when the user triggers the link control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Link</code>.<br/> itself.
 *
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Link</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Link} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Link#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.m.Link#firePress
 * @function
 */


// Start of sap/m/Link.js

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.ui.core.EnabledPropagator.call(sap.m.Link.prototype);

/**
 * Function is called when Link is triggered.
 *
 * @param {jQuery.Event} oEvent
 * @private
 */
sap.m.Link.prototype._handlePress = function(oEvent) {
	if (this.getEnabled()) {
		if (!this.firePress()) { // fire event and check return value whether default action should be prevented
			oEvent.preventDefault();
		};
	} else { // disabled
		oEvent.preventDefault(); // even prevent URLs from being triggered
	}
};

if (jQuery.support.touch) {
	sap.m.Link.prototype.ontap = sap.m.Link.prototype._handlePress;
} else {
	sap.m.Link.prototype.onclick = sap.m.Link.prototype._handlePress;
}
}; // end of sap.m.Link
if ( !jQuery.sap.isDeclared('sap.m.List') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.List.
jQuery.sap.declare("sap.m.List");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new List.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getInset inset} : boolean (default: false)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getFooterText footerText} : string</li>
 * <li>{@link #getMode mode} : sap.m.ListMode (default: sap.m.ListMode.None)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getIncludeItemInSelection includeItemInSelection} : boolean (default: false)</li>
 * <li>{@link #getShowUnread showUnread} : boolean (default: false)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getShowNoData showNoData} : boolean (default: true)</li>
 * <li>{@link #getSwipeDirection swipeDirection} : sap.m.SwipeDirection (default: sap.m.SwipeDirection.Both)</li>
 * <li>{@link #getModeAnimationOn modeAnimationOn} : boolean (default: true)</li>
 * <li>{@link #getShowSeparators showSeparators} : sap.m.ListSeparators (default: sap.m.ListSeparators.All)</li>
 * <li>{@link #getHeaderDesign headerDesign} : sap.m.ListHeaderDesign (default: sap.m.ListHeaderDesign.Standard)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.m.ListItemBase[]</li>
 * <li>{@link #getSwipeContent swipeContent} : sap.ui.core.Control</li>
 * <li>{@link #getColumns columns} : sap.m.Column[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.List#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.List#event:delete delete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.List#event:swipe swipe} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * sap.m.List Control is the container for all list items. Selection, deletion, unread states and inset style are also maintained here.
 * 
 * Note: The List including all contained items is completely re-rendered when the data of a bound model is changed. Due to the limited hardware resources of mobile devices this can lead to longer delays for lists with many items. As such the usage of a list is not recommended for these use cases.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.List
 */
sap.ui.core.Control.extend("sap.m.List", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getSelectedItem", "setSelectedItem", "getSelectedItems", "setSelectedItemById", "removeSelections", "getSwipedItem", "swipeOut"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"inset" : {type : "boolean", group : "Misc", defaultValue : false},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"headerText" : {type : "string", group : "Misc", defaultValue : null},
		"footerText" : {type : "string", group : "Misc", defaultValue : null},
		"mode" : {type : "sap.m.ListMode", group : "Appearance", defaultValue : sap.m.ListMode.None},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"includeItemInSelection" : {type : "boolean", group : "Misc", defaultValue : false},
		"showUnread" : {type : "boolean", group : "Misc", defaultValue : false},
		"noDataText" : {type : "string", group : "Misc", defaultValue : null},
		"showNoData" : {type : "boolean", group : "Misc", defaultValue : true},
		"swipeDirection" : {type : "sap.m.SwipeDirection", group : "Misc", defaultValue : sap.m.SwipeDirection.Both},
		"modeAnimationOn" : {type : "boolean", group : "Misc", defaultValue : true},
		"showSeparators" : {type : "sap.m.ListSeparators", group : "Misc", defaultValue : sap.m.ListSeparators.All},
		"headerDesign" : {type : "sap.m.ListHeaderDesign", group : "Misc", defaultValue : sap.m.ListHeaderDesign.Standard}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.m.ListItemBase", multiple : true, singularName : "item", bindable : "bindable"}, 
    	"swipeContent" : {type : "sap.ui.core.Control", multiple : false}, 
    	"columns" : {type : "sap.m.Column", multiple : true, singularName : "column"}
	},
	events : {
		"select" : {}, 
		"delete" : {}, 
		"swipe" : {allowPreventDefault : true}
	}
}});


/**
 * Creates a new subclass of class sap.m.List with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.List.extend
 * @function
 */

sap.m.List.M_EVENTS = {'select':'select','delete':'delete','swipe':'swipe'};


/**
 * Getter for property <code>inset</code>.
 * Inset style false/true
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>inset</code>
 * @public
 * @name sap.m.List#getInset
 * @function
 */

/**
 * Setter for property <code>inset</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bInset  new value for property <code>inset</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setInset
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible lists are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.List#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setVisible
 * @function
 */


/**
 * Getter for property <code>headerText</code>.
 * Header Text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.m.List#getHeaderText
 * @function
 */

/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setHeaderText
 * @function
 */


/**
 * Getter for property <code>footerText</code>.
 * Footer Text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>footerText</code>
 * @public
 * @name sap.m.List#getFooterText
 * @function
 */

/**
 * Setter for property <code>footerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFooterText  new value for property <code>footerText</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setFooterText
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * Mode of a list (e.g. None, SingleSelect, MultiSelect, Delete, etc.)
 *
 * Default value is <code>None</code>
 *
 * @return {sap.m.ListMode} the value of property <code>mode</code>
 * @public
 * @name sap.m.List#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.m.ListMode} oMode  new value for property <code>mode</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setMode
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Sets the width of the list
 *
 * Default value is <code>'100%'</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.List#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>'100%'</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setWidth
 * @function
 */


/**
 * Getter for property <code>includeItemInSelection</code>.
 * This property decides if the list item interacts with the selection. If it is 'true', a tap on the item will set the selection control in front of the list item.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>includeItemInSelection</code>
 * @public
 * @name sap.m.List#getIncludeItemInSelection
 * @function
 */

/**
 * Setter for property <code>includeItemInSelection</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIncludeItemInSelection  new value for property <code>includeItemInSelection</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setIncludeItemInSelection
 * @function
 */


/**
 * Getter for property <code>showUnread</code>.
 * Activates the unread feature for all list items.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showUnread</code>
 * @public
 * @name sap.m.List#getShowUnread
 * @function
 */

/**
 * Setter for property <code>showUnread</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowUnread  new value for property <code>showUnread</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setShowUnread
 * @function
 */


/**
 * Getter for property <code>noDataText</code>.
 * This is the text shown, when the list has no data
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * @name sap.m.List#getNoDataText
 * @function
 */

/**
 * Setter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setNoDataText
 * @function
 */


/**
 * Getter for property <code>showNoData</code>.
 * Enables an information text, when no list items are in the list.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showNoData</code>
 * @public
 * @name sap.m.List#getShowNoData
 * @function
 */

/**
 * Setter for property <code>showNoData</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowNoData  new value for property <code>showNoData</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setShowNoData
 * @function
 */


/**
 * Getter for property <code>swipeDirection</code>.
 * Direction of swipe(e.g LeftToRight, RightToLeft, Both) to bring in a control on the right hand side of the list item.
 *
 * Default value is <code>Both</code>
 *
 * @return {sap.m.SwipeDirection} the value of property <code>swipeDirection</code>
 * @public
 * @name sap.m.List#getSwipeDirection
 * @function
 */

/**
 * Setter for property <code>swipeDirection</code>.
 *
 * Default value is <code>Both</code> 
 *
 * @param {sap.m.SwipeDirection} oSwipeDirection  new value for property <code>swipeDirection</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setSwipeDirection
 * @function
 */


/**
 * Getter for property <code>modeAnimationOn</code>.
 * Defines if animations will be shown when activating or deactivating selection modes.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>modeAnimationOn</code>
 * @public
 * @name sap.m.List#getModeAnimationOn
 * @function
 */

/**
 * Setter for property <code>modeAnimationOn</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bModeAnimationOn  new value for property <code>modeAnimationOn</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setModeAnimationOn
 * @function
 */


/**
 * Getter for property <code>showSeparators</code>.
 * Defines which separator style will be used.
 *
 * Default value is <code>All</code>
 *
 * @return {sap.m.ListSeparators} the value of property <code>showSeparators</code>
 * @public
 * @name sap.m.List#getShowSeparators
 * @function
 */

/**
 * Setter for property <code>showSeparators</code>.
 *
 * Default value is <code>All</code> 
 *
 * @param {sap.m.ListSeparators} oShowSeparators  new value for property <code>showSeparators</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setShowSeparators
 * @function
 */


/**
 * Getter for property <code>headerDesign</code>.
 * List header style
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.m.ListHeaderDesign} the value of property <code>headerDesign</code>
 * @public
 * @name sap.m.List#getHeaderDesign
 * @function
 */

/**
 * Setter for property <code>headerDesign</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.m.ListHeaderDesign} oHeaderDesign  new value for property <code>headerDesign</code>
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setHeaderDesign
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * The items of this list
 * 
 * @return {sap.m.ListItemBase[]}
 * @public
 * @name sap.m.List#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.m.ListItemBase}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.m.ListItemBase}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.m.ListItemBase} vItem the item to remove or its index or id
 * @return {sap.m.ListItemBase} the removed item or null
 * @public
 * @name sap.m.List#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ListItemBase[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.List#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ListItemBase</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ListItemBase}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.List#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#destroyItems
 * @function
 */


/**
 * Binder for aggregation <code>items</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#bindItems
 * @function
 */

/**
 * Unbinder for aggregation <code>items</code>.
 *
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#unbindItems
 * @function
 */


/**
 * Getter for aggregation <code>swipeContent</code>.<br/>
 * User can swipe to bring in this control on the right hand side of a list item.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.List#getSwipeContent
 * @function
 */


/**
 * Setter for the aggregated <code>swipeContent</code>.
 * @param oSwipeContent {sap.ui.core.Control}
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#setSwipeContent
 * @function
 */
	

/**
 * Destroys the swipeContent in the aggregation 
 * named <code>swipeContent</code>.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#destroySwipeContent
 * @function
 */


/**
 * Getter for aggregation <code>columns</code>.<br/>
 * Columns of the List aggregation can be used to build a List with columns and headers. If you need a tabular list(a Table) then you can use "ColumnListItem" as "items" aggregation. (**experimental**!!)
 * 
 * @return {sap.m.Column[]}
 * @public
 * @since 1.12
 * @name sap.m.List#getColumns
 * @function
 */


/**
 * Inserts a column into the aggregation named <code>columns</code>.
 *
 * @param {sap.m.Column}
 *          oColumn the column to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the column should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the column is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the column is inserted at 
 *             the last position        
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @name sap.m.List#insertColumn
 * @function
 */

/**
 * Adds some column <code>oColumn</code> 
 * to the aggregation named <code>columns</code>.
 *
 * @param {sap.m.Column}
 *            oColumn the column to add; if empty, nothing is inserted
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @name sap.m.List#addColumn
 * @function
 */

/**
 * Removes an column from the aggregation named <code>columns</code>.
 *
 * @param {int | string | sap.m.Column} vColumn the column to remove or its index or id
 * @return {sap.m.Column} the removed column or null
 * @public
 * @since 1.12
 * @name sap.m.List#removeColumn
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>columns</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Column[]} an array of the removed elements (might be empty)
 * @public
 * @since 1.12
 * @name sap.m.List#removeAllColumns
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Column</code> in the aggregation named <code>columns</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Column}
 *            oColumn the column whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @since 1.12
 * @name sap.m.List#indexOfColumn
 * @function
 */
	

/**
 * Destroys all the columns in the aggregation 
 * named <code>columns</code>.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @name sap.m.List#destroyColumns
 * @function
 */


/**
 * Event is fired when selection is changed by user interaction. 
 *
 * @name sap.m.List#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The listitem which fired the select.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.List</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.List</code>.<br/> itself. 
 *  
 * Event is fired when selection is changed by user interaction. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.List</code>.<br/> itself.
 *
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.List</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the select.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.List#fireSelect
 * @function
 */


/**
 * Event is fired when delete icon is pressed by user. 
 *
 * @name sap.m.List#delete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The listitem which fired the delete.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'delete' event of this <code>sap.m.List</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.List</code>.<br/> itself. 
 *  
 * Event is fired when delete icon is pressed by user. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.List</code>.<br/> itself.
 *
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#attachDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'delete' event of this <code>sap.m.List</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#detachDelete
 * @function
 */

/**
 * Fire event delete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the delete.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.List#fireDelete
 * @function
 */


/**
 * This event is fired when user swipe to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe. 
 *
 * @name sap.m.List#swipe
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.ListItemBase} oControlEvent.getParameters.listItem The listitem which fired the swipe.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.swipeContent Given swipeContent control to show on the right hand side of a list item.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.srcControl Holds which control caused the swipe event in List Item.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'swipe' event of this <code>sap.m.List</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.List</code>.<br/> itself. 
 *  
 * This event is fired when user swipe to bring in a control and before swipeContent is shown on the right hand side of list item. So, you can easily change swipeContent according to swiped list item. Call the preventDefault method of the event object to disable swipe. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.List</code>.<br/> itself.
 *
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#attachSwipe
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'swipe' event of this <code>sap.m.List</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.List} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.List#detachSwipe
 * @function
 */

/**
 * Fire event swipe to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'listItem' of type <code>sap.m.ListItemBase</code> The listitem which fired the swipe.</li>
 * <li>'swipeContent' of type <code>sap.ui.core.Control</code> Given swipeContent control to show on the right hand side of a list item.</li>
 * <li>'srcControl' of type <code>sap.ui.core.Control</code> Holds which control caused the swipe event in List Item.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @name sap.m.List#fireSwipe
 * @function
 */


/**
 * Returns selected list item. When no item is selected, "null" is returned. When multi-selection is enabled and multiple items are selected, only the first selected item is returned.
 *
 * @name sap.m.List.prototype.getSelectedItem
 * @function

 * @type sap.m.ListItemBase
 * @public
 */


/**
 * Sets a list item to be selected. In single mode the method removes the previous selection.
 *
 * @name sap.m.List.prototype.setSelectedItem
 * @function
 * @param {sap.m.ListItemBase} 
 *         oItem
 *         The list item to be selected
 * @param {boolean} 
 *         bSelect
 *         sets the listitem to true/false

 * @type sap.m.List
 * @public
 */


/**
 * Returns an array containing the selected list items. In the case of no selection, an empty array is returned.
 *
 * @name sap.m.List.prototype.getSelectedItems
 * @function

 * @type sap.m.ListItemBase[]
 * @public
 */


/**
 * Sets a list item to be selected by id. In single mode the method removes the previous selection.
 *
 * @name sap.m.List.prototype.setSelectedItemById
 * @function
 * @param {string} 
 *         sId
 *         The id of the list item to be selected
 * @param {boolean} 
 *         bSelect
 *         sets the listitem to true/false

 * @type sap.m.List
 * @public
 */


/**
 * Removes all selections of the current selection mode. Applies to the modes "SingleSelect", "MultiSelect" and "Delete".
 *
 * @name sap.m.List.prototype.removeSelections
 * @function

 * @type sap.m.List
 * @public
 */


/**
 * Returns swiped list item. When no item is swiped, "null" is returned.
 *
 * @name sap.m.List.prototype.getSwipedItem
 * @function

 * @type sap.m.ListItemBase
 * @public
 */


/**
 * After swipeContent is shown, user can interact with this control(e.g Tap). After interaction is done, you can/should use this method to hide swipeContent from screen.
 * NOTE: If user try to tap inside of the list but outside of the swipeContent then control hides automatically.
 *
 * @name sap.m.List.prototype.swipeOut
 * @function
 * @param {any} 
 *         oCallback
 *         This callback function is called with two parameters(swipedListItem and swipedContent) after swipe-out animation is finished.

 * @type sap.m.List
 * @public
 */


// Start of sap/m/List.js
/**
* This file defines behavior for the control,
*/

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.m.List.prototype._mutex = false;

sap.m.List.prototype.init = function(){
	// do something for initialization...
	this._hasPopin = false;
	this._mode = this.getMode();
	this._includeItemInSelection = this.getIncludeItemInSelection();
};

sap.m.List.prototype.onBeforeRendering = function() {
	if (this.hasOwnProperty("_$touchBlocker")) {
		this.close();	// remove the swipe content from screen immediately
		delete this._$touchBlocker;		// delete touchBlocker to refresh
	}
};

sap.m.List.prototype.onAfterRendering = function() {
	var aSelected = this.getSelectedItems();
	for(var i=0; i< aSelected.length; i++){
		this._setSelectedItem(aSelected[i], true);
	}

	// if any list item in table has navigation, use it's width as column width
	if (this.hasOwnProperty("_navRenderedBy")) {
		jQuery.sap.byId(this.getId() + "-tblHeadNav").width(jQuery.sap.byId(this._navRenderedBy).outerWidth(true));
	}
};

sap.m.List.prototype.setIncludeItemInSelection = function(include) {
	this.setProperty("includeItemInSelection", include, true);
	var aItems = this.getItems();
	for (var i = 0; i < aItems.length; i++) {
		aItems[i]._includeItemInSelection = include;
		jQuery.sap.byId( aItems[i].getId()).toggleClass('sapMLIBCursor', include);
	}
	return this;
};

sap.m.List.prototype.setInset = function(inset) {
	if(inset === this.getInset()){
		return;
	}
	this.setProperty("inset", inset, true);
	if(this.getDomRef())
	{
		if(inset){
			this.addStyleClass('sapMListInsetBG');
			var oUL = jQuery.sap.byId( this.getId() + "-listUl").addClass('sapMListInset');
			if (this.getHeaderText()){
				jQuery.sap.byId( this.getId() + "-listHeader").removeClass('sapMListHdr').addClass('sapMListHdrInset');
				oUL.addClass('sapMListInsetHdr');
			}
			if (this.getFooterText()) {
				oUL.addClass('sapMListInsetFtr');
				jQuery.sap.byId( this.getId() + "-listFooter").removeClass('sapMListFtr').addClass('sapMListFtrInset');
			}
		}
		else
		{
			this.removeStyleClass('sapMListInsetBG');
			var oUL = jQuery.sap.byId( this.getId() + "-listUl").removeClass('sapMListInset');
			if (this.getHeaderText()){
				jQuery.sap.byId( this.getId() + "-listHeader").removeClass('sapMListHdrInset').addClass('sapMListHdr');
				oUL.removeClass('sapMListInsetHdr');
			}
			if (this.getFooterText()) {
				oUL.removeClass('sapMListInsetFtr');
				jQuery.sap.byId( this.getId() + "-listFooter").removeClass('sapMListFtrInset').addClass('sapMListFtr');
			}
		}

		// align the swipe content on inset changes
		this._setSwipePosition();
	}
	return this;
};

sap.m.List.prototype.setWidth = function(width) {
	if(this.getDomRef()){
		this.$().width(width);
	}
	return this;
};

sap.m.List.prototype.setNoDataText = function(noDataText) {
	this.setProperty("noDataText", noDataText, true);
	var sNoData = (jQuery.sap.byId( this.getId() + "-listNoData"));
	if(sNoData.length > 0){
		sNoData.text(noDataText);
	}
	return this;
};
/**
 * // * Returns selected item. When no item is selected, "null" is returned. // *
 * When multi-selection is enabled and multiple items are selected, only the
 * first selected item is returned.
 */
sap.m.List.prototype.getSelectedItem = function() {
	var oResult;
	var aItems = this.getItems();
	for ( var i = 0; i < aItems.length; i++) {
		if (aItems[i].getSelected()) {
			oResult = aItems[i];
			break;
		}
	}
	return oResult;
};


/**
 * // * Sets a list item to be selected. In single mode the method removes the
 * previous selection.
 */
sap.m.List.prototype.setSelectedItem = function(oListItem, select) {
	this._setSelectedItem(oListItem, select);
	return this;
};


/**
 * // * Returns an array containing the selected list items. In the case of no
 * selection, an empty array is returned.
 */
sap.m.List.prototype.getSelectedItems = function() {
	var aResult = [];
	var aItems = this.getItems();
	for ( var i = 0; i < aItems.length; i++) {
		if (aItems[i].getSelected()) {
			aResult.push(aItems[i]);
		}
	}
	return aResult;
};


/**
 * // * Sets a list item to be selected by id. In single mode the method removes
 * the previous selection. .
 */
sap.m.List.prototype.setSelectedItemById = function(id, select) {
	var oListItem = sap.ui.getCore().byId(id);
	this._setSelectedItem(oListItem, select);
	return this;
};


sap.m.List.prototype._setSelectedItem = function(oListItem, select) {
	switch (this.getMode()) {
	case sap.m.ListMode.SingleSelect:
	case sap.m.ListMode.SingleSelectLeft:
		if (oListItem) {
			if(oListItem._radioButton)
				oListItem._radioButton.setSelected(select);
			oListItem.setSelected(select, true);
			oListItem.$().toggleClass('sapMLIBSelected', select);
		}
		break;
	case sap.m.ListMode.MultiSelect:
		if (oListItem) {
			if(oListItem._checkBox)
				oListItem._checkBox.setSelected(select);
			oListItem.setSelected(select, true);
			oListItem.$().toggleClass('sapMLIBSelected', select);
		}
		break;
	case sap.m.ListMode.SingleSelectMaster:
		if(sap.ui.core.theming.Parameters.get("sapUiListSingleSelectMasterAsActive") == "true"){
				oListItem._active = select;
				if(oListItem._radioButton)
					oListItem._radioButton.setSelected(select);
				oListItem.setSelected(select, true);
				oListItem._activeHandling();
			if(select){
				oListItem._activeHandlingNav();
				oListItem._activeHandlingInheritor();
			}
			else{
				oListItem._inactiveHandlingNav();
				oListItem._inactiveHandlingInheritor();
			}
		}
		else{
			//SingleSelectMaster as SingleSelect colors
			if (oListItem) {
				if(oListItem._radioButton)
					oListItem._radioButton.setSelected(select);
				oListItem.setSelected(select, true);
				oListItem.$().toggleClass('sapMLIBSelected', select);
			}
		}
		break;
	case sap.m.ListMode.None:
		break;
	}
};

/**
 * // * Removes all selections of the current selection mode. Applies to the modes "SingleSelect", "MultiSelect" and "Delete".
 */
sap.m.List.prototype.removeSelections = function() {
	this._removeCurrentSelection();
};


/**
 * // * List fires select event caused by checkbox/radiobutton
 */
sap.m.List.prototype._select = function(oEvent) {
	var oListItem = sap.ui.getCore().byId(this.oParent.getId());
	var oList = sap.ui.getCore().byId(oListItem._listId);

	//if includeItemInSelection true and select control pressed, we don't have to fire the select event
	var select = oEvent.getParameter("selected");
	oListItem.setSelected(select, true);

	if(oList.getMode() === sap.m.ListMode.SingleSelectMaster && sap.ui.core.theming.Parameters.get("sapUiListSingleSelectMasterAsActive") == "true"){
		oListItem._active = select;
		oListItem._activeHandling();
		if(select){
			oListItem._activeHandlingNav();
			oListItem._activeHandlingInheritor();
		}
		else{
			oListItem._inactiveHandlingNav();
			oListItem._inactiveHandlingInheritor();
		}
	}
	else{
		oListItem.$().toggleClass('sapMLIBSelected', select);
	}
	if (!oList.getIncludeItemInSelection()) {
		oList.fireSelect({listItem:oListItem});
	}
};

/**
 * // * List fires select event caused by the list item
 */
sap.m.List.prototype._selectTapped = function(oListItem) {
	this.fireSelect({listItem:oListItem});
};

/**
 * // * List fires delete event caused by the delete image
 */
sap.m.List.prototype._delete = function(oEvent) {
	var oListItem = sap.ui.getCore().byId(this.oParent.getId());
	var oList = sap.ui.getCore().byId(oListItem._listId);
	oList.fireDelete({listItem:oListItem});
};

/**
 * // * removes all selections of the current mode if selection mode is changed
*/
sap.m.List.prototype._removeCurrentSelection = function() {
	switch (this.getMode()) {
		case sap.m.ListMode.SingleSelect:
		case sap.m.ListMode.SingleSelectLeft:
			var aItems = this.getItems();
			for ( var i = 0; i < aItems.length; i++) {
				if(aItems[i]._radioButton){
					aItems[i]._radioButton.setSelected(false);
				}
				aItems[i].setSelected(false, true);
				aItems[i].$().toggleClass('sapMLIBSelected', false);
			}
			break;
		case sap.m.ListMode.MultiSelect:
			var aItems = this.getItems();
			for ( var i = 0; i < aItems.length; i++) {
				if(aItems[i]._checkBox){
					aItems[i]._checkBox.setSelected(false);
				}
				aItems[i].setSelected(false, true);
				aItems[i].$().toggleClass('sapMLIBSelected', false);
			}
			break;
		case sap.m.ListMode.SingleSelectMaster:
			var aItems = this.getItems();
			for ( var i = 0; i < aItems.length; i++) {
				if(aItems[i]._radioButton){
					aItems[i]._radioButton.setSelected(false);
				}
				aItems[i].setSelected(false, true);
				if(sap.ui.core.theming.Parameters.get("sapUiListSingleSelectMasterAsActive") == "true"){
					aItems[i]._active = false;
					aItems[i]._activeHandling();
					aItems[i]._inactiveHandlingNav();
					aItems[i]._inactiveHandlingInheritor();
				}
				else{
					aItems[i].$().toggleClass('sapMLIBSelected', false);
				}
			}
			break;
		case sap.m.ListMode.None:
			break;
	}
};

/**
 * after swipe content is shown on the right hand side of the list item
 * we will block the touch events and this method defines this touch blocker area.
 * It must be always child/ren of the area because we will listen parent's touch events
 *
 * @private
 */
sap.m.List.prototype._getTouchBlocker = function() {
	return this._$touchBlocker || (this._$touchBlocker = this.$().children());
};

sap.m.List.prototype._getSwipeContainer = function() {
	return this._$swipeContainer || (
		jQuery.sap.require("sap.m.InstanceManager"),
		this._$swipeContainer = jQuery("<div>", {
			"id" : this.getId() + "-swp",
			"class" : "sapMListSwp" + (sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true" && jQuery.os.ios ? " sapMBar-CTX" : "")
		})
	);
};

sap.m.List.prototype._setSwipePosition = function() {
	if (this._isSwipeActive) {
		return this._getSwipeContainer().css("top", this._swipedItem.$().position().top);
	}
};

sap.m.List.prototype._renderSwipeContent = function() {
	var $listitem = this._swipedItem.$(),
		$container = this._getSwipeContainer();

	// add swipe container into list if it is not there
	this.$().prepend($container.css({
		top : $listitem.position().top,
		height : $listitem.outerHeight(true)
	}));

	// render swipe content into swipe container if needed
	if (this._bRerenderSwipeContent) {
		this._bRerenderSwipeContent = false;
		var rm = sap.ui.getCore().createRenderManager();
		rm.render(this.getSwipeContent(), $container.empty()[0]);
		rm.destroy();
	}

	// for method chaining
	return this;
};

sap.m.List.prototype._swipeIn = function() {
	var that = this,	// scope
		$blocker = that._getTouchBlocker(),
		$container = that._getSwipeContainer();

	// render swipe content
	that._isSwipeActive = true;
	that._renderSwipeContent();

	// add to instance manager
	sap.m.InstanceManager.addDialogInstance(that);

	// maybe keyboard is opened
	window.document.activeElement.blur();

	// check orientation change and recalculate the position
	jQuery(window).on("resize.swp", function() {
		that._setSwipePosition();
	});

	// block touch events
	$blocker.css("pointer-events", "none").on("touchstart.swp", function(e){
		if (!$container[0].firstChild.contains(e.target)) {
			e.preventDefault();
			e.stopPropagation();
		}
	});

	// UX: swipeout is not interruptible till animation is finished
	$container.bind("webkitAnimationEnd animationend", function() {
		jQuery(this).unbind("webkitAnimationEnd animationend");
		// disable animation and focus to container
		$container.css("opacity", 1).focus();

		// check parents touchend for auto hide mode
		$blocker.parent().on("touchend.swp", function(e) {
			// checks if event source is coming from swipe container's first child
			if (!$container[0].firstChild.contains(e.target)) {
				that.swipeOut();
			}
		});
	}).removeClass("sapMListSwpOutAnim").addClass("sapMListSwpInAnim");
};

sap.m.List.prototype._onSwipeOut = function(callback) {
	// remove container from DOM and disable animation event
	this._getSwipeContainer().css("opacity", 0).remove();

	// remove windows resize listener
	jQuery(window).off("resize.swp");

	// enable touch events again
	this._getTouchBlocker().css("pointer-events", "auto").off("touchstart.swp");

	if (typeof callback == "function") {
		callback.call(this, this._swipedItem, this.getSwipeContent());
	}

	this._isSwipeActive = false;

	// remove from instance manager
	sap.m.InstanceManager.removeDialogInstance(this);
};

sap.m.List.prototype.swipeOut = function(callback) {
	if (!this._isSwipeActive) {
		return this;
	}

	var that = this,
		$container = this._getSwipeContainer();

	// stop listening parents touchend event
	this._getTouchBlocker().parent().off("touchend.swp");

	// add swipeout animation and listen this
	$container.bind("webkitAnimationEnd animationend", function() {
		jQuery(this).unbind("webkitAnimationEnd animationend");
		that._onSwipeOut(callback);
	}).removeClass("sapMListSwpInAnim").addClass("sapMListSwpOutAnim");

	return this;
};

/**
 * Close and hide the opened swipe content immediately
 * This method is also gets called from sap.m.InstanceManager
 * @private
 */
sap.m.List.prototype.close = function() {
	if (this._isSwipeActive) {
		this.swipeOut()._onSwipeOut();
	}
};

/**
 * Called on swipe event to bring in the swipeContent control
 *
 * @private
 */
sap.m.List.prototype._onSwipe = function(oEvent) {
	var oContent = this.getSwipeContent();
	if (oContent && jQuery.support.touch && !this._isSwipeActive && this !== oEvent.srcControl && !this._eventHandledByControl) {
		// source can be anything so, check parents and find the list item
		for (var li = oEvent.srcControl; !(li instanceof sap.m.ListItemBase); li = li.oParent);
		this._swipedItem = li;

		// fire event earlier to let the user change swipeContent according to list item
		// if the event not is canceled then start the animation
		this.fireSwipe({
			listItem : this._swipedItem,
			swipeContent : oContent,
			srcControl : oEvent.srcControl
		}, true) && this._swipeIn();
	}
};

/**
 * @private
 */
sap.m.List.prototype.ontouchstart = function(oEvent) {
	this._eventHandledByControl = oEvent.originalEvent._sapui_handledByControl;
	
	// handle pop-in events
	if (this._hasPopin) {
		sap.m.ColumnListItem.handleEvents(oEvent, "touchstart", this.getDomRef());
	}
};

/**
 * @private
 */
sap.m.List.prototype.ontap = function(oEvent) {
	// handle pop-in events
	if (this._hasPopin) {
		sap.m.ColumnListItem.handleEvents(oEvent, "tap", this.getDomRef());
	}
};

/**
 * @private
 */
sap.m.List.prototype.onswipeleft = function(oEvent) {
	var dir = this.getSwipeDirection();
	if (dir == "Both" || dir == "RightToLeft") {
		this._onSwipe(oEvent);
	}
};

/**
 * @private
 */
sap.m.List.prototype.onswiperight = function(oEvent) {
	var dir = this.getSwipeDirection();
	if (dir == "Both" || dir == "LeftToRight") {
		this._onSwipe(oEvent);
	}
};

sap.m.List.prototype.setSwipeDirection = function(dir) {
	return this.setProperty("swipeDirection", dir, true);
};

sap.m.List.prototype.getSwipedItem = function() {
	return (this._isSwipeActive ? this._swipedItem : null);
};

sap.m.List.prototype.setSwipeContent = function(oControl) {
	this._bRerenderSwipeContent = true;

	// prevent list from re-rendering on setSwipeContent
	return this.setAggregation("swipeContent", oControl, true);
};

sap.m.List.prototype.invalidate = function(oOrigin) {
	if (oOrigin && oOrigin === this.getSwipeContent()) {
		this._bRerenderSwipeContent = true;
	}

	sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	return this;
};

/**
 * This method is called asynchronously if resize event comes from column
 * @private
 */
sap.m.List.prototype._onColumnResize = function(oColumn) {
	// if list did not have pop-in and will not have pop-in
	// then we do not need re-render, we can just change display of column
	if (!this._hasPopin && !this._mutex) {
		var hasPopin = this.getColumns().some(function(col) {
			return col.isPopin();
		});

		if (!hasPopin) {
			oColumn.setDisplay(document.getElementById(this.getId() + "-listUl"));
			return;
		}
	}

	this._dirty = window.innerWidth;
	if (!this._mutex) {
		var clean = window.innerWidth;
		this._mutex = true;
		this.rerender();

		// do not re-render if resize event comes so frequently
		jQuery.sap.delayedCall(200, this, function() {
			// but check if any event come during the wait-time
			if (Math.abs(this._dirty - clean) > 10) {
				delete this._dirty;
				this.rerender();
			}
			this._mutex = false;
		});
	}
};

sap.m.List.prototype.addItemGroup = function(oGroup, oHeader) {
	if (!oHeader) {
		oHeader = new sap.m.GroupHeaderListItem({ title:oGroup.text || oGroup.key }).addStyleClass("sapMListHdr");
	}
	this.addAggregation("items", oHeader);
};

sap.m.List.prototype._setTableHeaderVisibility = function(bColVisible) {
	var $headRow = jQuery.sap.byId(this.getId() + "-listUl").find("thead > tr"),
		bHeaderVisible = !$headRow.hasClass("sapMListTblHeaderNone"),
		aVisibleColumns = $headRow.find(".sapMListTblCell").filter(":visible"),
		$firstVisibleCol = aVisibleColumns.eq(0);
	
	if (aVisibleColumns.length == 1) {
		$firstVisibleCol.width("");	// cover the space
	} else {
		$firstVisibleCol.width($firstVisibleCol.attr("data-sap-orig-width"));
	}
	
	if (!bColVisible && bHeaderVisible) {
		$headRow[0].className = "sapMListTblRow sapMListTblHeader";
	} else if (bColVisible && !bHeaderVisible && !aVisibleColumns.length) {
		$headRow[0].className = "sapMListTblHeaderNone";
	}
};

}; // end of sap.m.List
if ( !jQuery.sap.isDeclared('sap.m.ListItemBase') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ListItemBase.
jQuery.sap.declare("sap.m.ListItemBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ListItemBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.ListType (default: sap.m.ListType.Inactive)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getUnread unread} : boolean (default: false)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getCounter counter} : int</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ListItemBase#event:tap tap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:detailTap detailTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ListItemBase#event:detailPress detailPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ListItemBase contains the core features of all specific list items.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.ListItemBase
 */
sap.ui.core.Control.extend("sap.m.ListItemBase", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"isSelected"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"type" : {type : "sap.m.ListType", group : "Misc", defaultValue : sap.m.ListType.Inactive},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"unread" : {type : "boolean", group : "Misc", defaultValue : false},
		"selected" : {type : "boolean", group : "", defaultValue : false},
		"counter" : {type : "int", group : "Misc", defaultValue : null}
	},
	events : {
		"tap" : {}, 
		"detailTap" : {}, 
		"press" : {}, 
		"detailPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ListItemBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ListItemBase.extend
 * @function
 */

sap.m.ListItemBase.M_EVENTS = {'tap':'tap','detailTap':'detailTap','press':'press','detailPress':'detailPress'};


/**
 * Getter for property <code>type</code>.
 * Type of the list item, defines the behaviour
 *
 * Default value is <code>Inactive</code>
 *
 * @return {sap.m.ListType} the value of property <code>type</code>
 * @public
 * @name sap.m.ListItemBase#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Inactive</code> 
 *
 * @param {sap.m.ListType} oType  new value for property <code>type</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setType
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible list items are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ListItemBase#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setVisible
 * @function
 */


/**
 * Getter for property <code>unread</code>.
 * If the unread indicator is set on the list, this boolean defines if it will be shown on this list item. Default is false.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>unread</code>
 * @public
 * @name sap.m.ListItemBase#getUnread
 * @function
 */

/**
 * Setter for property <code>unread</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bUnread  new value for property <code>unread</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setUnread
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * This property defines the select state of the list item when using single/Multi-Selection
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.m.ListItemBase#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setSelected
 * @function
 */


/**
 * Getter for property <code>counter</code>.
 * Property sets a counter bubble with the integer given.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>counter</code>
 * @public
 * @name sap.m.ListItemBase#getCounter
 * @function
 */

/**
 * Setter for property <code>counter</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iCounter  new value for property <code>counter</code>
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#setCounter
 * @function
 */


/**
 * tap event (This event is deprecated, use the press event instead) 
 *
 * @name sap.m.ListItemBase#tap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * tap event (This event is deprecated, use the press event instead) 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tap' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachTap
 * @function
 */

/**
 * Fire event tap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#fireTap
 * @function
 */


/**
 * detail tap event (This event is deprecated, use the detailPress event instead) 
 *
 * @name sap.m.ListItemBase#detailTap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * detail tap event (This event is deprecated, use the detailPress event instead) 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachDetailTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'detailTap' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachDetailTap
 * @function
 */

/**
 * Fire event detailTap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#fireDetailTap
 * @function
 */


/**
 * Event is fired when the user clicks on the control. 
 *
 * @name sap.m.ListItemBase#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#firePress
 * @function
 */


/**
 * Event is fired when the user clicks on the detail button of the control. 
 *
 * @name sap.m.ListItemBase#detailPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ListItemBase</code>.<br/> itself. 
 *  
 * Event is fired when the user clicks on the detail button of the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ListItemBase</code>.<br/> itself.
 *
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#attachDetailPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'detailPress' event of this <code>sap.m.ListItemBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ListItemBase#detachDetailPress
 * @function
 */

/**
 * Fire event detailPress to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ListItemBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ListItemBase#fireDetailPress
 * @function
 */


/**
 * returns the state of the item selection as a boolean
 *
 * @name sap.m.ListItemBase.prototype.isSelected
 * @function

 * @type boolean
 * @public
 * @deprecated Since version 7.20.0. 
 * API Change makes this method unnecessary
 */


// Start of sap/m/ListItemBase.js
//mode of the list e.g. singleSelection, multi...
//internal selected state of the listitem
sap.m.ListItemBase.prototype.init = function(){
	this._mode = sap.m.ListMode.None;
};

// radiobutton for single selection
sap.m.ListItemBase.prototype._getRadioButton = function(oRadioButtonId, sGroupName) {
	var _radioButton = this._radioButton || new sap.m.RadioButton(oRadioButtonId, {
		groupName : sGroupName,
		activeHandling : false,
		selected: this.getSelected()
	}).setParent(this, null, true).attachSelect(this._select);
	return this._radioButton = _radioButton;
};

// checkbox for multiselection
sap.m.ListItemBase.prototype._getCheckBox = function(oBoxId) {
	var _checkBox = this._checkBox || new sap.m.CheckBox(oBoxId, {
		activeHandling : false,
		selected: this.getSelected()
	}).setParent(this, null, true).attachSelect(this._select);
	return this._checkBox = _checkBox;
};

sap.m.ListItemBase.prototype.exit = function() {
	if (this._radioButton) {
		this._radioButton.destroy();
	}
	if (this._checkBox) {
		this._checkBox.destroy();
	}
	if (this._navImage) {
		this._navImage.destroy();
	}
	if (this._delIcon) {
		this._delIcon.destroy();
	}
	if (this._detailIcon) {
		this._detailIcon.destroy();
	}
};

sap.m.ListItemBase.prototype.isSelected = function() {
	return this.getSelected();
};


//called when IncludeItemInSelection true and we have to handle check mark and styling
sap.m.ListItemBase.prototype.setSelected = function(select) {
	//argument true for not setting the selection control due internal handling
	if(this._listId && this.getDomRef() && !arguments[1]){
		var oList = sap.ui.getCore().byId(this._listId);
		oList.setSelectedItem(this, select);
	}
	else{
		this.setProperty("selected", select, true);
	}
	return this;
};

sap.m.ListItemBase.prototype.setUnread = function(unread) {
	this.setProperty("unread", unread, true);
	this.$().toggleClass('sapMLIBUnread', unread);
	return this;
};

sap.m.ListItemBase.prototype._getNavImage = function(oImgId, oImgStyle, oSrc, oActiveSrc) {
	// no navigation image for android
	if (!jQuery.os.ios && this.getType() == sap.m.ListType.Navigation)
		return null;

	if (!this._imagePath)
		if (jQuery.os.ios)
			this._imagePath = jQuery.sap.getModulePath("sap.m", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/list/ios/";
		else
			this._imagePath = jQuery.sap.getModulePath("sap.m", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/list/android/";

	if(oActiveSrc){
		oActiveSrc = this._imagePath + oActiveSrc;
	}

	var navImage = this._navImage || new sap.m.Image(oImgId, {
		src : this._imagePath + oSrc,
		activeSrc : oActiveSrc,
		densityAware: false
	}).addStyleClass(oImgStyle, true).setParent(this, null, true);
	;
	return this._navImage = navImage;
};

sap.m.ListItemBase.prototype._getDelImage = function(oImgId, oImgStyle, oSrc) {
	if (!this._imagePath)
		if (jQuery.os.ios)
			this._imagePath = jQuery.sap.getModulePath("sap.m", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/list/ios/";
		else
			this._imagePath = jQuery.sap.getModulePath("sap.m", '/') + "themes/" + sap.ui.getCore().getConfiguration().getTheme() + "/img/list/android/";

	var delImage = this._delImage || new sap.m.Image(oImgId, {
		src : this._imagePath + oSrc,
		densityAware: false
	}).addStyleClass(oImgStyle, true).setParent(this, null, true).attachPress(this._delete);
	return this._delImage = delImage;
};

/**
 * @private
 */
sap.m.ListItemBase.prototype.ontap = function(oEvent) {
	var type = this.getType();

	if (this._includeItemInSelection && (this._mode === sap.m.ListMode.SingleSelect || this._mode === sap.m.ListMode.SingleSelectLeft || this._mode === sap.m.ListMode.MultiSelect) || this._mode === sap.m.ListMode.SingleSelectMaster) {
		// if _includeItemInSelection all tap events will be used for the mode
		// select/delete
		switch (this._mode) {
		case sap.m.ListMode.SingleSelect:
		case sap.m.ListMode.SingleSelectLeft:
		case sap.m.ListMode.SingleSelectMaster:
			// check if radiobutton fired the event and therefore do not set the
			// select
			if (oEvent.srcControl && oEvent.srcControl.getId() !== this._radioButton.getId()) {
				this.setSelected(true);
			}
			(sap.ui.getCore().byId(this._listId))._selectTapped(this);
			break;
		case sap.m.ListMode.MultiSelect:
			// check if checkbox fired the event and therefore do not set the select
			if (oEvent.srcControl && oEvent.srcControl.getId() !== this._checkBox.getId()) {
				this.setSelected(!this.isSelected());
			}
			(sap.ui.getCore().byId(this._listId))._selectTapped(this);
			break;
		}
	} else {
		switch (type) {
		// Inactive
		case sap.m.ListType.Inactive:
			break;

		// Active/Navigation
		case sap.m.ListType.Active:
		case sap.m.ListType.Navigation:
			// if a fast tap happens deactivate the touchstart/touchend timers and
			// their logic

			//activeHandled checks the control, whether it is handling the active feedback by its own or not... also delete icons won't cause an active feedback
			var activationHandled = this._doActiveHandling(oEvent);
			//check if the controls handles events on its own, imgNav must be handled anyhow

			if (activationHandled && (!this._eventHandledByControl)) {
				window.clearTimeout(this._timeoutIdStart);
				window.clearTimeout(this._timeoutIdEnd);
				this._event = oEvent;
				this._active = true;
				this._activeHandling();
				if(type === sap.m.ListType.Navigation){
					this._activeHandlingNav();
				}
				this._activeHandlingInheritor();
				var that = this;
			}
			if (!this._eventHandledByControl) {
				this.fireTap({/* no parameters */}); // (This event is deprecated, use the press event instead)
				this.firePress({/* no parameters */});
			}
			if (activationHandled && (!this._eventHandledByControl)) {
				window.setTimeout(function() {
					that._active = false;
					that._activeHandling();
					if(type === sap.m.ListType.Navigation){
						that._inactiveHandlingNav();
					}
					that._inactiveHandlingInheritor();
				}, 180);
			}
			break;

		// Detail
		case sap.m.ListType.Detail:
			if (oEvent.srcControl && oEvent.srcControl.getId() === (this.getId() + "-imgDet")) {
				this.fireDetailTap({/* no parameters */}); // (This event is deprecated, use the press event instead)
				this.fireDetailPress({/* no parameters */});
			}
			break;

		// DetailAndActive
		case sap.m.ListType.DetailAndActive:
			if (oEvent.srcControl && oEvent.srcControl.getId() === (this.getId() + "-imgDet")) {
				this.fireDetailTap({/* no parameters */}); // (This event is deprecated, use the press event instead)
				this.fireDetailPress({/* no parameters */});
			} else {
			//activeHandled checks the control, whether it is handling the active feedback by its own or not... also delete icons won't cause an active feedback
				var activationHandled = this._doActiveHandling(oEvent);
				if (activationHandled && (!this._eventHandledByControl)) {
					window.clearTimeout(this._timeoutIdStart);
					window.clearTimeout(this._timeoutIdEnd);
					this._event = oEvent;
					this._active = true;
					this._activeHandling();
					this._activeHandlingInheritor();
					var that = this;
				}
				if (!this._eventHandledByControl) {
					this.fireTap({/* no parameters */}); // (This event is deprecated, use the press event instead)
					this.firePress({/* no parameters */});
				}

				if (activationHandled && (!this._eventHandledByControl)) {
					window.setTimeout(function() {
						that._active = false;
						that._activeHandling();
						that._inactiveHandlingInheritor();
					}, 180);
				}
			}
			break;
		default:
		}
	}
};

sap.m.ListItemBase.prototype.ontouchstart = function(oEvent) {
	this._eventHandledByControl = oEvent.originalEvent._sapui_handledByControl;
	this._active = true;
	if(oEvent.targetTouches){
		this._touchedY = oEvent.targetTouches[0].clientY;
		this._touchedX = oEvent.targetTouches[0].clientX;
	}
	var that = this;
	var _event = oEvent;

	if (!that._touchEndProxy) {
		that._touchEndProxy = jQuery.proxy(that._ontouchend, that);
	}

	// here also bound to the mouseup mousemove event to enable it working in
	// desktop browsers#
	if(jQuery.support.touch){
		jQuery(window.document).bind("touchend touchcancel", that._touchEndProxy);
	}
	else{
		jQuery(window.document).bind("mouseup", that._touchEndProxy);
	}

	if (!that._touchMoveProxy) {
		that._touchMoveProxy = jQuery.proxy(that._ontouchmove, that);
	}

	jQuery(window.document).bind("vmousemove", that._touchMoveProxy);
	// timeout regarding active state when scrolling
	this._timeoutIdStart = window.setTimeout(function() {
		// several fingers could be used
		//for selections with whole list item interaction and singleselectmaster active handling is disabled
		if (!(that._includeItemInSelection && (that._mode === sap.m.ListMode.SingleSelect || that._mode === sap.m.ListMode.SingleSelectLeft || that._mode === sap.m.ListMode.MultiSelect))  && ((_event.touches && _event.touches.length === 1) || !_event.touches)) {
			var type = that.getType();
			switch (type) {
			case sap.m.ListType.Inactive:
			case sap.m.ListType.Detail:
				break;
			case sap.m.ListType.Active:
			case sap.m.ListType.Navigation:
				//activeHandled checks the control, whether it is handling the active feedback by its own or not... also delete icons won't cause an active feedback
				var activationHandled = that._doActiveHandling(oEvent);
				if (activationHandled && (!that._eventHandledByControl)) {
					that._event = oEvent;
					that._activeHandling();
					if(type === sap.m.ListType.Navigation){
						that._activeHandlingNav();
					}
					that._activeHandlingInheritor();
				}
				break;
			case sap.m.ListType.DetailAndActive:
				//activeHandled checks the control, whether it is handling the active feedback by its own or not... also delete icons won't cause an active feedback
				var activationHandled = that._doActiveHandling(oEvent);
				if (activationHandled && oEvent.srcControl.getId() !== (that.getId() + "-imgDet") && (!that._eventHandledByControl)) {
					that._event = oEvent;
					that._activeHandling();
					that._activeHandlingInheritor();
				}
				break;
			default:
			}
		}
	}, 100);
};

// touch move to prevent active state when scrolling
sap.m.ListItemBase.prototype._ontouchmove = function(oEvent) {
	var touchMovement = oEvent.targetTouches && ((Math.abs(this._touchedY - oEvent.targetTouches[0].clientY) > 10)||Math.abs(this._touchedX - oEvent.targetTouches[0].clientX) > 10);
	if ((this._active || this._timeoutIdStart) && touchMovement) {
		// there is movement and therefore no tap...remove active styles
		window.clearTimeout(this._timeoutIdStart);
		this._active = false;
		this._activeHandling();
		if(this.getType() === sap.m.ListType.Navigation){
			this._inactiveHandlingNav();
		}
		this._inactiveHandlingInheritor();
		this._timeoutIdStart = null;
		this._timeoutIdEnd = null;
	}
};

sap.m.ListItemBase.prototype._ontouchend = function(oEvent) {

	// several fingers could be used
	if (((oEvent.targetTouches && oEvent.targetTouches.length === 0) || !oEvent.targetTouches)) {
		var type = this.getType();
		var that = this;
		switch (type) {
		case sap.m.ListType.Active:
		case sap.m.ListType.Navigation:
		case sap.m.ListType.DetailAndActive:
			// wait maybe it is a tap
			this._timeoutIdEnd = window.setTimeout(function() {
				that._event = oEvent;
				that._active = false;
				that._activeHandling();
				that._inactiveHandlingNav();
				that._inactiveHandlingInheritor();
			}, 100);
			break;
		case sap.m.ListType.Detail:
		case sap.m.ListType.Inactive:
		default:
		}

		if(jQuery.support.touch){
			jQuery(window.document).unbind("touchend touchcancel", that._touchEndProxy);
		}
		else{
			jQuery(window.document).unbind("mouseup", that._touchEndProxy);
		}
		jQuery(window.document).unbind("vmousemove", this._touchMoveProxy);
	}
};

// remove active styles for navigation list items
sap.m.ListItemBase.prototype._inactiveHandlingNav = function() {
	this._active = false;
	// image active state
	if (jQuery.os.ios) {
		jQuery.sap.byId(this.getId() + "-imgNav").toggleClass('sapMLIBImgNavActive', this._active);
	}
};

// add active styles for navigation items
sap.m.ListItemBase.prototype._activeHandlingNav = function() {
	// image active state
	if (jQuery.os.ios) {
		jQuery.sap.byId(this.getId() + "-imgNav").toggleClass('sapMLIBImgNavActive', this._active);
	}
};

// hook method for active handling...inheritors should overwrite this method
// when needed
sap.m.ListItemBase.prototype._activeHandlingInheritor = function() {
};

// hook method for inactive handling...inheritors should overwrite this method
// when needed
sap.m.ListItemBase.prototype._inactiveHandlingInheritor = function() {
};

//switch background style...active feedback
sap.m.ListItemBase.prototype._activeHandling = function() {
	this.$().toggleClass('sapMLIBActive', this._active);
	jQuery.sap.byId(this.getId() + "-counter").toggleClass('sapMLIBActiveCounter', this._active);
	if (this.getUnread()) {
		jQuery.sap.byId(this.getId() + "-unread").toggleClass('sapMLIBActiveUnread', this._active);
	}
	var imgDet = sap.ui.getCore().byId(this.getId() + "-imgDet");
		if(imgDet instanceof sap.ui.core.Icon){
		imgDet.$().toggleClass('sapMLIBIconDetActive', this._active);
	}

	var imgDel = sap.ui.getCore().byId(this.getId() + "-imgDel");
		if(imgDel instanceof sap.ui.core.Icon){
		imgDel.$().toggleClass('sapMLIBIconDelActive', this._active);
	}
};

sap.m.ListItemBase.prototype._doActiveHandling = function(oEvent) {
	if(oEvent.srcControl	&& (!oEvent.srcControl.getActiveHandling || oEvent.srcControl.getActiveHandling && oEvent.srcControl.getActiveHandling() !== false)
		&& oEvent.srcControl.getId() !== (this.getId() + "-imgDel")){
		return true;
	}
	return false;
};

}; // end of sap.m.ListItemBase
if ( !jQuery.sap.isDeclared('sap.m.NavContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.NavContainer.
jQuery.sap.declare("sap.m.NavContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new NavContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDefaultTransitionName defaultTransitionName} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getPages pages} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialPage initialPage} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.NavContainer#event:navigate navigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.NavContainer#event:afterNavigate afterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The NavContainer control handles hierarchic navigation between Pages or other fullscreen controls.
 * 
 * All children of this control will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.NavContainer
 */
sap.ui.core.Control.extend("sap.m.NavContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"to", "back", "backToPage", "backToTop", "getPage", "getCurrentPage", "getPreviousPage", "addCustomTransition"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"defaultTransitionName" : {type : "string", group : "Appearance", defaultValue : null}
	},
	defaultAggregation : "pages",
	aggregations : {
    	"pages" : {type : "sap.ui.core.Control", multiple : true, singularName : "page"}
	},
	associations : {
		"initialPage" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"navigate" : {allowPreventDefault : true}, 
		"afterNavigate" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.NavContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.NavContainer.extend
 * @function
 */

sap.m.NavContainer.M_EVENTS = {'navigate':'navigate','afterNavigate':'afterNavigate'};


/**
 * Getter for property <code>height</code>.
 * The height of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 *
 * Default value is <code>'100%'</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.NavContainer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>'100%'</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the NavContainer. Can be changed when the NavContainer should not cover the whole available area.
 *
 * Default value is <code>'100%'</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.NavContainer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>'100%'</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setWidth
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Whether the NavContainer is visible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.NavContainer#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setVisible
 * @function
 */


/**
 * Getter for property <code>defaultTransitionName</code>.
 * The type of the transition/animation to apply when "to()" is called without defining a transition type to use. The default is "slide" on iOS and Android; on Windows Phone the default is "door". Other options are: "fade", "flip" and "show" - and the names of any registered custom transitions.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>defaultTransitionName</code>
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#getDefaultTransitionName
 * @function
 */

/**
 * Setter for property <code>defaultTransitionName</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDefaultTransitionName  new value for property <code>defaultTransitionName</code>
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#setDefaultTransitionName
 * @function
 */


/**
 * Getter for aggregation <code>pages</code>.<br/>
 * The content entities between which this NavContainer navigates. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.NavContainer#getPages
 * @function
 */


/**
 * Inserts a page into the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oPage the page to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the page should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the page is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the page is inserted at 
 *             the last position        
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#insertPage
 * @function
 */

/**
 * Adds some page <code>oPage</code> 
 * to the aggregation named <code>pages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page to add; if empty, nothing is inserted
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#addPage
 * @function
 */

/**
 * Removes an page from the aggregation named <code>pages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vPage the page to remove or its index or id
 * @return {sap.ui.core.Control} the removed page or null
 * @public
 * @name sap.m.NavContainer#removePage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>pages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.NavContainer#removeAllPages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>pages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oPage the page whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.NavContainer#indexOfPage
 * @function
 */
	

/**
 * Destroys all the pages in the aggregation 
 * named <code>pages</code>.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#destroyPages
 * @function
 */


/**
 * This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
 * This value should be set initially and not set/modified while the application is running.
 * 
 * This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".
 *
 * @return {string} Id of the element which is the current target of the <code>initialPage</code> association, or null
 * @public
 * @name sap.m.NavContainer#getInitialPage
 * @function
 */

/**
 * This association can be used to define which page is displayed initially. If the given page does not exist or no page is given, the first page which has been added is considered as initial page.
 * This value should be set initially and not set/modified while the application is running.
 * 
 * This could be used not only for the initial display, but also if the user wants to navigate "up to top", so this page serves as a sort of "home/root page".
 *
 * @param {string | sap.ui.core.Control} vInitialPage 
 *    Id of an element which becomes the new target of this <code>initialPage</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.NavContainer#setInitialPage
 * @function
 */


	
/**
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @name sap.m.NavContainer#navigate
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 *
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#attachNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'navigate' event of this <code>sap.m.NavContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#detachNavigate
 * @function
 */

/**
 * Fire event navigate to attached listeners.
 *
 * Listeners may prevent the default action of this event using the preventDefault-method on the event object.
 * * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {boolean} whether to prevent the default action
 * @protected
 * @since 1.7.1
 * @name sap.m.NavContainer#fireNavigate
 * @function
 */


/**
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @name sap.m.NavContainer#afterNavigate
 * @event
 * @since 1.7.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.NavContainer</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.NavContainer</code>.<br/> itself.
 *
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#attachAfterNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterNavigate' event of this <code>sap.m.NavContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @public
 * @since 1.7.1
 * @name sap.m.NavContainer#detachAfterNavigate
 * @function
 */

/**
 * Fire event afterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.NavContainer} <code>this</code> to allow method chaining
 * @protected
 * @since 1.7.1
 * @name sap.m.NavContainer#fireAfterNavigate
 * @function
 */


/**
 * Navigates to the next page (with drill-down semantic) with the given (or default) animation. This creates a new history item inside the NavContainer and allows going back.
 * 
 * Available transitions currently include "slide" (default), "fade", "flip", and "show". None of these is currently making use of any given transitionParameters.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given data object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 *
 * @name sap.m.NavContainer.prototype.to
 * @function
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData

 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters

 * @since 1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.

 * @type sap.m.NavContainer
 * @public
 */


/**
 * Navigates back one level. If already on the initial page and there is no place to go back, nothing happens.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 *
 * @name sap.m.NavContainer.prototype.back
 * @function
 * @param {object} 
 *         oBackData

 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters

 * @since 1.7.1 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.NavContainer
 * @public
 */


/**
 * Navigates back to the nearest previous page in the NavContainer history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 *
 * @name sap.m.NavContainer.prototype.backToPage
 * @function
 * @param {string} 
 *         sPageId
 *         The ID of the screen to which back navigation should happen. The nearest page with this ID among the previous pages in the history stack will be used.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToPage" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.NavContainer
 * @public
 * @since 1.7.2
 */


/**
 * Navigates back to the initial/top level (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the NavContainer, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property.
 *
 * @name sap.m.NavContainer.prototype.backToTop
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the "backToTop" navigation. The event on the target page will contain this data object as "backData" property.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.NavContainer
 * @public
 * @since 1.7.1
 */


/**
 * Returns the control with the given ID from the "pages" aggregation (if available).
 *
 * @name sap.m.NavContainer.prototype.getPage
 * @function
 * @param {string} 
 *         sId
 *         The ID of the aggregated control to find.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Returns the currently displayed page-level control. Note: it is not necessarily an instance of sap.m.Page, but it could also be a sap.ui.core.View, sap.m.Carousel, or whatever is aggregated.
 *
 * @name sap.m.NavContainer.prototype.getCurrentPage
 * @function

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Returns the previous page (the page from which the user drilled down to the current page with "to()").
 * Note: this is not the page which the user has seen before, but the page which is the target of the next "back()" navigation.
 * If there is no previous page, "undefined" is returned.
 *
 * @name sap.m.NavContainer.prototype.getPreviousPage
 * @function

 * @type sap.ui.core.Control
 * @public
 * @since 1.7.1
 */


/**
 * Adds a custom transition to the NavContainer type (not to a particular instance!). The transition is identified by a "name". Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * 
 * "to" and "back" are the transition functions for the forward and backward navigation.
 * Both will be called with the following parameters:
 * - oFromPage: the Control which is currently being displayed by the NavContainer
 * - oToPage: the Control which should be displayed by the NavContainer after the transition
 * - fCallback: a function which MUST be called when the transition has completed
 * - oTransitionParameters: a data object that can be given by application code when triggering the transition by calling to() or back(); this object could give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration
 * 
 * The contract for "to" and "back" is that they may do an animation of their choice, but it should not take "too long". At the beginning of the transition the target page "oToPage" does have the CSS class "sapMNavItemHidden" which initially hides the target page (visibility:hidden). The transition can do any preparation (e.g. move that page out of the screen or make it transparent) and then should remove this CSS class.
 * After the animation the target page "oToPage" should cover the entire screen and the source page "oFromPage" should not be visible anymore. This page should then have the CSS class "sapMNavItemHidden".
 * For adding/removing this or other CSS classes, the transition can use the addStyleClass/removeStyleClass method:
 * oFromPage.addStyleClass("sapMNavItemHidden");
 * When the transition is complete, it MUST call the given fCallback method to inform the NavContainer that navigation has finished!
 * 
 * Hint: if the target page of your transition stays black on iPhone, try wrapping the animation start into a
 * setTimeout(..., 0)
 * block (delayed, but without waiting).
 * 
 * This method can be called on any NavContainer instance or statically on the sap.m.NavContainer type. However, the transition will always be registered for the type (and ALL instances), not for the single instance on which this method was invoked.
 * 
 * Returns the sap.m.NavContainer type if called statically, or "this" (to allow method chaining) if called on a particular NavContainer instance.
 *
 * @name sap.m.NavContainer.prototype.addCustomTransition
 * @function
 * @param {string} 
 *         sName
 *         The name of the transition. This name can be used by the application to choose this transition when navigating "to()" or "back()": the "transitionName" parameter of "NavContainer.to()" corresponds to this name, the back() navigation will automatically use the same transition.
 * 
 * Make sure to only use names that will not collide with transitions which may be added to the NavContainer later. A suggestion is to use the prefix "c_" or "_" for your custom transitions to ensure this.
 * @param {object} 
 *         oTo
 *         The function which will be called by the NavContainer when the application navigates "to()", using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * 
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.
 * @param {object} 
 *         oBack
 *         The function which will be called by the NavContainer when the application navigates "back()" from a page where it had navigated to using this animation's name. The NavContainer instance is the "this" context within the animation function.
 * 
 * See the documentation of NavContainer.addCustomTransitions for more details about this function.

 * @type sap.m.NavContainer
 * @public
 */


// Start of sap/m/NavContainer.js
sap.m.NavContainer.prototype.init = function() {
	this._pageStack = [];
	this._mVisitedPages = {};
	this._iTransitionsCompleted = 0; // to track proper callback at the end of transitions
	this._bNeverRendered = true;
};


sap.m.NavContainer.prototype.onBeforeRendering = function() {
	// for the very first rendering
	if (this._bNeverRendered) { // will be set to false after rendering
		
		// special handling for the page which is the first one which is rendered in this NavContainer
		var pageToRenderFirst = this.getCurrentPage();
		var pageId = pageToRenderFirst.getId();
		
		if (!this._mVisitedPages[pageId]) { // events could already be fired by initial "to()" call 
			this._mVisitedPages[pageId] = true;
			
			var oNavInfo = {
					from:null,
					fromId:null,
					to:pageToRenderFirst,
					toId:pageId,
					firstTime:true,
					isTo:false,
					isBack:false,
					isBackToPage:false,
					isBackToTop:false,
					direction:"initial"
			};
			
			var oEvent = jQuery.Event("BeforeFirstShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.data = {};
			oEvent.backData = {};
			pageToRenderFirst._handleEvent(oEvent);
			
			oEvent = jQuery.Event("BeforeShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.data = {};
			oEvent.backData = {};
			pageToRenderFirst._handleEvent(oEvent);
		}
	}
};

sap.m.NavContainer.prototype.onAfterRendering = function() {
	// for the very first rendering
	if (this._bNeverRendered) {
		this._bNeverRendered = false;
		delete this._bNeverRendered;
		
		// special handling for the page which is the first one which is rendered in this NavContainer
		var pageToRenderFirst = this.getCurrentPage();
		var pageId = pageToRenderFirst.getId();
		
		var oNavInfo = {
				from:null,
				fromId:null,
				to:pageToRenderFirst,
				toId:pageId,
				firstTime:true,
				isTo:false,
				isBack:false,
				isBackToTop:false,
				isBackToPage:false,
				direction:"initial"
		};
		
		var oEvent = jQuery.Event("AfterShow", oNavInfo);
		oEvent.srcControl = this;
		oEvent.data = {};
		oEvent.backData = {};
		pageToRenderFirst._handleEvent(oEvent);
	}
};

/**
 * Returns the page that should act as initial page - either the one designated as such, or, if it does not exist,
 * the first page (index 0 in the aggregation). Returns null if no page is aggregated.
 *
 * @private
 */
sap.m.NavContainer.prototype._getActualInitialPage = function() {
	var pageId = this.getInitialPage();
	if (pageId) {
		var page = sap.ui.getCore().byId(pageId);
		if (page) {
			return page;
		} else {
			jQuery.sap.log.error("NavContainer: control with ID '" + pageId + "' was set as 'initialPage' but was not found as a DIRECT child of this NavContainer (number of current children: " + this.getPages().length + ").");
		}
	}
	var pages = this.getPages();
	return (pages.length > 0 ? pages[0] : null);
};


//*** API methods ***

sap.m.NavContainer.prototype.getPage = function(pageId) {
	var aPages = this.getPages();
	for (var i = 0; i < aPages.length; i++) {
		if (aPages[i] && (aPages[i].getId() == pageId)) {
			return aPages[i];
		}
	}
	return null;
};

sap.m.NavContainer.prototype.getDefaultTransitionName = function() {
	var sName = this.getProperty("defaultTransitionName");
	if (!sName) {
		sName = jQuery.os.winphone ? "door" : "slide";
	}
	return sName;
};


sap.m.NavContainer.prototype._ensurePageStackInitialized = function() {
	if (this._pageStack.length === 0) {
		var page = this._getActualInitialPage(); // TODO: with bookmarking / deep linking this is the initial, but not the "home"/root page
		this._pageStack.push({id:page.getId(), mode:"initial", data:{}});
	}
	return this._pageStack;
};

sap.m.NavContainer.prototype.getCurrentPage = function() {
	var stack = this._ensurePageStackInitialized();

	return this.getPage(stack[stack.length-1].id);
};

sap.m.NavContainer.prototype.getPreviousPage = function() {
	var stack = this._ensurePageStackInitialized();
	
	if (stack.length > 1) {
		return this.getPage(stack[stack.length-2].id);
		
	} else if (stack.length == 1) { // the current one is the only page on the stack
		return undefined;
		
	} else {
		jQuery.sap.log.error("page stack is empty but should have been initialized");
	}
};


sap.m.NavContainer.prototype._afterTransitionCallback = function(oNavInfo, oData, oBackData) {
	var oEvent = jQuery.Event("AfterShow", oNavInfo);
	oEvent.data = oData || {};
	oEvent.backData = oBackData || {};
	oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
	oNavInfo.to._handleEvent(oEvent);
	
	oEvent = jQuery.Event("AfterHide", oNavInfo);
	oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
	oNavInfo.from._handleEvent(oEvent);
	
	this._iTransitionsCompleted++;
	this._bNavigating = false;
	
	this.fireAfterNavigate(oNavInfo);
	// TODO: destroy HTML? Remember to destroy ALL HTML of several pages when backToTop has been called
};


sap.m.NavContainer.prototype.to = function(pageId, transitionName, data, oTransitionParameters) {
	if (pageId instanceof sap.ui.core.Control) {
		pageId = pageId.getId();
	}

	// fix parameters
	if (typeof(transitionName) !== "string") {
		// transitionName is omitted, shift parameters
		oTransitionParameters = data;
		data = transitionName;
	}
	transitionName = transitionName || this.getDefaultTransitionName();
	oTransitionParameters = oTransitionParameters || {};
	data = data || {};

	// make sure the initial page is on the stack
	this._ensurePageStackInitialized();

	var oFromPage = this.getCurrentPage();
	if (oFromPage && (oFromPage.getId() === pageId)) { // cannot navigate to the page that is already current
		jQuery.sap.log.warning(this.toString() + ": Cannot navigate to page " + pageId + " because this is the current page.");
		return this;
	}
	if (this._bNavigating) {
		jQuery.sap.log.warning(this.toString() + ": Cannot navigate to page " + pageId + " because another navigation is already in progress.");
		return this;
	}
	var oToPage = this.getPage(pageId);

	if (oToPage) {
		
		var oNavInfo = {
				from:oFromPage,
				fromId:oFromPage.getId(),
				to:oToPage,
				toId:pageId,
				firstTime:!this._mVisitedPages[pageId],
				isTo:true,
				isBack:false,
				isBackToTop:false,
				isBackToPage:false,
				direction:"to"
		};
		var bContinue = this.fireNavigate(oNavInfo);
		if (bContinue) { // ok, let's do the navigation
		
			// TODO: let one of the pages also cancel navigation?
			var oEvent = jQuery.Event("BeforeHide", oNavInfo);
			oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
			// no data needed for hiding
			oFromPage._handleEvent(oEvent);
			
			if (!this._mVisitedPages[pageId]) { // if this page has not been shown before
				oEvent = jQuery.Event("BeforeFirstShow", oNavInfo);
				oEvent.srcControl = this;
				oEvent.data = data || {};
				oEvent.backData = {};
				oToPage._handleEvent(oEvent);
			}
			
			oEvent = jQuery.Event("BeforeShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.data = data || {};
			oEvent.backData = {};
			oToPage._handleEvent(oEvent);

			
			this._pageStack.push({id:pageId,mode:transitionName,data:data}); // this actually causes/is the navigation
			this._mVisitedPages[pageId] = true;
	
			if (!this.getDomRef()) { // the wanted animation has been recorded, but when the NavContainer is not rendered, we cannot animate, so just return
				jQuery.sap.log.info("'Hidden' 'to' navigation in not-rendered NavContainer " + this.toString());
				return this;
			}
	
			// render the page that should get visible
			var oToPageDomRef;
			if (!(oToPageDomRef = oToPage.getDomRef()) || sap.ui.core.RenderManager.isPreservedContent(oToPageDomRef)) {
				oToPage.addStyleClass("sapMNavItemRendering");
				jQuery.sap.log.debug("Rendering 'to' page '" + oToPage.toString() + "' for 'to' navigation");
				var rm = sap.ui.getCore().createRenderManager();
				rm.render(oToPage, this.getDomRef());
				rm.destroy();
				oToPage.addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemRendering");
			}
	
			var oTransition = sap.m.NavContainer.transitions[transitionName] || sap.m.NavContainer.transitions["slide"];
	
			// Track proper invocation of the callback  TODO: only do this during development?
			var iCompleted = this._iTransitionsCompleted;
			var that = this;
			window.setTimeout(function(){
				if (that && (that._iTransitionsCompleted < iCompleted + 1)) {
					jQuery.sap.log.warning("Transition '" + transitionName + "' 'to' was triggered five seconds ago, but has not yet invoked the end-of-transition callback.");
				}
			}, 5000);
	
			this._bNavigating = true;
			oTransition.to.call(this, oFromPage, oToPage, jQuery.proxy(function(){this._afterTransitionCallback(oNavInfo, data);}, this), oTransitionParameters); // trigger the transition
			
		} else {
			jQuery.sap.log.info("Navigation to page with ID '" + pageId + "' has been aborted by the application");
		}

	} else {
		jQuery.sap.log.warning("Navigation triggered to page with ID '" + pageId + "', but this page is not known/aggregated by " + this);
	}
	return this;
};

// TODO: track and queue invalidations occurring during the animation


sap.m.NavContainer.prototype.back = function(backData, oTransitionParameters) {
	this._backTo("back", backData, oTransitionParameters);
	return this;
};

sap.m.NavContainer.prototype.backToPage = function(pageId, backData, oTransitionParameters) {
	this._backTo("backToPage", backData, oTransitionParameters, pageId);
	return this;
};

sap.m.NavContainer.prototype.backToTop = function(backData, oTransitionParameters) {
	this._backTo("backToTop", backData, oTransitionParameters);
	return this;
};


sap.m.NavContainer.prototype._backTo = function(sType, backData, oTransitionParameters, sRequestedPageId) {
	if (this._pageStack.length <= 1) {
		// there is no place to go back

		// but then the assumption is that the only page on the stack is the initial one and has not been navigated to. Check this:
		if (this._pageStack.length === 1 && this._pageStack[0].mode != "initial") {
			throw new Error("Initial page not found on the stack. How did this happen?");
		}
		return this;

	} else { // normal back navigation
		if (this._bNavigating) {
			jQuery.sap.log.warning(this.toString() + ": Cannot navigate back because another navigation is already in progress.");
			return this;
		}
		
		var oFromPageInfo = this._pageStack[this._pageStack.length-1];
		var mode = oFromPageInfo.mode;
		var oFromPage = this.getPage(oFromPageInfo.id);
		var oToPage;
		var oToPageData;
		
		if (sType === "backToTop") {
			oToPage = this._getActualInitialPage();
			oToPageData = null;
			
		} else if (sType === "backToPage") {
			var info = this._findClosestPreviousPageInfo(sRequestedPageId);
			if (!info) {
				jQuery.sap.log.error(this.toString() + ": Cannot navigate backToPage('" + sRequestedPageId + "') because target page was not found among the previous pages.");
				return this;
			}
			oToPage = sap.ui.getCore().byId(info.id);
			if (!oToPage) {
				jQuery.sap.log.error(this.toString() + ": Cannot navigate backToPage('" + sRequestedPageId + "') because target page does not exist anymore.");
				return this;
			}
			oToPageData = info.data;
			
		} else { // normal "back"
			oToPage = this.getPreviousPage();
			oToPageData = this._pageStack[this._pageStack.length-2].data;
		}
		
		if(!oToPage) {
			jQuery.sap.log.error("NavContainer back navigation: target page is not defined or not aggregated by this NavContainer. Aborting navigation.");
			return;
		}

		var oToPageId = oToPage.getId();
		backData = backData || {};
		oTransitionParameters = oTransitionParameters || {};
		
		var oNavInfo = {
			from:oFromPage,
			fromId:oFromPage.getId(),
			to:oToPage,
			toId:oToPageId,
			firstTime:!this._mVisitedPages[oToPageId],
			isTo:false,
			isBack:(sType === "back"),
			isBackToPage:(sType === "backToPage"),
			isBackToTop:(sType === "backToTop"),
			direction:sType
		};
		var bContinue = this.fireNavigate(oNavInfo);
		if (bContinue) { // ok, let's do the navigation
			
			var oEvent = jQuery.Event("BeforeHide", oNavInfo);
			oEvent.srcControl = this; // store the element on the event (aligned with jQuery syntax)
			// no data needed for hiding
			oFromPage._handleEvent(oEvent);
			
			if (!this._mVisitedPages[oToPageId]) { // if this page has not been shown before
				oEvent = jQuery.Event("BeforeFirstShow", oNavInfo);
				oEvent.srcControl = this;
				oEvent.backData = backData || {};
				// the old data from the forward navigation should not exist because there was never a forward navigation
				oEvent.data = {};
				oToPage._handleEvent(oEvent);
			}
			
			oEvent = jQuery.Event("BeforeShow", oNavInfo);
			oEvent.srcControl = this;
			oEvent.backData = backData || {};
			oEvent.data =  oToPageData || {}; // the old data from the forward navigation
			oToPage._handleEvent(oEvent);

			this._pageStack.pop(); // this actually causes/is the navigation
			this._mVisitedPages[oToPageId] = true;
			
			if (sType === "backToTop") { // if we should navigate to top, just clean up the whole stack
				this._pageStack = [];
				this.getCurrentPage(); // this properly restores the initial page on the stack
				
			} else if (sType === "backToPage") {
				while (this._pageStack[this._pageStack.length-1].id !== sRequestedPageId) { // by now it is guaranteed that we will find it
					this._pageStack.pop();
				}
			}

			if (!this.getDomRef()) { // the wanted animation has been recorded, but when the NavContainer is not rendered, we cannot animate, so just return
				jQuery.sap.log.info("'Hidden' back navigation in not-rendered NavContainer " + this.toString());
				return this;
			}
			
			var oTransition = sap.m.NavContainer.transitions[mode] || sap.m.NavContainer.transitions["slide"];
	
			// Track proper invocation of the callback  TODO: only do this during development?
			var iCompleted = this._iTransitionsCompleted;
			var that = this;
			window.setTimeout(function(){
				if (that && (that._iTransitionsCompleted < iCompleted + 1)) {
					jQuery.sap.log.warning("Transition '" + mode + "' 'back' was triggered five seconds ago, but has not yet invoked the end-of-transition callback.");
				}
			}, 5000);
			
			this._bNavigating = true;
			
			// make sure the to-page is rendered
			var oToPageDomRef;
			if (!(oToPageDomRef = oToPage.getDomRef()) || sap.ui.core.RenderManager.isPreservedContent(oToPageDomRef)) {
				oToPage.addStyleClass("sapMNavItemRendering");
				jQuery.sap.log.debug("Rendering 'to' page '" + oToPage.toString() + "' for back navigation");
				var rm = sap.ui.getCore().createRenderManager();
				var childPos = this.$().children().index(oFromPage.getDomRef());
				rm.renderControl(oToPage);
				rm.flush(this.getDomRef(), false, childPos);
				rm.destroy();
				oToPage.addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemRendering");
			}
			
			//if the from page and to page are identical, the transition is skipped.
			if(oFromPage.getId() === oToPage.getId()){
				jQuery.sap.log.info("Transition is skipped when navigating back to the same page instance" + oToPage.toString());
				this._afterTransitionCallback(oNavInfo, oToPageData, backData);
				return this;
			}
			
			// trigger the transition
			oTransition.back.call(this, oFromPage, oToPage, jQuery.proxy(function(){this._afterTransitionCallback(oNavInfo, oToPageData, backData);}, this), oTransitionParameters); // trigger the transition
		}
	}
	return this;
};

sap.m.NavContainer.prototype._findClosestPreviousPageInfo = function(sRequestedPreviousPageId) {
	for (var i = this._pageStack.length-2; i >= 0; i--) {
		var info = this._pageStack[i];
		if (info.id === sRequestedPreviousPageId) {
			return info;
		}
	}
	return null;
};


sap.m.NavContainer.transitions = sap.m.NavContainer.transitions || {}; // make sure the object exists


//*** SHOW Transition ***

sap.m.NavContainer.transitions["show"] = {
	to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class which has been added by the NavContainer before the transition was called
		oFromPage.addStyleClass("sapMNavItemHidden");
		fCallback();
	},
	
	back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
		oToPage.removeStyleClass("sapMNavItemHidden");
		oFromPage.addStyleClass("sapMNavItemHidden"); // instantly hide the previous page
		fCallback();
	}
};


//*** SLIDE Transition ***

if (jQuery.support.cssTransitions) {
	sap.m.NavContainer.transitions["slide"] = {
	
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			oFromPage.addStyleClass("sapMNavItemCenter");
			window.setTimeout(function(){ // iPhone seems to need a zero timeout here, otherwise the to page is black (and may suddenly become visible when the DOM is touched)
			
				// set the style classes that represent the initial state
				oToPage.addStyleClass("sapMNavItemRight");     // the page to navigate to should be placed just right of the visible area
				oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
				
		
				// iPhone needs some time... there is no animation without waiting
				window.setTimeout(function(){
					
					var bOneTransitionFinished = false;
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					fAfterTransition = function() {
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						if (!bOneTransitionFinished) {
							// the first one of both transitions finished
							bOneTransitionFinished = true;
						} else {
							// the second transition now also finished => clean up the style classes
							oToPage.removeStyleClass("sapMNavItemSliding").removeStyleClass("sapMNavItemCenter");
							oFromPage.removeStyleClass("sapMNavItemSliding").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemLeft");
		
							// notify the NavContainer that the animation is complete
							fCallback();
						}
					};
					
					oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oToPage.addStyleClass("sapMNavItemSliding").addStyleClass("sapMNavItemCenter").removeStyleClass("sapMNavItemRight");
					oFromPage.addStyleClass("sapMNavItemSliding").removeStyleClass("sapMNavItemCenter").addStyleClass("sapMNavItemLeft");
		
				}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
			
			},0); // iPhone seems to need a zero timeout here, otherwise the to page is black (and may suddenly become visible when the DOM is touched)
		},
	
		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			// set the style classes that represent the initial state
			oToPage.addStyleClass("sapMNavItemLeft");     // the page to navigate back to should be placed just left of the visible area
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
			oFromPage.addStyleClass("sapMNavItemCenter");
	
			// iPhone needs some time... there is no animation without waiting
			window.setTimeout(function() {
				
				var bOneTransitionFinished = false;
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {
					jQuery(this).unbind("webkitTransitionEnd transitionend");
					if (!bOneTransitionFinished) {
						// the first one of both transitions finished
						bOneTransitionFinished = true;
					} else {
						// the second transition now also finished => clean up the style classes
						oToPage.removeStyleClass("sapMNavItemSliding").removeStyleClass("sapMNavItemCenter");
						oFromPage.removeStyleClass("sapMNavItemSliding").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemRight");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					}
				};
				
				oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
				oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
				
				// set the new style classes that represent the end state (and thus start the transition)
				oToPage.addStyleClass("sapMNavItemSliding").addStyleClass("sapMNavItemCenter").removeStyleClass("sapMNavItemLeft"); // transition from left position to normal/center position starts now
				oFromPage.addStyleClass("sapMNavItemSliding").removeStyleClass("sapMNavItemCenter").addStyleClass("sapMNavItemRight"); // transition from normal position to right position starts now
	
			}, 100); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
		}
	};
	
} else { // no CSS transitions, IE9 support
	sap.m.NavContainer.transitions["slide"] = {
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var $ToPage = oToPage.$();
			$ToPage.css("left", "100%");
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class which has been added by the NavContainer before the transition was called

			$ToPage.animate({left: "0%"}, 300);
			var $FromPage = oFromPage.$();
			$FromPage.animate({left: "-100%"}, 300, function(){
				oFromPage.addStyleClass("sapMNavItemHidden");
				$FromPage.css("left", "0");
				fCallback();
			});
		},

		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var $ToPage = oToPage.$();
			$ToPage.css("left", "-100%");
			oToPage.removeStyleClass("sapMNavItemHidden");

			$ToPage.animate({left: "0%"}, 300);
			var $FromPage = oFromPage.$();
			$FromPage.animate({left: "100%"}, 300, function(){
				oFromPage.addStyleClass("sapMNavItemHidden");
				$FromPage.css("left", "0");
				fCallback();
			});
		}
	};
}


//*** FADE Transition ***

if (jQuery.support.cssTransitions) {
	sap.m.NavContainer.transitions["fade"] = {
	
			to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
				// set the style classes that represent the initial state
				oToPage.addStyleClass("sapMNavItemTransparent");
				oToPage.removeStyleClass("sapMNavItemHidden");
	
				// iPhone needs some time for rendering, there is no animation without waiting
				window.setTimeout(function(){
					
					// the code to be executed after the new page has completed fading in
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					fAfterTransition = function() {
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						// clean up the style classes
						oFromPage.addStyleClass("sapMNavItemHidden");
						oToPage.removeStyleClass("sapMNavItemFading").removeStyleClass("sapMNavItemOpaque");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					};
					
					oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oToPage.addStyleClass("sapMNavItemFading").removeStyleClass("sapMNavItemTransparent").addStyleClass("sapMNavItemOpaque");
					
				}, 10);
			},
	
			back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
				// set the style classes that represent the initial state
				oFromPage.addStyleClass("sapMNavItemOpaque");
				oToPage.removeStyleClass("sapMNavItemHidden");
	
				// iPhone needs some time for rendering, there is no animation without waiting
				window.setTimeout(function() {
					
					// the code to be executed after the new page has completed fading in
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					fAfterTransition = function() {
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						// clean up the style classes
						oFromPage.removeStyleClass("sapMNavItemFading").addStyleClass("sapMNavItemHidden"); // TODO: destroy HTML?
						oFromPage.removeStyleClass("sapMNavItemTransparent");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					};
					
					oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oFromPage.addStyleClass("sapMNavItemFading").removeStyleClass("sapMNavItemOpaque");
					oFromPage.addStyleClass("sapMNavItemTransparent");
	
				}, 10);
			}
	};

} else { // no CSS transitions, IE9 support
	sap.m.NavContainer.transitions["fade"] = {
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var $ToPage = oToPage.$();
			$ToPage.css("opacity", "0");
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class which has been added by the NavContainer before the transition was called

			$ToPage.animate({opacity: "1"}, 500, function(){
				oFromPage.addStyleClass("sapMNavItemHidden");
				fCallback();
			});
		},

		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var $FromPage = oFromPage.$();
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class which has been added by the NavContainer before the transition was called

			$FromPage.animate({opacity: "0"}, 500, function(){
				oFromPage.addStyleClass("sapMNavItemHidden");
				$FromPage.css("opacity", "1");
				fCallback();
			});
		}
	};
}


//*** FLIP Transition ***

if (jQuery.support.cssTransitions) {
	sap.m.NavContainer.transitions["flip"] = {
	
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var that = this;
			window.setTimeout(function(){ // iPhone seems to need a zero timeout here, otherwise the to page is black (and may suddenly become visible when the DOM is touched)
				
				var isAndroid23 = (jQuery.os.android && jQuery.os.fVersion === 2.3);
				
				// if not Android2.3 then add perspective styles to NavContainer
				!isAndroid23 && that.$().addClass("sapMNavFlip");
			
				// set the style classes that represent the initial state
				oToPage.addStyleClass("sapMNavItemFlipNext");     // the page to navigate to should be placed just right of the visible area
				oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
		
				// iPhone needs some time... there is no animation without waiting
				window.setTimeout(function(){
					
					var bOneTransitionFinished = false;
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					fAfterTransition = function() {
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						if (!bOneTransitionFinished) {
							// the first one of both transitions finished
							bOneTransitionFinished = true;
						} else {
							// the second transition now also finished => clean up the style classes
							oToPage.removeStyleClass("sapMNavItemFlipping");
							oFromPage.removeStyleClass("sapMNavItemFlipping").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemFlipPrevious");
							!isAndroid23 && that.$().removeClass("sapMNavFlip");
							
							// notify the NavContainer that the animation is complete
							fCallback();
						}
					};
					
					oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oToPage.addStyleClass("sapMNavItemFlipping").removeStyleClass("sapMNavItemFlipNext");
					oFromPage.addStyleClass("sapMNavItemFlipping").addStyleClass("sapMNavItemFlipPrevious");
		
				}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few#
			}, 0);
		},
	
		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var that = this,
				isAndroid23 = (jQuery.os.android && jQuery.os.fVersion === 2.3);
			
			// if not Android2.3 then add perspective styles to NavContainer
			!isAndroid23 && that.$().addClass("sapMNavFlip");
			
			// set the style classes that represent the initial state
			oToPage.addStyleClass("sapMNavItemFlipPrevious");     // the page to navigate back to should be placed just left of the visible area
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
	
			// iPhone needs some time... there is no animation without waiting
			window.setTimeout(function() {
				
				var bOneTransitionFinished = false;
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {
					jQuery(this).unbind("webkitTransitionEnd transitionend");
					if (!bOneTransitionFinished) {
						// the first one of both transitions finished
						bOneTransitionFinished = true;
					} else {
						// the second transition now also finished => clean up the style classes
						oToPage.removeStyleClass("sapMNavItemFlipping");
						oFromPage.removeStyleClass("sapMNavItemFlipping").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemFlipNext");
						!isAndroid23 && that.$().removeClass("sapMNavFlip");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					}
				};
				
				oFromPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
				oToPage.$().bind("webkitTransitionEnd transitionend", fAfterTransition);
				
				// set the new style classes that represent the end state (and thus start the transition)
				oToPage.addStyleClass("sapMNavItemFlipping").removeStyleClass("sapMNavItemFlipPrevious"); // transition from left position to normal/center position starts now
				oFromPage.addStyleClass("sapMNavItemFlipping").addStyleClass("sapMNavItemFlipNext"); // transition from normal position to right position starts now
	
			}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
		}
	};

} else { // no CSS transitions, IE9 support
	sap.m.NavContainer.transitions["flip"] = sap.m.NavContainer.transitions["slide"];
}


//*** DOOR Transition ***

if (jQuery.support.cssTransitions) {
	sap.m.NavContainer.transitions["door"] = {
	
		to: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var that = this;
			window.setTimeout(function(){ // iPhone seems to need a zero timeout here, otherwise the to page is black (and may suddenly become visible when the DOM is touched)
				
				var isAndroid23 = (jQuery.os.android && jQuery.os.fVersion === 2.3);
				
				// if not Android2.3 then add perspective styles to NavContainer
				!isAndroid23 && that.$().addClass("sapMNavDoor");
			
				// set the style classes that represent the initial state
				oToPage.addStyleClass("sapMNavItemDoorInNext");     // the page to navigate to should be placed just right of the visible area
				oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
		
				// iPhone needs some time... there is no animation without waiting
				window.setTimeout(function(){
					
					var bOneTransitionFinished = false;
					var fAfterTransition = null; // make Eclipse aware that this variable is defined
					fAfterTransition = function() {
						jQuery(this).unbind("webkitAnimationEnd animationend");
						if (!bOneTransitionFinished) {
							// the first one of both transitions finished
							bOneTransitionFinished = true;
						} else {
							// the second transition now also finished => clean up the style classes
							oToPage.removeStyleClass("sapMNavItemDooring").removeStyleClass("sapMNavItemDoorInNext");
							oFromPage.removeStyleClass("sapMNavItemDooring").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemDoorInPrevious");
							!isAndroid23 && that.$().removeClass("sapMNavDoor");
							
							// notify the NavContainer that the animation is complete
							fCallback();
						}
					};
					
					oFromPage.$().bind("webkitAnimationEnd animationend", fAfterTransition);
					oToPage.$().bind("webkitAnimationEnd animationend", fAfterTransition);
					
					// set the new style classes that represent the end state (and thus start the transition)
					oToPage.addStyleClass("sapMNavItemDooring");
					oFromPage.addStyleClass("sapMNavItemDooring").addStyleClass("sapMNavItemDoorInPrevious");
		
				}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few#
			}, 0);
		},
	
		back: function(oFromPage, oToPage, fCallback /*, oTransitionParameters is unused */) {
			var that = this,
				isAndroid23 = (jQuery.os.android && jQuery.os.fVersion === 2.3);
			
			// if not Android2.3 then add perspective styles to NavContainer
			!isAndroid23 && that.$().addClass("sapMNavDoor");
			
			// set the style classes that represent the initial state
			oToPage.addStyleClass("sapMNavItemDoorOutNext");     // the page to navigate back to should be placed just left of the visible area
			oToPage.removeStyleClass("sapMNavItemHidden"); // remove the "hidden" class now which has been added by the NavContainer before the animation was called
	
			// iPhone needs some time... there is no animation without waiting
			window.setTimeout(function() {
				
				var bOneTransitionFinished = false;
				var fAfterTransition = null; // make Eclipse aware that this variable is defined
				fAfterTransition = function() {
					jQuery(this).unbind("webkitAnimationEnd animationend");
					if (!bOneTransitionFinished) {
						// the first one of both transitions finished
						bOneTransitionFinished = true;
					} else {
						// the second transition now also finished =>  clean up the style classes
						oToPage.removeStyleClass("sapMNavItemDooring").removeStyleClass("sapMNavItemDoorOutNext");
						oFromPage.removeStyleClass("sapMNavItemDooring").addStyleClass("sapMNavItemHidden").removeStyleClass("sapMNavItemDoorOutPrevious");
						!isAndroid23 && that.$().removeClass("sapMNavDoor");
	
						// notify the NavContainer that the animation is complete
						fCallback();
					}
				};
				
				oFromPage.$().bind("webkitAnimationEnd animationend", fAfterTransition);
				oToPage.$().bind("webkitAnimationEnd animationend", fAfterTransition);
				
				// set the new style classes that represent the end state (and thus start the transition)
				oToPage.addStyleClass("sapMNavItemDooring"); // transition from left position to normal/center position starts now
				oFromPage.addStyleClass("sapMNavItemDooring").addStyleClass("sapMNavItemDoorOutPrevious"); // transition from normal position to right position starts now
	
			}, 60); // this value has been found by testing on actual devices; with "10" there are frequent "no-animation" issues, with "100" there are none, with "50" there are very few
		}
	};

} else { // no CSS transitions, IE9 support
	sap.m.NavContainer.transitions["door"] = sap.m.NavContainer.transitions["slide"];
}


sap.m.NavContainer.prototype.addCustomTransition = function(sName, fTo, fBack) {
	if (sap.m.NavContainer.transitions[sName]) {
		jQuery.sap.log.warning("Transition with name " + sName + " already exists in " + this + ". It is now being replaced by custom transition.");
	}
	
	sap.m.NavContainer.transitions[sName] = {to:fTo, back:fBack};
	return this;
};
sap.m.NavContainer.addCustomTransition = sap.m.NavContainer.prototype.addCustomTransition;



// ----------------- code for tracking and avoiding invalidation --------------------------

/**
 * Forces invalidation and rerendering (.invalidate() is disabled)
 * @private
 */
sap.m.NavContainer.prototype.forceInvalidation = sap.m.NavContainer.prototype.invalidate;

sap.m.NavContainer.prototype.invalidate = function(oSource) {

	if (oSource == this) {
		// does not happen because the source is only given when propagating to a parent

	} else if (!oSource) {
		// direct invalidation of the NavContainer; this means a property has been modified
		this.forceInvalidation(); // let invalidation occur

	} else if (oSource instanceof sap.ui.core.Control) {
		// an aggregated control is invalidated
		var bIsInPages = false,
			aPages = this.getPages(),
			l = aPages.length;
			
		for (var i = 0; i < l; i++) {
			if (aPages[i] === oSource) {
				bIsInPages = true;
				break;
			}
		}
		
		if (bIsInPages && !(oSource.getId() === this.getCurrentPage())) {
			// the invalidation source is a non-current page, so do not rerender anything
		} else {
			// TODO: there will be more cases where invalidation is not required...
			this.forceInvalidation();
		}
		
	} else { 
		// TODO: which cases are ending up here?
		this.forceInvalidation();
		
	}
};

sap.m.NavContainer.prototype.addPage = function(oPage) {
	oPage.addStyleClass("sapMNavItem");
	this.addAggregation("pages", oPage, true);
	return this;
};

sap.m.NavContainer.prototype.insertPage = function(oPage, iIndex) {
	oPage.addStyleClass("sapMNavItem");
	this.insertAggregation("pages", oPage, true);
	return this;
};



// documentation of the pseudo events (beforeShow, afterShow, beforeHide etc.)

/**
 * sap.m.NavContainerChild is an artificial interface with the only purpose to bear the documentation of 
 * pseudo events triggered by sap.m.NavContainer on its child controls when navigation occurs and child controls are displayed/hidden.
 * 
 * Interested parties outside the child control can listen to one or more of these events by registering a Delegate:
 * <pre>
 * page1.addEventDelegate({
 *    onBeforeShow: function(evt) {
 *       // page1 is about to be shown; act accordingly - if required you can read event information from the evt object
 *    },
 *    onAfterHide: function(evt) {
 *       // ...
 *    }
 * });
 * </pre>
 * 
 * @name sap.m.NavContainerChild
 * @interface 
 * @public
*/


/**
 * This event is fired before the NavContainer shows this child control for the first time.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @name sap.m.NavContainerChild.prototype.BeforeFirstShow
 * @public
*/

/**
 * This event is fired every time before the NavContainer shows this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @name sap.m.NavContainerChild.prototype.BeforeShow
 * @public
*/

/**
 * This event is fired every time when the NavContainer has made this child control visible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @param {object} oEvent.data the data object which has been passed with the "to" navigation, or an empty object
 * @param {object} oEvent.backData the data object which has been passed with the back navigation, or an empty object
 * @name sap.m.NavContainerChild.prototype.AfterShow
 * @public
*/

/**
 * This event is fired every time before the NavContainer hides this child control. In case of animated transitions this 
 * event is fired before the transition starts.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @name sap.m.NavContainerChild.prototype.BeforeHide
 * @public
*/

/**
 * This event is fired every time when the NavContainer has made this child control invisible. In case of animated transitions this 
 * event is fired after the transition finishes. This control is now no longer being displayed and not animated anymore.
 * @event
 * @param {sap.ui.core.Control} oEvent.srcControl the NavContainer firing the event
 * @name sap.m.NavContainerChild.prototype.AfterHide
 * @public
*/

}; // end of sap.m.NavContainer
if ( !jQuery.sap.isDeclared('sap.m.ObjectAttribute') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectAttribute.
jQuery.sap.declare("sap.m.ObjectAttribute");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ObjectAttribute.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getActive active} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ObjectAttribute#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This object holds value and fire action event if the text is active and clicked
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.ObjectAttribute
 */
sap.ui.core.Control.extend("sap.m.ObjectAttribute", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"active" : {type : "boolean", group : "Misc", defaultValue : null}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectAttribute with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectAttribute.extend
 * @function
 */

sap.m.ObjectAttribute.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>visible</code>.
 * Invisible object attribute is not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ObjectAttribute#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#setVisible
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The text of the attribute
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.ObjectAttribute#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#setText
 * @function
 */


/**
 * Getter for property <code>active</code>.
 * Indicates that the text is clickable
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>active</code>
 * @public
 * @name sap.m.ObjectAttribute#getActive
 * @function
 */

/**
 * Setter for property <code>active</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bActive  new value for property <code>active</code>
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#setActive
 * @function
 */


/**
 * Event is fired when the text is active and the user taps or clicks on it 
 *
 * @name sap.m.ObjectAttribute#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.domRef Dom reference of the object attributes' text to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectAttribute</code>.<br/> itself. 
 *  
 * Event is fired when the text is active and the user taps or clicks on it 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectAttribute</code>.<br/> itself.
 *
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.ObjectAttribute</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectAttribute#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the object attributes' text to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectAttribute} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ObjectAttribute#firePress
 * @function
 */


// Start of sap/m/ObjectAttribute.js
///**
// * This file defines behavior for the control,
// */

/**
 * @private
 */
sap.m.ObjectAttribute.prototype.ontap = function(oEvent) {
	if(this.getActive()) {
		this.firePress({domRef: jQuery.sap.domById(this.getId())});
	}
};

/**
 * @private
 * @returns {Boolean}
 */
sap.m.ObjectAttribute.prototype._isEmpty = function() {
	return !this.getText().trim();
};
}; // end of sap.m.ObjectAttribute
if ( !jQuery.sap.isDeclared('sap.m.ObjectHeader') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectHeader.
jQuery.sap.declare("sap.m.ObjectHeader");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ObjectHeader.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIntroActive introActive} : boolean</li>
 * <li>{@link #getTitleActive titleActive} : boolean</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconActive iconActive} : boolean</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.m.ObjectAttribute[]</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ObjectHeader#event:titlePress titlePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ObjectHeader#event:introPress introPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ObjectHeader#event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ObjectHeader contol is used to display brief information about object similar to the StandardListItem
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.m.ObjectHeader
 */
sap.ui.core.Control.extend("sap.m.ObjectHeader", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"number" : {type : "string", group : "Misc", defaultValue : null},
		"numberUnit" : {type : "string", group : "Misc", defaultValue : null},
		"intro" : {type : "string", group : "Misc", defaultValue : null},
		"introActive" : {type : "boolean", group : "Misc", defaultValue : null},
		"titleActive" : {type : "boolean", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconActive" : {type : "boolean", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	defaultAggregation : "attributes",
	aggregations : {
    	"attributes" : {type : "sap.m.ObjectAttribute", multiple : true, singularName : "attribute"}, 
    	"firstStatus" : {type : "sap.m.ObjectStatus", multiple : false}, 
    	"secondStatus" : {type : "sap.m.ObjectStatus", multiple : false}
	},
	events : {
		"titlePress" : {}, 
		"introPress" : {}, 
		"iconPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectHeader with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectHeader.extend
 * @function
 */

sap.m.ObjectHeader.M_EVENTS = {'titlePress':'titlePress','introPress':'introPress','iconPress':'iconPress'};


/**
 * Getter for property <code>title</code>.
 * title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ObjectHeader#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setTitle
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Number field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>number</code>
 * @public
 * @name sap.m.ObjectHeader#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setNumber
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.m.ObjectHeader#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>intro</code>.
 * Introductory text for the object header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>intro</code>
 * @public
 * @name sap.m.ObjectHeader#getIntro
 * @function
 */

/**
 * Setter for property <code>intro</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIntro  new value for property <code>intro</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setIntro
 * @function
 */


/**
 * Getter for property <code>introActive</code>.
 * Indicates that the intro is clickable
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>introActive</code>
 * @public
 * @name sap.m.ObjectHeader#getIntroActive
 * @function
 */

/**
 * Setter for property <code>introActive</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bIntroActive  new value for property <code>introActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setIntroActive
 * @function
 */


/**
 * Getter for property <code>titleActive</code>.
 * Indicates that the title is clickable
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>titleActive</code>
 * @public
 * @name sap.m.ObjectHeader#getTitleActive
 * @function
 */

/**
 * Setter for property <code>titleActive</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bTitleActive  new value for property <code>titleActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setTitleActive
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Object header icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.ObjectHeader#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setIcon
 * @function
 */


/**
 * Getter for property <code>iconActive</code>.
 * Indicates that the iconis clickable
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>iconActive</code>
 * @public
 * @name sap.m.ObjectHeader#getIconActive
 * @function
 */

/**
 * Setter for property <code>iconActive</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bIconActive  new value for property <code>iconActive</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setIconActive
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible object headers are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ObjectHeader#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * The list of Object Attributes
 * 
 * @return {sap.m.ObjectAttribute[]}
 * @public
 * @name sap.m.ObjectHeader#getAttributes
 * @function
 */


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.m.ObjectAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#insertAttribute
 * @function
 */

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#addAttribute
 * @function
 */

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.m.ObjectAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.m.ObjectAttribute} the removed attribute or null
 * @public
 * @name sap.m.ObjectHeader#removeAttribute
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ObjectAttribute[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ObjectHeader#removeAllAttributes
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ObjectHeader#indexOfAttribute
 * @function
 */
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#destroyAttributes
 * @function
 */


/**
 * Getter for aggregation <code>firstStatus</code>.<br/>
 * First status shown on the right side of the attributes above the second status.
 * If it is not set the first attibute will expand to take the entire row.
 * 
 * @return {sap.m.ObjectStatus}
 * @public
 * @name sap.m.ObjectHeader#getFirstStatus
 * @function
 */


/**
 * Setter for the aggregated <code>firstStatus</code>.
 * @param oFirstStatus {sap.m.ObjectStatus}
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setFirstStatus
 * @function
 */
	

/**
 * Destroys the firstStatus in the aggregation 
 * named <code>firstStatus</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#destroyFirstStatus
 * @function
 */


/**
 * Getter for aggregation <code>secondStatus</code>.<br/>
 * Second status shown on the right side of the attributes below the first status.
 * If it is not set the second attibute will expand to take the entire row.
 * 
 * @return {sap.m.ObjectStatus}
 * @public
 * @name sap.m.ObjectHeader#getSecondStatus
 * @function
 */


/**
 * Setter for the aggregated <code>secondStatus</code>.
 * @param oSecondStatus {sap.m.ObjectStatus}
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#setSecondStatus
 * @function
 */
	

/**
 * Destroys the secondStatus in the aggregation 
 * named <code>secondStatus</code>.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#destroySecondStatus
 * @function
 */


/**
 * Event is fired when the title is active and the user tap/click on it 
 *
 * @name sap.m.ObjectHeader#titlePress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.domRef Dom reference of the object header' title to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 *  
 * Event is fired when the title is active and the user tap/click on it 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 *
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#attachTitlePress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'titlePress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#detachTitlePress
 * @function
 */

/**
 * Fire event titlePress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the object header' title to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ObjectHeader#fireTitlePress
 * @function
 */


/**
 * Event is fired when the title is active and the user tap/click on it 
 *
 * @name sap.m.ObjectHeader#introPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.domRef Dom reference of the object header' intro to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 *  
 * Event is fired when the title is active and the user tap/click on it 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 *
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#attachIntroPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'introPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#detachIntroPress
 * @function
 */

/**
 * Fire event introPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the object header' intro to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ObjectHeader#fireIntroPress
 * @function
 */


/**
 * Event is fired when the title icon is active and the user tap/click on it 
 *
 * @name sap.m.ObjectHeader#iconPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.domRef Dom reference of the object header' icon to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ObjectHeader</code>.<br/> itself. 
 *  
 * Event is fired when the title icon is active and the user tap/click on it 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ObjectHeader</code>.<br/> itself.
 *
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#attachIconPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.ObjectHeader</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectHeader#detachIconPress
 * @function
 */

/**
 * Fire event iconPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the object header' icon to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ObjectHeader} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ObjectHeader#fireIconPress
 * @function
 */


// Start of sap/m/ObjectHeader.js
///**
// * This file defines behavior for the control,
// */
//sap.m.ObjectHeader.prototype.init = function(){
//   // do something for initialization...
//};

sap.m.ObjectHeader.prototype.init = function() {
	this._fNumberWidth = undefined;
};

sap.m.ObjectHeader.prototype.ontap = function(oEvent) { 

	var sourceId = oEvent.target.id;
	if (this.getIntroActive() && sourceId === this.getId() + "-intro") {
		this.fireIntroPress({
			domRef : jQuery.sap.domById(sourceId)
		});
	} else if (this.getTitleActive() && sourceId === this.getId() + "-title") {
		this.fireTitlePress({
			domRef : jQuery.sap.domById(sourceId)
		});
	} else if (this.getIconActive() && (sourceId === this.getId() + "-img" || sourceId === this.getId() + "-icon")) {
		this.fireIconPress({
			domRef : jQuery.sap.domById(sourceId)
		});
	}
};

/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.m.ObjectHeader.prototype.exit = function() {

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}

	if (this._image) {
		this._image.destroy();
		this._image = null;
	}

	if (this._icon) {
		this._icon.destroy();
		this._icon = null;
	}
};

/**
 * Lazy load tile icon image.
 * 
 * @private
 */
sap.m.ObjectHeader.prototype._getImage = function() {

	var sURI = this.getIcon();
	var sSize = jQuery.device.is.phone ? "2.5rem" : "3rem";
	var bIsIcon = sap.ui.core.IconPool.isIconURI(sURI);
	var oImage;

	if (bIsIcon) {
		oImage = this._icon || sap.ui.core.IconPool.createControlByURI({
			src : sURI,
			id : this.getId() + "-icon",
			size : sSize
		}, sap.m.Image);
		this._icon = oImage;
	} else {
		oImage = this._image || sap.ui.core.IconPool.createControlByURI({
			src : sURI,
			id : this.getId() + "-img",
			height : sSize,
			width : sSize
		}, sap.m.Image);
		this._image = oImage;
	}

	oImage.setSrc(sURI);

	return oImage;
};

sap.m.ObjectHeader.prototype.onBeforeRendering = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

sap.m.ObjectHeader.prototype.onAfterRendering = function() {
	if (jQuery.sap.byId(this.getId() + "-number").length > 0){
		this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef(),  jQuery.proxy(this._resizeElements, this));
	}
};

sap.m.ObjectHeader.prototype._resizeElements = function() {

	if (!this.getDomRef())
		return;

	var id = this.getId();
	var $numberDiv = jQuery.sap.byId(id + "-numberdiv");
	var bHasWrap = $numberDiv.hasClass("sapMOHNumberWrap");
	
	if (this._fNumberWidth === undefined) {		
		this._fNumberWidth = $numberDiv.width();
	}

	var bOverflow = $numberDiv.parent().width() * 35 / 100 < this._fNumberWidth;

	if (bOverflow != bHasWrap) {
		$numberDiv.toggleClass("sapMOHNumberWrap");
		jQuery.sap.byId(id + "-titlediv").toggleClass("sapMOHNumberWrap");
		
		jQuery(sap.m.ObjectHeader._escapeId(id) + " .sapMOHBottomRow").css("margin-top", bOverflow && jQuery.device.is.phone ? ".25rem" : "");		
	}
};

/**
 * @param [string] sId control id to be escaped
 * @returns escaped control id with "#" prefix 
 * @private
 */
sap.m.ObjectHeader._escapeId = function (sId){
	return sId ? "#"+sId.replace(/(:|\.)/g,'\\$1') : "";
}; 

/**
 * @private
 * @returns {Boolean}
 */
sap.m.ObjectHeader.prototype._hasBottomContent = function() {
	
	return (this._hasAttributes() || this._hasStatus());
};

/**
 * @private
 * @returns {Boolean}
 */
sap.m.ObjectHeader.prototype._hasIcon = function() {
	
	return !!this.getIcon().trim();
};

/**
 * @private
 * @returns {Boolean}
 */
sap.m.ObjectHeader.prototype._hasAttributes = function() {
	var attributes = this.getAttributes(); 
	if(attributes && attributes.length > 0) {
		for(var i=0; i < attributes.length; i++) {
			if(!attributes[i]._isEmpty()) {
				return true;
			}
		}
	}
	return false;
};

/**
 * @private
 * @returns {Boolean}
 */
sap.m.ObjectHeader.prototype._hasStatus = function() {
	
	return ((this.getFirstStatus() && !this.getFirstStatus()._isEmpty())
			|| (this.getSecondStatus() && !this.getSecondStatus()._isEmpty() ));
};

}; // end of sap.m.ObjectHeader
if ( !jQuery.sap.isDeclared('sap.m.ObjectIdentifier') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectIdentifier.
jQuery.sap.declare("sap.m.ObjectIdentifier");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ObjectIdentifier.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getBadgeNotes badgeNotes} : boolean</li>
 * <li>{@link #getBadgePeople badgePeople} : boolean</li>
 * <li>{@link #getBadgeAttachments badgeAttachments} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Control that displays properties that identify an object.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.ObjectIdentifier
 */
sap.ui.core.Control.extend("sap.m.ObjectIdentifier", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"badgeNotes" : {type : "boolean", group : "Misc", defaultValue : null},
		"badgePeople" : {type : "boolean", group : "Misc", defaultValue : null},
		"badgeAttachments" : {type : "boolean", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectIdentifier with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectIdentifier.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The object title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ObjectIdentifier#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setTitle
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The object text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.ObjectIdentifier#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setText
 * @function
 */


/**
 * Getter for property <code>badgeNotes</code>.
 * Indicates whether or not the notes icon is displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>badgeNotes</code>
 * @public
 * @name sap.m.ObjectIdentifier#getBadgeNotes
 * @function
 */

/**
 * Setter for property <code>badgeNotes</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bBadgeNotes  new value for property <code>badgeNotes</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setBadgeNotes
 * @function
 */


/**
 * Getter for property <code>badgePeople</code>.
 * Indicates whether or not the address book icon is displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>badgePeople</code>
 * @public
 * @name sap.m.ObjectIdentifier#getBadgePeople
 * @function
 */

/**
 * Setter for property <code>badgePeople</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bBadgePeople  new value for property <code>badgePeople</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setBadgePeople
 * @function
 */


/**
 * Getter for property <code>badgeAttachments</code>.
 * Indicates whether or not the attachments icon is displayed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>badgeAttachments</code>
 * @public
 * @name sap.m.ObjectIdentifier#getBadgeAttachments
 * @function
 */

/**
 * Setter for property <code>badgeAttachments</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bBadgeAttachments  new value for property <code>badgeAttachments</code>
 * @return {sap.m.ObjectIdentifier} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectIdentifier#setBadgeAttachments
 * @function
 */


// Start of sap/m/ObjectIdentifier.js
///**
// * This file defines behavior for the control,
// */

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype.exit = function() {

    if (this._attachmentsIcon) {
        this._attachmentsIcon.destroy();
        this._attachmentsIcon = null;
    }

    if (this._peopleIcon) {
        this._peopleIcon.destroy();
        this._peopleIcon = null;
    }

    if (this._notesIcon) {
        this._notesIcon.destroy();
        this._notesIcon = null;
    }
};

/**
 * Lazy load attachments icon.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype._getAttachmentsIcon = function() {

	if (!this._attachmentsIcon){
		this._attachmentsIcon = this._getIcon(sap.ui.core.IconPool.getIconURI("attachment"), this.getId() + "-attachments");
	}

    return this._attachmentsIcon;
};

/**
 * Lazy load people icon.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype._getPeopleIcon = function() {

	if (!this._peopleIcon){
		this._peopleIcon = this._getIcon(sap.ui.core.IconPool.getIconURI("group"), this.getId() + "-people");
	}

    return this._peopleIcon;
};

/**
 * Lazy load notes icon.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype._getNotesIcon = function() {

	if(!this._notesIcon ) {
		this._notesIcon  = this._getIcon(sap.ui.core.IconPool.getIconURI("notes"), this.getId() + "-notes");
	}

    return this._notesIcon;
};

/**
 * Create icon image.
 * 
 * @private
 */
sap.m.ObjectIdentifier.prototype._getIcon = function(sURI, sImageId) {

    var sSize = jQuery.device.is.phone ? "1em" : "1em";
    var oImage;

    oImage = this._icon || sap.ui.core.IconPool.createControlByURI({
        src : sURI,
        id : sImageId + "-icon",
        size : sSize
    }, sap.m.Image);

    oImage.setSrc(sURI);

    return oImage;
};
}; // end of sap.m.ObjectIdentifier
if ( !jQuery.sap.isDeclared('sap.m.ObjectListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectListItem.
jQuery.sap.declare("sap.m.ObjectListItem");



/**
 * Constructor for a new ObjectListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getIntro intro} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getAttributes attributes} : sap.m.ObjectAttribute[]</li>
 * <li>{@link #getFirstStatus firstStatus} : sap.m.ObjectStatus</li>
 * <li>{@link #getSecondStatus secondStatus} : sap.m.ObjectStatus</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The extended list item control
 * @extends sap.m.ListItemBase
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.m.ObjectListItem
 */
sap.m.ListItemBase.extend("sap.m.ObjectListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"number" : {type : "string", group : "Misc", defaultValue : null},
		"numberUnit" : {type : "string", group : "Misc", defaultValue : null},
		"intro" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "attributes",
	aggregations : {
    	"attributes" : {type : "sap.m.ObjectAttribute", multiple : true, singularName : "attribute"}, 
    	"firstStatus" : {type : "sap.m.ObjectStatus", multiple : false}, 
    	"secondStatus" : {type : "sap.m.ObjectStatus", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectListItem.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ObjectListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Number field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>number</code>
 * @public
 * @name sap.m.ObjectListItem#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setNumber
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.m.ObjectListItem#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>intro</code>.
 * Introductory text for the list item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>intro</code>
 * @public
 * @name sap.m.ObjectListItem#getIntro
 * @function
 */

/**
 * Setter for property <code>intro</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIntro  new value for property <code>intro</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setIntro
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * List item icon displayed to the left of the title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.ObjectListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * Icon displayed when the list item is active.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.ObjectListItem#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setActiveIcon
 * @function
 */


/**
 * Getter for aggregation <code>attributes</code>.<br/>
 * List of attributes displayed below the title to the left of the status fields.
 * 
 * @return {sap.m.ObjectAttribute[]}
 * @public
 * @name sap.m.ObjectListItem#getAttributes
 * @function
 */


/**
 * Inserts a attribute into the aggregation named <code>attributes</code>.
 *
 * @param {sap.m.ObjectAttribute}
 *          oAttribute the attribute to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the attribute should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the attribute is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the attribute is inserted at 
 *             the last position        
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#insertAttribute
 * @function
 */

/**
 * Adds some attribute <code>oAttribute</code> 
 * to the aggregation named <code>attributes</code>.
 *
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute to add; if empty, nothing is inserted
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#addAttribute
 * @function
 */

/**
 * Removes an attribute from the aggregation named <code>attributes</code>.
 *
 * @param {int | string | sap.m.ObjectAttribute} vAttribute the attribute to remove or its index or id
 * @return {sap.m.ObjectAttribute} the removed attribute or null
 * @public
 * @name sap.m.ObjectListItem#removeAttribute
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>attributes</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.ObjectAttribute[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ObjectListItem#removeAllAttributes
 * @function
 */

/**
 * Checks for the provided <code>sap.m.ObjectAttribute</code> in the aggregation named <code>attributes</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.ObjectAttribute}
 *            oAttribute the attribute whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ObjectListItem#indexOfAttribute
 * @function
 */
	

/**
 * Destroys all the attributes in the aggregation 
 * named <code>attributes</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#destroyAttributes
 * @function
 */


/**
 * Getter for aggregation <code>firstStatus</code>.<br/>
 * First status text field shown on the right side of the attributes.
 * 
 * @return {sap.m.ObjectStatus}
 * @public
 * @name sap.m.ObjectListItem#getFirstStatus
 * @function
 */


/**
 * Setter for the aggregated <code>firstStatus</code>.
 * @param oFirstStatus {sap.m.ObjectStatus}
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setFirstStatus
 * @function
 */
	

/**
 * Destroys the firstStatus in the aggregation 
 * named <code>firstStatus</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#destroyFirstStatus
 * @function
 */


/**
 * Getter for aggregation <code>secondStatus</code>.<br/>
 * Second status text field shown on the right side of the attributes.
 * 
 * @return {sap.m.ObjectStatus}
 * @public
 * @name sap.m.ObjectListItem#getSecondStatus
 * @function
 */


/**
 * Setter for the aggregated <code>secondStatus</code>.
 * @param oSecondStatus {sap.m.ObjectStatus}
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#setSecondStatus
 * @function
 */
	

/**
 * Destroys the secondStatus in the aggregation 
 * named <code>secondStatus</code>.
 * @return {sap.m.ObjectListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectListItem#destroySecondStatus
 * @function
 */


// Start of sap/m/ObjectListItem.js
///**
// * This file defines behavior for the control,
// */

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * Function is called when exiting the control.
 * 
 * @private
 */
sap.m.ObjectListItem.prototype.exit = function(oEvent) {
	// image or icon if initialized
	if (this._image) {
		this._image.destroy();
	}
	if(this._icon) {
		this._icon.destroy();
	}
	
	sap.m.ListItemBase.prototype.exit.apply(this);
};

/**
 * @private
 * @returns {Boolean}
 */
sap.m.ObjectListItem.prototype._hasBottomContent = function() {
	
	return (this._hasAttributes() || this._hasStatus());
};

/**
 * @private
 * @returns {Boolean}
 */
sap.m.ObjectListItem.prototype._hasAttributes = function() {
	var attributes = this.getAttributes(); 
	if(attributes && attributes.length > 0) {
		for(var i=0; i < attributes.length; i++) {
			if(!attributes[i]._isEmpty()) {
				return true;
			}
		}
	}
	return false;
};

/**
 * @private
 * @returns {Boolean}
 */
sap.m.ObjectListItem.prototype._hasStatus = function() {
	
	return ((this.getFirstStatus() && !this.getFirstStatus()._isEmpty())
			|| (this.getSecondStatus() && !this.getSecondStatus()._isEmpty() ));
};

/**
 * Lazy load tile icon image.
 * @private
 */
sap.m.ObjectListItem.prototype._getImage = function() {

	var oImage;
	var sSize = "3rem";
	var sURI = this.getIcon();
	if (sap.ui.core.IconPool.isIconURI(sURI)){
		oImage = this._icon || sap.ui.core.IconPool.createControlByURI({
			src : sURI,
			id : this.getId() + "-img",
			size: sSize
			}, sap.m.Image);
		this._icon = oImage;
	} else {
		oImage = this._image || sap.ui.core.IconPool.createControlByURI({
			src : sURI,
			id : this.getId() + "-img",
			height: sSize,
			width: sSize
			}, sap.m.Image);
		this._image = oImage;
	}
	oImage.addStyleClass("sapMObjLIcon", true);
	oImage.setSrc(sURI);
	
	return oImage;
};

sap.m.ObjectListItem.prototype._activeHandlingInheritor = function() {
	var img = sap.ui.getCore().byId(this.getId() + "-img");
	
	if ((img instanceof sap.m.Image) && this.getActiveIcon()) {
			img.setSrc(this.getActiveIcon());
	}	
};

// overwrite base method to hook into the inactive handling
sap.m.ObjectListItem.prototype._inactiveHandlingInheritor = function() {
	var img = sap.ui.getCore().byId(this.getId() + "-img");
	
	if (img instanceof sap.m.Image) {
			img.setSrc(this.getIcon());
	}
};
}; // end of sap.m.ObjectListItem
if ( !jQuery.sap.isDeclared('sap.m.ObjectListItemRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.ObjectListItemRenderer");
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained




/**
 * @class ObjectListItem renderer.
 * @static
 */
sap.m.ObjectListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

/**
 * Renders the HTML for single line of Attribute and Status.
 * 
 * @param {sap.ui.core.RenderManager}
 *            rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.m.ObjectListItem}
 *            oLI an object to be rendered
 * @param {sap.m.ObjectAttribute}
 *            oAttribute an attribute to be rendered
 * @param {sap.m.ObjectStatus}
 *            oStatus a status to be rendered
 */
sap.m.ObjectListItemRenderer.renderAttributeStatus = function(rm, oLI, oAttribute, oStatus) {

	if (!oAttribute && !oStatus || (oAttribute && oAttribute._isEmpty() && oStatus && oStatus._isEmpty())) {
		return; // nothing to render
	}

	rm.write("<div"); // Start attribute row container
	rm.addClass("sapMObjLAttrRow");
	rm.writeClasses();
	rm.write(">");

	if (oAttribute && !oAttribute._isEmpty()) {
		rm.write("<div");
		rm.addClass("sapMObjLAttrDiv");
		rm.writeClasses();
		if (!oStatus || oStatus._isEmpty()) {
			rm.addStyle("width", "100%");
			rm.writeStyles();
		}
		rm.write(">");
		rm.renderControl(oAttribute);		
		rm.write("</div>");
	}

	if (oStatus && (!oStatus._isEmpty())) {
		rm.write("<div");		
		rm.addClass("sapMObjLStatusDiv");		
		rm.writeClasses();
		if (!oAttribute || oAttribute._isEmpty()) {
			rm.addStyle("width", "100%");
			rm.writeStyles();
		}
		rm.write(">");
		rm.renderControl(oStatus);
		rm.write("</div>");
	}

	rm.write("</div>"); // Start attribute row container
};

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *          oRenderManager the RenderManager that can be used for writing to the
 *          Render-Output-Buffer
 * @param {sap.ui.core.Control}
 *          oControl an object representation of the control that should be
 *          rendered
 */
sap.m.ObjectListItemRenderer.renderLIAttributes = function(rm, oLI) {
	rm.addClass("sapMObjLItem");
	rm.addClass("sapMObjLListModeDiv");
};

sap.m.ObjectListItemRenderer.renderLIContent = function(rm, oLI) {
	
	rm.write("<div"); // Start Main container
	rm.writeControlData(oLI);
	rm.write(">");

	// Introductory text at the top of the item, like "On behalf of Julie..."
	if(oLI.getIntro()) {
		rm.write("<div");
		rm.addClass("sapMObjLIntro");
		rm.writeClasses();
		rm.writeAttribute("id", oLI.getId() + "-intro");
		rm.write(">");
		rm.write("<span>");
		rm.writeEscaped(oLI.getIntro());
		rm.write("</span>");
		rm.write("</div>");
	}

	
	// Container for fields placed on the top half of the item, below the intro. This
	// includes title, number, and number units.
	rm.write("<div");  // Start Top row container     
	rm.addClass("sapMObjLTopRow");
	rm.writeClasses();
	rm.write(">");
			
	
	// Container for a number and a units qualifier.
	rm.write("<div"); // Start Number/units container
	rm.addClass("sapMObjLNumberDiv");
	rm.writeClasses();
	rm.write(">");
	
	if (oLI.getNumber()) {
		rm.write("<div");
		rm.writeAttribute("id", oLI.getId() + "-number");
		rm.addClass("sapMObjLNumber");
		rm.writeClasses();
		
		rm.write(">");
		rm.writeEscaped(oLI.getNumber());
		rm.write("</div>");
		
		if (oLI.getNumberUnit()) {
			rm.write("<div");
			rm.writeAttribute("id", oLI.getId() + "-numberUnit");
			rm.addClass("sapMObjLNumberUnit");
			rm.writeClasses();
			rm.write(">");
			rm.writeEscaped(oLI.getNumberUnit());
			rm.write("</div>");
		}
	}
	
	rm.write("</div>"); // End Number/units container
	
	// Title container displayed to the left of the number and number units container.
	rm.write("<div"); // Start Title container
	rm.writeAttribute("id", oLI.getId() + "-title");
	rm.addClass("sapMObjLTitle");
	rm.writeClasses();
	rm.write(">");
	
	if(oLI.getIcon()) {
		rm.renderControl(oLI._getImage());
	}		
		
	if (oLI.getTitle()) {
		rm.writeEscaped(oLI.getTitle());
	}
	rm.write("</div>"); // End Title container	
	
	rm.write("</div>"); // End Top row container
	
	rm.write('<div style="clear:both"/>');
	
	// Bottom row container.
	if(oLI._hasBottomContent()) {
		rm.write("<div"); // Start Bottom row container
		rm.addClass("sapMObjLBottomRow");
		rm.writeClasses();
		rm.write(">");

		var aAttribs = oLI.getAttributes();
		var iAttribsLength = aAttribs && aAttribs.length ? aAttribs.length : 0;

		// render the first line of attribute and status
		if (iAttribsLength > 0) {
			this.renderAttributeStatus(rm, oLI, aAttribs[0], oLI.getFirstStatus());
		} else {
			this.renderAttributeStatus(rm, oLI, null, oLI.getFirstStatus());
		}

		// render the second line of attribute and status
		if (iAttribsLength > 1) {
			this.renderAttributeStatus(rm, oLI, aAttribs[1], oLI.getSecondStatus());
		} else {
			this.renderAttributeStatus(rm, oLI, null, oLI.getSecondStatus());
		}

		// render the rest of the attributes
		for ( var i = 2; i < iAttribsLength; i++) {
			this.renderAttributeStatus(rm, oLI, aAttribs[i]);
		}
		rm.write("</div>"); // End Bottom row container
	}
	rm.write("</div>"); // End Main container
};

}; // end of sap.m.ObjectListItemRenderer
if ( !jQuery.sap.isDeclared('sap.m.ObjectNumber') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectNumber.
jQuery.sap.declare("sap.m.ObjectNumber");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ObjectNumber.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Control displays number and number unit properties in the table cell.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.m.ObjectNumber
 */
sap.ui.core.Control.extend("sap.m.ObjectNumber", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"number" : {type : "string", group : "Misc", defaultValue : null},
		"numberUnit" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectNumber with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectNumber.extend
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Number field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>number</code>
 * @public
 * @name sap.m.ObjectNumber#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectNumber#setNumber
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.m.ObjectNumber#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectNumber#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible object number is not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ObjectNumber#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ObjectNumber} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectNumber#setVisible
 * @function
 */


// Start of sap/m/ObjectNumber.js
///**
// * This file defines behavior for the control,
// */
//sap.m.ObjectNumber.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap.m.ObjectNumber
if ( !jQuery.sap.isDeclared('sap.m.ObjectStatus') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ObjectStatus.
jQuery.sap.declare("sap.m.ObjectStatus");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ObjectStatus.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getState state} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Status information that may be either text with a value state, or an icon.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.ObjectStatus
 */
sap.ui.core.Control.extend("sap.m.ObjectStatus", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"state" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.ObjectStatus with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ObjectStatus.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.ObjectStatus#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectStatus#setText
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * Text value state.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>state</code>
 * @public
 * @name sap.m.ObjectStatus#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oState  new value for property <code>state</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectStatus#setState
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon URI. This may be either an icon font or image path.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.ObjectStatus#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.ObjectStatus} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ObjectStatus#setIcon
 * @function
 */


// Start of sap/m/ObjectStatus.js
///**
// * This file defines behavior for the control,
// */

/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.m.ObjectStatus.prototype.exit = function() {
	if(this._icon) {
		this._icon.destroy();
		this._icon = null;
	}
};

/**
 * Lazy load list item icon info image. Once the icon is created it is not possible to switch
 * between icon font and image.
 * @private
 */
sap.m.ObjectStatus.prototype._getImage = function() {

	var sURI = this.getIcon();
	if(this._icon) {
		this._icon.setSrc(sURI);
	} else {
		var iconId = this.getId() + "-icon";
		if (sap.ui.core.IconPool.isIconURI(sURI)){
			this._icon = sap.ui.core.IconPool.createControlByURI({
				src : sURI,
				id : iconId
				}, sap.m.Image);
		} 
		else {
			this._icon = new sap.m.Image(iconId, {
				src: sURI
			});
		}
	}	
	return this._icon;
};

/**
 * @private
 * @returns {Boolean}
 */
sap.m.ObjectStatus.prototype._isEmpty = function() {
	
	return !(this.getText().trim() || this.getIcon().trim());
};
}; // end of sap.m.ObjectStatus
if ( !jQuery.sap.isDeclared('sap.m.Page') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Page.
jQuery.sap.declare("sap.m.Page");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Page.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getShowNavButton showNavButton} : boolean (default: false)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getNavButtonText navButtonText} : string</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundDesign backgroundDesign} : sap.m.PageBackgroundDesign (default: sap.m.PageBackgroundDesign.Standard)</li>
 * <li>{@link #getNavButtonType navButtonType} : sap.m.ButtonType (default: sap.m.ButtonType.Back)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.m.Bar</li>
 * <li>{@link #getFooter footer} : sap.m.Bar</li>
 * <li>{@link #getSubHeader subHeader} : sap.m.Bar</li>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Page#event:navButtonTap navButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A page is a basic container for a mobile application screen. Usually one page is displayed at a time (in landscape mode or on tablets depending on the layout two pages might be displayed side-by-side).
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Page
 */
sap.ui.core.Control.extend("sap.m.Page", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"scrollTo"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Data", defaultValue : null},
		"showNavButton" : {type : "boolean", group : "Appearance", defaultValue : false},
		"showHeader" : {type : "boolean", group : "Appearance", defaultValue : true},
		"navButtonText" : {type : "string", group : "Misc", defaultValue : null},
		"enableScrolling" : {type : "boolean", group : "Behavior", defaultValue : true},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"backgroundDesign" : {type : "sap.m.PageBackgroundDesign", group : "Appearance", defaultValue : sap.m.PageBackgroundDesign.Standard},
		"navButtonType" : {type : "sap.m.ButtonType", group : "Appearance", defaultValue : sap.m.ButtonType.Back}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"customHeader" : {type : "sap.m.Bar", multiple : false}, 
    	"footer" : {type : "sap.m.Bar", multiple : false}, 
    	"subHeader" : {type : "sap.m.Bar", multiple : false}, 
    	"headerContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "headerContent"}, 
    	"internalHeader" : {type : "sap.m.Bar", multiple : false, visibility : "hidden"}
	},
	events : {
		"navButtonTap" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Page with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Page.extend
 * @function
 */

sap.m.Page.M_EVENTS = {'navButtonTap':'navButtonTap'};


/**
 * Getter for property <code>title</code>.
 * The title text appearing in the page header bar.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Page#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setTitle
 * @function
 */


/**
 * Getter for property <code>showNavButton</code>.
 * A nav button will be rendered on the left area of header bar if this property is set to true.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showNavButton</code>
 * @public
 * @name sap.m.Page#getShowNavButton
 * @function
 */

/**
 * Setter for property <code>showNavButton</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowNavButton  new value for property <code>showNavButton</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setShowNavButton
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * Whether this page shall have a header.
 * If set to true, either the control under the "customHeader" aggregation is used, or if there is no such control, a Header control is constructed from the properties "title", "showNavButton", "navButtonText" and "icon" depending on the platform.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.m.Page#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setShowHeader
 * @function
 */


/**
 * Getter for property <code>navButtonText</code>.
 * The text of the nav button when running in iOS (if shown) in case it deviates from the default, which is "Back".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>navButtonText</code>
 * @public
 * @name sap.m.Page#getNavButtonText
 * @function
 */

/**
 * Setter for property <code>navButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNavButtonText  new value for property <code>navButtonText</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setNavButtonText
 * @function
 */


/**
 * Getter for property <code>enableScrolling</code>.
 * Whether the Page takes special measures to make page content scrollable and keep headers fixed.
 * If set to false, there will be no scrolling at all; for performance reasons this is highly recommended when scrolling is not needed.
 * 
 * The Page only allows vertical scrolling because horizontal scrolling is discouraged in general for full-page content. If it still needs to be achieved, disable the Page scrolling and use a ScrollContainer as full-page content of the Page. This allows you to freely configure scrolling. It can also be used to create horizontally-scrolling sub-areas of (vertically-scrolling) Pages.
 * 
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @public
 * @name sap.m.Page#getEnableScrolling
 * @function
 */

/**
 * Setter for property <code>enableScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableScrolling  new value for property <code>enableScrolling</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setEnableScrolling
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * the icon that is rendered in the page header bar in non-iOS platforms
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.Page#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setIcon
 * @function
 */


/**
 * Getter for property <code>backgroundDesign</code>.
 * This property is used to set the background color of a page. When a list is placed inside a page, the value "List" should be used to display a gray background. "Standard", with the value white, is used as default if not specified.
 *
 * Default value is <code>Standard</code>
 *
 * @return {sap.m.PageBackgroundDesign} the value of property <code>backgroundDesign</code>
 * @public
 * @name sap.m.Page#getBackgroundDesign
 * @function
 */

/**
 * Setter for property <code>backgroundDesign</code>.
 *
 * Default value is <code>Standard</code> 
 *
 * @param {sap.m.PageBackgroundDesign} oBackgroundDesign  new value for property <code>backgroundDesign</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setBackgroundDesign
 * @function
 */


/**
 * Getter for property <code>navButtonType</code>.
 * This property is used to set the appearance of the NavButton. By default when showNavButton is set to true, a back button will be shown in iOS and an up button in other platforms. In case you want to show a normal button in the left header, you can set the value to "Default".
 *
 * Default value is <code>Back</code>
 *
 * @return {sap.m.ButtonType} the value of property <code>navButtonType</code>
 * @public
 * @since 1.12
 * @name sap.m.Page#getNavButtonType
 * @function
 */

/**
 * Setter for property <code>navButtonType</code>.
 *
 * Default value is <code>Back</code> 
 *
 * @param {sap.m.ButtonType} oNavButtonType  new value for property <code>navButtonType</code>
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @name sap.m.Page#setNavButtonType
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this page
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Page#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Page#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Page#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Page#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * The (optional) custom header of this page.
 * Use this aggregation only when a custom header is constructed where the default header consisting of title text + nav button is not sufficient.
 * If this aggregation is set, the simple properties "title", "showNavButton", "NavButtonText" and "icon" are not used.
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.Page#getCustomHeader
 * @function
 */


/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param oCustomHeader {sap.m.Bar}
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setCustomHeader
 * @function
 */
	

/**
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyCustomHeader
 * @function
 */


/**
 * Getter for aggregation <code>footer</code>.<br/>
 * The (optional) footer of this page. It is always located at the bottom of the page
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.Page#getFooter
 * @function
 */


/**
 * Setter for the aggregated <code>footer</code>.
 * @param oFooter {sap.m.Bar}
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setFooter
 * @function
 */
	

/**
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyFooter
 * @function
 */


/**
 * Getter for aggregation <code>subHeader</code>.<br/>
 * a subHeader will be rendered directly under the header
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.m.Page#getSubHeader
 * @function
 */


/**
 * Setter for the aggregated <code>subHeader</code>.
 * @param oSubHeader {sap.m.Bar}
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#setSubHeader
 * @function
 */
	

/**
 * Destroys the subHeader in the aggregation 
 * named <code>subHeader</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroySubHeader
 * @function
 */


/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * Controls to added to the right side of the page header. Usually an application would use Button controls and limit the number to one when the application needs to run on smartphones. There is no automatic overflow handling when the space is insufficient.
 * When a customHeader is used, this aggregation will be ignored.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Page#getHeaderContent
 * @function
 */


/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#insertHeaderContent
 * @function
 */

/**
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#addHeaderContent
 * @function
 */

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerContent or null
 * @public
 * @name sap.m.Page#removeHeaderContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Page#removeAllHeaderContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Page#indexOfHeaderContent
 * @function
 */
	

/**
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#destroyHeaderContent
 * @function
 */


/**
 * this event is fired when Nav Button is tapped 
 *
 * @name sap.m.Page#navButtonTap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Page</code>.<br/> itself. 
 *  
 * this event is fired when Nav Button is tapped 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Page</code>.<br/> itself.
 *
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#attachNavButtonTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'navButtonTap' event of this <code>sap.m.Page</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Page#detachNavButtonTap
 * @function
 */

/**
 * Fire event navButtonTap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Page} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Page#fireNavButtonTap
 * @function
 */


/**
 * Scrolls to the given position. Only available if enableScrolling is set to "true".
 *
 * @name sap.m.Page.prototype.scrollTo
 * @function
 * @param {int} 
 *         iY
 *         The vertical pixel position to scroll to. Scrolling down happens with positive values.
 * @param {int} 
 *         iTime
 *         The duration of animated scrolling. To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.

 * @type sap.m.Page
 * @public
 */


// Start of sap/m/Page.js
sap.m.Page.prototype.init = function() {
	jQuery.sap.require("sap.ui.core.theming.Parameters");
	this._bIsPlatformDependent = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true";
	
	this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");
	if (this.getNavButtonText() == "" && this._bIsPlatformDependent){
		this.setNavButtonText(this._rb.getText("PAGE_NAVBUTTON_TEXT"));
	}
};

// Return true if scrolling is allowed
sap.m.Page.prototype._hasScrolling = function() {
	return !(jQuery.browser.msie && jQuery.browser.version < 9) && this.getEnableScrolling();
};

sap.m.Page.prototype.onBeforeRendering = function() {
	if(this._oScroller && !this._hasScrolling()){
		this._oScroller.destroy();
		this._oScroller = null;
	}
	else if( this._hasScrolling() && !this._oScroller){
		jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
		this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
			horizontal: false,
			vertical: true,
			zynga: false,
			preventDefault: false,
			nonTouchScrolling: "scrollbar",
			scrollbarClass: "sapMScrollbar"
		});
	}
};

/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.Page.prototype.exit = function() {
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}
	if (this._headerTitle){
		this._headerTitle.destroy();
		this._headerTitle = null;
	}
	if (this._navBtn){
		this._navBtn.destroy();
		this._navBtn = null;
	}
	if (this._appIcon){
		this._appIcon.destroy();
		this._appIcon = null;
	}
};

sap.m.Page.prototype.setBackgroundDesign = function(sBgDesign) {
	var sBgDesignOld = this.getBackgroundDesign();

	this.setProperty("backgroundDesign", sBgDesign, true);
	jQuery.sap.byId(this.getId() + "-cont").removeClass("sapMPageBg" + sBgDesignOld).addClass("sapMPageBg" + this.getBackgroundDesign());
	return this;
};

sap.m.Page.prototype.setTitle = function(sTitle) {
	var bWasNull = !this._headerTitle;
	
	this._headerTitle = this._headerTitle || new sap.m.Label(this.getId() +"-title", {text: sTitle});
	this._headerTitle.setText(sTitle);
	
	if(bWasNull){
		if (this._bIsPlatformDependent){
			if(jQuery.os.ios){
				this._updateHeaderContent(this._headerTitle, 'middle', 0);
			} else {
				this._titleIndex = this._titleIndex || 0;
				this._updateHeaderContent(this._headerTitle, 'left', this._titleIndex);
			}
		} else {
			this._updateHeaderContent(this._headerTitle, 'middle', 0);
		}
	}
	
	this.setProperty("title", sTitle, true);
	return this;
};

sap.m.Page.prototype.setShowNavButton = function (bShowNavBtn) {
	var bOldValue = !!this.getShowNavButton();
	if(bShowNavBtn === bOldValue){
		return this;
	}

	this.setProperty("showNavButton", bShowNavBtn, true);
	this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {tap: jQuery.proxy(this.fireNavButtonTap, this)});
	var sNavButtonType = this.getNavButtonType();
	if(!jQuery.os.ios && sNavButtonType == sap.m.ButtonType.Back){
		this._navBtn.setType(sap.m.ButtonType.Up);
	} else {
		this._navBtn.setType(sNavButtonType);
		this._navBtn.setText(this.getNavButtonText()); 
	}
	
	if (bShowNavBtn){
		if (!jQuery.os.ios && this.getIcon()){
			this._navBtn.setIcon(this.getIcon());	
		}
		if (this._appIcon){
			this._updateHeaderContent(this._appIcon, 'left', -1);
		}
		this._updateHeaderContent(this._navBtn, 'left', 0);
	} else {
		// remove back button from header bar
		this._updateHeaderContent(this._navBtn, 'left', -1);
		if (!jQuery.os.ios && this.getIcon()){
			this._appIcon = this._appIcon || new sap.m.Image(this.getId()+"-icon", {src: this.getIcon()});
			this._updateHeaderContent(this._appIcon, 'left', 0);
		}
	}
	return this;
};

sap.m.Page.prototype.setNavButtonType = function (sNavButtonType) {
	this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {tap: jQuery.proxy(this.fireNavButtonTap, this)});
	if(!jQuery.os.ios && sNavButtonType == sap.m.ButtonType.Back){
		// internal conversion from Back to Up for non-iOS platform
		this._navBtn.setType(sap.m.ButtonType.Up);
	} else {
		this._navBtn.setType(sNavButtonType);
	}
	this.setProperty("navButtonType", sNavButtonType, true);
	return this;
};

sap.m.Page.prototype.setNavButtonText = function (sText) {
	this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {tap: jQuery.proxy(this.fireNavButtonTap, this)});
	if (sText == "" && this._bIsPlatformDependent){
		sText = this._rb.getText("PAGE_NAVBUTTON_TEXT");
	}
	if(jQuery.os.ios){
		this._navBtn.setText(sText);
	}
	this.setProperty("navButtonText", sText, true);
	return this;
};

sap.m.Page.prototype.setIcon = function (sIconSrc) {
	var sOldValue = this.getIcon();
	if(sOldValue === sIconSrc){
		return this;
	}
	
	if (!jQuery.os.ios){
		if(sIconSrc){
			if (this.getShowNavButton()){
				this._navBtn = this._navBtn || new sap.m.Button(this.getId() + "-navButton", {tap: jQuery.proxy(this.fireNavButtonTap, this)});
				this._navBtn.setIcon(sIconSrc);	
				if (this._appIcon){
					this._updateHeaderContent(this._appIcon, 'left', -1);
				}
			} else {
				this._appIcon = this._appIcon || new sap.m.Image(this.getId()+"-icon", {src: sIconSrc}).addStyleClass("sapMPageAppIcon");
				this._appIcon.setSrc(sIconSrc);
				if (this._navBtn){
					this._updateHeaderContent(this._navBtn, 'left', -1);
				}
				this._updateHeaderContent(this._appIcon, 'left', 0);
			}
			this._titleIndex = 1;
		}else{
			//I can't remove the icon from button, so we need to do it later...
			if(this._appIcon){
				this._updateHeaderContent(this._appIcon, 'left', -1);
				this._titleIndex = 0;
				this._appIcon.destroy();
				this._appIcon = null;
			}
		}
	}
	this.setProperty("icon", sIconSrc, true);
	return this;
};

/**
 * Update content of internal header
 * @param oContent: control to be added
 * @param sContentPosition: position where the control should be located, possible values left/middle/right
 * @param iContentIndex: the order of the control to be placed. If set to -1, the control will be removed from the header
 * @private 
 */
sap.m.Page.prototype._updateHeaderContent = function (oContent, sContentPosition, iContentIndex){
	var oInternalHeader = this._getInternalHeader();

	if (oInternalHeader){
		switch (sContentPosition){
		case 'left':
			if (iContentIndex == -1){
				if(oInternalHeader.getContentLeft()){
					oInternalHeader.removeContentLeft(oContent);
				}
			} else {
				if (oInternalHeader.indexOfContentLeft(oContent)!= iContentIndex){
					oInternalHeader.insertContentLeft(oContent, iContentIndex);
					oInternalHeader.invalidate(); // workaround for bOutput problem
				}
			}
			break;
		case 'middle':
			if (iContentIndex == -1){
				if(oInternalHeader.getContentMiddle()){
					oInternalHeader.removeContentMiddle(oContent);
				}
			} else {
				if (oInternalHeader.indexOfContentMiddle(oContent)!= iContentIndex){
					oInternalHeader.insertContentMiddle(oContent, iContentIndex);
					oInternalHeader.invalidate();
				}
			}
			break;
		case 'right':
			if (iContentIndex == -1){
				if(oInternalHeader.getContentRight()){
					oInternalHeader.removeContentRight(oContent);
				}
			} else {
				if (oInternalHeader.indexOfContentRight(oContent)!= iContentIndex){
					oInternalHeader.insertContentRight(oContent, iContentIndex);
					oInternalHeader.invalidate();
				}
			}
			break;
		default:
			break;
		}
	}
};

/**
 * Create internal header
 * @private
 */

sap.m.Page.prototype._getInternalHeader= function() {
	var oInternalHeader = this.getAggregation("internalHeader");
	if (!oInternalHeader){
		this.setAggregation('internalHeader', new sap.m.Bar(this.getId() + "-intHeader"));
		oInternalHeader = this.getAggregation("internalHeader");
		oInternalHeader._context = 'header';
		if(jQuery.os.ios){
			if (this.getShowNavButton() && this._navBtn){
				this._updateHeaderContent(this._navBtn, 'left', 0);
			}
			if (this.getTitle() && this._headerTitle){
				this._updateHeaderContent(this._headerTitle, 'middle', 0);
			}
		} else {
			if (this.getShowNavButton() && this._navBtn){
				this._updateHeaderContent(this._navBtn, 'left', 0);
				this._titleIndex = 1;
			} else {
				if(this.getIcon() && this._appIcon){
					this._updateHeaderContent(this._appIcon, 'left', 0);
					this._titleIndex = 1;
				}
			}
			if (this.getTitle() && this._headerTitle){
				if (this._bIsPlatformDependent){
					this._titleIndex = this._titleIndex || 0;
					this._updateHeaderContent(this._headerTitle, 'left', this._titleIndex);
				} else {
					this._updateHeaderContent(this._headerTitle, 'middle', 0);
				}
			}
		}
	}
	return oInternalHeader;
};

/**
 * Returns the custom or internal header
 * @private
 */
sap.m.Page.prototype._getAnyHeader = function() {
	var oCustomHeader = this.getCustomHeader();
	if (oCustomHeader) {
		oCustomHeader._context = 'header';
		// return aggregated header, if it exists
		return oCustomHeader.addStyleClass('sapMPageHeader').addStyleClass("sapMHeader-CTX");
	} else {
		return this._getInternalHeader().addStyleClass('sapMPageHeader').addStyleClass("sapMHeader-CTX");
	}
};

/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 *
 * @private
 */
sap.m.Page.prototype.getScrollDelegate = function() {
	return this._oScroller;
};

//*** API Methods ***

sap.m.Page.prototype.scrollTo = function(y, time) {
	if (this._oScroller){
		this._oScroller.scrollTo(0, y, time);
	}
	return this;
};


//*** Methods forwarding the "headerContent" pseudo-aggregation calls ***

sap.m.Page.prototype.getHeaderContent = function() {
	return this._getInternalHeader().getContentRight();
};

sap.m.Page.prototype.indexOfHeaderContent = function(oControl) {
	return this._getInternalHeader().indexOfContentRight(oControl);
};

sap.m.Page.prototype.insertHeaderContent = function(oControl, iIndex) {
	return this._getInternalHeader().insertContentRight(oControl, iIndex);
};

sap.m.Page.prototype.addHeaderContent = function(oControl) {
	return this._getInternalHeader().addContentRight(oControl);
};

sap.m.Page.prototype.removeHeaderContent = function(oControl) {
	return this._getInternalHeader().removeContentRight(oControl);
};

sap.m.Page.prototype.removeAllHeaderContent = function() {
	return this._getInternalHeader().removeAllContentRight();
};

sap.m.Page.prototype.destroyHeaderContent = function() {
	return this._getInternalHeader().destroyContentRight();
};
}; // end of sap.m.Page
if ( !jQuery.sap.isDeclared('sap.m.Popover') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Popover.
jQuery.sap.declare("sap.m.Popover");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Popover.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Right)</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getModal modal} : boolean (default: false)</li>
 * <li>{@link #getOffsetX offsetX} : int (default: 0)</li>
 * <li>{@link #getOffsetY offsetY} : int (default: 0)</li>
 * <li>{@link #getContentWidth contentWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getContentHeight contentHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnableScrolling enableScrolling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getCustomHeader customHeader} : sap.ui.core.Control</li>
 * <li>{@link #getFooter footer} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getLeftButton leftButton} : string | sap.m.Button</li>
 * <li>{@link #getRightButton rightButton} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Popover#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Popover#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Popover is to present information temporarily but in a way that does not take over the entire screen. The popover content is layered on top of your existing content and it remains visible until the user taps outside of the popover when modal is set to false or you explicitly dismiss it when modal is set to true. The switching between modal and non-modal can also be done when the popover is already opened.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Popover
 */
sap.ui.core.Control.extend("sap.m.Popover", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"close", "openBy", "isOpen"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"placement" : {type : "sap.m.PlacementType", group : "Behavior", defaultValue : sap.m.PlacementType.Right},
		"showHeader" : {type : "boolean", group : "Appearance", defaultValue : true},
		"title" : {type : "string", group : "Appearance", defaultValue : null},
		"modal" : {type : "boolean", group : "Behavior", defaultValue : false},
		"offsetX" : {type : "int", group : "Appearance", defaultValue : 0},
		"offsetY" : {type : "int", group : "Appearance", defaultValue : 0},
		"contentWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"contentHeight" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
		"enableScrolling" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
    	"customHeader" : {type : "sap.ui.core.Control", multiple : false}, 
    	"footer" : {type : "sap.ui.core.Control", multiple : false}
	},
	associations : {
		"leftButton" : {type : "sap.m.Button", multiple : false}, 
		"rightButton" : {type : "sap.m.Button", multiple : false}
	},
	events : {
		"afterOpen" : {}, 
		"afterClose" : {}, 
		"beforeOpen" : {}, 
		"beforeClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Popover with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Popover.extend
 * @function
 */

sap.m.Popover.M_EVENTS = {'afterOpen':'afterOpen','afterClose':'afterClose','beforeOpen':'beforeOpen','beforeClose':'beforeClose'};


/**
 * Getter for property <code>placement</code>.
 * This is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. The default value is sap.m.PlacementType.Right. Setting this property while popover is open won't cause any rerendering of the popover, but it will take effect when it's opened again.
 *
 * Default value is <code>Right</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * @name sap.m.Popover#getPlacement
 * @function
 */

/**
 * Setter for property <code>placement</code>.
 *
 * Default value is <code>Right</code> 
 *
 * @param {sap.m.PlacementType} oPlacement  new value for property <code>placement</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setPlacement
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 * If a header should be shown at the top of the popover.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.m.Popover#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setShowHeader
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title text appears in the header. This property will be ignored when showHeader is set to false.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Popover#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setTitle
 * @function
 */


/**
 * Getter for property <code>modal</code>.
 * If the popover will not be closed when tapping outside the popover. It also blocks any interaction with the background. The default value is false.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>modal</code>
 * @public
 * @name sap.m.Popover#getModal
 * @function
 */

/**
 * Setter for property <code>modal</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bModal  new value for property <code>modal</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setModal
 * @function
 */


/**
 * Getter for property <code>offsetX</code>.
 * The offset for the popover placement in the x axis. It's with unit pixel.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>offsetX</code>
 * @public
 * @name sap.m.Popover#getOffsetX
 * @function
 */

/**
 * Setter for property <code>offsetX</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iOffsetX  new value for property <code>offsetX</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setOffsetX
 * @function
 */


/**
 * Getter for property <code>offsetY</code>.
 * The offset for the popover placement in the y axis. It's with unit pixel.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>offsetY</code>
 * @public
 * @name sap.m.Popover#getOffsetY
 * @function
 */

/**
 * Setter for property <code>offsetY</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iOffsetY  new value for property <code>offsetY</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setOffsetY
 * @function
 */


/**
 * Getter for property <code>contentWidth</code>.
 * Set the width of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentWidth</code>
 * @public
 * @since 1.9.0
 * @name sap.m.Popover#getContentWidth
 * @function
 */

/**
 * Setter for property <code>contentWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentWidth  new value for property <code>contentWidth</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.m.Popover#setContentWidth
 * @function
 */


/**
 * Getter for property <code>contentHeight</code>.
 * Set the height of the content area inside Popover. When controls which adapt their size to the parent control are added directly into Popover, for example sap.m.Page control, a size needs to be specified to the content area of the Popover. Otherwise, Popover control isn't able to display the content in the right way. This values isn't necessary for controls added to Popover directly which can decide their size by themselves, for exmaple sap.m.List, sap.m.Image etc., only needed for controls that adapt their size to the parent control.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>contentHeight</code>
 * @public
 * @since 1.9.0
 * @name sap.m.Popover#getContentHeight
 * @function
 */

/**
 * Setter for property <code>contentHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sContentHeight  new value for property <code>contentHeight</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.0
 * @name sap.m.Popover#setContentHeight
 * @function
 */


/**
 * Getter for property <code>enableScrolling</code>.
 * This property indicates if user can scroll vertically inside popover when the content is bigger than the content area. However, when scrollable control (sap.m.ScrollContainer, sap.m.Page) is in the popover, this property needs to be set to false to disable the scrolling in popover in order to make the scrolling in the child control work propertly.
 * 
 * Popover detects if there's sap.m.NavContainer, sap.m.Page, or sap.m.ScrollContainer as direct child added to Popover. If there is, Popover will turn off scrolling by setting this property to false automatically ignoring the existing value of this property.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enableScrolling</code>
 * @public
 * @name sap.m.Popover#getEnableScrolling
 * @function
 */

/**
 * Setter for property <code>enableScrolling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnableScrolling  new value for property <code>enableScrolling</code>
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setEnableScrolling
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content inside the popover.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.Popover#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.Popover#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Popover#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Popover#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>customHeader</code>.<br/>
 * Any control that needed to be displayed in the header area. When this is set, the showHeader property is ignored, and only this customHeader is shown on the top of popover.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Popover#getCustomHeader
 * @function
 */


/**
 * Setter for the aggregated <code>customHeader</code>.
 * @param oCustomHeader {sap.ui.core.Control}
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setCustomHeader
 * @function
 */
	

/**
 * Destroys the customHeader in the aggregation 
 * named <code>customHeader</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#destroyCustomHeader
 * @function
 */


/**
 * Getter for aggregation <code>footer</code>.<br/>
 * This is optional footer which is shown on the bottom of the popover.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Popover#getFooter
 * @function
 */


/**
 * Setter for the aggregated <code>footer</code>.
 * @param oFooter {sap.ui.core.Control}
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setFooter
 * @function
 */
	

/**
 * Destroys the footer in the aggregation 
 * named <code>footer</code>.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#destroyFooter
 * @function
 */


/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>leftButton</code> association, or null
 * @public
 * @name sap.m.Popover#getLeftButton
 * @function
 */

/**
 * LeftButton is shown at the left edge of the bar in iOS, and at the right side of the bar for the other platforms. Please set this to null if you want to remove the left button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vLeftButton 
 *    Id of an element which becomes the new target of this <code>leftButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setLeftButton
 * @function
 */


	
/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @return {string} Id of the element which is the current target of the <code>rightButton</code> association, or null
 * @public
 * @name sap.m.Popover#getRightButton
 * @function
 */

/**
 * RightButton is always shown at the right edge of the bar. Please set this to null if you want to remove the right button from the bar. And the button is only removed from the bar, not destroyed. When showHeader is set to false, this property will be ignored.
 *
 * @param {string | sap.m.Button} vRightButton 
 *    Id of an element which becomes the new target of this <code>rightButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#setRightButton
 * @function
 */


	
/**
 * This event will be fired after the popover is opened. 
 *
 * @name sap.m.Popover#afterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired after the popover is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachAfterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachAfterOpen
 * @function
 */

/**
 * Fire event afterOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireAfterOpen
 * @function
 */


/**
 * This event will be fired after the popover is closed. 
 *
 * @name sap.m.Popover#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired after the popover is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachAfterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachAfterClose
 * @function
 */

/**
 * Fire event afterClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireAfterClose
 * @function
 */


/**
 * This event will be fired before the popover is opened. 
 *
 * @name sap.m.Popover#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired before the popover is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachBeforeOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachBeforeOpen
 * @function
 */

/**
 * Fire event beforeOpen to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireBeforeOpen
 * @function
 */


/**
 * This event will be fired before the popover is closed. 
 *
 * @name sap.m.Popover#beforeClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.openBy This refers to the control which opens the popover.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Popover</code>.<br/> itself. 
 *  
 * This event will be fired before the popover is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Popover</code>.<br/> itself.
 *
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#attachBeforeClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.Popover</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Popover#detachBeforeClose
 * @function
 */

/**
 * Fire event beforeClose to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'openBy' of type <code>sap.ui.core.Control</code> This refers to the control which opens the popover.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Popover} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Popover#fireBeforeClose
 * @function
 */


/**
 * Close the popover
 *
 * @name sap.m.Popover.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * Open the popover.
 *
 * @name sap.m.Popover.prototype.openBy
 * @function
 * @param {object} 
 *         oControl
 *         This is the control to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover.

 * @type void
 * @public
 */


/**
 * The method checks if the Popover is open. It returns true when the Popover is currently open (this includes opening and closing animations), otherwise it returns false.
 *
 * @name sap.m.Popover.prototype.isOpen
 * @function

 * @type boolean
 * @public
 * @since 1.9.1
 */


// Start of sap/m/Popover.js
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/* =========================================================== */
/*                   begin: lifecycle methods                  */
/* =========================================================== */
sap.m.Popover._bOneDesign = (sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== 'true');
sap.m.Popover._bIE9 = (jQuery.browser.msie && jQuery.browser.fVersion < 10);
/**
 * Initializes the popover control
 * @private
 */
sap.m.Popover.prototype.init = function(){
	this._firstOpen = true;

	// The offset of the arrow must be more than _arrowOffsetThreshold from the border of the popover content
	this._arrowOffsetThreshold = 15; // 10 (rounded corner) + 5 (rotate)
	
	this._marginTopInit = false;
	// The following 4 values are the margins which are used to avoid making the popover very near to the border of the screen
	this._marginTop = (!sap.m.Popover._bOneDesign && jQuery.os.ios) ? 44 : 48; //This is the default value, and dynamic calculation will be done in afterRendering
	
	this._marginLeft = 10;
	this._marginRight = 10;
	this._marginBottom = 10;
	
	this._$window = jQuery(window);
	
	this.oPopup = new sap.ui.core.Popup();
	this.oPopup.setShadow(true);
	this.oPopup.setAutoClose(true);
	this.oPopup.setAnimations(this._openAnimation, this._closeAnimation);
	
	// This is data used to position the popover depending on the placement property
	this._placements = [sap.m.PlacementType.Top, sap.m.PlacementType.Right, sap.m.PlacementType.Bottom, sap.m.PlacementType.Left];
	this._myPositions = ["center bottom", "begin center", "center top", "end center"];
	this._atPositions = ["center top", "end center", "center bottom", "begin center"];
	this._offsets = ["0 -18", "18 0", "0 18", "-18 0"];
	
	this._arrowOffset = 18;
	
	// used to judge if enableScrolling needs to be disabled
	this._scrollContentList = [sap.m.NavContainer, sap.m.Page, sap.m.ScrollContainer];
	
	// Make this.oPopup call this._setArrowPosition each time after its position is changed
	this._fSetArrowPosition = jQuery.proxy(this._setArrowPosition, this);
	
	//the orientationchange event listener
	this._fOrientationChange = jQuery.proxy(this._onOrientationChange, this);
	
	var that = this;
	this.oPopup._applyPosition = function(oPosition){
		//set flag to avoid double calcuation
		that._bCalSize = true;
		that._clearCSSStyles();
		//update the "of" property on oPosition because parent can be already rerendered
		oPosition.of = (that._oOpenBy instanceof sap.ui.core.Control) ? that._oOpenBy.getDomRef() : that._oOpenBy;
		sap.ui.core.Popup.prototype._applyPosition.call(this, oPosition);
		that._fSetArrowPosition();
		//reset the flag
		that._bCalSize = false;
	};
};

sap.m.Popover.prototype.onBeforeRendering = function() {
	if(this._sResizeListenerId){
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	//if content has scrolling, disable scrolling automatically
	if(this._hasSingleScrollableContent()){
		this._forceDisableScrolling = true;
		jQuery.sap.log.info("EnableScrolling in sap.m.Popover with ID " + this.getId() +" has been disabled because there's scrollable content inside");
	}else{
		this._forceDisableScrolling = false;
	}
	
	if(this.getEnableScrolling() && !this._forceDisableScrolling){
		if(!this._oScroller){
			this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
				horizontal: true, //will be disabled in setArrowPosition if not needed
				vertical: true,
				zynga: false,
				preventDefault: false,
				nonTouchScrolling: "scrollbar"
			});
		}
	}
};	

sap.m.Popover.prototype.onAfterRendering = function(){
	var $openedBy, $page, $header;
	
	//calculate the height of the header in the current page
	//only for the first time calling after rendering
	if(!this._marginTopInit){
		this._marginTop = 2;
		if(this._oOpenBy){
			$openedBy = (this._oOpenBy instanceof sap.ui.core.Control) ? this._oOpenBy.$() : jQuery(this._oOpenBy);
			//first check if the openedBy isn't inside a header
			if(!($openedBy.closest("header.sapMBar").length > 0)){
				$page = $openedBy.closest(".sapMPage");
				if($page.length > 0){
					$header = $page.children("header.sapMBar");
					if($header.length > 0){
						this._marginTop += $header.outerHeight();
					}
				}
			}
			this._marginTopInit = true;
		}
	}
};

/**
 * Destroys the popover control
 * @private
 */
sap.m.Popover.prototype.exit = function(){
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	this._$window.unbind("resize", this._fOrientationChange);
	
	if(this.oPopup){
		this.oPopup.destroy();
		this.oPopup = null;
	}
	
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}
	
	if(this._internalHeader){
		this._internalHeader.destroy();
		this._internalHeader = null;
	}
	
	if(this._headerTitle){
		this._headerTitle.destroy();
		this._headerTitle = null;
	}
};
/* =========================================================== */
/*                   end: lifecycle methods                    */
/* =========================================================== */



/* =========================================================== */
/*                   begin: API method                         */
/* =========================================================== */
/**
 * Opens the popover and set the popover position according to the {placement} property
 * around the {oControl} parameter.
 *
 * @param {object} oControl The control to which the popover is aligned based on the {placement} property
 * @public
 *
 */
sap.m.Popover.prototype.openBy = function(oControl, bSkipInstanceManager){
	// If already opened with the needed content then return
	var oPopup = this.oPopup,
		ePopupState = this.oPopup.getOpenState(),
		oParentDomRef, iPlacePos;
		
	if (ePopupState === sap.ui.core.OpenState.OPEN || ePopupState === sap.ui.core.OpenState.OPENING || ePopupState === sap.ui.core.OpenState.CLOSING){
		if(this._oOpenBy === oControl) {
			//if the popover is open, and is opening by the same control again, just return
			return;
		}else{
			//if the popover is open, and is opening by another control, then first close it and open later.
			var afterClosed = function(){
				oPopup.detachEvent("closed", afterClosed, this);
				this.openBy(oControl);
			};
			oPopup.attachEvent("closed", afterClosed, this);
			this.close();
			return;
		}
	}
	
	if(!oControl){
		return;
	}
	
	//bind the resize event to window
	//CSN 2012 4216945
	//binding should be registered here (very early) because when keyboard in android closes at the same time, resize event needs to be reacted in order to
	//reposition the popover after the keyboard fully closes.
	if(jQuery.support.touch){
		this._$window.bind("resize", this._fOrientationChange);
	}
	
	if(!this._oOpenBy || oControl !== this._oOpenBy){
		this._oOpenBy = oControl;
	}

	this.fireBeforeOpen({openBy: this._oOpenBy});
	
	oPopup.attachEvent("opened", this._handleOpened, this);
	
	// Open popup
	iPlacePos = jQuery.inArray(this.getPlacement(), this._placements);
	if(iPlacePos > -1){
		oParentDomRef = (this._oOpenBy instanceof sap.ui.core.Control) ? this._oOpenBy.getDomRef() : this._oOpenBy;
		oPopup.setContent(this);
		oPopup.setPosition(this._myPositions[iPlacePos], this._atPositions[iPlacePos], oParentDomRef, this._calcOffset(this._offsets[iPlacePos]), "fit");
		var that = this;
		var fCheckAndOpen = function(){
			if(oPopup.getOpenState() === sap.ui.core.OpenState.CLOSING){
				setTimeout(fCheckAndOpen, 150);
			}else{
				oPopup.open();
				
				//register resize listener on scroll area
				if(!that._sResizeListenerId){
					that._sResizeListenerId = sap.ui.core.ResizeHandler.register(jQuery.sap.domById(that.getId() + "-scroll"),  that._fOrientationChange);
				}
				
				//if popover shouldn't be managed by Instance Manager
				//e.g. SplitApp in PopoverMode, the popover which contains the master area should be managed by the splitapp control
				if(!bSkipInstanceManager){
					sap.m.InstanceManager.addPopoverInstance(that);
				}
			}
		};
		fCheckAndOpen();
	}else{
		jQuery.sap.log.error(this.getPlacement() + "is not a valid value! It can only be top, right, bottom or left");
	}
};

/**
 * Closes the popover when it's already opened.
 * @public
 */
sap.m.Popover.prototype.close = function(){
	var eOpenState = this.oPopup.getOpenState();
	if(!(eOpenState === sap.ui.core.OpenState.CLOSED || eOpenState === sap.ui.core.OpenState.CLOSING)){
		this.fireBeforeClose({openBy: this._oOpenBy});
		this.oPopup.close();
	}
};


sap.m.Popover.prototype.isOpen = function(){
	return this.oPopup && this.oPopup.isOpen();
};
/* =========================================================== */
/*                     end: API method                         */
/* =========================================================== */


/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */
sap.m.Popover.prototype._clearCSSStyles = function(){
	var $this = this.$(),
		$content = jQuery.sap.byId(this.getId() + "-cont"),
		$scrollArea = $content.children(".sapMPopoverScroll"),
		bSAreaPosAbs = $scrollArea.css("position") === "absolute",
		iContentWidth = this.getContentWidth(),
		iContentHeight = this.getContentHeight();

	$content.css({
		"width": iContentWidth ? iContentWidth : (bSAreaPosAbs ? $scrollArea.outerWidth(true) : ""),
		"height": iContentHeight ? iContentHeight : (bSAreaPosAbs ? $scrollArea.outerHeight(true) : ""),
		"max-width": ""
	});
	
	$this.css({
		"left": "",
		"right": "",
		"top": "",
		"bottom": "",
		"width": "",
		"height": ""
	});
	
	$scrollArea.css({
		"width": ""
	});
};

sap.m.Popover.prototype._onOrientationChange = function(){
	if(this._bCalSize){
		return;
	}
	
	var ePopupState = this.oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN || ePopupState === sap.ui.core.OpenState.OPENING)){
		return;
	}
	this.oPopup._applyPosition(this.oPopup._oLastPosition);
};

/**
 * Register the listener to close the popover when user taps outside both of the popover and the control that opens the popover.
 * @private
 */
sap.m.Popover.prototype._handleOpened = function(){
	var that = this;
	this.oPopup.detachEvent("opened", this._handleOpened, this);
	this.oPopup.attachEvent("closed", this._handleClosed, this);

	
//	recalculate the arrow position when the size of the popover changes.
	if(!jQuery.support.touch){
		setTimeout(function(){
			that._$window.bind("resize", that._fOrientationChange);
		}, 0);
	}
	
	this.fireAfterOpen({openBy: this._oOpenBy});
	this._firstOpen = false;
};

sap.m.Popover.prototype._handleClosed = function(){
	this.oPopup.detachEvent("closed", this._handleClosed, this);

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
	
	sap.m.InstanceManager.removePopoverInstance(this);
	this.fireAfterClose({openBy: this._oOpenBy});
};
/* =========================================================== */
/*                      end: event handlers                  */
/* =========================================================== */



/* =========================================================== */
/*                      begin: internal methods                  */
/* =========================================================== */
/**
 * This method detects if there's a sap.m.NavContainer instance added as a single child into popover's content aggregation or through one or more sap.ui.mvc.View controls.
 * If there is, sapMPopoverNav style class will be added to the root node of the control in order to apply some special css styles to the inner dom nodes.
 */
sap.m.Popover.prototype._hasSingleNavContent = function(){
	var aContent = this.getAggregation("content");
	
	while(aContent.length === 1 && aContent[0] instanceof sap.ui.core.mvc.View){
		aContent = aContent[0].getAggregation("content");
	}
	
	if(aContent.length === 1 && aContent[0] instanceof sap.m.NavContainer){
		return true;
	}else{
		return false;
	}
};

/**
 * This method detects if there's a sap.m.Page instance added as a single child into popover's content aggregation or through one or more sap.ui.mvc.View controls.
 * If there is, sapMPopoverPage style class will be added to the root node of the control in order to apply some special css styles to the inner dom nodes.
 */
sap.m.Popover.prototype._hasSinglePageContent = function(){
	var aContent = this.getAggregation("content");
	
	while(aContent.length === 1 && aContent[0] instanceof sap.ui.core.mvc.View){
		aContent = aContent[0].getAggregation("content");
	}
	
	if(aContent.length === 1 && aContent[0] instanceof sap.m.Page){
		return true;
	}else{
		return false;
	}
};

/**
 * If a scrollable control (sap.m.NavContainer, sap.m.ScrollContainer, sap.m.Page) is added to popover's content aggregation as a single child or through one or more sap.ui.mvc.View instances,
 * the scrolling inside popover will be disabled in order to avoid wrapped scrolling areas.
 * 
 * If more than one scrollable control is added to popover, the scrolling needs to be disabled manually.
 */
sap.m.Popover.prototype._hasSingleScrollableContent = function(){
	var aContent = this.getAggregation("content"), i;
	
	while(aContent.length === 1 && aContent[0] instanceof sap.ui.core.mvc.View){
		aContent = aContent[0].getAggregation("content");
	}
	
	if(aContent.length === 1){
		for(i = 0 ; i < this._scrollContentList.length ; i++){
			if(aContent[0] instanceof this._scrollContentList[i]){
				return true;
			}
		}
		return false;
	}else{
		return false;
	}
};


sap.m.Popover.prototype._calcOffset = function(sOffset){
	var iOffsetX = this.getOffsetX(),
		iOffsetY = this.getOffsetY();
	
	var aParts = sOffset.split(" ");
	return  (parseInt(aParts[0], 10) + iOffsetX) + " " + (parseInt(aParts[1], 10) + iOffsetY);
};

/**
 * Rearrange the arrow and the popover position.
 * @private
 */
sap.m.Popover.prototype._setArrowPosition = function(){
	var ePopupState = this.oPopup.getOpenState();
	if(!(ePopupState === sap.ui.core.OpenState.OPEN || ePopupState === sap.ui.core.OpenState.OPENING)){
		return;
	}

	var $parent = (this._oOpenBy instanceof sap.ui.core.Control) ? this._oOpenBy.$() : jQuery(this._oOpenBy),
		$this = this.$(),
		iPopoverBorderLeft = window.parseInt($this.css("border-left-width"), 10),
		iPopoverBorderRight = window.parseInt($this.css("border-right-width"), 10),
		iPopoverBorderTop = window.parseInt($this.css("border-top-width"), 10),
		iPopoverBorderBottom = window.parseInt($this.css("border-bottom-width"), 10),
		iPosTop = window.parseInt($this.css("top"), 10),
		iPosLeft = window.parseInt($this.css("left"), 10),
		sPlacement = this.getPlacement(),
		$arrow = jQuery.sap.byId(this.getId() + "-arrow"),
		iArrowHeight = $arrow.outerHeight(true),
		$offset = $this.offset(),
		iOffsetX = this.getOffsetX(),
		iOffsetY = this.getOffsetY(),
		iWidth = $this.outerWidth(),
		iHeight = $this.outerHeight(),
		$content = jQuery.sap.byId(this.getId() + "-cont"),
		$scrollArea = $content.children(".sapMPopoverScroll"),
		bSAreaPosAbs = $scrollArea.css("position") === "absolute",
		iContentMarginLeft = window.parseInt($content.css("margin-left"), 10),
		iContentMarginRight = window.parseInt($content.css("margin-right"), 10),
		$header = $this.children(".sapMPopoverHeader"),
		$footer = $this.children(".sapMPopoverFooter"),
		iMaxContentHeight, iMaxWidth, oArrowPos, oFooterPos,
		iPosArrow, iHeaderHeight = 0, iFooterHeight = 0;
	
	if($header.length > 0){
		iHeaderHeight = $header.outerHeight(true);
	}
	if($footer.length > 0){
		iFooterHeight = $footer.outerHeight(true);
	}
	
	//calculates the current window borders
	var iWindowLeft = this._$window.scrollLeft(),
		iWindowTop = this._$window.scrollTop(),
		iWindowRight = this._$window.width(),
		iWindowBottom = this._$window.height();
	
	var iMarginLeft = this._marginLeft,
		iMarginRight = this._marginRight,
		iMarginTop = this._marginTop,
		iMarginBottom = this._marginBottom;
	
	var iLeft, iRight, iTop, iBottom;
	//make the popover never cover the control or dom node that opens the popvoer
	switch(sPlacement){
		case sap.m.PlacementType.Left:
			iMarginRight = iWindowRight - $parent.offset().left + this._arrowOffset - this.getOffsetX();
			iRight = iMarginRight;
			break;
		case sap.m.PlacementType.Right:
			iMarginLeft = $parent.offset().left + $parent.outerWidth() + this._arrowOffset + this.getOffsetX();
			iLeft = iMarginLeft;
			break;
		case sap.m.PlacementType.Top:
			iMarginBottom = iWindowBottom - $parent.offset().top + this._arrowOffset - this.getOffsetY();
			iBottom = iMarginBottom;
			break;
		case sap.m.PlacementType.Bottom:
			iMarginTop = $parent.offset().top + $parent.outerHeight() + this._arrowOffset + this.getOffsetY();
			iTop = iMarginTop;
			break;
	}
	
	//check the position of the popover, and do adjustment if necessary
	var bExceedHorizontal = (iWindowRight - iWindowLeft - iMarginRight - iMarginLeft) < iWidth,
		bExceedVertical = (iWindowBottom - iWindowTop - iMarginTop - iMarginBottom) < iHeight,
		bOverLeft = ($offset.left - iWindowLeft) < iMarginLeft,
		bOverRight = (iWindowRight - $offset.left - iWidth) < iMarginRight,
		bOverTop = ($offset.top - iWindowTop) < iMarginTop,
		bOverBottom = (iWindowBottom - $offset.top - iHeight) < iMarginBottom;
	
	if(bExceedHorizontal){
		iLeft = iMarginLeft;
		iRight = iMarginRight;
	}else{
		if(bOverLeft){
			iLeft = iMarginLeft;
		}else if(bOverRight){
			iRight = iMarginRight;
			//also move the left position of popover when there's enough space left.
			if(iPosLeft - iMarginRight > iMarginLeft){
				iLeft = iPosLeft - iMarginRight;
			}
		}
	}
	
	if(bExceedVertical){
		iTop = iMarginTop;
		iBottom = iMarginBottom;
	}else{
		if(bOverTop){
			iTop = iMarginTop;
		}else if(bOverBottom){
			iBottom = iMarginBottom;
			//also move the top position of popover when there's enough space left.
			if(iPosTop - iMarginBottom > iMarginTop){
				iTop = iPosTop - iMarginBottom;
			}
		}
	}
	
	$this.css({
		top: iTop,
		bottom: iBottom,
		left: iLeft,
		right: iRight
	});
	
	//set arrow offset
	if(sPlacement === sap.m.PlacementType.Left || sPlacement === sap.m.PlacementType.Right){
		iPosArrow = $parent.offset().top - $this.offset().top - iPopoverBorderTop + iOffsetY + 0.5 * ($parent.outerHeight(false) - $arrow.outerHeight(false));
		iPosArrow = Math.max(iPosArrow, this._arrowOffsetThreshold);
		iPosArrow = Math.min(iPosArrow, iHeight - this._arrowOffsetThreshold - $arrow.outerHeight());
		$arrow.css("top", iPosArrow);
	}else if(sPlacement === sap.m.PlacementType.Top || sPlacement === sap.m.PlacementType.Bottom){
		iPosArrow = $parent.offset().left - $this.offset().left - iPopoverBorderLeft + iOffsetX + 0.5 * ($parent.outerWidth(false) - $arrow.outerWidth(false));
		iPosArrow = Math.max(iPosArrow, this._arrowOffsetThreshold);
		iPosArrow = Math.min(iPosArrow, iWidth - this._arrowOffsetThreshold - $arrow.outerWidth());
		$arrow.css("left", iPosArrow);
	}
	
	//set arrow style
	switch(sPlacement){
		case sap.m.PlacementType.Left:
			$arrow.addClass("sapMPopoverArrRight");
			break;
			
		case sap.m.PlacementType.Right:
			$arrow.addClass("sapMPopoverArrLeft");
			break;
			
		case sap.m.PlacementType.Top:
			$arrow.addClass("sapMPopoverArrDown");
			break;
			
		case sap.m.PlacementType.Bottom:
			$arrow.addClass("sapMPopoverArrUp");
			break;
	}
	
	//adapt the width to screen
	if(sPlacement === sap.m.PlacementType.Left){
		iMaxWidth = $this.offset().left + iWidth - this._marginLeft;
	}else{
		iMaxWidth = iWindowRight - $this.offset().left - this._marginRight;
	}
	
	iMaxWidth -= (iPopoverBorderLeft + iPopoverBorderRight);
	
	if(bSAreaPosAbs){
		iMaxWidth -= (iContentMarginLeft + iContentMarginRight);
	}
	
	//adapt the height to screen
	iMaxContentHeight = $this.height() - iHeaderHeight - iFooterHeight - parseInt($content.css("margin-top"), 10) - parseInt($content.css("margin-bottom"), 10);
	//make sure iMaxContentHeight is NEVER less than 0
	iMaxContentHeight = Math.max(iMaxContentHeight, 0);
	
	$content.css({
		"max-width": iMaxWidth + "px",
		"height": iMaxContentHeight + "px"
	});
	
	//disable the horizontal scrolling when content inside can fit the container.
	if($scrollArea.outerWidth(true) <= $content.width()){
		$scrollArea.css("width", "100%");
	}
	
	//cross header or cross footer detection
	oArrowPos = $arrow.position();
	oFooterPos = $footer.position();
	if(sPlacement === sap.m.PlacementType.Left || sPlacement === sap.m.PlacementType.Right){
		if((oArrowPos.top + iArrowHeight) < iHeaderHeight){
			$arrow.addClass("sapMPopoverHeaderAlignArr");
		}else if( (oArrowPos.top < iHeaderHeight) || ($footer.length && ((oArrowPos.top + iArrowHeight) > oFooterPos.top) && (oArrowPos.top < oFooterPos.top)) ){
			$arrow.addClass("sapMPopoverCrossArr");
		}else if($footer.length && (oArrowPos.top > oFooterPos.top) ){
			$arrow.addClass("sapMPopoverFooterAlignArr");
		}
	}
};

/**
 * Determine if the {oDomNode} is inside the popover or inside the control that opens the popover
 * @private
 */
sap.m.Popover.prototype._isPopupElement = function(oDOMNode) {
	var oParentDomRef = (this._oOpenBy instanceof sap.ui.core.Control) ? this._oOpenBy.getDomRef() : this._oOpenBy;
	return !!(jQuery(oDOMNode).closest(sap.ui.getCore().getStaticAreaRef()).length) || !!(jQuery(oDOMNode).closest(oParentDomRef).length);
};

/**
 * If customHeader is set, this will return the customHeaer. Otherwise it creates a header and put the
 * title and buttons if needed inside, and finally return this newly create header.
 * @private
 */
sap.m.Popover.prototype._getAnyHeader = function(){
	if(this.getCustomHeader()){
		return this.getCustomHeader().addStyleClass("sapMHeader-CTX", true);
	}else{
		if(this.getShowHeader()){
			this._createInternalHeader();
			return this._internalHeader.addStyleClass("sapMHeader-CTX", true);
		}
	}
};

sap.m.Popover.prototype._createInternalHeader = function(){
	if(!this._internalHeader){
		this._internalHeader = new sap.m.Bar(this.getId() + "-intHeader");
		this._internalHeader.setParent(this, "internalHeader", false);
		return true;
	}else{
		return false;
	}
};

sap.m.Popover.prototype._openAnimation = function($Ref, iRealDuration, fnOpened){
	if(sap.m.Popover._bIE9 || (jQuery.os.android && jQuery.os.fVersion < 2.4)){
		//no animation in ie9 transition not supported
		//no animation in android 2.3.x, because it looks laggy.
		fnOpened();
	}else{
		setTimeout(function(){
			$Ref.addClass("sapMPopoverTransparent sapMPopoverAnimation");
			$Ref.css("display", "block");
			// has to be done in a timeout to ensure transition properties are set
			setTimeout(function(){
				$Ref.bind("webkitTransitionEnd transitionend", function(){
					jQuery(this).unbind("webkitTransitionEnd transitionend");
					$Ref.removeClass("sapMPopoverAnimation");
					fnOpened();
				});
//				setTimeout(function(){
//					$Ref.removeClass("sapMPopoverAnimation");
//					fnOpened();
//				}, 200);
				$Ref.removeClass("sapMPopoverTransparent");
			}, 0);
		}, 0);
	}
};

sap.m.Popover.prototype._closeAnimation = function($Ref, iRealDuration, fnClose){
	if(sap.m.Popover._bIE9 || (jQuery.os.android && jQuery.os.fVersion < 2.4)){
		//no animation in android 2.3.x, because it looks laggy.
		fnClose();
	}else{
		$Ref.addClass("sapMPopoverAnimation");
		//// has to be done in a timeout to ensure transition properties are set
		setTimeout(function(){
			$Ref.bind("webkitTransitionEnd transitionend", function(){
				jQuery(this).unbind("webkitTransitionEnd transitionend");
				$Ref.removeClass("sapMPopoverAnimation sapMPopoverTransparent");
				fnClose();
			}).addClass("sapMPopoverTransparent");
		}, 0);
	}
};
/* =========================================================== */
/*                      end: internal methods                  */
/* =========================================================== */


/* ==================================================== */
/*                      begin: Setters                  */
/* ==================================================== */
/**
 * Set the placement of the popover.
 * @public
 *
 */
sap.m.Popover.prototype.setPlacement = function(sPlacement){
	this.setProperty("placement", sPlacement, true);
	return this;
};

/**
 * The setter of the title property. If you want to show a header in the popover, don't forget to
 * set the {showHeader} to true.
 * @public
 */
sap.m.Popover.prototype.setTitle = function(sTitle){
	if(sTitle){
		this.setProperty("title", sTitle, true);
		if(this._headerTitle){
			this._headerTitle.setText(sTitle);
		}else{
			this._headerTitle = new sap.m.Label(this.getId() + "-title", {
				text: this.getTitle()
			});
			
			this._createInternalHeader();
			
			if(jQuery.os.ios || sap.m.Popover._bOneDesign){
				this._internalHeader.addContentMiddle(this._headerTitle);
			}else{
				this._internalHeader.addContentLeft(this._headerTitle);
			}
		}
	}
	
	return this;
};


/**
 * The setter of the cancelButton. If you want to show a cancel button in the popover, don't forget to
 * set the {showHeader} to true.
 * @public
 */
sap.m.Popover.prototype.setLeftButton = function(oButton){
	if(typeof(oButton) === "string"){
		oButton = sap.ui.getCore().byId(oButton);
	}

	var oOldLeftButton = sap.ui.getCore().byId(this.getLeftButton());

	if(oOldLeftButton === oButton){
		return this;
	}
	
	this._createInternalHeader();
	
	if(oButton){
		if(sap.m.Popover._bOneDesign){
			oButton.setType(sap.m.ButtonType.Transparent);
		}
		if(jQuery.os.ios || sap.m.Popover._bOneDesign){
			if(oOldLeftButton){
				this._internalHeader.removeAggregation("contentLeft", oOldLeftButton, true);
			}
			this._internalHeader.addAggregation("contentLeft", oButton, true);
		}else{
			if(oOldLeftButton){
				this._internalHeader.removeAggregation("contentRight", oOldLeftButton, true);
			}
			this._internalHeader.insertAggregation("contentRight", oButton, 0, true);
		}
		this._internalHeader.invalidate();
	}else{
		if(jQuery.os.ios || sap.m.Popover._bOneDesign){
			this._internalHeader.removeContentLeft(oOldLeftButton);
		}else{
			this._internalHeader.removeContentRight(oOldLeftButton);
		}
	}
	
	this.setAssociation("leftButton", oButton, true);
	return this;
};

/**
 * The setter of the doneButton. If you want to show a done button in the popover, don't forget to
 * set the {showHeader} to true.
 * @public
 */
sap.m.Popover.prototype.setRightButton = function(oButton){
	if(typeof(oButton) === "string"){
		oButton = sap.ui.getCore().byId(oButton);
	}
	
	var oOldRightButton = sap.ui.getCore().byId(this.getRightButton());

	if(oOldRightButton === oButton){
		return this;
	}
	
	this._createInternalHeader();
	
	if(oButton){
		if(sap.m.Popover._bOneDesign){
			oButton.setType(sap.m.ButtonType.Transparent);
		}
		if(oOldRightButton){
			this._internalHeader.removeAggregation("contentRight", oOldRightButton, true);
		}
		this._internalHeader.insertAggregation("contentRight", oButton, 1, true);
		this._internalHeader.invalidate();
	}else{
		this._internalHeader.removeContentRight(oOldRightButton);
	}
	
	this.setAssociation("rightButton", oButton, true);
	return this;
};


sap.m.Popover.prototype.setShowHeader = function(bValue){
	if(bValue === this.getShowHeader() || this.getCustomHeader()){
		return this;
	}
	
	if(bValue){
		//when internal header is created, show header
		//if not, the header will be created when setting title, leftButton, or rightButton
		//the latest time of the header creation before it's rendered is in the renderer, calling get any header.
		if(this._internalHeader){
			this._internalHeader.$().show();
		}
	}else{
		if(this._internalHeader){
			this._internalHeader.$().hide();
		}
	}
	
	//skip the rerendering
	this.setProperty("showHeader", bValue, true);
	
	return this;
};
/**
 * This overwrites the default setter of the property modal to avoid rerendering the whole popover control.
 */
sap.m.Popover.prototype.setModal = function(bModal){
	if(bModal === this.getModal()){
		return this;
	}
	
	this.oPopup.setModal(bModal, "sapMPopoverBLayer");
	this.setProperty("modal", bModal, true);
	
	return this;
};



sap.m.Popover.prototype.setOffsetX = function(iValue){
	var ePopupState = this.oPopup.getOpenState(),
		oLastPosition, iPlacePos;
	
	this.setProperty("offsetX", iValue, true);
	
	//if popup isn't open, just return
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return this;
	}
	
	//popup is open
	oLastPosition = this.oPopup._oLastPosition;
	iPlacePos = jQuery.inArray(this.getPlacement(), this._placements);	
	
	if(iPlacePos > -1){
		oLastPosition.offset = this._calcOffset(this._offsets[iPlacePos]);
		this.oPopup._applyPosition(oLastPosition);
	}
	
	return this;
};

sap.m.Popover.prototype.setOffsetY = function(iValue){
	var ePopupState = this.oPopup.getOpenState(),
		oLastPosition, iPlacePos;
	
	this.setProperty("offsetY", iValue, true);
	
	//if popup isn't open, just return
	if(!(ePopupState === sap.ui.core.OpenState.OPEN)){
		return this;
	}
	
	//popup is open
	oLastPosition = this.oPopup._oLastPosition;
	iPlacePos = jQuery.inArray(this.getPlacement(), this._placements);
	
	if(iPlacePos > -1){
		oLastPosition.offset = this._calcOffset(this._offsets[iPlacePos]);
		this.oPopup._applyPosition(oLastPosition);
	}
	
	return this;
};

sap.m.Popover.prototype.setEnableScrolling = function(bValue){
	var oldValue = this.getEnableScrolling();
	if(oldValue === bValue){
		return;
	}
	
	//if we set enableScrolling to false, rerendering can be suppressed.
	//otherwise we need to rerender
	this.setProperty("enableScrolling", bValue, !bValue);
	
	if(!bValue){
		if(this._oScroller){
			this._oScroller.destroy();
			this._oScroller = null;
		}
	}
};

/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 *
 * @private
 */
sap.m.Popover.prototype.getScrollDelegate = function(){
	return this._oScroller;
};

/* ==================================================== */
/*                      end: Setters                  */
/* ==================================================== */

sap.m.Popover.prototype.forceInvalidate = sap.ui.core.Control.prototype.invalidate;

// stop propagating the invalidate to static UIArea before the popover is opened once
// otherwise the open animation can't be seen for the first time
sap.m.Popover.prototype.invalidate = function(oOrigin){
	if(!this._firstOpen){
		this.forceInvalidate();
	}
};

}; // end of sap.m.Popover
if ( !jQuery.sap.isDeclared('sap.m.PullToRefresh') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.PullToRefresh.
jQuery.sap.declare("sap.m.PullToRefresh");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new PullToRefresh.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: false)</li>
 * <li>{@link #getCustomIcon customIcon} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.PullToRefresh#event:refresh refresh} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * PullToRefresh control. Put it as the first control in contents of a scroll container or a scrollable page. Do not place it into a page with disabled scrolling.
 * On touch devices it gets hidden by default and when the user pulls down the page far enough, it gets visible and triggers the "refresh" event.
 * In non-touch browsers where scrollbars are used for scrolling, it is always visible and triggers the "refresh" event when clicked.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.9.2
 * @name sap.m.PullToRefresh
 */
sap.ui.core.Control.extend("sap.m.PullToRefresh", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"hide"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"showIcon" : {type : "boolean", group : "Appearance", defaultValue : false},
		"customIcon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null}
	},
	events : {
		"refresh" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.PullToRefresh with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.PullToRefresh.extend
 * @function
 */

sap.m.PullToRefresh.M_EVENTS = {'refresh':'refresh'};


/**
 * Getter for property <code>description</code>.
 * Optional description. May be used to inform a user, for example, when the list has been updated last time.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.m.PullToRefresh#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#setDescription
 * @function
 */


/**
 * Getter for property <code>showIcon</code>.
 * Set to true to display an icon/logo. Icon must be set either in the customIcon property or in the CSS theme for the PullToRefresh control.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showIcon</code>
 * @public
 * @name sap.m.PullToRefresh#getShowIcon
 * @function
 */

/**
 * Setter for property <code>showIcon</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowIcon  new value for property <code>showIcon</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#setShowIcon
 * @function
 */


/**
 * Getter for property <code>customIcon</code>.
 * Provide a URI to a custom icon image to replace the SAP logo. Large images are scaled down to max 50px height.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>customIcon</code>
 * @public
 * @name sap.m.PullToRefresh#getCustomIcon
 * @function
 */

/**
 * Setter for property <code>customIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sCustomIcon  new value for property <code>customIcon</code>
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#setCustomIcon
 * @function
 */


/**
 * Event indicates that the user has requested new data 
 *
 * @name sap.m.PullToRefresh#refresh
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.PullToRefresh</code>.<br/> itself. 
 *  
 * Event indicates that the user has requested new data 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.PullToRefresh</code>.<br/> itself.
 *
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#attachRefresh
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'refresh' event of this <code>sap.m.PullToRefresh</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.PullToRefresh#detachRefresh
 * @function
 */

/**
 * Fire event refresh to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.PullToRefresh} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.PullToRefresh#fireRefresh
 * @function
 */


/**
 * Hides the control and resets it to the normal state. In non-touch environments the control is not hidden.
 *
 * @name sap.m.PullToRefresh.prototype.hide
 * @function

 * @type void
 * @public
 */


// Start of sap/m/PullToRefresh.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


sap.m.PullToRefresh.prototype.init = function(){
	this._bTouchMode = jQuery.support.touch || jQuery.sap.simulateMobileOnDesktop; // FIXME: plus fakeOS mode
	this._bPltfDpndnt = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true"; 
	
	this._iState = 0; // 0 - normal; 1 - release to refresh; 2 - loading
	this.oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m"); // texts
	
	if (this._bTouchMode) {
		// recalculate top pull offset by resize
		jQuery(window).on("resize.sapMP2R", jQuery.proxy(this.calculateTopTrigger, this));
	}
	
	// Busy indicator
	jQuery.sap.require("sap.m.BusyIndicator");
	this._oBusyIndicator = new sap.m.BusyIndicator({
		size: this._bTouchMode ? "2em" : "1.7em", 
		design: this._bPltfDpndnt? "light" : "auto" 
	});
	this._oBusyIndicator.setParent(this);
};

sap.m.PullToRefresh.prototype.exit = function(){
	if(this._oCustomImage){
		this._oCustomImage.destroy();
	}
	this._oBusyIndicator.destroy();
};

sap.m.PullToRefresh.prototype.onBeforeRendering = function(){
	if (this._bTouchMode) {
		var oParent = this.getParent();
		this._oScroller = oParent && oParent.getScrollDelegate? oParent.getScrollDelegate() : null;
		if(this._oScroller){
			this._oScroller.setPullDown(this);
		}
	}
};

sap.m.PullToRefresh.prototype.calculateTopTrigger = function(){
	this._iTopTrigger = 1;
	// find the scroll container that embeds the PullToRefresh control
	if(this._oDomRef && this._oDomRef.parentNode && this._oDomRef.parentNode.parentNode &&
			this._oDomRef.parentNode.parentNode.offsetHeight < this._oDomRef.offsetHeight * 1.5){
		// if there is no place to pull to show the image, pull only until the top line of text
		this._iTopTrigger = jQuery.sap.domById(this.getId() + "-T").offsetTop;
	}
};

sap.m.PullToRefresh.prototype.onAfterRendering = function(){
	if (this._bTouchMode) {
		if(this._oScroller){
			this._oScroller.refresh();
		}
		this._oDomRef = this.getDomRef();
		this.calculateTopTrigger();
	}
};

sap.m.PullToRefresh.prototype.exit = function(){
	if (this._bTouchMode) {
		jQuery(window).off("resize.sapMP2R");
		if(this._oScroller) {
			this._oScroller.setPullDown(null);
		}
		this._oScroller = null;
	}
};

// ScrollEnablement callback functions
sap.m.PullToRefresh.prototype.doScrollMove = function(){
	if(!this._oScroller){ return; }
	var _scroller = this._oScroller._scroller;
	if(_scroller.y > -this._iTopTrigger && this._iState < 1 ){
		this.setState(1);
		_scroller.minScrollY = 0;
	} else if (_scroller.y < -this._iTopTrigger && this._iState == 1){
		this.setState(0);
		_scroller.minScrollY = -this._oDomRef.offsetHeight;
	}
};

sap.m.PullToRefresh.prototype.doRefresh = function(){
	this.setState(0);
};

sap.m.PullToRefresh.prototype.doScrollEnd = function(){
	if(this._iState == 1){ // if released when ready - load
		this.setState(2);
		this.fireRefresh();
	}
};

/*
* Set display state: 0 - pull to refresh, 1 - release to refresh, 2 - loading
* @private
*/
sap.m.PullToRefresh.prototype.setState = function(iState){

	if(this._iState == iState){ return; }

	var $this = this.$();
	var $text = $this.find(".sapMPullDownText");
	switch(iState){
		case 0:
			$this.toggleClass("sapMFlip", false).toggleClass("sapMLoading", false);
			$text.html(this.oRb.getText(this._bTouchMode ? "PULL2REFRESH_PULLDOWN" : "PULL2REFRESH_REFRESH"));
			$this.find(".sapMPullDownInfo").html(this.getDescription());
			this._iState = iState;
			break;
		case 1:
			$this.toggleClass("sapMFlip", true);
			$text.html(this.oRb.getText("PULL2REFRESH_RELEASE"));
			this._iState = iState;
			break;
		case 2:
			$this.toggleClass("sapMFlip", false).toggleClass("sapMLoading", true);
			this._oBusyIndicator.setVisible(true);
			$text.html(this.oRb.getText("PULL2REFRESH_LOADING"));
			$this.find(".sapMPullDownInfo").html(this._bTouchMode ? this.oRb.getText("PULL2REFRESH_LOADING_LONG") : "");
			this._iState = iState;
			break;
	}
};

/*
* Override re-rendering for description
* @private
*/
sap.m.PullToRefresh.prototype.setDescription = function(sDescription){
	this.$().find(".sapMPullDownInfo").html(jQuery.sap.encodeHTML(sDescription));
	return this.setProperty("description", sDescription, true);
};

/*
* Return a private custom icon image control for internal rendering
* @private
*/
sap.m.PullToRefresh.prototype.getCustomIconImage = function(){
	if(!this._oCustomImage){
		this._oCustomImage = new sap.m.Image({src:this.getCustomIcon()}).addStyleClass("sapMPullDownCIImg");
	} else {
		this._oCustomImage.setSrc(this.getCustomIcon());
	}
	return this._oCustomImage;
};


// mouse version (non-touch)
sap.m.PullToRefresh.prototype.onclick = function() {
	if (!this._bTouchMode) {
		this.setState(2);
		this.fireRefresh();
	}
};


// API implementation
sap.m.PullToRefresh.prototype.hide = function(){
	if (this._bTouchMode) {
		if(this._oScroller){ this._oScroller.refresh(); }
		else { this.setState(0); }
	} else {
		this.setState(0);
	}
};

}; // end of sap.m.PullToRefresh
if ( !jQuery.sap.isDeclared('sap.m.RadioButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.RadioButton.
jQuery.sap.declare("sap.m.RadioButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new RadioButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getSelected selected} : boolean (default: false)</li>
 * <li>{@link #getGroupName groupName} : string (default: 'sapMRbDefaultGroup')</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '')</li>
 * <li>{@link #getActiveHandling activeHandling} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.RadioButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Generally, you would create at least two radio button controls which should have the same GroupName;
 * by this, you provide a limited choice for the user. Triggers an Event when User makes a change.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.RadioButton
 */
sap.ui.core.Control.extend("sap.m.RadioButton", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"setActiveState"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"selected" : {type : "boolean", group : "Data", defaultValue : false},
		"groupName" : {type : "string", group : "Behavior", defaultValue : 'sapMRbDefaultGroup'},
		"text" : {type : "string", group : "Appearance", defaultValue : null},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : ''},
		"activeHandling" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.RadioButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.RadioButton.extend
 * @function
 */

sap.m.RadioButton.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>visible</code>.
 * Invisible radio buttons are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.RadioButton#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Disabled controls are displayed in another color.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.RadioButton#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setEnabled
 * @function
 */


/**
 * Getter for property <code>selected</code>.
 * Specifies the select state of the radio button
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>selected</code>
 * @public
 * @name sap.m.RadioButton#getSelected
 * @function
 */

/**
 * Setter for property <code>selected</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bSelected  new value for property <code>selected</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setSelected
 * @function
 */


/**
 * Getter for property <code>groupName</code>.
 * Name of the radio button group the current radio button belongs to. You can define a new name for the group.
 * If no new name is specified, this radio button belongs to the sapMRbDefaultGroup per default. Default behavior of a radio button in a group is that when one of the radio buttons in a group is selected, all others are unselected.
 *
 * Default value is <code>'sapMRbDefaultGroup'</code>
 *
 * @return {string} the value of property <code>groupName</code>
 * @public
 * @name sap.m.RadioButton#getGroupName
 * @function
 */

/**
 * Setter for property <code>groupName</code>.
 *
 * Default value is <code>'sapMRbDefaultGroup'</code> 
 *
 * @param {string} sGroupName  new value for property <code>groupName</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setGroupName
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Defines the text displayed next to the RadioButton
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.RadioButton#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setText
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Options for the text direction are RTL and LTR. Alternatively, the control can inherit the text direction from its parent container.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.RadioButton#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>sap.ui.core.TextDirection.Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setTextDirection
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Width of Label
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.RadioButton#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setWidth
 * @function
 */


/**
 * Getter for property <code>activeHandling</code>.
 * this is a flag to switch on activeHandling, when it is switch
 * ed off, there will not be visual changes on active state. Default value is 'true'
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>activeHandling</code>
 * @public
 * @name sap.m.RadioButton#getActiveHandling
 * @function
 */

/**
 * Setter for property <code>activeHandling</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bActiveHandling  new value for property <code>activeHandling</code>
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#setActiveHandling
 * @function
 */


/**
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it). 
 *
 * @name sap.m.RadioButton#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.selected Checks whether the RadioButton is active or not.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.RadioButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.RadioButton</code>.<br/> itself. 
 *  
 * Event is triggered when the user makes a change on the radio button (selecting or unselecting it). 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.RadioButton</code>.<br/> itself.
 *
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.RadioButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.RadioButton#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selected' of type <code>boolean</code> Checks whether the RadioButton is active or not.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.RadioButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.RadioButton#fireSelect
 * @function
 */


/**
 * Method to set a RadioButton's state to active or inactive.
 *
 * @name sap.m.RadioButton.prototype.setActiveState
 * @function
 * @param {boolean} 
 *         bActive
 *         boolean to set the active state to true or false

 * @type void
 * @public
 */


// Start of sap/m/RadioButton.js
/**
 * This file defines behavior for the control,
 */

/**
 * Function is called when radiobutton is tapped.
 * 
 * @private
 */
sap.m.RadioButton.prototype.ontap = function(oEvent) {
	if (this.getEnabled()) {
		if (!this.getSelected()) {
			this.setSelected(true);
			this.fireSelect({selected:true});
		}
	}else{
		// readOnly or disabled -> don't allow browser to switch RadioButton on
		//oEvent.preventDefault();
	}
};
/**
 * Function is called when radiobutton is being touched. Only necessary for Android/Black-Berry.
 * 
 * @private
 */
sap.m.RadioButton.prototype.ontouchstart = function(oEvent) {
	//for control who need to know if they should handle events from the CheckBox control
	oEvent.originalEvent._sapui_handledByControl = true
	if(this.getEnabled() && this.getActiveHandling()) {
		this.$().toggleClass('sapMRbBTouched', true);
	}
}
	
sap.m.RadioButton.prototype.ontouchend = function(oEvent) {
	this.$().toggleClass('sapMRbBTouched', false);
}


// #############################################################################		
// Overwritten methods that are also generated in RadioButton.API.js		
// #############################################################################		

/*	
 * Overwrite the definition from RadioButton.API.js		
 */
sap.m.RadioButton.prototype.setSelected = function(bSelected) {
	
	var bSelectedOld = this.getSelected();

	this.setProperty("selected", bSelected, true); // No re-rendering

	if (bSelected) { // If this radio button is selected, explicitly deselect the other radio buttons of the same group
		if (this.getGroupName() && (this.getGroupName() !== "")) { // Do it only if groupName is set
			// TODO: Add control references to some static list when they are constructed, in order to avoid searching every time
			var others = jQuery("input[name='"+ this.getGroupName() +"']:radio");
			for (var i = 0; i < others.length; i++) {
				var other = others[i];
				// Recommendation is that the HTML radio button has an ID ending with "-RB"
				if (other.id && (other.id.length > 3) && (other.id.substr(other.id.length-3) === "-RB")) {
					// The SAPUI5 control is known by an ID without the "-RB" suffix
					var oControl = sap.ui.getCore().getElementById(other.id.substr(0, other.id.length-3));
					if (oControl instanceof sap.m.RadioButton && (oControl !== this)) {
						if(oControl.getSelected()){
							oControl.fireSelect({selected:false});
						}
						oControl.setSelected(false);
					}
				}
			}
		}
	}
	if ((bSelectedOld !== bSelected) && this.getDomRef()){
		
			jQuery.sap.byId(this.getId()).toggleClass('sapMRbSel', bSelected).attr('aria-checked', bSelected);
	if(bSelected){
		jQuery.sap.domById(this.getId()+'-RB').checked = true;
		jQuery.sap.domById(this.getId()+'-RB').setAttribute('checked', 'checked');
	}else{
		jQuery.sap.domById(this.getId()+'-RB').checked = false;
		jQuery.sap.domById(this.getId()+'-RB').removeAttribute('checked');
	}
	}

	return this;
};

sap.m.RadioButton.prototype.setActiveState = function(bActive) {
	this.$().toggleClass('sapMRbBTouched', bActive);
}

sap.m.RadioButton.prototype.setText = function(sText){
	this.setProperty("text", sText, true);	
	if(this._oLabel){
		this._oLabel.setText(this.getText());
	}else{
		this._createLabel("text", this.getText());
	}
	return this;
};

sap.m.RadioButton.prototype.setWidth = function(sWidth){
	this.setProperty("width", sWidth, true);	
	if(this._oLabel){
		this._oLabel.setWidth(this.getWidth());
	}else{
		this._createLabel("width", this.getWidth());
	}
	return this;
};

sap.m.RadioButton.prototype.setTextDirection = function(sDirection){
	this.setProperty("textDirection", sDirection, true);	
	if(this._oLabel){			
		this._oLabel.setTextDirection(this.getTextDirection());
	}else{
		this._createLabel("textDirection", this.getTextDirection());
	}
	return this;
};

sap.m.RadioButton.prototype.exit = function() {
	if(this._oLabel){
		this._oLabel.destroy();
	}
};

sap.m.RadioButton.prototype._createLabel = function(prop, value){
	this._oLabel = new sap.m.Label(this.getId() + "-label", {
					}).addStyleClass("sapMRbBLabel").setParent(this, null, true);
	this._oLabel.setProperty(prop, value, false);
};
}; // end of sap.m.RadioButton
if ( !jQuery.sap.isDeclared('sap.m.ScrollContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ScrollContainer.
jQuery.sap.declare("sap.m.ScrollContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ScrollContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getHorizontal horizontal} : boolean (default: true)</li>
 * <li>{@link #getVertical vertical} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The ScrollContainer is a control that can display arbitrary content within a limited screen area and provides touch scrolling to make all content accessible.
 * 
 * Note that it is not recommended to have nested scrolling areas that scroll into the same direction (e.g. a ScrollContainer that scrolls vertically inside a Page control with scrolling enabled). This is currently not considered a valid use-case of a good UI and the behavior will feel wrong.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.ScrollContainer
 */
sap.ui.core.Control.extend("sap.m.ScrollContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"scrollTo"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"horizontal" : {type : "boolean", group : "Behavior", defaultValue : true},
		"vertical" : {type : "boolean", group : "Behavior", defaultValue : false}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	}
}});


/**
 * Creates a new subclass of class sap.m.ScrollContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ScrollContainer.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible scroll containers are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.ScrollContainer#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setVisible
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the ScrollContainer.
 * If not set, it consumes the complete available width, behaving like normal HTML block elements. If only vertical scrolling is enabled, make sure the content always fits or wraps.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.ScrollContainer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the ScrollContainer.
 * By default the height equals the content height. If only horizontal scrolling is used, do not set the height or make sure the height is always larger than the height of the content.
 * 
 * Note that when a percentage is given, for the height to work as expected, the height of the surrounding container must be defined.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.ScrollContainer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setHeight
 * @function
 */


/**
 * Getter for property <code>horizontal</code>.
 * Whether horizontal scrolling should be possible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>horizontal</code>
 * @public
 * @name sap.m.ScrollContainer#getHorizontal
 * @function
 */

/**
 * Setter for property <code>horizontal</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bHorizontal  new value for property <code>horizontal</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setHorizontal
 * @function
 */


/**
 * Getter for property <code>vertical</code>.
 * Whether vertical scrolling should be possible.
 * 
 * Note that this is off by default because typically a Page is used as fullscreen element which can handle vertical scrolling. If this is not the case and vertical scrolling is required, this flag needs to be set to "true".
 * Important: it is not supported to have nested controls that both enable scrolling into the same dimension.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>vertical</code>
 * @public
 * @name sap.m.ScrollContainer#getVertical
 * @function
 */

/**
 * Setter for property <code>vertical</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bVertical  new value for property <code>vertical</code>
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#setVertical
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of the ScrollContainer.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.ScrollContainer#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.ScrollContainer#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ScrollContainer#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ScrollContainer#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.ScrollContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ScrollContainer#destroyContent
 * @function
 */


/**
 * Scrolls to the given position.
 * When called while the control is not rendered (yet), the scrolling position is still applied, but there is no animation.
 *
 * @name sap.m.ScrollContainer.prototype.scrollTo
 * @function
 * @param {int} 
 *         iX
 *         The horizontal pixel position to scroll to.
 * Scrolling to the right happens with positive values.
 * If only vertical scrolling is enabled, give 0 as value.
 * @param {int} 
 *         iY
 *         The vertical pixel position to scroll to.
 * Scrolling down happens with positive values.
 * If only horizontal scrolling is enabled, give 0 as value.
 * @param {int} 
 *         iTime
 *         The duration of animated scrolling.
 * To scroll immediately without animation, give 0 as value. 0 is also the default value, when this optional parameter is omitted.

 * @type sap.m.ScrollContainer
 * @public
 */


// Start of sap/m/ScrollContainer.js

/*
 * Better nested scrolling capabilities can be added to iScroll like this (in the _move method).
 * eDir is the direction into which scrolling is handled (if locked) and bOutside is true when we are outside the scolling boundary already; both
 * need to be initialized a couple of lines before this code.
 * 
 * 		e._handled = e._handled || {};
 *		if (e._handled[eDir]) { // current direction already handled
 *			return;
 *		}
 *		
 *		// add information about what this handler handles
 *		e._handled.x = e._handled.x || ((eDir == "x") && !bOutside);
 *		e._handled.y = e._handled.y || ((eDir == "y") && !bOutside);
 *		
 */

/*
 * TODO:
 * - events when scrolling is ongoing
 */


sap.m.ScrollContainer.prototype.init = function() {
	jQuery.sap.require("sap.ui.core.delegate.ScrollEnablement");
	this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
		horizontal: true,
		vertical: false,
		zynga: false,
		preventDefault: false,
		nonTouchScrolling: "scrollbar"
	});
	// TODO: do the resize listening only when ScrollContainer becomes visible and unbind when getting visible
};

sap.m.ScrollContainer.prototype.onBeforeRendering = function() {
	// properties are not known during init
	this._oScroller.setHorizontal(this.getHorizontal());
	this._oScroller.setVertical(this.getVertical());
};


/**
 * Called when the control is destroyed.
 *
 * @private
 */
sap.m.ScrollContainer.prototype.exit = function() {
	if(this._oScroller){
		this._oScroller.destroy();
		this._oScroller = null;
	}
};

/**
 * Returns the sap.ui.core.ScrollEnablement delegate which is used with this control.
 *
 * @private
 */
sap.m.ScrollContainer.prototype.getScrollDelegate = function() {
	return this._oScroller;
};

//*** API Methods ***

sap.m.ScrollContainer.prototype.scrollTo = function(x, y, time) {
	if (this._oScroller){
		if(this.getDomRef()) { // only if rendered
			this._oScroller.scrollTo(x, y, time);
		} else {
			this._oScroller._scrollX = x; // remember for later rendering
			this._oScroller._scrollY = y;
		}
	}
	return this;
};


sap.m.ScrollContainer.prototype.setHorizontal = function(horizontal) {
	this._oScroller.setHorizontal(horizontal);
	this.setProperty("horizontal", horizontal, true); // no rerendering
};

sap.m.ScrollContainer.prototype.setVertical = function(vertical) {
	this._oScroller.setVertical(vertical);
	this.setProperty("vertical", vertical, true); // no rerendering
};

}; // end of sap.m.ScrollContainer
if ( !jQuery.sap.isDeclared('sap.m.SearchField') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SearchField.
jQuery.sap.declare("sap.m.SearchField");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new SearchField.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getValue value} : string</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getShowMagnifier showMagnifier} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SearchField#event:search search} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SearchField#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to input a search string.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.SearchField
 */
sap.ui.core.Control.extend("sap.m.SearchField", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"value" : {type : "string", group : "Data", defaultValue : null, bindable : "bindable"},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"placeholder" : {type : "string", group : "Misc", defaultValue : null},
		"showMagnifier" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"search" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SearchField with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SearchField.extend
 * @function
 */

sap.m.SearchField.M_EVENTS = {'search':'search','liveChange':'liveChange'};


/**
 * Getter for property <code>value</code>.
 * Input Value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.SearchField#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setValue
 * @function
 */


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#bindValue
 * @function
 */

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#unbindValue
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the input.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.SearchField#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.SearchField#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible inputs are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.SearchField#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setVisible
 * @function
 */


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.m.SearchField#getMaxLength
 * @function
 */

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setMaxLength
 * @function
 */


/**
 * Getter for property <code>placeholder</code>.
 * Text shown when no value available.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * @name sap.m.SearchField#getPlaceholder
 * @function
 */

/**
 * Setter for property <code>placeholder</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPlaceholder  new value for property <code>placeholder</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setPlaceholder
 * @function
 */


/**
 * Getter for property <code>showMagnifier</code>.
 * Set to false to hide the magnifier icon.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showMagnifier</code>
 * @public
 * @name sap.m.SearchField#getShowMagnifier
 * @function
 */

/**
 * Setter for property <code>showMagnifier</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowMagnifier  new value for property <code>showMagnifier</code>
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#setShowMagnifier
 * @function
 */


/**
 * Event which is fired when the user triggers a search. 
 *
 * @name sap.m.SearchField#search
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.query The search query string.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'search' event of this <code>sap.m.SearchField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SearchField</code>.<br/> itself. 
 *  
 * Event which is fired when the user triggers a search. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.
 *
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#attachSearch
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'search' event of this <code>sap.m.SearchField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SearchField#detachSearch
 * @function
 */

/**
 * Fire event search to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'query' of type <code>string</code> The search query string.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SearchField#fireSearch
 * @function
 */


/**
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 *
 * @name sap.m.SearchField#liveChange
 * @event
 * @since 1.9.1
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue Current search string.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SearchField</code>.<br/> itself. 
 *  
 * This event is fired when the value of the search field is changed by a user - e.g. at each key press. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SearchField</code>.<br/> itself.
 *
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * @name sap.m.SearchField#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.SearchField</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @public
 * @since 1.9.1
 * @name sap.m.SearchField#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> Current search string.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SearchField} <code>this</code> to allow method chaining
 * @protected
 * @since 1.9.1
 * @name sap.m.SearchField#fireLiveChange
 * @function
 */


// Start of sap/m/SearchField.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.apply(sap.m.SearchField.prototype, [true]);

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();

sap.m.SearchField.prototype.init = function(){
	// IE9 does not fire input event when characters are deleted in an input field, use keyup instead
	this._inputEvent = jQuery.browser.msie && jQuery.browser.fVersion < 10 ? "keyup" : "input";
	// TODO: suggestions and search provider
};

sap.m.SearchField.prototype.onBeforeRendering = function() {
	jQuery(this._inputElement)
		.unbind(this._inputEvent,  this.onInput)
		.unbind("search", this.onSearch)
		.unbind("change", this.onChange)
		.unbind("focus",  this.onFocus)
		.unbind("blur",   this.onBlur);
};

sap.m.SearchField.prototype.onAfterRendering = function() {
	// DOM element for the embedded HTML input:
	this._inputElement = jQuery.sap.domById(this.getId() + "-I");
	// DOM element for the reset button:
	this._resetElement = jQuery.sap.domById(this.getId() + "-reset");
	// Bind events
	//  search: user has pressed "Enter" button -> fire search event, do search
	//  change: user has focused another control on the page -> do not trigger a search action
	//  input:  key press or paste/cut -> fire liveChange event
	jQuery(this._inputElement)
		.bind(this._inputEvent,  jQuery.proxy(this.onInput,  this))
		.bind("search", jQuery.proxy(this.onSearch, this))
		.bind("change", jQuery.proxy(this.onChange, this))
		.bind("focus",  jQuery.proxy(this.onFocus,  this))
		.bind("blur",   jQuery.proxy(this.onBlur,  this));
};

sap.m.SearchField.prototype.ontouchstart = function(oEvent) {
	// mark this event as processed
	oEvent.originalEvent._sapui_handledByControl = true;
	
	if (!this.getEnabled()) return;
	var oSrc = oEvent.srcElement;

	if(oSrc.id == this.getId()+"-reset"){
		if(oEvent.originalEvent.button === 2) return; // no action on the right mouse button
		var value = "";
		this._inputElement.value = value;
		this.setProperty("value", value, true);
		jQuery(this._resetElement).toggleClass("sapMSFVal", false); // remove the x button
		this.fireLiveChange({newValue: value});
		this.fireSearch({query: value});
		oEvent.preventDefault();
		oEvent.stopPropagation();
		// keep keyboard opened when a user touches "x", take focus from another active input too
		if(document.activeElement && document.activeElement.tagName == "INPUT"){this._inputElement.focus();}
	}
};

sap.m.SearchField.prototype.onclick = function(oEvent) {
	// focus if mouse-clicked on the magnifier button
	if(this.getEnabled() && oEvent.srcElement.className == "sapMSFMG"){
		this._inputElement.focus();
		this.fireSearch({query: this.getValue()}); // UX requirement: fire search on a magnifier glass click on desktop
	}
};

/**
 * Process the search event
 *
 * When a user deletes the search string using the "x" button,
 * change event is not fired.
 * Call setValue() to ensure that the value property is updated.
 *
 * @private
 */
sap.m.SearchField.prototype.onSearch = function(event){
	var value = this._inputElement.value;
	this.setProperty("value", value, true);
	this.fireSearch({query: value});
	// If the user has pressed the search button on the keyboard - close it:
	document.activeElement.blur();
};

/**
 * Process the change event. Update value and do not fire any control events
 * because the user has focused another control on the page without intention to do a search.
 * @private
 */
sap.m.SearchField.prototype.onChange = function(event){
	var value = this._inputElement.value;
	this.setProperty("value", value, true);
};

/**
 * Process the input event (key press or paste). Update value and fire the liveChange event.
 * @private
 */
sap.m.SearchField.prototype.onInput = function(event){
	var value = this._inputElement.value;
	jQuery(this._resetElement).toggleClass("sapMSFVal", !!value);
	this.setProperty("value", value, true);
	this.fireLiveChange({newValue: value});
};


/**
 * highlight the background on focus.
 * @private
 */
sap.m.SearchField.prototype.onFocus = function(event){
	this.$().toggleClass("sapFocus", true);
};

/**
 * Restore the background color on blur.
 * @private
 */
sap.m.SearchField.prototype.onBlur = function(event){
	this.$().toggleClass("sapFocus", false);
};

}; // end of sap.m.SearchField
if ( !jQuery.sap.isDeclared('sap.m.SegmentedButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SegmentedButton.
jQuery.sap.declare("sap.m.SegmentedButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new SegmentedButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedButton selectedButton} : string | sap.m.Button</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SegmentedButton#event:select select} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A SegmentedButton Control is a horizontal control made of multiple buttons which can display a title or an image. It automatically resizes the buttons to fit proportionally within the control. When no width is set, the control uses the available width.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.SegmentedButton
 */
sap.ui.core.Control.extend("sap.m.SegmentedButton", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"createButton"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true}
	},
	defaultAggregation : "buttons",
	aggregations : {
    	"buttons" : {type : "sap.m.Button", multiple : true, singularName : "button"}
	},
	associations : {
		"selectedButton" : {type : "sap.m.Button", multiple : false}
	},
	events : {
		"select" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SegmentedButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SegmentedButton.extend
 * @function
 */

sap.m.SegmentedButton.M_EVENTS = {'select':'select'};


/**
 * Getter for property <code>width</code>.
 * Set the width of the SegmentedButton control. If not set, it uses the minimum required width to make all buttons inside of the same size (based on the biggest button).
 * 
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.SegmentedButton#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setWidth
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * boolean property to make the control visible or invisible
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.SegmentedButton#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setVisible
 * @function
 */


/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * Buttons of the SegmentedButton control
 * 
 * @return {sap.m.Button[]}
 * @public
 * @name sap.m.SegmentedButton#getButtons
 * @function
 */


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#insertButton
 * @function
 */

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#addButton
 * @function
 */

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.m.Button} vButton the button to remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @public
 * @name sap.m.SegmentedButton#removeButton
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.SegmentedButton#removeAllButtons
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.SegmentedButton#indexOfButton
 * @function
 */
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#destroyButtons
 * @function
 */


/**
 * Pointer to the selected button of a SegmentedButton control.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedButton</code> association, or null
 * @public
 * @name sap.m.SegmentedButton#getSelectedButton
 * @function
 */

/**
 * Pointer to the selected button of a SegmentedButton control.
 *
 * @param {string | sap.m.Button} vSelectedButton 
 *    Id of an element which becomes the new target of this <code>selectedButton</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#setSelectedButton
 * @function
 */


	
/**
 * Event is fired when the user selects a button, which returns the id and button object 
 *
 * @name sap.m.SegmentedButton#select
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Button} oControlEvent.getParameters.button Reference to the button that has just been selected
 * @param {string} oControlEvent.getParameters.id Id of the button which has just been selected
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SegmentedButton</code>.<br/> itself. 
 *  
 * Event is fired when the user selects a button, which returns the id and button object 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SegmentedButton</code>.<br/> itself.
 *
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#attachSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'select' event of this <code>sap.m.SegmentedButton</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SegmentedButton#detachSelect
 * @function
 */

/**
 * Fire event select to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'button' of type <code>sap.m.Button</code> Reference to the button that has just been selected</li>
 * <li>'id' of type <code>string</code> Id of the button which has just been selected</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SegmentedButton} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SegmentedButton#fireSelect
 * @function
 */


/**
 * Convenient method to add a button with a text as title OR an URI for an icon. Using both is not supported.
 *
 * @name sap.m.SegmentedButton.prototype.createButton
 * @function
 * @param {string} 
 *         sText
 *         Set the text of a SegmentedButton button.
 * @param {sap.ui.core.URI} 
 *         sIcon
 *         Icon to be displayed as graphical element within the button.
 * 
 * Density related image will be loaded if image with density awareness name in format [imageName]@[densityValue].[extension] is provided.
 * @param {boolean} 
 *         bEnabled
 *         Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings

 * @type void
 * @public
 */


// Start of sap/m/SegmentedButton.js
sap.m.SegmentedButton.prototype.init = function() {
	if(jQuery.os.android || jQuery.os.blackberry) {
		sap.m.SegmentedButton.prototype.ontouchstart = this._ontouchstart;
		sap.m.SegmentedButton.prototype.ontouchend = this._ontouchend;
	}
	if(jQuery.browser.msie && jQuery.browser.fVersion <= 10) {
		this._isMie = true;
	}
	//bind the resize event to window
	jQuery(window).resize(jQuery.proxy(this._fHandleResize, this));
};

sap.m.SegmentedButton.prototype.onAfterRendering = function() {
	//Flag if control is inside the bar. If inside bar the buttons always use the width they need.
	this._bInsideBar = (this.$().closest('.sapMBar').length > 0) ? true : false;
	var aButtons = this.getButtons();
	var bAllIcons = true;
	var self = this;
	for(var i=0; i < aButtons.length; i++) {
		if(aButtons[i].getIcon() == "") {
			bAllIcons = false;
		}
	}
	if(bAllIcons) {
		this.$().toggleClass("sapMSegBIcons", true);
	}
	setTimeout(function() {
		self._fCalcBtnWidth();
	},10);
};
/**
 * Called after the theme has been switched, required for new width calc
 * @private
 */
sap.m.SegmentedButton.prototype.onThemeChanged = function(oEvent){
	this._fCalcBtnWidth();
};
/**
 * This function is called to manually set the width of each segmentedbutton button 
 * on the basis of the widest item after they have been rendered or an orientation change/theme change
 * took place. 
 * @private
 */
sap.m.SegmentedButton.prototype._fCalcBtnWidth = function() {
	var iItm = this.getButtons().length;
	if (iItm === 0 || !this.$().is(":visible")) {
		return;
	}
	
	var aBtnWidth = [],
		iMaxWidth = 5,
		$this = this.$(),
		iParentWidth = 0,
		iInnerWidth = $this.children('#' + this.getButtons()[0].getId()).outerWidth(true)-$this.children('#' + this.getButtons()[0].getId()).width(),
		//Outerwidth of control, if developer manually sets margin or padding to the control itself
		iCntOutWidth = $this.outerWidth(true) - $this.width();
		//if parent width is bigger than actual screen width set parent width to screen width => android 2.3
		iParentWidth = (jQuery(window).width() < $this.parent().outerWidth()) ? jQuery(window).width() : $this.parent().width();
	if(this.getWidth() && this.getWidth().indexOf("%") === -1) {
		iMaxWidth = parseInt(this.getWidth()) / iItm;
		for(var i = 0; i < iItm; i++) {
			aBtnWidth.push($this.children('#' + this.getButtons()[i].getId()).outerWidth()-$this.children('#' + this.getButtons()[i].getId()).width());	
		}
		var iMaxOuterWidth = Math.max.apply(null, aBtnWidth);
		iMaxWidth = iMaxWidth - iMaxOuterWidth;
	} else {
		for(var i = 0; i < iItm; i++) {
			aBtnWidth.push($this.children('#' + this.getButtons()[i].getId()).outerWidth(true));	
		}
		iMaxWidth = Math.max.apply(null, aBtnWidth);
		if (((iParentWidth -iCntOutWidth) > iMaxWidth * iItm || this._bInsideBar) && this.getWidth().indexOf("%") === -1) {
			iMaxWidth = iMaxWidth - iInnerWidth;
		} else {
			iMaxWidth = (iParentWidth-iCntOutWidth) / iItm;
			iMaxWidth = iMaxWidth - iInnerWidth;
		}
	}

	for(var i = 0; i < iItm; i++) {
		if (!isNaN(iMaxWidth)) {
			$this.children('#' + this.getButtons()[i].getId()).width(iMaxWidth);
		}
	}
};
/**
 * The orientationchange event listener
*/
sap.m.SegmentedButton.prototype._fHandleResize = function() {
	var self = this;
	setTimeout(function() {
		self._fCalcBtnWidth();
	},10);
};
/**
 * Convenient method to add a button with a text as title or an uri for an icon. 
 * Only one is allowed.
 *
 * @param {sap.ui.core/string}
 *         sText defines the title text of the newly created button
 * @param {sap.ui.core/URI}
 *        sURI defines the icon uri of the button
 * @param {boolean}
 *        [bEnabled] sets the enabled status of the button
 * @param {function}
 *        [fTapListener] sets callback function for tap events
 * @return
 * @type {sap.m.Button}
 * @public
 */
sap.m.SegmentedButton.prototype.createButton = function(sText, sURI, bEnabled) {
	var oButton = new sap.m.Button();
	
	if(sURI === null && sText !== null){
		oButton.setText(sText);
	}else if(sURI !== null && sText === null){
		oButton.setIcon(sURI);
	}else
		throw new Error("in control: " + this.toString() + ": method createButton() just accepts text or icon");
	if(bEnabled || bEnabled === undefined) {
		oButton.setEnabled(true);
	}else {
		oButton.setEnabled(false);
	}
	this.addButton(oButton);

	return oButton;
};

sap.m.SegmentedButton.prototype.addButton = function(oButton) {
var that = this;
	oButton.attachTap(function(oEvent){
		that.$().children().removeClass('sapMSegBBtnSel');
		oEvent.getSource().$().addClass('sapMSegBBtnSel');
		if (that.getSelectedButton() !== oEvent.getSource().getId()) {
			that.setAssociation('selectedButton', oEvent.getSource(), true);
			that.fireSelect({button:oEvent.getSource(), id: oEvent.getSource().getId()});
		}
	});
	this.addAggregation('buttons',oButton);
	return this;
};

sap.m.SegmentedButton.prototype.insertButton = function(oButton) {
	var that = this;
	oButton.attachTap(function(oEvent){
		that.$().children().removeClass('sapMSegBBtnSel');
		oEvent.getSource().$().addClass('sapMSegBBtnSel');
		if (that.getSelectedButton() !== oEvent.getSource().getId()) {
			that.setAssociation('selectedButton', oEvent.getSource(), true);
			that.fireSelect({button:oEvent.getSource(), id: oEvent.getSource().getId()});
		}
	});
	this.insertAggregation('buttons',oButton);
	return this;
};

sap.m.SegmentedButton.prototype._ontouchstart = function(oEvent) {
	if (oEvent.srcControl.getEnabled())
		jQuery(oEvent.target).toggleClass('sapMSegBBtnTouched', true);
};

sap.m.SegmentedButton.prototype._ontouchend = function(oEvent) {
	if (oEvent.srcControl.getEnabled())
		jQuery(oEvent.target).toggleClass('sapMSegBBtnTouched', false);
};
}; // end of sap.m.SegmentedButton
if ( !jQuery.sap.isDeclared('sap.m.Select') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Select.
jQuery.sap.declare("sap.m.Select");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Select.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: 'auto')</li>
 * <li>{@link #getMaxWidth maxWidth} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSelectedKey selectedKey} : string</li>
 * <li>{@link #getSelectedItemId selectedItemId} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} : sap.ui.core.Item[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getSelectedItem selectedItem} : string | sap.ui.core.Item</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Select#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The select control is built on a native html select element; it provides a list of predefined items that allows end users to choose options.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Select
 */
sap.ui.core.Control.extend("sap.m.Select", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
		"maxWidth" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"selectedKey" : {type : "string", group : "Data", defaultValue : null},
		"selectedItemId" : {type : "string", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "items",
	aggregations : {
    	"items" : {type : "sap.ui.core.Item", multiple : true, singularName : "item"}
	},
	associations : {
		"selectedItem" : {type : "sap.ui.core.Item", multiple : false}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Select with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Select.extend
 * @function
 */

sap.m.Select.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Select#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setName
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Determines whether the control is visible or not.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Select#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Determines whether the user can change the selected value.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Select#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setEnabled
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the select control. This value can be provided in %, em, px… and all possible CSS measures.
 *
 * Default value is <code>auto</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Select#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>auto</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setWidth
 * @function
 */


/**
 * Getter for property <code>maxWidth</code>.
 * Defines the maximum width of the select control. This value can be provided in %, em, px… and all possible CSS measures.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>maxWidth</code>
 * @public
 * @name sap.m.Select#getMaxWidth
 * @function
 */

/**
 * Setter for property <code>maxWidth</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sMaxWidth  new value for property <code>maxWidth</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setMaxWidth
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The text to be displayed as tooltip and as title of the Select popup on iPad. This overrides the value of the "tooltip" property. If only the "tooltop" property is set, the Select popup on iPad will not have a title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Select#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setTitle
 * @function
 */


/**
 * Getter for property <code>selectedKey</code>.
 * Key of the selected item.
 * 
 * If the key has no corresponding aggregated item, no changes will apply.
 * If duplicate keys exists the first item matching the key is used.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedKey</code>
 * @public
 * @since 1.11
 * @name sap.m.Select#getSelectedKey
 * @function
 */

/**
 * Setter for property <code>selectedKey</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedKey  new value for property <code>selectedKey</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.11
 * @name sap.m.Select#setSelectedKey
 * @function
 */


/**
 * Getter for property <code>selectedItemId</code>.
 * Id of the selected item.
 * 
 * If the id has no corresponding aggregated item, no changes will apply.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>selectedItemId</code>
 * @public
 * @since 1.12
 * @name sap.m.Select#getSelectedItemId
 * @function
 */

/**
 * Setter for property <code>selectedItemId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSelectedItemId  new value for property <code>selectedItemId</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @name sap.m.Select#setSelectedItemId
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Items of the Item control.
 * 
 * @return {sap.ui.core.Item[]}
 * @public
 * @name sap.m.Select#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ui.core.Item} vItem the item to remove or its index or id
 * @return {sap.ui.core.Item} the removed item or null
 * @public
 * @name sap.m.Select#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Item[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.Select#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Item</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Item}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.Select#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#destroyItems
 * @function
 */


/**
 * The selected item.
 *
 * @return {string} Id of the element which is the current target of the <code>selectedItem</code> association, or null
 * @public
 * @name sap.m.Select#getSelectedItem
 * @function
 */

/**
 * The selected item.
 *
 * @param {string | sap.ui.core.Item} vSelectedItem 
 *    Id of an element which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setSelectedItem
 * @function
 */


	
/**
 * This event will be triggered when the user changes the selected item. 
 *
 * @name sap.m.Select#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Item} oControlEvent.getParameters.selectedItem The selected item.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Select</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Select</code>.<br/> itself. 
 *  
 * This event will be triggered when the user changes the selected item. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Select</code>.<br/> itself.
 *
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Select</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'selectedItem' of type <code>sap.ui.core.Item</code> The selected item.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Select#fireChange
 * @function
 */


// Start of sap/m/Select.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.apply(sap.m.Select.prototype, [true]);

/* =========================================================== */
/*                   begin: lifecycle methods                  */
/* =========================================================== */

/**
 * Initialization hook for the Select.
 *
 * @private
 */
sap.m.Select.prototype.init = function() {
	if (this._bUseCustomSelect) {
		jQuery.sap.require("sap.m.CustomSelect");
		sap.m.Select.prototype.init = null;
	}
};

/**
 * Required adaptations before rendering.
 *
 * @private
 */
sap.m.Select.prototype.onBeforeRendering = function() {

	/*
	 *	functional dependencies:
	 *
	 *	selectedKey  -> selectedItem, selectedItemId
	 *	selectedItem -> selectedItemId, selectedKey
	 *
	 *	items        -> selectedItem, selectedItemId, selectedKey
	 */

	var aItems = this.getItems(),
		oItem = this.getSelectedItem(),
		sKey = this.getSelectedKey();

	if (aItems.length) {

		if (sKey !== (oItem && oItem.getKey())) {

			oItem = sap.m.Select._getItemByKey(aItems, "" + sKey);

			// if the "selectedKey" has no corresponding aggregated item, no changes will apply
			if (!oItem) {

				// if the key does not have a default value
				if (sKey !== "") {
					jQuery.sap.log.warning('Warning: the key "' + sKey + '" has no corresponding aggregated item on ', this);
				} else {
					this._setDefaultSelectedItem(aItems[0]);
				}
			} else {

				/*
				 * Update and synchronize "selectedItem" association and
				 * "selectedKey" property.
				 * Re-rendering is not needed.
				 */
				this.setAssociation("selectedItem", oItem, true);
				this.setProperty("selectedItemId", oItem.getId(), true);
			}
		} else if (aItems.indexOf(oItem) === -1) {	// validate if the selected item is aggregated
			jQuery.sap.log.warning('Warning: the sap.ui.core.Item instance or sap.ui.core.Item id is not a valid aggregation on', this);
		}
	} else {	// if the select control does not contain any item

		/*
		 * Update "selectedItem" association, "selectedItemId"
		 * and "selectedKey" properties by setting its defaults values.
		 * Re-rendering is not needed.
		 */
		this.setAssociation("selectedItem", null, true);
		this.setProperty("selectedItemId", "", true);
		this.setProperty("selectedKey", "", true);

		jQuery.sap.log.info("Info: the select control does not contain any item on", this);
	}

	this._unbindChangeEvent();

	// custom select
	if (this._bUseCustomSelect) {
		this._onBeforeRenderingCustom();
	}
};

/**
 * Required adaptations after rendering.
 *
 * @private
 */
sap.m.Select.prototype.onAfterRendering = function() {
	var oLabelComputedStyle;

	// jQuery DOM reference to the select control root
	this._$SelectCont = this.$();

	// jQuery DOM reference to the native select using inside the control
	this._$Select = this._$SelectCont.children("select");

	// jQuery DOM collection with all select options
	this._$SelectOptions = this._$Select.children("option");

	// jQuery DOM reference with the selected option
	this._$SeletedOption = this._$SelectOptions.filter(":selected");

	// jQuery DOM reference to the label used to show the text of the current selected item
	this._$SelectLabel = this._$SelectCont.children(".sapMSltLabel");

	// register a listener to the select change event
	this._$Select.on("change.sapMSelect", jQuery.proxy(this._handleChangeEvent, this));

	oLabelComputedStyle = window.getComputedStyle(this._$SelectLabel[0], null);

	this._$Select[0].style.font = oLabelComputedStyle.font;
	this._$Select[0].style.padding = oLabelComputedStyle.padding;
	this._$Select[0].style.border = oLabelComputedStyle.border;

	this._$Select.width("100%");

	// makes the control visible
	this._$SelectCont.css("visibility", "");

	// custom select
	if (this._bUseCustomSelect) {
		this._onAfterRenderingCustom();
	}
};

/* =========================================================== */
/*                   end: lifecycle methods                    */
/* =========================================================== */


/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */

/**
 * Handle the touch start event happening on the select.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Select.prototype.ontouchstart = function(oEvent) {

	// for control who need to know if they should handle events from the select control
	oEvent.originalEvent._sapui_handledByControl = true;

	// add active state
	this._$SelectCont.addClass("sapMSltPressed");
};

/**
 * Handle the touch move event on the select.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Select.prototype.ontouchmove = function(oEvent) {
	if (this._bUseCustomSelect) {
		this._ontouchmoveCustom(oEvent);
	}
};

/**
 * Handle the touch end event on the select.
 *
 * @private
 */
sap.m.Select.prototype.ontouchend = function() {

	// remove active state
	this._$SelectCont.removeClass("sapMSltPressed");
};

/**
 * Handle the change event on the select.
 *
 * @private
 */
sap.m.Select.prototype._handleChangeEvent = function() {
	var $NewSeletedOption = this._$SelectOptions.filter(":selected"),
		sItemId = $NewSeletedOption.attr("id"),
		oItem = sap.ui.getCore().byId(sItemId),
		oSelectedItem = this.getSelectedItem();

	if (!oSelectedItem || oSelectedItem.getId() === sItemId) {
		return;
	}

	// remove the old selected attribute
	this._$SeletedOption.removeAttr("selected");

	// add the new selected attribute
	$NewSeletedOption.attr("selected", "selected");

	// update the selected item
	this._$SeletedOption = $NewSeletedOption;

	/*
	 * Update and synchronize "selectedItem" association "setSelectedItemId"
	 * and "selectedKey" properties.
	 * Re-rendering is not needed.
	 */
	this.setAssociation("selectedItem", sItemId, true);
	this.setProperty("selectedItemId", sItemId, true);
	this.setProperty("selectedKey", sap.ui.getCore().byId(sItemId).getKey(), true);

	this._$SelectLabel.text(oItem.getText());

	this.fireChange({ selectedItem : oItem });
};

/* ============================================================ */
/*                      end: event handlers                  	*/
/* ============================================================ */


/* =========================================================== */
/*             begin: internal methods and properties          */
/* =========================================================== */

sap.m.Select.prototype._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

sap.m.Select.prototype._sNoData = sap.m.Select.prototype._oRb.getText("SELECT_NO_DATA");

sap.m.Select.prototype._bUseCustomSelect = (jQuery.os.android && jQuery.os.fVersion === 2.3) || !sap.ui.core.theming.Parameters.get("sapMPlatformDependent");

sap.m.Select.prototype._sLang = sap.ui.getCore().getConfiguration().getLanguage().split("-")[0];

sap.m.Select.prototype._unbindChangeEvent = function() {
	if (this._$Select) {
		this._$Select.off("change.sapMSelect", this._handleChangeEvent);
	}
};

sap.m.Select._getItemByKey = function(aItems, sKey) {
	for (var i = 0; i < aItems.length; i++) {
		if (aItems[i].getKey() === sKey) {
			return aItems[i];
		}
	}
};

/**
 * Update and synchronize "selectedItem" association, "selectedItemId"
 * and "selectedKey" properties, by selecting the first item.
 *
 * @param {sap.ui.core.Item} [oItem]
 * @private
 */
sap.m.Select.prototype._setDefaultSelectedItem = function(oItem) {
	var oItem = oItem || this.getItems()[0];

	if (oItem) {

		// Re-rendering is not needed
		this.setAssociation("selectedItem", oItem.getId(), true);
		this.setProperty("selectedItemId", oItem.getId(), true);
		this.setProperty("selectedKey", oItem.getKey(), true);
	}
};

/* ========================================================== */
/*              end: internal methods and properties          */
/* ========================================================== */


/* =========================================================== */
/*                   begin: API method                         */
/* =========================================================== */

/**
 * Setter for association <code>selectedItem</code>.
 *
 * @param {string | sap.ui.core.Item | null} vSelectedItem new value for association <code>selectedItem</code>
 *    Id of an sap.ui.core.Item which becomes the new target of this <code>selectedItem</code> association.
 *    Alternatively, an sap.ui.core.Item instance may be given.
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Select#setSelectedItem
 * @function
 */
sap.m.Select.prototype.setSelectedItem = function(vItem) {

	if (typeof vItem === "string") {
		vItem = sap.ui.getCore().byId(vItem);
	}

	if (!(vItem instanceof sap.ui.core.Item) && vItem !== null) {
		jQuery.sap.log.warning('Warning: "vItem" needs to be an instance of sap.ui.core.Item, a valid sap.ui.core.Item id, or null on', this);
		return this;
	}

	/*
	 * Update and synchronize "selectedItem" association,
	 * "selectedKey" and "selectedItemId" properties.
	 * Re-rendering is needed.
	 */
	this.setAssociation("selectedItem", vItem || null);
	this.setProperty("selectedItemId", vItem ? vItem.getId() : "");
	this.setProperty("selectedKey", vItem ? vItem.getKey() : "");
	return this;
};

/**
 * Setter for property <code>selectedItemId</code>.
 *
 * Default value is an empty string <code>""</code> or <code>undefined</code>
 *
 * @param {string | sap.ui.core.Item | undefined} sSelectedItemId new value for property <code>selectedItemId</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.12
 * @name sap.m.Select#setSelectedItemId
 * @function
 */
sap.m.Select.prototype.setSelectedItemId = function(sItem) {
	var oItem = sap.ui.getCore().byId(sItem);

	if (!(oItem instanceof sap.ui.core.Item) && sItem !== "" && sItem !== undefined) {
		jQuery.sap.log.warning('Warning: "sItem" must be a string id of an sap.ui.core.Item instance, an empty string or undefined on', this);
		return this;
	}

	/*
	 * Update and synchronize "selectedItem" association,
	 * "selectedKey" and "selectedItemId" properties.
	 * Re-rendering is needed.
	 */
	this.setAssociation("selectedItem", oItem || null);
	this.setProperty("selectedItemId", sItem || "");
	this.setProperty("selectedKey", oItem ? oItem.getKey() : "");
	return this;
};

/**
 * Setter for property <code>selectedKey</code>.
 *
 * Default value is an empty string <code>""</code> or <code>undefined</code>
 *
 * @param {string} sSelectedKey new value for property <code>selectedKey</code>
 * @return {sap.m.Select} <code>this</code> to allow method chaining
 * @public
 * @since 1.11
 * @name sap.m.Select#setSelectedKey
 * @function
 */
sap.m.Select.prototype.setSelectedKey = function(sKey) {

	/*
	 * Note: the "selectedItem" association and "selectedItemId" property
	 * need to be updated in onBeforeRendering(), because when this method
	 * is called, the aggregation "items" may be outdated.
	 */
	return this.setProperty("selectedKey", sKey);	// update "selectedKey" property, re-rendering is needed
};

sap.m.Select.prototype.getSelectedItem = function() {
	var sSelectedItemId = this.getAssociation("selectedItem");

	return (sSelectedItemId === null) ? null : sap.ui.getCore().byId(sSelectedItemId);
};

sap.m.Select.prototype.removeItem = function(vItem) {
	if (typeof vItem === "string") {
		vItem = sap.ui.getCore().byId(vItem);
	}

	if (!(vItem instanceof sap.ui.core.Item)) {
		jQuery.sap.log.warning('Warning: "vItem" must be a sap.ui.core.Item object or a valid item id on', this);
		return null;
	}

	// remove the select item
	vItem = this.removeAggregation("items", vItem);

	// if the removed item is selected
	if (vItem && vItem.getId() === this.getAssociation("selectedItem")) {
		this._setDefaultSelectedItem();
	}

	return vItem;
};

/* =========================================================== */
/*                     end: API method                         */
/* =========================================================== */
}; // end of sap.m.Select
if ( !jQuery.sap.isDeclared('sap.m.Shell') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Shell.
jQuery.sap.declare("sap.m.Shell");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Shell.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getLogo logo} : sap.ui.core.URI</li>
 * <li>{@link #getShowLogout showLogout} : boolean (default: true)</li>
 * <li>{@link #getHeaderRightText headerRightText} : string</li>
 * <li>{@link #getAppWidthLimited appWidthLimited} : boolean (default: true)</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li>
 * <li>{@link #getHomeIcon homeIcon} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getApp app} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Shell#event:logout logout} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Shell control can be used as root element of applications, it can contain an App or SplitApp control.
 * The Shell provides some overarching functionality for the overall application and takes care of visual adaptation, like a frame around the App, on desktop browser platforms.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This control is still under discussion so this can be changed in future.
 * @name sap.m.Shell
 */
sap.ui.core.Control.extend("sap.m.Shell", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"logo" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"showLogout" : {type : "boolean", group : "Behavior", defaultValue : true},
		"headerRightText" : {type : "string", group : "Data", defaultValue : null},
		"appWidthLimited" : {type : "boolean", group : "Appearance", defaultValue : true},
		"backgroundColor" : {type : "string", group : "Appearance", defaultValue : null},
		"backgroundImage" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"backgroundRepeat" : {type : "boolean", group : "Appearance", defaultValue : false},
		"backgroundOpacity" : {type : "float", group : "Appearance", defaultValue : 1},
		"homeIcon" : {type : "object", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "app",
	aggregations : {
    	"app" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"logout" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Shell with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Shell.extend
 * @function
 */

sap.m.Shell.M_EVENTS = {'logout':'logout'};


/**
 * Getter for property <code>title</code>.
 * The application title which may or may not be displayed outside the actual application, depending on the available screen size.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.Shell#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setTitle
 * @function
 */


/**
 * Getter for property <code>logo</code>.
 * A logo to be displayed when the screen is sufficiently large.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>logo</code>
 * @public
 * @name sap.m.Shell#getLogo
 * @function
 */

/**
 * Setter for property <code>logo</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sLogo  new value for property <code>logo</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setLogo
 * @function
 */


/**
 * Getter for property <code>showLogout</code>.
 * Whether the Logout button should be displayed.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLogout</code>
 * @public
 * @name sap.m.Shell#getShowLogout
 * @function
 */

/**
 * Setter for property <code>showLogout</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLogout  new value for property <code>showLogout</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setShowLogout
 * @function
 */


/**
 * Getter for property <code>headerRightText</code>.
 * A text, like the name of the logged-in user, which should be displayed on the right side of the header (if there is enough space to display the header at all).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerRightText</code>
 * @public
 * @name sap.m.Shell#getHeaderRightText
 * @function
 */

/**
 * Setter for property <code>headerRightText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderRightText  new value for property <code>headerRightText</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setHeaderRightText
 * @function
 */


/**
 * Getter for property <code>appWidthLimited</code>.
 * Whether the width of the content (the aggregated app) should be limited or extend to the full screen width.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>appWidthLimited</code>
 * @public
 * @name sap.m.Shell#getAppWidthLimited
 * @function
 */

/**
 * Setter for property <code>appWidthLimited</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bAppWidthLimited  new value for property <code>appWidthLimited</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setAppWidthLimited
 * @function
 */


/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the Shell. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>backgroundColor</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#getBackgroundColor
 * @function
 */

/**
 * Setter for property <code>backgroundColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#setBackgroundColor
 * @function
 */


/**
 * Getter for property <code>backgroundImage</code>.
 * Background image of the Shell. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete Shell or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#getBackgroundImage
 * @function
 */

/**
 * Setter for property <code>backgroundImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#setBackgroundImage
 * @function
 */


/**
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole Shell (false, default) or whether it should be tiled (true).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#getBackgroundRepeat
 * @function
 */

/**
 * Setter for property <code>backgroundRepeat</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bBackgroundRepeat  new value for property <code>backgroundRepeat</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#setBackgroundRepeat
 * @function
 */


/**
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to improve readability of the shell content by making the background image partly transparent.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#getBackgroundOpacity
 * @function
 */

/**
 * Setter for property <code>backgroundOpacity</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fBackgroundOpacity  new value for property <code>backgroundOpacity</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.Shell#setBackgroundOpacity
 * @function
 */


/**
 * Getter for property <code>homeIcon</code>.
 * Sets the icon used for the mobile device home screen and the icon to be used for bookmarks by desktop browsers.
 * 
 * This property should be only set once and as early as possible. Subsequent calls replace the previous icon settings and may lead to different behavior depending on the browser.
 * 
 * Different image sizes for device home screen need to be given as PNG images, an ICO file needs to be given as desktop browser bookmark icon (other file formats may not work in all browsers).
 * The "precomposed" flag defines whether there is already a glow effect contained in the home screen images (or whether iOS should add such an effect). The given structure could look like this:
 * {
 * 'phone':'phone-icon_57x57.png',
 * 'phone@2':'phone-retina_114x114.png',
 * 'tablet':'tablet-icon_72x72.png',
 * 'tablet@2':'tablet-retina_144x144.png',
 * 'precomposed':true,
 * 'favicon':'favicon.ico'
 * }
 * 
 * See jQuery.sap.setIcons() for full documentation.
 * 
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>homeIcon</code>
 * @public
 * @name sap.m.Shell#getHomeIcon
 * @function
 */

/**
 * Setter for property <code>homeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setHomeIcon
 * @function
 */


/**
 * Getter for aggregation <code>app</code>.<br/>
 * A Shell contains an App or a SplitApp (they may be wrapped in a View). Other control types are not allowed.
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.Shell#getApp
 * @function
 */


/**
 * Setter for the aggregated <code>app</code>.
 * @param oApp {sap.ui.core.Control}
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#setApp
 * @function
 */
	

/**
 * Destroys the app in the aggregation 
 * named <code>app</code>.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#destroyApp
 * @function
 */


/**
 * Fired when the user presses the logout button/link. 
 *
 * @name sap.m.Shell#logout
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'logout' event of this <code>sap.m.Shell</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Shell</code>.<br/> itself. 
 *  
 * Fired when the user presses the logout button/link. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Shell</code>.<br/> itself.
 *
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#attachLogout
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'logout' event of this <code>sap.m.Shell</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Shell#detachLogout
 * @function
 */

/**
 * Fire event logout to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Shell} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Shell#fireLogout
 * @function
 */


// Start of sap/m/Shell.js

sap.m.Shell.prototype.init = function() {
	sap.ui.getCore().attachThemeChanged(jQuery.proxy(function(){
		this.invalidate(); // TODO: only adapt background-repeat and whatever is not applied directly with CSS
	}, this));
	
	jQuery(jQuery.proxy(function(){
		jQuery.sap.initMobile({
			statusBar: "default",
			hideBrowser: true
		});
	},this));
};

sap.m.Shell.prototype.onAfterRendering = function() {
	var ref = this.getDomRef().parentNode;
	// set all parent elements to 100% height this *should* be done by the application in CSS, but people tend to forget it...
	if (ref && !ref._sapui5_heightFixed) {
		ref._sapui5_heightFixed = true;
		while (ref && ref !== document.documentElement) {
			if (!ref.style.height) ref.style.height = "100%";
			ref = ref.parentNode;
		}
	}
	
	jQuery.sap.byId(this.getId() + "-content").css("height","");
};

sap.m.Shell.prototype.ontap = function(oEvent) {
	if (oEvent.target.className 
			&& oEvent.target.className.indexOf /* not available for SVG elements */ 
			&& oEvent.target.className.indexOf("sapMShellHeaderLogout") > -1) { // logout button clicked
		this.fireLogout();
	}
};


// API methods

sap.m.Shell.prototype.setTitle = function(sTitle) {
	jQuery.sap.byId(this.getId() + "-hdrTxt").text(sTitle);
	this.setProperty("title", sTitle, true); // no rerendering
	return this; 
};

sap.m.Shell.prototype.setAppWidthLimited = function(bLimit) {
	this.$().toggleClass("sapMShellAppWidthLimited", bLimit);
	this.setProperty("appWidthLimited", bLimit, true); // no rerendering 
	return this;
};

sap.m.Shell.prototype.setBackgroundOpacity = function(fOpacity) {
	if (fOpacity > 1 || fOpacity < 0) {
		jQuery.sap.log.warning("Invalid value " + fOpacity + " for Shell.setBackgroundOpacity() ignored. Valid values are: floats between 0 and 1.");
		return;
	}
	jQuery.sap.byId(this.getId() + "-BG").css("opacity", fOpacity);
	this.setProperty("backgroundOpacity", fOpacity, true); // no rerendering - live opacity change looks cooler
};

sap.m.Shell.prototype.setHomeIcon = function(oIcons) {
	this.setProperty("homeIcon", oIcons, true); // no rerendering
	jQuery.sap.setIcons(oIcons);
};
}; // end of sap.m.Shell
if ( !jQuery.sap.isDeclared('sap.m.Slider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Slider.
jQuery.sap.declare("sap.m.Slider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Slider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getMin min} : float (default: 0)</li>
 * <li>{@link #getMax max} : float (default: 100)</li>
 * <li>{@link #getStep step} : float (default: 1)</li>
 * <li>{@link #getProgress progress} : boolean (default: true)</li>
 * <li>{@link #getValue value} : float (default: 0)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Slider#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.Slider#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A slider is a user interface control that enables the user to adjust values in a specified numerical range.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Slider
 */
sap.ui.core.Control.extend("sap.m.Slider", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"stepUp", "stepDown"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '100%'},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"min" : {type : "float", group : "Data", defaultValue : 0},
		"max" : {type : "float", group : "Data", defaultValue : 100},
		"step" : {type : "float", group : "Data", defaultValue : 1},
		"progress" : {type : "boolean", group : "Misc", defaultValue : true},
		"value" : {type : "float", group : "Data", defaultValue : 0}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Slider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Slider.extend
 * @function
 */

sap.m.Slider.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>width</code>.
 * Defines the width of the slider element, this value can be provided in %, em, px… and all possible CSS measures.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Slider#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the slider.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Slider#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setEnabled
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Defines the visibility for the slider.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Slider#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setVisible
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The name property to be used in the HTML code for the slider (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Slider#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setName
 * @function
 */


/**
 * Getter for property <code>min</code>.
 * The minimum value of the slider.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>min</code>
 * @public
 * @name sap.m.Slider#getMin
 * @function
 */

/**
 * Setter for property <code>min</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fMin  new value for property <code>min</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setMin
 * @function
 */


/**
 * Getter for property <code>max</code>.
 * The maximum value of the slider.
 *
 * Default value is <code>100</code>
 *
 * @return {float} the value of property <code>max</code>
 * @public
 * @name sap.m.Slider#getMax
 * @function
 */

/**
 * Setter for property <code>max</code>.
 *
 * Default value is <code>100</code> 
 *
 * @param {float} fMax  new value for property <code>max</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setMax
 * @function
 */


/**
 * Getter for property <code>step</code>.
 * Define the size of every one step the slider takes between min and max.
 * 
 * The step needs to be a positive integer; if a negative number is provider, the default value will take place.
 * 
 * If the width of the slider converted to pixels is less than the range (max – min), the value will be rounded to multiples of the step size.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>step</code>
 * @public
 * @name sap.m.Slider#getStep
 * @function
 */

/**
 * Setter for property <code>step</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fStep  new value for property <code>step</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setStep
 * @function
 */


/**
 * Getter for property <code>progress</code>.
 * Show a progress bar for the slider.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>progress</code>
 * @public
 * @name sap.m.Slider#getProgress
 * @function
 */

/**
 * Setter for property <code>progress</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bProgress  new value for property <code>progress</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setProgress
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Define the value of the slider. If this value is lower than the minimum permited, the minimum will be override the value, or if the value is higher than maximun, the maximum will be override the value.
 *
 * Default value is <code>0</code>
 *
 * @return {float} the value of property <code>value</code>
 * @public
 * @name sap.m.Slider#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {float} fValue  new value for property <code>value</code>
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#setValue
 * @function
 */


/**
 * This event is triggered after the end user finishes interacting, if there is any change. 
 *
 * @name sap.m.Slider#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {float} oControlEvent.getParameters.value The current value of the slider after a change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br/> itself. 
 *  
 * This event is triggered after the end user finishes interacting, if there is any change. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 *
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> The current value of the slider after a change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Slider#fireChange
 * @function
 */


/**
 * This event is triggered during the dragging period, each time the slider value changes. 
 *
 * @name sap.m.Slider#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {float} oControlEvent.getParameters.value The current value of the slider after a live change.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Slider</code>.<br/> itself. 
 *  
 * This event is triggered during the dragging period, each time the slider value changes. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Slider</code>.<br/> itself.
 *
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Slider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Slider#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>float</code> The current value of the slider after a live change.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Slider#fireLiveChange
 * @function
 */


/**
 * Changes the slider’s value by the value given in the step attribute, multiplied by n.
 * 
 * The default value for n is 1.
 *
 * @name sap.m.Slider.prototype.stepUp
 * @function
 * @param {int} 
 *         iN
 *         The number of steps the slider goes up.

 * @type void
 * @public
 */


/**
 * Changes the slider’s value by the value given in the step attribute, multiplied by n.
 * 
 * The default value for n is 1.
 *
 * @name sap.m.Slider.prototype.stepDown
 * @function
 * @param {int} 
 *         iN
 *         The number of steps the slider goes down.

 * @type void
 * @public
 */


// Start of sap/m/Slider.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

sap.ui.core.EnabledPropagator.apply(sap.m.Slider.prototype, [true]);

sap.m.Slider.prototype._aEvents = ["ontouchstart", "ontouchmove", "ontouchend"];
sap.m.Slider.prototype._aVEvents = ["_ontouchstart", "_ontouchmove", "_ontouchend"];

/* =========================================================== */
/*                   begin: lifecycle methods                  */
/* =========================================================== */

/**
 * Required adaptations before rendering.
 *
 * @private
 */
sap.m.Slider.prototype.onBeforeRendering = function() {
	var fMin = this.getMin(),
		fMax = this.getMax(),
		fStep = this.getStep(),
		bMinbiggerThanMax = false,
		bError = false;

	/*
	 *	functional dependencies:
	 *
	 *	min				-> max
	 *	max				-> min
	 *
	 *	max, min		-> step
	 *	max, min, step	-> value
	 *
	 */

	// if the minimum is lower than or equal to the maximum, log a warning
	if (fMin >= fMax) {
		bMinbiggerThanMax = true;
		bError = true;
		jQuery.sap.log.warning("Warning: " + "Property wrong min: " + fMin + " >= max: " + fMax + " on ", this);
	}

	// if the step is negative or 0, set to 1 and log a warning
	if (fStep <= 0) {
		jQuery.sap.log.warning("Warning: " + "The step could not be negative on ", this);
		fStep = 1;

		// update the step to 1 and suppress re-rendering
		this.setProperty("step", fStep, true);
	}

	// the step can't be bigger than slider range, log a warning
	if (fStep > (fMax - fMin) && !bMinbiggerThanMax) {
		bError = true;
		jQuery.sap.log.warning("Warning: " + "Property wrong step: " + fStep + " > max: " + fMax + " - " + "min: " + fMin + " on ", this);
	}

	// update the value only if there aren't errors
	if (!bError) {
		this.setValue(this.getValue());

		// this is the current % value for the slider progress bar
		this._fProgressValue = this._getPercentFromValue(this.getValue());
	}
};

/**
 * Required adaptations after rendering.
 *
 * @private
 */
sap.m.Slider.prototype.onAfterRendering = function() {

	// bind only if the slider is enabled
	this.getEnabled() ? this._bindEvents() : this._unbindEvents();

	// slider control container jQuery reference
	this._$SliderContainer = this.$();

	// slider jQuery reference
	this._$Slider = this._$SliderContainer.children(".sapMSli");

	//
	this._$ProgressIndicator = this._$Slider.children(".sapMSliProgress");

	// handle jQuery reference
	this._$Handle = this._$Slider.children(".sapMSliHandle");

	// native input type range jQuery reference
	this._$Input = this._$SliderContainer.children("input.sapMSliInput");

	//	after all calculations, makes the control visible
	this._$SliderContainer.css("visibility", "");
};

/* =========================================================== */
/*                   end: lifecycle methods                    */
/* =========================================================== */


/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */

/**
 * Handle the touch start event happening on the slider.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Slider.prototype._ontouchstart = function(oEvent) {
	var $Target = jQuery(oEvent.target),
		fMin = this.getMin(),
		fValue;

	//	for control who need to know if they should handle events from the slider control
	oEvent.originalEvent._sapui_handledByControl = true;

	if (oEvent.targetTouches.length > 1) {	// suppress multiTouch events
		return;
	}

	// update the slider measures, those values may change in orientation change
	this._recalculateStyles();

	// initialization
	this._fDiffX = this._fSliderPaddingLeft;
	this._fStartValue = this.getValue();

	// add active state
	this._$Slider.addClass("sapMSliPressed");

	if ($Target.is(this._$Handle) || $Target.parent().is(this._$Handle)) {	// if the target is the slider handle

		/*
		 *	This property is needed only by the ontouchmove handle.
		 *	When a touch start event occurs, its value is calculated
		 *	by subtracting the thumb position left from the slider
		 *	control target pageX.
		 *	This is the necessary amount to be subtracted when the
		 *	ontouchmove	event handle is fired.
		 *	The result is a better dragging experience that behaves
		 *	much more in the way that the user expects.
		 */
		this._fDiffX = oEvent.targetTouches[0].pageX - this._$Handle.offset().left;
	} else {
		fValue = (((oEvent.targetTouches[0].pageX - this._fSliderPaddingLeft - this._fSliderOffsetLeft) / this._fSliderWidth) * (this.getMax() - fMin)) +  fMin;

		// update the slider value
		this.setValue(fValue);
		this.fireLiveChange({value: this.getValue()});
	}
};

/**
 * Handle the touch move event on the slider.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Slider.prototype._ontouchmove = function(oEvent) {
	var fMin = this.getMin(),
		fValue = this.getValue(),
		fNewValue = (((oEvent.targetTouches[0].pageX - this._fDiffX - this._fSliderOffsetLeft) / this._fSliderWidth) * (this.getMax() - fMin)) +  fMin;

	// validate, update the the slider value and the UI
	this.setValue(fNewValue);

	// new value validated
	fNewValue = this.getValue();

	if (fValue !== fNewValue) {
		this.fireLiveChange({value:fNewValue});
	}
};

/**
 * Handle the touch end event on the slider.
 *
 * @private
 */
sap.m.Slider.prototype._ontouchend = function() {
	var fValue = this.getValue();

	// remove active state
	this._$Slider.removeClass("sapMSliPressed");

	if (this._fStartValue !== fValue) {	// if the value if not the same
		this.fireChange({value: fValue});
	}

	// remove unused properties
	delete this._fDiffX;
	delete this._fStartValue;
};

/* ============================================================ */
/*                      end: event handlers                  	*/
/* ============================================================ */


/* =========================================================== */
/*                      begin: internal methods                */
/* =========================================================== */

/**
 * Recalculate styles.
 *
 * @private
 */
sap.m.Slider.prototype._recalculateStyles = function() {

	// slider width
	this._fSliderWidth = this._$SliderContainer.width();

	// slider padding left
	this._fSliderPaddingLeft = parseFloat(this._$SliderContainer.css("padding-left"));

	// slider offset left
	this._fSliderOffsetLeft = this._$SliderContainer.offset().left;

	// handle width
	this._fHandleWidth = this._$Handle.width();
};

/**
 * Bind events.
 *
 * @private
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 */
sap.m.Slider.prototype._bindEvents = function() {
	var i = 0;

	for (; i < this._aVEvents.length; i++) {
		this[this._aEvents[i]] = this[this._aVEvents[i]];
	}

	return this;
};

/**
 * Unbind events.
 *
 * @private
 * @return {sap.m.Slider} <code>this</code> to allow method chaining
 */
sap.m.Slider.prototype._unbindEvents = function() {
	var i = 0;

	for (; i < this._aVEvents.length; i++) {
		this[this._aEvents[i]] = null;
	}

	return this;
};

/**
 * Calculate percentage.
 *
 * @param {float} fValue the value from the slider
 * @private
 * @returns {float} percent
 */
sap.m.Slider.prototype._getPercentFromValue = function(fValue) {
	var fMin = this.getMin();

	// never round this number
	return ((fValue - fMin) / (this.getMax() - fMin)) * 100;
};

sap.m.Slider.prototype._validateN = function(n) {
	var sTypeofN = typeof n;

	if (sTypeofN === "undefined") {
		return 1;	// default n = 1
	} else if (sTypeofN !== "number") {
		jQuery.sap.log.warning('Warning: n needs to be a number', this);
		return 0;
	} else if (Math.floor(n) === n && isFinite(n)) {
		return n;
	} else {
		jQuery.sap.log.warning('Warning: n needs to be a finite interger', this);
		return 0;
	}
};

sap.m.Slider.prototype._setValue = function(fNewValue) {
	var fMin = this.getMin(),
		fMax = this.getMax(),
		fStep = this.getStep(),
		fValue = this.getValue(),
		fModStepVal = Math.abs(fNewValue % fStep),
		fPerVal;

	// validate the new value before arithmetic calculations
	if (typeof fNewValue !== "number" || !isFinite(fNewValue)) {
		jQuery.sap.log.error("Error:", '"fNewValue" needs to be a finite number of', this);
		return this;
	}

	// round the value to the nearest step
	fNewValue = fModStepVal * 2 >= fStep ? fNewValue + fStep - fModStepVal
											: fNewValue - fModStepVal;

	// validate that the value is between maximum and minimum
	fNewValue = fNewValue > fMax ? fMax
									: fNewValue < fMin ? fMin : fNewValue;

	//	Floating-point in JavaScript are IEEE 64 bit values and has some problems with big decimals.
	//	Round the final value to 5 digits after the decimal point.
	fNewValue = Number(fNewValue.toFixed(5));

	// update the value and suppress re-rendering
	this.setProperty("value", fNewValue, true);

	// if the value is the same, suppress DOM modifications and event fire
	if (fValue === this.getValue()) {
		return this;
	}

	if (this._$SliderContainer) {	//	after re-rendering

		// update the input type range value
		this._$Input[0].setAttribute("value", fNewValue);

		fPerVal = this._getPercentFromValue(fNewValue) + "%";

		if (this.getProgress()) {

			// update the progress indicator
			this._$ProgressIndicator[0].style.width = fPerVal;
		}

		// update the thumb position
		this._$Handle[0].style.left = fPerVal;
	}

	return this;
};

/* =========================================================== */
/*                      end: internal methods                  */
/* =========================================================== */


/* =========================================================== */
/*                   begin: API method                         */
/* =========================================================== */

sap.m.Slider.prototype.stepUp = function(n) {
	return this.setValue(this.getValue() + (this._validateN(n) * this.getStep()));
};

sap.m.Slider.prototype.stepDown = function(n) {
	return this.setValue(this.getValue() - (this._validateN(n) * this.getStep()));
};

sap.m.Slider.prototype.setValue = function(fNewValue) {

	/*
	 * The first time when setValue() method is called, other properties may
	 * be outdated, because the invocation order is not always the same.
	 *
	 * Overwriting this prototype method with an instance method after the first call,
	 * will ensure correct calculations.
	 *
	 */
	this.setValue = this._setValue;

	// update the value and suppress re-rendering
	return this.setProperty("value", fNewValue, true);
};

/* =========================================================== */
/*                     end: API method                         */
/* =========================================================== */
}; // end of sap.m.Slider
if ( !jQuery.sap.isDeclared('sap.m.SplitApp') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.SplitApp.
jQuery.sap.declare("sap.m.SplitApp");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new SplitApp.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li>
 * <li>{@link #getDefaultTransitionNameDetail defaultTransitionNameDetail} : string (default: "slide")</li>
 * <li>{@link #getDefaultTransitionNameMaster defaultTransitionNameMaster} : string (default: "slide")</li>
 * <li>{@link #getMode mode} : sap.m.SplitAppMode (default: sap.m.SplitAppMode.ShowHideMode)</li>
 * <li>{@link #getMasterButtonText masterButtonText} : string</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMasterPages masterPages} : sap.ui.core.Control[]</li>
 * <li>{@link #getDetailPages detailPages} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getInitialDetail initialDetail} : string | sap.ui.core.Control</li>
 * <li>{@link #getInitialMaster initialMaster} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.SplitApp#event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitApp#event:masterNavigate masterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitApp#event:afterMasterNavigate afterMasterNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitApp#event:masterButton masterButton} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitApp#event:beforeMasterOpen beforeMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitApp#event:afterMasterOpen afterMasterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitApp#event:beforeMasterClose beforeMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitApp#event:afterMasterClose afterMasterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitApp#event:detailNavigate detailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.SplitApp#event:afterDetailNavigate afterDetailNavigate} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * SplitApp is another root element of a UI5 mobile application besides App control. It maintains two NavContainers if runs in tablet and one NavContainer in phone. The display of master NavContainer depends on the portrait/landscape of the device and the mode of SplitApp.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.SplitApp
 */
sap.ui.core.Control.extend("sap.m.SplitApp", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"to", "backToPage", "toMaster", "toDetail", "backMaster", "backDetail", "showMaster", "hideMaster", "getCurrentPage", "getCurrentMasterPage", "getCurrentDetailPage", "backToTopMaster", "backToTopDetail", "addPage", "getMasterPage", "getDetailPage", "getPage"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"homeIcon" : {type : "any", group : "Misc", defaultValue : null},
		"defaultTransitionNameDetail" : {type : "string", group : "Appearance", defaultValue : "slide"},
		"defaultTransitionNameMaster" : {type : "string", group : "Appearance", defaultValue : "slide"},
		"mode" : {type : "sap.m.SplitAppMode", group : "Appearance", defaultValue : sap.m.SplitAppMode.ShowHideMode},
		"masterButtonText" : {type : "string", group : "Appearance", defaultValue : null},
		"backgroundColor" : {type : "string", group : "Appearance", defaultValue : null},
		"backgroundImage" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"backgroundRepeat" : {type : "boolean", group : "Appearance", defaultValue : false},
		"backgroundOpacity" : {type : "float", group : "Appearance", defaultValue : 1}
	},
	aggregations : {
    	"masterPages" : {type : "sap.ui.core.Control", multiple : true, singularName : "masterPage"}, 
    	"detailPages" : {type : "sap.ui.core.Control", multiple : true, singularName : "detailPage"}, 
    	"_navMaster" : {type : "sap.m.NavContainer", multiple : false, visibility : "hidden"}, 
    	"_navDetail" : {type : "sap.m.NavContainer", multiple : false, visibility : "hidden"}, 
    	"_navPopover" : {type : "sap.m.Popover", multiple : false, visibility : "hidden"}
	},
	associations : {
		"initialDetail" : {type : "sap.ui.core.Control", multiple : false}, 
		"initialMaster" : {type : "sap.ui.core.Control", multiple : false}
	},
	events : {
		"orientationChange" : {}, 
		"masterNavigate" : {}, 
		"afterMasterNavigate" : {}, 
		"masterButton" : {}, 
		"beforeMasterOpen" : {}, 
		"afterMasterOpen" : {}, 
		"beforeMasterClose" : {}, 
		"afterMasterClose" : {}, 
		"detailNavigate" : {}, 
		"afterDetailNavigate" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.SplitApp with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.SplitApp.extend
 * @function
 */

sap.m.SplitApp.M_EVENTS = {'orientationChange':'orientationChange','masterNavigate':'masterNavigate','afterMasterNavigate':'afterMasterNavigate','masterButton':'masterButton','beforeMasterOpen':'beforeMasterOpen','afterMasterOpen':'afterMasterOpen','beforeMasterClose':'beforeMasterClose','afterMasterClose':'afterMasterClose','detailNavigate':'detailNavigate','afterDetailNavigate':'afterDetailNavigate'};


/**
 * Getter for property <code>homeIcon</code>.
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * 
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * 
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>homeIcon</code>
 * @public
 * @name sap.m.SplitApp#getHomeIcon
 * @function
 */

/**
 * Setter for property <code>homeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#setHomeIcon
 * @function
 */


/**
 * Getter for property <code>defaultTransitionNameDetail</code>.
 * The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.
 *
 * Default value is <code>"slide"</code>
 *
 * @return {string} the value of property <code>defaultTransitionNameDetail</code>
 * @public
 * @name sap.m.SplitApp#getDefaultTransitionNameDetail
 * @function
 */

/**
 * Setter for property <code>defaultTransitionNameDetail</code>.
 *
 * Default value is <code>"slide"</code> 
 *
 * @param {string} sDefaultTransitionNameDetail  new value for property <code>defaultTransitionNameDetail</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#setDefaultTransitionNameDetail
 * @function
 */


/**
 * Getter for property <code>defaultTransitionNameMaster</code>.
 * The type of the transition/animation to apply when "to()" is called without defining the transition to use. The default is "slide", other options are: "fade" and "show" and the names of any registered custom transitions.
 *
 * Default value is <code>"slide"</code>
 *
 * @return {string} the value of property <code>defaultTransitionNameMaster</code>
 * @public
 * @name sap.m.SplitApp#getDefaultTransitionNameMaster
 * @function
 */

/**
 * Setter for property <code>defaultTransitionNameMaster</code>.
 *
 * Default value is <code>"slide"</code> 
 *
 * @param {string} sDefaultTransitionNameMaster  new value for property <code>defaultTransitionNameMaster</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#setDefaultTransitionNameMaster
 * @function
 */


/**
 * Getter for property <code>mode</code>.
 * This mode defines whether the master page will always be shown (in portrait and in landscape)[StretchCompressMode], or if it should be hidden when in protrait mode [ShowHideMode]. Default is ShowHideMode
 *
 * Default value is <code>ShowHideMode</code>
 *
 * @return {sap.m.SplitAppMode} the value of property <code>mode</code>
 * @public
 * @name sap.m.SplitApp#getMode
 * @function
 */

/**
 * Setter for property <code>mode</code>.
 *
 * Default value is <code>ShowHideMode</code> 
 *
 * @param {sap.m.SplitAppMode} oMode  new value for property <code>mode</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#setMode
 * @function
 */


/**
 * Getter for property <code>masterButtonText</code>.
 * This is the text shown in master button which has a default value "Navigation". This text is only shown in iOS platform and the icon from the current page in detail area is shown in the master button in the other platfroms.
 * 
 * The master button is shown/hidden depending on the orientation of device and also whether the master area is open or not. SplitApp manages the show/hide of master button by itself only when the page added to detail area are sap.m.Page with built-in header or sap.m.Page with built-in header which is wrapped by one or several sap.ui.core.mvc.View. Otherwise the show/hide of master button needs to be managed by the application.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>masterButtonText</code>
 * @public
 * @name sap.m.SplitApp#getMasterButtonText
 * @function
 */

/**
 * Setter for property <code>masterButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sMasterButtonText  new value for property <code>masterButtonText</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#setMasterButtonText
 * @function
 */


/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the SplitApp. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitApp or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>backgroundColor</code>
 * @public
 * @since 1.11.2
 * @name sap.m.SplitApp#getBackgroundColor
 * @function
 */

/**
 * Setter for property <code>backgroundColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.SplitApp#setBackgroundColor
 * @function
 */


/**
 * Getter for property <code>backgroundImage</code>.
 * Background image of the SplitApp. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete SplitApp or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @since 1.11.2
 * @name sap.m.SplitApp#getBackgroundImage
 * @function
 */

/**
 * Setter for property <code>backgroundImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.SplitApp#setBackgroundImage
 * @function
 */


/**
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole SplitApp (false) or whether it should be tiled (true).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @public
 * @since 1.11.2
 * @name sap.m.SplitApp#getBackgroundRepeat
 * @function
 */

/**
 * Setter for property <code>backgroundRepeat</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bBackgroundRepeat  new value for property <code>backgroundRepeat</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.SplitApp#setBackgroundRepeat
 * @function
 */


/**
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @public
 * @since 1.11.2
 * @name sap.m.SplitApp#getBackgroundOpacity
 * @function
 */

/**
 * Setter for property <code>backgroundOpacity</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fBackgroundOpacity  new value for property <code>backgroundOpacity</code>
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.SplitApp#setBackgroundOpacity
 * @function
 */


/**
 * Getter for aggregation <code>masterPages</code>.<br/>
 * The content entities between which this SplitApp navigates in master area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.SplitApp#getMasterPages
 * @function
 */


/**
 * Inserts a masterPage into the aggregation named <code>masterPages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oMasterPage the masterPage to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the masterPage should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the masterPage is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the masterPage is inserted at 
 *             the last position        
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#insertMasterPage
 * @function
 */

/**
 * Adds some masterPage <code>oMasterPage</code> 
 * to the aggregation named <code>masterPages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage to add; if empty, nothing is inserted
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#addMasterPage
 * @function
 */

/**
 * Removes an masterPage from the aggregation named <code>masterPages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vMasterPage the masterPage to remove or its index or id
 * @return {sap.ui.core.Control} the removed masterPage or null
 * @public
 * @name sap.m.SplitApp#removeMasterPage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>masterPages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.SplitApp#removeAllMasterPages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>masterPages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oMasterPage the masterPage whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.SplitApp#indexOfMasterPage
 * @function
 */
	

/**
 * Destroys all the masterPages in the aggregation 
 * named <code>masterPages</code>.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#destroyMasterPages
 * @function
 */


/**
 * Getter for aggregation <code>detailPages</code>.<br/>
 * The content entities between which this SplitApp navigates in detail area. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * 
 * These aggregated controls will receive navigation events like {@link sap.m.NavContainerChild#beforeShow beforeShow}, they are documented in the pseudo interface {@link sap.m.NavContainerChild sap.m.NavContainerChild}
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.SplitApp#getDetailPages
 * @function
 */


/**
 * Inserts a detailPage into the aggregation named <code>detailPages</code>.
 *
 * @param {sap.ui.core.Control}
 *          oDetailPage the detailPage to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the detailPage should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the detailPage is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the detailPage is inserted at 
 *             the last position        
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#insertDetailPage
 * @function
 */

/**
 * Adds some detailPage <code>oDetailPage</code> 
 * to the aggregation named <code>detailPages</code>.
 *
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage to add; if empty, nothing is inserted
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#addDetailPage
 * @function
 */

/**
 * Removes an detailPage from the aggregation named <code>detailPages</code>.
 *
 * @param {int | string | sap.ui.core.Control} vDetailPage the detailPage to remove or its index or id
 * @return {sap.ui.core.Control} the removed detailPage or null
 * @public
 * @name sap.m.SplitApp#removeDetailPage
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>detailPages</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.SplitApp#removeAllDetailPages
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>detailPages</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oDetailPage the detailPage whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.SplitApp#indexOfDetailPage
 * @function
 */
	

/**
 * Destroys all the detailPages in the aggregation 
 * named <code>detailPages</code>.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#destroyDetailPages
 * @function
 */


/**
 * Sets the initial detail page, which is shown on application launch.
 *
 * @return {string} Id of the element which is the current target of the <code>initialDetail</code> association, or null
 * @public
 * @name sap.m.SplitApp#getInitialDetail
 * @function
 */

/**
 * Sets the initial detail page, which is shown on application launch.
 *
 * @param {string | sap.ui.core.Control} vInitialDetail 
 *    Id of an element which becomes the new target of this <code>initialDetail</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#setInitialDetail
 * @function
 */


	
/**
 * Sets the initial master page, which is shown on application launch.
 *
 * @return {string} Id of the element which is the current target of the <code>initialMaster</code> association, or null
 * @public
 * @name sap.m.SplitApp#getInitialMaster
 * @function
 */

/**
 * Sets the initial master page, which is shown on application launch.
 *
 * @param {string | sap.ui.core.Control} vInitialMaster 
 *    Id of an element which becomes the new target of this <code>initialMaster</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#setInitialMaster
 * @function
 */


	
/**
 * This event will be fired when orientation (portrait/landscape) is changed. 
 *
 * @name sap.m.SplitApp#orientationChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.landscape Returns true if the device is in landscape.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * This event will be fired when orientation (portrait/landscape) is changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachOrientationChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachOrientationChange
 * @function
 */

/**
 * Fire event orientationChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'landscape' of type <code>boolean</code> Returns true if the device is in landscape.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireOrientationChange
 * @function
 */


/**
 * The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @name sap.m.SplitApp#masterNavigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'masterNavigate' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages in master area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachMasterNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'masterNavigate' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachMasterNavigate
 * @function
 */

/**
 * Fire event masterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireMasterNavigate
 * @function
 */


/**
 * The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @name sap.m.SplitApp#afterMasterNavigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterMasterNavigate' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages in master area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachAfterMasterNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterMasterNavigate' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachAfterMasterNavigate
 * @function
 */

/**
 * Fire event afterMasterNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireAfterMasterNavigate
 * @function
 */


/**
 * Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitApp control does not handle the placement of the master button automatically. 
 *
 * @name sap.m.SplitApp#masterButton
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'masterButton' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * Event gets triggered when a Master Button needs to be shown or hidden. This is necessary for custom headers when the SplitApp control does not handle the placement of the master button automatically. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachMasterButton
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'masterButton' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachMasterButton
 * @function
 */

/**
 * Fire event masterButton to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireMasterButton
 * @function
 */


/**
 * This event is fired before the master area is opened. 
 *
 * @name sap.m.SplitApp#beforeMasterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeMasterOpen' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * This event is fired before the master area is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachBeforeMasterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeMasterOpen' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachBeforeMasterOpen
 * @function
 */

/**
 * Fire event beforeMasterOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireBeforeMasterOpen
 * @function
 */


/**
 * This event is fired when the master area is fully opened after animation if there is. 
 *
 * @name sap.m.SplitApp#afterMasterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterMasterOpen' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * This event is fired when the master area is fully opened after animation if there is. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachAfterMasterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterMasterOpen' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachAfterMasterOpen
 * @function
 */

/**
 * Fire event afterMasterOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireAfterMasterOpen
 * @function
 */


/**
 * This event is fired before the master area is closed. 
 *
 * @name sap.m.SplitApp#beforeMasterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeMasterClose' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * This event is fired before the master area is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachBeforeMasterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeMasterClose' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachBeforeMasterClose
 * @function
 */

/**
 * Fire event beforeMasterClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireBeforeMasterClose
 * @function
 */


/**
 * This event is fired when the master area is fully closed after the animation when there is. 
 *
 * @name sap.m.SplitApp#afterMasterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterMasterClose' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * This event is fired when the master area is fully closed after the animation when there is. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachAfterMasterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterMasterClose' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachAfterMasterClose
 * @function
 */

/**
 * Fire event afterMasterClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireAfterMasterClose
 * @function
 */


/**
 * The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @name sap.m.SplitApp#detailNavigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which was shown before the current navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which was shown before the current navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which will be shown after the current navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which will be shown after the current navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether this is a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this is a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this is a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'detailNavigate' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages in detail area has been triggered. The transition (if any) to the new page has not started yet.
 * This event can be aborted by the application with preventDefault(), which means that there will be no navigation. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachDetailNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'detailNavigate' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachDetailNavigate
 * @function
 */

/**
 * Fire event detailNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which was shown before the current navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which was shown before the current navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which will be shown after the current navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which will be shown after the current navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which is currently navigated to) has not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether this is a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this is a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this is a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireDetailNavigate
 * @function
 */


/**
 * The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @name sap.m.SplitApp#afterDetailNavigate
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.ui.core.Control} oControlEvent.getParameters.from The page which had been shown before navigation.
 * @param {string} oControlEvent.getParameters.fromId The ID of the page which had been shown before navigation.
 * @param {sap.ui.core.Control} oControlEvent.getParameters.to The page which is now shown after navigation.
 * @param {string} oControlEvent.getParameters.toId The ID of the page which is now shown after navigation.
 * @param {boolean} oControlEvent.getParameters.firstTime Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.
 * @param {boolean} oControlEvent.getParameters.isTo Whether was a forward navigation, triggered by "to()".
 * @param {boolean} oControlEvent.getParameters.isBack Whether this was a back navigation, triggered by "back()".
 * @param {boolean} oControlEvent.getParameters.isBackToTop Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {boolean} oControlEvent.getParameters.isBackToPage Whether this was a navigation to the root page, triggered by "backToTop()".
 * @param {string} oControlEvent.getParameters.direction How the navigation was triggered, possible values are "to", "back", and "backToTop".
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterDetailNavigate' event of this <code>sap.m.SplitApp</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.SplitApp</code>.<br/> itself. 
 *  
 * The event is fired when navigation between two pages in detail area has completed. In case of animated transitions this event is fired with some delay after the "navigate" event. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.SplitApp</code>.<br/> itself.
 *
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#attachAfterDetailNavigate
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterDetailNavigate' event of this <code>sap.m.SplitApp</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.SplitApp#detachAfterDetailNavigate
 * @function
 */

/**
 * Fire event afterDetailNavigate to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'from' of type <code>sap.ui.core.Control</code> The page which had been shown before navigation.</li>
 * <li>'fromId' of type <code>string</code> The ID of the page which had been shown before navigation.</li>
 * <li>'to' of type <code>sap.ui.core.Control</code> The page which is now shown after navigation.</li>
 * <li>'toId' of type <code>string</code> The ID of the page which is now shown after navigation.</li>
 * <li>'firstTime' of type <code>boolean</code> Whether the "to" page (more precisely: a control with the ID of the page which has been navigated to) had not been shown/navigated to before.</li>
 * <li>'isTo' of type <code>boolean</code> Whether was a forward navigation, triggered by "to()".</li>
 * <li>'isBack' of type <code>boolean</code> Whether this was a back navigation, triggered by "back()".</li>
 * <li>'isBackToTop' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'isBackToPage' of type <code>boolean</code> Whether this was a navigation to the root page, triggered by "backToTop()".</li>
 * <li>'direction' of type <code>string</code> How the navigation was triggered, possible values are "to", "back", and "backToTop".</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.SplitApp} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.SplitApp#fireAfterDetailNavigate
 * @function
 */


/**
 * Navigate to given page inside the SplitApp. The navigation is done inside the master area if the page has been added, otherwise it tries to do the page navigation in the detail area.
 *
 * @name sap.m.SplitApp.prototype.to
 * @function
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.

 * @type sap.m.SplitApp
 * @public
 * @since 1.10.0
 */


/**
 * Navigates back to the nearest previous page in the SplitApp history with the given ID. If there is no such page among the previous pages, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 * 
 * Calling this navigation method triggers first the (cancelable) "navigate" event on the SplitApp, then the "beforeHide" pseudo event on the source page and "beforeFirstShow" (if applicable) and"beforeShow" on the target page. Later - after the transition has completed - the "afterShow" pseudo event is triggered on the target page and "afterHide" on the page which has been left. The given backData object is available in the "beforeFirstShow", "beforeShow" and "afterShow" event object as "data" property. The original "data" object from the "to" navigation is also available in these event objects.
 *
 * @name sap.m.SplitApp.prototype.backToPage
 * @function
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.SplitApp
 * @public
 * @since 1.10.0
 */


/**
 * navigate to given master page
 *
 * @name sap.m.SplitApp.prototype.toMaster
 * @function
 * @param {string} 
 *         sPageId
 *         The screen to which drilldown should happen. The ID or the control itself can be given.
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData

 * @since 1.7.1 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameters

 * @since 1.7.1 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.

 * @type sap.m.SplitApp
 * @public
 */


/**
 * navigate to given detail page
 *
 * @name sap.m.SplitApp.prototype.toDetail
 * @function
 * @param {string} 
 *         sPageId
 *         
 * @param {string} 
 *         sTransitionName
 *         The type of the transition/animation to apply. This parameter can be omitted; then the default is "slide" (horizontal movement from the right).
 * Other options are: "fade", "flip", and "show" and the names of any registered custom transitions.
 * 
 * None of the standard transitions is currently making use of any given transition parameters.
 * @param {object} 
 *         oData
 *         This optional object can carry any payload data which should be made available to the target page. The "beforeShow" event on the target page will contain this data object as "data" property.
 * 
 * Use case: in scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can contain additional information for the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * 
 * For a proper parameter order, the "data" parameter must be given when the "transitionParameters" parameter is used. (it can be given as "null")
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.
 * The "show", "slide" and "fade" transitions do not use any parameter.

 * @type sap.m.SplitApp
 * @public
 */


/**
 * navigate back within MasterView
 *
 * @name sap.m.SplitApp.prototype.backMaster
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.SplitApp
 * @public
 */


/**
 * navigate back within DetailView
 *
 * @name sap.m.SplitApp.prototype.backDetail
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.m.SplitApp
 * @public
 */


/**
 * When in ShowHideMode and the device is in portrait mode, this function can be used to make the master page visible.
 *
 * @name sap.m.SplitApp.prototype.showMaster
 * @function

 * @type sap.m.SplitApp
 * @public
 */


/**
 * When in ShowHideMode and the device is in portrait mode, this function can be used to hide the master page.
 *
 * @name sap.m.SplitApp.prototype.hideMaster
 * @function

 * @type sap.m.SplitApp
 * @public
 */


/**
 * Returns the current shown page either in master area or in detail area. When the parameter is set to true, the current page in master area is returned. Otherwise the current page in detail area is returned.
 * 
 * This method is provided mainly for providing API consistency between sap.m.SplitApp and sap.m.App. So that the same code line can be reused.
 *
 * @name sap.m.SplitApp.prototype.getCurrentPage
 * @function
 * @param {boolean} 
 *         bMaster
 *         States if this function returns the current page in master area. If it's set to false, the current page in detail area will be returned.

 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */


/**
 * Returns the current shown master page.
 *
 * @name sap.m.SplitApp.prototype.getCurrentMasterPage
 * @function

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Returns the current shown detail page.
 *
 * @name sap.m.SplitApp.prototype.getCurrentDetailPage
 * @function

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Navigates back to the initial/top level of Master (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 *
 * @name sap.m.SplitApp.prototype.backToTopMaster
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Navigates back to the initial/top level of Detail (this is the element aggregated as "initialPage", or the first added element). If already on the initial page, nothing happens.
 * The transition effect which had been used to get to the current page is inverted and used for this navigation.
 *
 * @name sap.m.SplitApp.prototype.backToTopDetail
 * @function
 * @param {object} 
 *         oBackData
 *         This optional object can carry any payload data which should be made available to the target page of the back navigation. The event on the target page will contain this data object as "backData" property. (The original data from the "to()" navigation will still be available as "data" property.)
 * 
 * In scenarios where the entity triggering the navigation can or should not directly initialize the target page, it can fill this object and the target page itself (or a listener on it) can take over the initialization, using the given data.
 * For back navigation this can be used e.g. when returning from a detail page to transfer any settings done there.
 * 
 * When the "transitionParameters" object is used, this "data" object must also be given (either as object or as null) in order to have a proper parameter order.
 * @param {object} 
 *         oTransitionParameter
 *         This optional object can give additional information to the transition function, like the DOM element which triggered the transition or the desired transition duration.
 * The animation type can NOT be selected here - it is always the inverse of the "to" navigation.
 * 
 * In order to use the "transitionParameters" property, the "data" property must be used (at least "null" must be given) for a proper parameter order.
 * 
 * NOTE: it depends on the transition function how the object should be structured and which parameters are actually used to influence the transition.

 * @type sap.ui.core.Control
 * @public
 */


/**
 * Add a content entity either to master area or detail area depending on the master parameter.
 * 
 * This method is provided mainly for providing API consistency between sap.m.SplitApp and sap.m.App. So that the same code line can be reused.
 *
 * @name sap.m.SplitApp.prototype.addPage
 * @function
 * @param {sap.ui.core.Control} 
 *         oPage
 *         The content entities between which this SplitApp navigates in either master area or detail area depending on the master parameter. These can be of type sap.m.Page, sap.ui.core.View, sap.m.Carousel or any other control with fullscreen/page semantics.
 * @param {boolean} 
 *         bMaster
 *         States if the page should be added to the master area. If it's set to false, the page is added to detail area.

 * @type sap.m.SplitApp
 * @public
 * @since 1.11.1
 */


/**
 * Returns the page with the given id in master area. If there's no page that has the given id, null is returned.
 *
 * @name sap.m.SplitApp.prototype.getMasterPage
 * @function
 * @param {string} 
 *         sId
 *         The id of the page that needs to be fetched.

 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */


/**
 * Returns the page with the given id in detail area. If there's no page that has the given id, null is returned.
 *
 * @name sap.m.SplitApp.prototype.getDetailPage
 * @function
 * @param {string} 
 *         sId
 *         The id of the page that needs to be fetched.

 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */


/**
 * Returns the page with the given id from either master area or detail area depending on the master parameter. If there's no page that has the given id, null is returned.
 *
 * @name sap.m.SplitApp.prototype.getPage
 * @function
 * @param {string} 
 *         sId
 *         The id of the page that needs to be fetched.
 * @param {boolean} 
 *         bMaster
 *         If the page with given id should be fetched from the master area. If it's set to false, the page will be fetched from detail area.

 * @type sap.ui.core.Control
 * @public
 * @since 1.11.1
 */


// Start of sap/m/SplitApp.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**************************************************************
* START - Life Cycle Methods
**************************************************************/
sap.m.SplitApp.prototype.init = function() {
	var oSplitApp = this;
	this._isMie9 = false;
	this._isPlatformDependent = sap.ui.core.theming.Parameters.get("sapMPlatformDependent") == "true";
	//Check for IE9
	if(jQuery.browser.msie && jQuery.browser.fVersion < 10) {
		this._isMie9 = true;
	}
	this.oCore = sap.ui.getCore();
	if(!jQuery.device.is.phone) {
		this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");
		//initialize the master nav container
		this._oMasterNav = new sap.m.NavContainer(this.getId() + "-Master", {
			width: "",
			navigate: function(oEvent){
				oSplitApp._handleNavigationEvent(oEvent, false, true);
			},
			afterNavigate: function(oEvent){
				oSplitApp._handleNavigationEvent(oEvent, true, true);
			}
		});
		
		//initialize the master nav container
		this._oDetailNav = new sap.m.NavContainer(this.getId() + "-Detail", {
			width: "",
			navigate: function(oEvent){
				oSplitApp._handleNavigationEvent(oEvent, false, false);
			},
			afterNavigate: function(oEvent){
				oSplitApp._handleNavigationEvent(oEvent, true, false);
			}
		});
		
		this.setAggregation("_navMaster", this._oMasterNav, true);
		this.setAggregation("_navDetail", this._oDetailNav, true);
		
		//initialize the navigation button
		this._oShowMasterBtn = new sap.m.Button(this.getId() + "-MasterBtn", {
			text: (jQuery.os.ios && this._isPlatformDependent) ? this._rb.getText("SPLITAPP_NAVBUTTON_TEXT") : "",
			icon: !this._isPlatformDependent ? sap.ui.core.IconPool.getIconURI("menu2") : "",
			type: (jQuery.os.ios || !this._isPlatformDependent) ? sap.m.ButtonType.Default : sap.m.ButtonType.Up
		}).addStyleClass("sapMSplitAppMasterBtn"); 
		
		this._oShowMasterBtn.addDelegate({
			ontap: function(oEvent){
				oEvent._masterButtonClickedForSplitApp = true;
			}
		});
		
		//initialize the popover
		this._oPopOver = new sap.m.Popover(this.getId() + "-Popover", {
			placement: sap.m.PlacementType.Bottom,
			showHeader: false, 
			contentWidth: "320px",
			contentHeight: "600px",
			beforeOpen: function(){
				oSplitApp.fireBeforeMasterOpen();
			},
			beforeClose: function(){
				oSplitApp.fireAfterMasterOpen();
			},
			afterOpen: function(){
				oSplitApp.fireAfterMasterOpen();
			},
			afterClose: function(){
				oSplitApp.fireAfterMasterClose();
			}
		}).addStyleClass("sapMSplitAppPopover");
		
		this.setAggregation("_navPopover", this._oPopOver, true);
	}else {
		//master nav and detail nav are the same in phone
		this._oMasterNav = this._oDetailNav =  new sap.m.NavContainer();
		this.setAggregation("_navMaster", this._oMasterNav, true);
	}
	
	this._oldIsLandscape = jQuery.device.is.landscape;
	//if master page is open when device is in portrait and show/hide mode
	this._bMasterisOpen = false; 

	jQuery(jQuery.proxy(function(){
		jQuery.sap.initMobile({
			viewport: !this._debugZoomAndScroll,
			statusBar: "default",
			hideBrowser: true,
			preventScroll: !this._debugZoomAndScroll,
			homeIcon: this.getHomeIcon(),
			rootId: this.getId()
		});
	},this));
};

sap.m.SplitApp.prototype.exit = function() {
	jQuery(window).unbind("resize", this._handleOrientationChange);
	if(this._oShowMasterBtn) {
		this._oShowMasterBtn.destroy();
		this._oShowMasterBtn = null;
	}
};

sap.m.SplitApp.prototype.onAfterRendering = function() {
	var ref = this.getDomRef().parentNode;
	// set all parent elements to 100% height this *should* be done by the application in CSS, but people tend to forget it...
	if (ref && !ref._sapui5_heightFixed) {
		ref._sapui5_heightFixed = true;
		while (ref && ref !== document.documentElement) {
			var $ref = jQuery(ref);
			if ($ref.hasClass("sapMShellContent")) { // Shell as parent does this already
				break;
			}
			if (!ref.style.height) ref.style.height = "100%";
			ref = ref.parentNode;
		}
	}
	
	if(!jQuery.device.is.phone) {
		if(this._oPopOver.isOpen()){
			this._oPopOver.close();
		}
		jQuery(window).bind("resize", jQuery.proxy(this._handleOrientationChange, this));
	}
	
	if(jQuery.browser.msie){
		this._oMasterNav.$().append('<iframe class="sapMSplitAppMasterBlindLayer" src="about:blank"></iframe>')
	}
};
/**************************************************************
* END - Life Cycle Methods
**************************************************************/

/**************************************************************
* START - Touch Event Handlers
**************************************************************/
sap.m.SplitApp.prototype.ontouchstart = function(oEvent){
	if(!jQuery.device.is.phone){
		if(oEvent.originalEvent && oEvent.originalEvent._sapui_handledByControl){
			this._bIgnoreSwipe = true;
		}else{
			this._bIgnoreSwipe = false;
		}
	}
};

sap.m.SplitApp.prototype.onswiperight = function(oEvent) {
	//only enabled on tablet, not phone and not desktop
	if(jQuery.device.is.tablet && this._portraitHide() && !this._bIgnoreSwipe) {
		//if event is already handled by inner control, master won't be shown.
		//this fix the problem when for example, carousel control in rendered in detail area.
		//CSN 2013 224661
		if(!this._bDetailNavButton)
		this.showMaster();
	}
};

//handles closing of master navContainer and navigation inside it
sap.m.SplitApp.prototype.ontap = function(oEvent) {
	if(!jQuery.device.is.phone) {
		//var _bIsNavigate = false, 
		var	_bButtonIsBack = !!oEvent._navButtonClickedForSplitApp,
			_bIsMasterNav = true;
		/*if(this._existsOnParentChain(oEvent.srcControl, sap.m.ListItemBase, this._oMasterNav)){
			_bIsNavigate = true;
		}
		*/
		if(jQuery(oEvent.target).parents(".sapMSplitAppDetail").length > 0) {
			_bIsMasterNav = false;
		}

		//when press not in MasterNav, master will be hidden
		if(!this._oldIsLandscape && !_bIsMasterNav && !_bButtonIsBack) {
			if(this.getMode() == "ShowHideMode") {
				if(this._bMasterisOpen){
					this.hideMaster();
				}
			}
		}

		if(!this._oldIsLandscape && oEvent._masterButtonClickedForSplitApp) {
			if(this.getMode() == "PopoverMode") {
				if(!this._oPopOver.oPopup.isOpen()){
					this._oPopOver.openBy(this._oShowMasterBtn, true);
				}else {
					this._oPopOver.close();
				}
			} else {
				this.showMaster();
			}
		}
	}
};

sap.m.SplitApp.prototype.onswipeleft = function(oEvent) {
	//only enabled on tablet, not phone and not desktop
	if(jQuery.device.is.tablet && this._portraitHide() && !this._bIgnoreSwipe ) {
		this.hideMaster();
	}
};
/**************************************************************
* End - Touch Event Handlers
**************************************************************/

/**************************************************************
* START - Public methods
**************************************************************/

sap.m.SplitApp.prototype.to = function(pageId, transitionName, data, oTransitionParameters) {
	if (this._oMasterNav.getPage(pageId)) {
		this._oMasterNav.to(pageId, transitionName, data, oTransitionParameters);
	} else {
		this._oDetailNav.to(pageId, transitionName, data, oTransitionParameters);
	}
};

sap.m.SplitApp.prototype.backToPage = function(pageId, backData, oTransitionParameters) {
	if (this._oMasterNav.getPage(pageId)) {
		this._oMasterNav.backToPage(pageId, backData, oTransitionParameters);
	} else {
		this._oDetailNav.backToPage(pageId, backData, oTransitionParameters);
	}
};

sap.m.SplitApp.prototype.toMaster = function(pageId, transitionName, data, oTransitionParameters) {
	this._oMasterNav.to(pageId, transitionName, data, oTransitionParameters);
};

sap.m.SplitApp.prototype.backMaster = function(backData, oTransitionParameters) {
	this._oMasterNav.back(backData, oTransitionParameters);
};

sap.m.SplitApp.prototype.backMasterToPage = function(pageId, backData, oTransitionParameters) {
	this._oMasterNav.backToPage(pageId, backData, oTransitionParameters);
};

sap.m.SplitApp.prototype.toDetail = function(pageId, transitionName, data, oTransitionParameters) {
	this._oDetailNav.to(pageId, transitionName, data, oTransitionParameters);
};

sap.m.SplitApp.prototype.backDetail = function(backData, oTransitionParameters) {
	this._oDetailNav.back(backData, oTransitionParameters);
};

sap.m.SplitApp.prototype.backDetailToPage = function(pageId, backData, oTransitionParameters) {
	this._oDetailNav.backToPage(pageId, backData, oTransitionParameters);
};

sap.m.SplitApp.prototype.backToTopMaster = function(backData, oTransitionParameters) {
	this._oMasterNav.backToTop(backData, oTransitionParameters);
};

sap.m.SplitApp.prototype.backToTopDetail = function(backData, oTransitionParameters) {
	this._oDetailNav.backToTop(backData, oTransitionParameters);
};

sap.m.SplitApp.prototype.addMasterPage = function(oPage) {
	var oRealPage = this._getRealPage(oPage);
	
	if(oRealPage && oRealPage._navBtn){
		oRealPage._navBtn.addDelegate({
			ontap: function(oEvent){
				oEvent._navButtonClickedForSplitApp = true;
			}
		});
	}
	this._oMasterNav.addPage(oPage);
	return this;
};

sap.m.SplitApp.prototype.addDetailPage = function(oPage) {
	var oSplitApp = this,
		oRealPage = this._getRealPage(oPage),
		oCore = this.oCore,
		sPageId = oRealPage ? oRealPage.getId() : "";
	
	//processing the header in page
	oPage.addDelegate({
		onBeforeFirstShow: function(){
			if(oRealPage){
				var oNavButton = oCore.byId(sPageId + "-navButton"),
					oIconImage = oCore.byId(sPageId + "-icon");
				if(!jQuery.device.is.phone){
					if(oNavButton){
						//oNavButton.addStyleClass("sapMSplitAppHiddenChild");
					}
					if(oIconImage){
						//oIconImage.addStyleClass("sapMSplitAppHiddenChild");
					}
				}
			}
		},
		onBeforeShow: function(){
			if(oRealPage){
				if(!jQuery.device.is.phone){
					//now it's a tablet
					//this is the initialization of header in page inside the detail navigation container
					//rules are displayed below
					// 1. navigation button is completely removed from the page in detail nav container
					// 2. iOS: show title if there is
					// 3: Android: Icon isn't shown directly in header, the icon is added to the showMasterButton.
					// 4: Android: show title in portrait mode, hide title in landscape
					if((oSplitApp._portraitHide() || oSplitApp._portraitPopover()) && (!oSplitApp._bMasterisOpen || oSplitApp._bMasterClosing)) {
						oSplitApp._setMasterButton(oRealPage, jQuery.proxy(oSplitApp._setTitleVisibility, oSplitApp));
					}else{
						oSplitApp._setTitleVisibility(oRealPage);
					}
				}
			}
		}
	});
	
	if(oRealPage){
		oRealPage.addDelegate({
			//before rendering is used in order to avoid invalidate in renderer (set button to the header in page)
			onBeforeRendering: function(){
				if(!jQuery.device.is.phone) {
					if(oSplitApp._portraitHide()) {
						if(!oSplitApp._bMasterisOpen || oSplitApp._bMasterClosing){
							oSplitApp._setMasterButton(oRealPage);
						}
					}else if(oSplitApp._portraitPopover()) {
						oSplitApp._setMasterButton(oRealPage);
					}else {
						oSplitApp._removeMasterButton(oRealPage);
					}
				}
			}
		});
	}
	
	this._oDetailNav.addPage(oPage);
	return this;
};

sap.m.SplitApp.prototype.addPage = function(oPage, bMaster){
	if(bMaster){
		return this.addMasterPage(oPage);
	}else{
		return this.addDetailPage(oPage);
	}
};

sap.m.SplitApp.prototype.showMaster = function() {
	var _this$ = this._oMasterNav.$(),
		that = this,
		_curPage = this._getRealPage(this._oDetailNav.getCurrentPage());
	if(this._portraitPopover()) {
        if(!this._oPopOver.isOpen()){
        	function afterPopoverOpen(){
        		this._oPopOver.detachAfterOpen(afterPopoverOpen, this);
        		this._bMasterOpening = false;
        		this._bMasterisOpen = true;
        		this.fireAfterMasterOpen();
        	}
        	this._oPopOver.attachAfterOpen(afterPopoverOpen, this);
        	this.fireBeforeMasterOpen();
        	this._oPopOver.openBy(this._oShowMasterBtn, true);
        	this._bMasterOpening = true;
        }
	}else{
		if(this._portraitHide() && (!this._bMasterisOpen || this._bMasterClosing)) {
			if(this._isMie9) {
				this._oMasterNav.$().css("width", "320px");
				_this$.animate({
					left: "+=320"
				}, {
					duration: 300
				});
				this._bMasterisOpen = true;
				that._bMasterOpening = false;
				this._removeMasterButton(_curPage, jQuery.proxy(this._setTitleVisibility, this));
			}
			_this$.bind((jQuery.os.ios || !this._isPlatformDependent) ? "webkitTransitionEnd transitionend" : "webkitAnimationEnd animationend", function(){
				jQuery(this).unbind("webkitTransitionEnd transitionend");
				jQuery(this).unbind("webkitAnimationEnd animationend");
				that._bMasterOpening = false;
				that._bMasterisOpen = true;
				that._removeMasterButton(_curPage, jQuery.proxy(that._setTitleVisibility, that));
				that.fireAfterMasterOpen();
			});
			this.fireBeforeMasterOpen();
			_this$.toggleClass("sapMSplitAppMasterVisible", true);
			_this$.toggleClass("sapMSplitAppMasterHidden", false);
			this._bMasterOpening = true;
		}
	}
	return this;
};

sap.m.SplitApp.prototype.hideMaster = function() {
	var _this$ = this._oMasterNav.$(),
		that = this,
		_curPage = that._getRealPage(that._oDetailNav.getCurrentPage());
	if(this._portraitPopover()) {
        if(this._oPopOver.isOpen()){
        	function afterPopoverClose(){
        		this._oPopOver.detachAfterClose(afterPopoverClose, this);
        		this._bMasterClosing = false;
        		this._bMasterisOpen = false;
        		this.fireAfterMasterClose();
        	}
        	this._oPopOver.attachAfterClose(afterPopoverClose, this);
        	this.fireBeforeMasterClose();
        	this._oPopOver.close();
        	this._bMasterClosing = true;
        }
	}else{
		if(this._portraitHide() && this._bMasterisOpen) {
			if(this._isMie9) {
				_this$.animate({
					left: "-=320"
				}, {
					duration: 300
				});
				this._bMasterisOpen = false;
				this._setMasterButton(_curPage, jQuery.proxy(this._setTitleVisibility, this));
			}
			_this$.bind((jQuery.os.ios || !this._isPlatformDependent) ? "webkitTransitionEnd transitionend" : "webkitAnimationEnd animationend", function(){
				jQuery(this).unbind("webkitTransitionEnd transitionend");
				jQuery(this).unbind("webkitAnimationEnd animationend");
				that._bMasterClosing = false;
				that._bMasterisOpen = false;
				that._setMasterButton(_curPage, jQuery.proxy(that._setTitleVisibility, that));
				that.fireAfterMasterClose();
			});
			this.fireBeforeMasterClose();
			_this$.toggleClass("sapMSplitAppMasterVisible" , false);
			_this$.toggleClass("sapMSplitAppMasterHidden" , true);
			this._bMasterClosing = true;
		}
	}
	return this;
};

sap.m.SplitApp.prototype.getCurrentMasterPage = function() {
	return this._oMasterNav.getCurrentPage();
};

sap.m.SplitApp.prototype.getCurrentDetailPage = function() {
	return this._oDetailNav.getCurrentPage();
};

sap.m.SplitApp.prototype.getCurrentPage = function(bMaster){
	if(bMaster){
		return this.getCurrentMasterPage();
	}else{
		return this.getCurrentDetailPage();
	}
};

sap.m.SplitApp.prototype.getMasterPage = function(pageId){
	return this._oMasterNav.getPage(pageId);
};

sap.m.SplitApp.prototype.getDetailPage = function(pageId){
	return this._oDetailNav.getPage(pageId);
};

sap.m.SplitApp.prototype.getPage = function(pageId, bMaster){
	if(bMaster){
		return this.getMasterPage(pageId);
	}else{
		return this.getDetailPage(pageId);
	}
};

/**************************************************************
* END - Public methods
**************************************************************/

/*************************************************************
 * START - Setters/Getters of the SplitApp control
**************************************************************/
sap.m.SplitApp.prototype.setInitialMaster = function(sPage) {
	this._oMasterNav.setInitialPage(sPage);
	this.setAssociation('initialMaster', sPage, true);
	return this;
};

sap.m.SplitApp.prototype.setInitialDetail = function(sPage) {
	if(!jQuery.device.is.phone) {
		this._oDetailNav.setInitialPage(sPage);
	}
	this.setAssociation('initialDetail', sPage, true);
	return this;
};

sap.m.SplitApp.prototype.setDefaultTransitionNameDetail = function(sTransition) {
	this._oDetailNav.setDefaultTransitionName(sTransition);
	return this;
};

sap.m.SplitApp.prototype.setDefaultTransitionNameMaster = function(sTransition) {
	this._oMasterNav.setDefaultTransitionName(sTransition);
	return this;
};

sap.m.SplitApp.prototype.setMasterButtonText = function(sText) {
	if((jQuery.os.ios || !this._isPlatformDependent) && !jQuery.device.is.phone){
		if(!sText){
			sText = this._rb.getText("SPLITAPP_NAVBUTTON_TEXT");
		}
		this._oShowMasterBtn.setText(sText);
	}
	this.setProperty("masterButtonText", sText, true);
	return this;
};

sap.m.SplitApp.prototype.setMode = function(sMode) {
	var sOldMode = this.getMode();
	if(sOldMode === sMode){
		return;
	}
	this.setProperty("mode", sMode, true);
	//the reposition of master and detail area only occurs in tablet and after it's rendered
	if(!jQuery.device.is.phone && this.getDomRef()){
		if(sMode !== "PopoverMode" && this._oPopOver.getContent().length > 0) {
			this._updateMasterPosition("landscape");
	
		}else if(sMode == "PopoverMode" && !this._oldIsLandscape && this._oPopOver.getContent().length === 0){
			this._updateMasterPosition("popover");
			this.$().toggleClass("sapMSplitAppShowHide", false);
			this.$().toggleClass("sapMSplitAppStretchCompress", false);
			this.$().toggleClass("sapMSplitAppPopover", true);
			this._setMasterButton(this._oDetailNav.getCurrentPage(), jQuery.proxy(this._setTitleVisibility, this));
		}
		if(sMode == "StretchCompressMode") {
			this.$().toggleClass("sapMSplitAppShowHide", false);
			this.$().toggleClass("sapMSplitAppPopover", false);
			this.$().toggleClass("sapMSplitAppStretchCompress", true);
			this._removeMasterButton(this._oDetailNav.getCurrentPage(), jQuery.proxy(this._setTitleVisibility, this));
			
		}
		if(sMode == "ShowHideMode") {
			this.$().toggleClass("sapMSplitAppPopover", false);
			this.$().toggleClass("sapMSplitAppStretchCompress", false);
			this.$().toggleClass("sapMSplitAppShowHide", true);
			if(!jQuery.device.is.landscape){
				this._setMasterButton(this._oDetailNav.getCurrentPage(), jQuery.proxy(this._setTitleVisibility, this));
			}
		}
	}
	return this;
};

/**************************************************************
* START - Private methods
**************************************************************/
sap.m.SplitApp.prototype._handleNavigationEvent = function(oEvent, bAfter, bMaster){
	var sEventName = (bAfter ? "After" : "") + (bMaster ? "Master" : "Detail") + "Navigate";
	sEventName = sEventName.charAt(0).toLowerCase() + sEventName.slice(1);
	
	this.fireEvent(sEventName, oEvent);
};

sap.m.SplitApp.prototype._handleOrientationChange = function() {
	var isLandscape = jQuery.device.is.landscape,
		_currentPage = this._oDetailNav.getCurrentPage(),
		mode = this.getMode();

	if(this._oldIsLandscape !== isLandscape) {
		this.fireOrientationChange({landscape: isLandscape});
		this._oldIsLandscape = isLandscape;	
		if (!jQuery.device.is.phone) {
			if(mode === "ShowHideMode"){
				if(isLandscape) {
					this.fireBeforeMasterOpen();
				}else{
					this.fireBeforeMasterClose();
				}
			}
		
			this.$().toggleClass("sapMSplitAppPortrait", !isLandscape);
			
			if(this._isMie9) {
				if(isLandscape) {
					this._oMasterNav.$().css("left", "0");
					this._oMasterNav.$().css("width", "");
				}else {
					this._oMasterNav.$().css("left", "-320px");
					this._oMasterNav.$().css("width", "auto");
				}
			}
			
			if(mode === "ShowHideMode" || mode === "PopoverMode") {
				if(isLandscape) {
					this._oMasterNav.$().toggleClass("sapMSplitAppMasterVisible", false);
					this._oMasterNav.$().toggleClass("sapMSplitAppMasterHidden", false);
				}
			}
			
			if(mode === "ShowHideMode"){
				if(isLandscape) {
					this._bMasterisOpen = true;
					this.fireAfterMasterOpen();
				}else{
					this._bMasterisOpen = false;
					this.fireAfterMasterClose();
				}
			}
			
			if(this.getMode() == "PopoverMode") {
				if(this._oPopOver.oPopup.isOpen()){
				//Wait for the popover to be closed properly
					this._oPopOver.attachAfterClose(this._handlePopClose, this);
					this._oPopOver.close();
				} else {
					this._handlePopClose();
				}
			}
			
			_currentPage = this._getRealPage(_currentPage);
			if(!this._oldIsLandscape && mode != "StretchCompressMode") {
				this._setMasterButton(_currentPage, jQuery.proxy(this._setTitleVisibility, this));
			}else {
				this._removeMasterButton(_currentPage, jQuery.proxy(this._setTitleVisibility, this));
			}			
		}
	}
};

sap.m.SplitApp.prototype._setTitleVisibility = function(oPage){
	var oRealPage = oPage || this._getRealPage(this._oDetailNav.getCurrentPage()),
		oCore = this.oCore,
		sPageId = oRealPage ? oRealPage.getId() : "";
	if(sPageId){
		var oTitle = oCore.byId(sPageId + "-title");
		if(!jQuery.os.ios && this._isPlatformDependent){
			if((this._portraitHide() || this._portraitPopover()) && (!this._bMasterisOpen || this._bMasterClosing)){
				oTitle && oTitle.removeStyleClass("sapMSplitAppHiddenChild");
			}else{
				oTitle && oTitle.addStyleClass("sapMSplitAppHiddenChild");
			}
		}
	};
};

sap.m.SplitApp.prototype._handlePopClose = function(oEvent) {
	this._oPopOver.detachAfterClose(this._handlePopClose, this);
	if(this._oldIsLandscape) {
		this._updateMasterPosition("landscape");
	}else {
		this._updateMasterPosition("popover");
	}
};

sap.m.SplitApp.prototype._getRealPage = function(oPage){
	var oReturn = oPage, aContent;
	
	while(oReturn){
		if(oReturn instanceof sap.m.Page){
			return oReturn;
		}
		if(oReturn instanceof sap.ui.core.mvc.View){
			aContent = oReturn.getContent();
			if(aContent.length === 1){
				oReturn = aContent[0];
				continue;
			}
		}
		oReturn = null;
	}
	return oReturn;
};

 //updates the dom position of the Master NavContainer (inside popover or left next to the Detail NavContainer)
sap.m.SplitApp.prototype._updateMasterPosition = function(sPos) {
	var that = this;
	if(sPos == "popover") {
		//remove the NavContainer dom from the left side without rerendering the whole app
		this.removeAggregation("_navMaster", this._oMasterNav, true);
		jQuery.sap.byId(this._oMasterNav.getId()).remove();
		this._oPopOver.addContent(this._oMasterNav);
		this._bMasterisOpen = false;
	}
	if(sPos == "landscape") {
		var fRearrangeNavMaster = function(){
			that._oPopOver.removeAggregation("content", that._oMasterNav, false);
			that.setAggregation("_navMaster", that._oMasterNav, true);
			//render only the master navContainer, to prevent the whole app from rerendering
			var $master = jQuery.sap.byId(that.getId());
			if ($master[0]) {
				var rm = sap.ui.getCore().createRenderManager();
				rm.renderControl(that._oMasterNav.addStyleClass("sapMSplitAppMaster"));
				rm.flush($master[0], false, 0);
				rm.destroy();
			}
		};
		
		if(this._oPopOver.isOpen()){
			var fAfterCloseHandler = function(){
				this._oPopOver.detachAfterClose(fAfterCloseHandler, this);
				this._bMasterisOpen = false;
				fRearrangeNavMaster();
			};
			this._oPopOver.attachAfterClose(fAfterCloseHandler, this);
			this._oPopOver.close();
		}else{
			fRearrangeNavMaster();
		}
	}
};

//Portrait - Tablet - ShowHideMode
sap.m.SplitApp.prototype._portraitHide = function() {
	if(!this._oldIsLandscape && !jQuery.device.is.phone && this.getMode() === "ShowHideMode") {
		return true;
	} else {
		return false;
	}
};

//Portrait - Tablet - PopoverMode
sap.m.SplitApp.prototype._portraitPopover = function() {
	if(!this._oldIsLandscape && !jQuery.device.is.phone && this.getMode() === "PopoverMode") {
		return true;
	} else {
		return false;
	}
};

sap.m.SplitApp.prototype._setMasterButton = function(oPage, fnCallBack) {
	if(!oPage){
		return;
	}
	
	var aHeaderContent = oPage._getAnyHeader().getContentLeft();
	for(var i=0; i < aHeaderContent.length; i++) {
		if(aHeaderContent[i] instanceof sap.m.Button && (aHeaderContent[i].getType() == sap.m.ButtonType.Back || (aHeaderContent[i].getType() == sap.m.ButtonType.Up && aHeaderContent[i] !== this._oShowMasterBtn))) {
			this._bDetailNavButton = true;
			return;
		}
	}
	this._bDetailNavButton = false;

	this.fireMasterButton({show: true});
	oPage = this._getRealPage(oPage);
	if(oPage /*&& !this._checkCustomHeader(oPage)*/) {
		var oPageHeader = oPage._getAnyHeader(),
			oContentLeft = oPageHeader.getContentLeft(),
			sIcon = oPage.getIcon();
		var bIsSet = false;
		if(oContentLeft){
			for(var i=0; i<oContentLeft.length; i++) {
				if(oContentLeft[i] === this._oShowMasterBtn) {
					bIsSet = true;
				}
			}
		}
		if(!bIsSet) {
			this._oShowMasterBtn.removeStyleClass("sapMSplitAppMasterBtnHidden");
			if(!jQuery.os.ios && sIcon && this._isPlatformDependent){
				sap.ui.getCore().byId(oPage.getId() + "-icon").addStyleClass("sapMSplitAppHiddenChild");
				this._oShowMasterBtn.setIcon(sIcon);
			}
			if(oPageHeader){
				oPageHeader.insertContentLeft(this._oShowMasterBtn, 0);
			}
			/*oPage._updateHeaderContent(this._oShowMasterBtn, 'left', 0);*/
		} else {
			if(this._isMie9) {
				this._oShowMasterBtn.$().fadeIn();
			}
			this._oShowMasterBtn.$().parent().toggleClass("sapMSplitAppMasterBtnHide", false);	
			this._oShowMasterBtn.removeStyleClass("sapMSplitAppMasterBtnHidden");	
			this._oShowMasterBtn.$().parent().toggleClass("sapMSplitAppMasterBtnShow", true);		
		}
		if(fnCallBack){
			fnCallBack(oPage);
		}
		
	}
};

sap.m.SplitApp.prototype._removeMasterButton = function(oPage, fnCallBack) {
	if(!oPage){
		return;
	}
	
	var oSplitApp = this, oHeader;
	this.fireMasterButton({show: false});
	if(!this._oShowMasterBtn.$().is(":hidden")) {
		oPage = this._getRealPage(oPage);
		oHeader = oPage._getAnyHeader();
		if(oPage && oHeader /*&& !this._checkCustomHeader(oPage)*/) {
			var oContentLeft = oHeader.getContentLeft();
			for(var i=0; i<oContentLeft.length; i++) {
				if(oContentLeft[i] === this._oShowMasterBtn) {
					if(this._isMie9) {
						this._oShowMasterBtn.$().fadeOut();
						if(fnCallBack){
							fnCallBack(oPage);
						}
					}
					this._oShowMasterBtn.$().parent().toggleClass("sapMSplitAppMasterBtnShow", false);
					this._oShowMasterBtn.$().parent().toggleClass("sapMSplitAppMasterBtnHide", true);
					this._oShowMasterBtn.$().parent().bind("webkitAnimationEnd animationend", function(){
						jQuery(this).unbind("webkitAnimationEnd animationend");
						oSplitApp._oShowMasterBtn.addStyleClass("sapMSplitAppMasterBtnHidden");
						if(fnCallBack){
							fnCallBack(oPage);
						}
					});
					return;
				}
			}
		}
	}else{
		if(fnCallBack){
			fnCallBack(oPage);
		}
	}
};

/*
sap.m.SplitApp.prototype._checkCustomHeader = function(oPage) {
	var oCustomHeader = oPage.getCustomHeader();
	if (oCustomHeader) {
		return true;
	} else {
		return false;
	}
};
*/

/*sap.m.SplitApp.prototype._existsOnParentChain = function(oSelfControl, middleType, oWithinContainer){
	var bTypeMet = middleType ? false : true,
		bWithInContainer = false,
		oParent = oSelfControl;
	
	while(oParent){
		if(!bTypeMet){
			if(oParent instanceof middleType){
				bTypeMet = true;
			}
		}
		if(oParent.getId() === oWithinContainer.getId()){
			bWithInContainer = true;
		}
		if(bTypeMet && bWithInContainer){
			return true;
		}
		oParent = oParent.getParent();
	}
	return false;
};*/

sap.m.SplitApp.prototype._callMethodInManagedObject = function(sFunctionName, sAggregationName){
	var args = Array.prototype.slice.call(arguments);
	if(sAggregationName === "masterPages"){
	    args[1] = "pages";
		return this._oMasterNav[sFunctionName].apply(this._oMasterNav, args.slice(1));
	}else if(sAggregationName === "detailPages"){
	    args[1] = "pages";
		return this._oDetailNav[sFunctionName].apply(this._oDetailNav, args.slice(1));
	}else{
		return sap.ui.base.ManagedObject.prototype[sFunctionName].apply(this, args.slice(1));
	}
};
/**************************************************************
* END - Private methods
**************************************************************/

/**************************************************************
* START - forward aggregation related methods to NavContainer
**************************************************************/
sap.m.SplitApp.prototype.validateAggregation = function(sAggregationName, oObject, bMultiple){
	return this._callMethodInManagedObject("validateAggregation", sAggregationName, oObject, bMultiple);
};

sap.m.SplitApp.prototype.setAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
	this._callMethodInManagedObject("setAggregation", sAggregationName, oObject, bSuppressInvalidate);
	return this;
};

sap.m.SplitApp.prototype.getAggregation = function(sAggregationName, oDefaultForCreation){
	return this._callMethodInManagedObject("getAggregation", sAggregationName, oDefaultForCreation);
};

sap.m.SplitApp.prototype.indexOfAggregation = function(sAggregationName, oObject){
	return this._callMethodInManagedObject("indexOfAggregation", sAggregationName, oObject);
};

sap.m.SplitApp.prototype.insertAggregation = function(sAggregationName, oObject, iIndex, bSuppressInvalidate){
	this._callMethodInManagedObject("insertAggregation", sAggregationName, oObject, iIndex, bSuppressInvalidate);
	return this;
};

sap.m.SplitApp.prototype.addAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
	this._callMethodInManagedObject("addAggregation", sAggregationName, oObject, bSuppressInvalidate);
	return this;
};

sap.m.SplitApp.prototype.removeAggregation = function(sAggregationName, oObject, bSuppressInvalidate){
	return this._callMethodInManagedObject("removeAggregation", sAggregationName, oObject, bSuppressInvalidate);
};

sap.m.SplitApp.prototype.removeAllAggregation = function(sAggregationName, bSuppressInvalidate){
	return this._callMethodInManagedObject("removeAllAggregation", sAggregationName, bSuppressInvalidate);
};

sap.m.SplitApp.prototype.destroyAggregation = function(sAggregationName, bSuppressInvalidate){
	this._callMethodInManagedObject("destroyAggregation", sAggregationName, bSuppressInvalidate);
	return this;
};
/**************************************************************
* END - forward aggregation related methods to NavContainer
**************************************************************/

}; // end of sap.m.SplitApp
if ( !jQuery.sap.isDeclared('sap.m.StandardListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.StandardListItem.
jQuery.sap.declare("sap.m.StandardListItem");



/**
 * Constructor for a new StandardListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDescription description} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getIconInset iconInset} : boolean (default: true)</li>
 * <li>{@link #getIconDensityAware iconDensityAware} : boolean (default: true)</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The StandardListItem is a list item providing image, titel and description.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.StandardListItem
 */
sap.m.ListItemBase.extend("sap.m.StandardListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"description" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"iconInset" : {type : "boolean", group : "Appearance", defaultValue : true},
		"iconDensityAware" : {type : "boolean", group : "Misc", defaultValue : true},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"info" : {type : "string", group : "Misc", defaultValue : null},
		"infoState" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None}
	}
}});


/**
 * Creates a new subclass of class sap.m.StandardListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.StandardListItem.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * List item text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.StandardListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>description</code>.
 * Description
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>description</code>
 * @public
 * @name sap.m.StandardListItem#getDescription
 * @function
 */

/**
 * Setter for property <code>description</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDescription  new value for property <code>description</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setDescription
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * List item icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.StandardListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>iconInset</code>.
 * If false image will not be shown as embedded icon. Instead it will take the full height of the listitem.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconInset</code>
 * @public
 * @name sap.m.StandardListItem#getIconInset
 * @function
 */

/**
 * Setter for property <code>iconInset</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconInset  new value for property <code>iconInset</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setIconInset
 * @function
 */


/**
 * Getter for property <code>iconDensityAware</code>.
 * By default, this is set to true but then one or more requests are sent trying to get the density perfect version of image if this version of image doesn't exist on the server.
 * 
 * If bandwidth is the key for the application, set this value to false.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconDensityAware</code>
 * @public
 * @name sap.m.StandardListItem#getIconDensityAware
 * @function
 */

/**
 * Setter for property <code>iconDensityAware</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconDensityAware  new value for property <code>iconDensityAware</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setIconDensityAware
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * List item active icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.StandardListItem#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * Info text shown on the right side of the description.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.m.StandardListItem#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setInfo
 * @function
 */


/**
 * Getter for property <code>infoState</code>.
 * Info state defines the color of the info text. E.g. Error, Warning, Success...
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * @name sap.m.StandardListItem#getInfoState
 * @function
 */

/**
 * Setter for property <code>infoState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oInfoState  new value for property <code>infoState</code>
 * @return {sap.m.StandardListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardListItem#setInfoState
 * @function
 */


// Start of sap/m/StandardListItem.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * Function is called when listItem is tapped.
 * 
 * @param {jQuery.Event}
 *          oEvent
 */

sap.m.StandardListItem.prototype.exit = function() {
	if (this._image) {
		this._image.destroy();
	}
	
	sap.m.ListItemBase.prototype.exit.apply(this, arguments);
};


/**
 * @private
 */
sap.m.StandardListItem.prototype._getImage = function(sImgId, sImgStyle, sSrc, bIconDensityAware) {
	var oImage = this._image;
	if(oImage)
	{
		oImage.setSrc(sSrc);
		if(oImage instanceof sap.m.Image)
			oImage.setDensityAware(bIconDensityAware);
	}
	else
	{
		oImage = sap.ui.core.IconPool.createControlByURI({
			id: sImgId,
      src : sSrc,
      densityAware : bIconDensityAware
    }, sap.m.Image).setParent(this, null, true);
	}
	
	if(oImage instanceof sap.m.Image){
		oImage.addStyleClass(sImgStyle, true);
	}
	else{
		oImage.addStyleClass(sImgStyle + "Icon", true);
	}
	
	return this._image = oImage;
};

// overwrite base method to hook into the active handling
sap.m.StandardListItem.prototype._activeHandlingInheritor = function() {
	var img = sap.ui.getCore().byId(this.getId() + "-img");
	if(img instanceof sap.ui.core.Icon){
		img.$().toggleClass('sapMSLIIconActive', this._active);
		return;
	}
	
	if (img && this.getActiveIcon()) {
			img.setSrc(this.getActiveIcon());
	}	
};

// overwrite base method to hook into the inactive handling
sap.m.StandardListItem.prototype._inactiveHandlingInheritor = function() {
	var img = sap.ui.getCore().byId(this.getId() + "-img");
		if(img instanceof sap.ui.core.Icon){
		img.$().toggleClass('sapMSLIIconActive', this._active);
		return;
	}
	
	if (img) {
			img.setSrc(this.getIcon());
	}
};
}; // end of sap.m.StandardListItem
if ( !jQuery.sap.isDeclared('sap.m.StandardTileRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.StandardTileRenderer");

/**
 * @class CustomTile renderer. 
 * @static
 */
sap.m.StandardTileRenderer = sap.ui.core.Renderer.extend(sap.m.TileRenderer);

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oControl an object representation of the control that should be rendered
 */
sap.m.StandardTileRenderer._renderContent = function(rm, oTile) {

	rm.write("<div"); // Start top row
	rm.addClass("sapMStdTileTopRow");	
	rm.writeClasses();
	rm.write(">");
	if (oTile.getIcon()) {
		rm.write("<div");
		rm.addClass("sapMStdTileIconDiv");
		
		switch(oTile.getType()) {
			case sap.m.StandardTileType.Monitor:
				rm.addClass("sapMStdIconMonitor");
				break;
			case sap.m.StandardTileType.Create:
				rm.addClass("sapMStdIconCreate");
				break;
		}
		rm.writeClasses();
		rm.write(">");
		rm.renderControl(oTile._getImage());
		rm.write("</div>");
	}
	
	
	if (oTile.getNumber()) {
		
		rm.write("<div");
		rm.addClass("sapMStdTileNumDiv");
		rm.writeClasses();
		rm.write(">");
		
		rm.write("<div");
		rm.writeAttribute("id", oTile.getId() + "-number");
		
		var numberLength = oTile.getNumber().length;
		if (numberLength < 5){
			rm.addClass("sapMStdTileNum");
		} else if (numberLength < 8){
			rm.addClass("sapMStdTileNumM");
		} else {
			rm.addClass("sapMStdTileNumS");
		}			
		
		rm.writeClasses();
		rm.write(">");
		rm.writeEscaped(oTile.getNumber());
		rm.write("</div>");
	
		if (oTile.getNumberUnit()) {
			rm.write("<div");
			rm.writeAttribute("id", oTile.getId() + "-numberUnit");
			rm.addClass("sapMStdTileNumUnit");
			rm.writeClasses();
			rm.write(">");
			rm.writeEscaped(oTile.getNumberUnit());
			rm.write("</div>");
		}	
		rm.write("</div>"); // End number div
	}
	rm.write("</div>"); // End top row div
	
	
	rm.write("<div"); // Start monitoring tile styling
	rm.addClass("sapMStdTileBottomRow");
	if(oTile.getType() === sap.m.StandardTileType.Monitor) {
		rm.addClass("sapMStdTileMonitorType");
	}
	rm.writeClasses();
	rm.write(">");
	
	rm.write("<div");  // Start title div
	rm.writeAttribute("id", oTile.getId() + "-title");
	rm.addClass("sapMStdTileTitle");
	rm.writeClasses();
	rm.write(">");
	if (oTile.getTitle()) {
		rm.writeEscaped(oTile.getTitle());
	}
	rm.write("</div>"); // End title div
	
	if(oTile.getInfo()) {
		rm.write("<div"); // Start info
		rm.writeAttribute("id", oTile.getId() + "-info");
		rm.addClass("sapMStdTileInfo");
		rm.addClass("sapMStdTileInfo" + oTile.getInfoState());
		rm.writeClasses();
		rm.write(">");
		if (oTile.getInfo()) {
			rm.writeEscaped(oTile.getInfo());
		}
		rm.write("</div>"); // End info
	}
	rm.write("</div>"); // End bottom row type tile styling
	
};

}; // end of sap.m.StandardTileRenderer
if ( !jQuery.sap.isDeclared('sap.m.Switch') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Switch.
jQuery.sap.declare("sap.m.Switch");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Switch.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getState state} : boolean (default: false)</li>
 * <li>{@link #getCustomTextOn customTextOn} : string</li>
 * <li>{@link #getCustomTextOff customTextOff} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getName name} : string</li>
 * <li>{@link #getType type} : sap.m.SwitchType (default: sap.m.SwitchType.Default)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Switch#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A switch is a user interface control on mobile devices that is used for change between binary states. The user can also drag the button handle or tap to change the state.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Switch
 */
sap.ui.core.Control.extend("sap.m.Switch", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"state" : {type : "boolean", group : "Misc", defaultValue : false},
		"customTextOn" : {type : "string", group : "Misc", defaultValue : null},
		"customTextOff" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"enabled" : {type : "boolean", group : "Data", defaultValue : true},
		"name" : {type : "string", group : "Misc", defaultValue : null},
		"type" : {type : "sap.m.SwitchType", group : "Appearance", defaultValue : sap.m.SwitchType.Default}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Switch with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Switch.extend
 * @function
 */

sap.m.Switch.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>state</code>.
 * A boolean value indicating whether the switch is on or off.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>state</code>
 * @public
 * @name sap.m.Switch#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bState  new value for property <code>state</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setState
 * @function
 */


/**
 * Getter for property <code>customTextOn</code>.
 * Custom text for the "ON" state.
 * 
 * "ON" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>customTextOn</code>
 * @public
 * @name sap.m.Switch#getCustomTextOn
 * @function
 */

/**
 * Setter for property <code>customTextOn</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCustomTextOn  new value for property <code>customTextOn</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setCustomTextOn
 * @function
 */


/**
 * Getter for property <code>customTextOff</code>.
 * Custom text for the "OFF" state.
 * 
 * "OFF" translated to the current language is the default value.
 * Beware that the given text will be cut off after three characters.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>customTextOff</code>
 * @public
 * @name sap.m.Switch#getCustomTextOff
 * @function
 */

/**
 * Setter for property <code>customTextOff</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCustomTextOff  new value for property <code>customTextOff</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setCustomTextOff
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible switches are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Switch#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Whether the switch is enabled.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.Switch#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setEnabled
 * @function
 */


/**
 * Getter for property <code>name</code>.
 * The name to be used in the HTML code for the switch (e.g. for HTML forms that send data to the server via submit).
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>name</code>
 * @public
 * @name sap.m.Switch#getName
 * @function
 */

/**
 * Setter for property <code>name</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sName  new value for property <code>name</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setName
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Type of a Switch. Possibles values "Default", "AcceptReject".
 *
 * Default value is <code>Default</code>
 *
 * @return {sap.m.SwitchType} the value of property <code>type</code>
 * @public
 * @name sap.m.Switch#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Default</code> 
 *
 * @param {sap.m.SwitchType} oType  new value for property <code>type</code>
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#setType
 * @function
 */


/**
 * Triggered when a switch changes the state. 
 *
 * @name sap.m.Switch#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.state The new state of the switch.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.Switch</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Switch</code>.<br/> itself. 
 *  
 * Triggered when a switch changes the state. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Switch</code>.<br/> itself.
 *
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.Switch</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Switch#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'state' of type <code>boolean</code> The new state of the switch.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Switch#fireChange
 * @function
 */


// Start of sap/m/Switch.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();

sap.ui.core.EnabledPropagator.apply(sap.m.Switch.prototype, [true]);

/* =========================================================== */
/*           begin: internal methods and properties            */
/* =========================================================== */

/**
 * Update the switch UI during the dragging process.
 *
 * @private
 */
sap.m.Switch.prototype._updateUI = function(iPositionLeft) {
	iPositionLeft = iPositionLeft > sap.m.Switch._fOffPosition ? sap.m.Switch._fOffPosition
																: iPositionLeft < sap.m.Switch._fOnPosition ? sap.m.Switch._fOnPosition : iPositionLeft;

	if (this._iCurrentPositionLeft === iPositionLeft) {
		return;
	}

	this._iCurrentPositionLeft = iPositionLeft;
	this._$SwitchInner[0].style.left = iPositionLeft + "px";
	this._setTempState(Math.abs(iPositionLeft) < sap.m.Switch._fSwapPoint);
};

sap.m.Switch.prototype._setTempState = function(b) {
	if (this._bTempState === b) {
		return;
	}

	this._bTempState = b;
	this._$Handle[0].setAttribute("data-sap-ui-swt", b ? this._sOn : this._sOff);
};

/**
 * Bind events.
 *
 * @private
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 */
sap.m.Switch.prototype._bindEvents = function() {
	var i = 0,
		Swt = sap.m.Switch;

	for (; i < Swt._aVEvents.length; i++) {
		this[Swt._aEvents[i]] = this[Swt._aVEvents[i]];
	}

	return this;
};

/**
 * Unbind events.
 *
 * @private
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 */
sap.m.Switch.prototype._unbindEvents = function() {
	var i = 0,
		Swt = sap.m.Switch;

	for (; i < Swt._aVEvents.length; i++) {
		this[Swt._aEvents[i]] = null;
	}

	return this;
};

sap.m.Switch._getParameter = function(sParameter) {
	var fnGetParameter = sap.ui.core.theming.Parameters.get;

	return fnGetParameter(sParameter) || fnGetParameter(sParameter + "-" + jQuery.os.os);
};

(function() {
	var sParamTransitionTime = "sapMSwitchTransitionTime",

	sTransitionTime = sap.m.Switch._getParameter(sParamTransitionTime);

	// a boolean property to indicate if transition or not
	sap.m.Switch._bUseTransition = !!(Number(sTransitionTime));

	// the milliseconds takes the transition from one state to another
	sap.m.Switch._iTransitionTime = Number(sTransitionTime);
})();

// the position of the inner HTML element whether the switch is "ON"
sap.m.Switch._fOnPosition = sap.m.Switch._getParameter("sapMSwitchOnPosition");

// the position of the inner HTML element whether the switch is "OFF"
sap.m.Switch._fOffPosition = sap.m.Switch._getParameter("sapMSwitchOffPosition");

// swap point
sap.m.Switch._fSwapPoint = Math.abs((sap.m.Switch._fOnPosition - sap.m.Switch._fOffPosition) / 2);

//
sap.m.Switch._aEvents = ["ontouchstart", "ontouchmove", "ontouchend", "ontouchcancel"];

//
sap.m.Switch._aVEvents = sap.m.Switch._aEvents.map(function(sEvent) {
	return "_" + sEvent;
});

// resource bundle
sap.m.Switch._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

/* =========================================================== */
/*                      end: internal methods                  */
/* =========================================================== */

/* =========================================================== */
/*                   begin: lifecycle methods                  */
/* =========================================================== */

/**
 * Required adaptations before rendering.
 *
 * @private
 */
sap.m.Switch.prototype.onBeforeRendering = function() {
	var Swt = sap.m.Switch;

	this._sOn = this.getCustomTextOn() || Swt._oRb.getText("SWITCH_ON");
	this._sOff = this.getCustomTextOff() || Swt._oRb.getText("SWITCH_OFF");
};

/**
 * Required adaptations after rendering.
 *
 * @private
 */
sap.m.Switch.prototype.onAfterRendering = function() {
	var $SwitchCont;

	// bind only if the switch is enabled
	this.getEnabled() ?	this._bindEvents() : this._unbindEvents();

	// switch control container jQuery DOM reference
	$SwitchCont = this.$();

	// switch jQuery DOM reference
	this._$Switch = $SwitchCont.find(".sapMSwt");

	// switch inner jQuery DOM reference
	this._$SwitchInner = this._$Switch.children(".sapMSwtInner");

	// switch handle jQuery DOM reference
	this._$Handle = this._$SwitchInner.children(".sapMSwtHandle");

	// checkbox jQuery DOM reference
	this._$Checkbox = $SwitchCont.children("input");

	// width of the switch
	this._iSwitchWidth = this._$Switch.outerWidth();
};

/* =========================================================== */
/*                   end: lifecycle methods                    */
/* =========================================================== */


/* =========================================================== */
/*                      begin: event handlers                  */
/* =========================================================== */

/**
 * Handle the touch start event happening on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._ontouchstart = function(oEvent) {
	var oTargetTouch = oEvent.targetTouches[0];

	//	For control who need to know if they should handle
	//	events from the switch control.
	oEvent.originalEvent._sapui_handledByControl = true;

	// Only process single touches. If there is already a touch happening
	// or two simultaneous touches, then just ignore them.
	//
	// Important to note that oEvent.targetTouches.length is related
	// to the current target DOM element, it could be the control
	// container or its children elements.
	//
	// Also note that oEvent.touches.length is related to
	// the UI-Area because event delegation.
	if (sap.m.touch.countContained(oEvent.touches, this.getId()) > 1) {
		return;
	}

	this._iActiveTouch = oTargetTouch.identifier;

	this._$Switch.addClass("sapMSwtPressed")
				.removeClass("sapMSwtTrans");

	this._bTempState = this.getState();
	this._iTouchStartPageX = oTargetTouch.pageX;
	this._iSwitchPositionLeft = this._$SwitchInner.position().left;
	this._bDragged = false;
};

/**
 * Handle the touch move event on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._ontouchmove = function(oEvent) {
	var oTouch,
		iPositionLeft,
		fnTouch = sap.m.touch;

	// the active touch should always be in the list of touches
	jQuery.sap.assert(fnTouch.find(oEvent.touches, this._iActiveTouch), 'sap.m.Switch.prototype._ontouchmove(): missing touchEnd');

	// find the active touch
	oTouch = fnTouch.find(oEvent.changedTouches, this._iActiveTouch);

	// only respond to the active touch
	if (!oTouch) {
		return;
	}

	this._bDragged = true;
	iPositionLeft = ((this._iTouchStartPageX - oTouch.pageX) * -1) + this._iSwitchPositionLeft;
	this._updateUI(iPositionLeft);
};

if (jQuery.os.os === "ios" && jQuery.os.fVersion <= 5 && sap.ui.core.theming.Parameters.get("sapMPlatformDependent")) {
	sap.m.Switch.prototype._ontouchmove = null;
}

/**
 * Handle the touch end event on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._ontouchend = function(oEvent) {
	var fnTouch = sap.m.touch,
		assert = jQuery.sap.assert;

	assert(this._iActiveTouch !== undefined, 'sap.m.Switch.prototype._ontouchend(): expect to already be touching');

	// if the touch we're tracking isn't changing here, ignore this touch end event
	if (!fnTouch.find(oEvent.changedTouches, this._iActiveTouch)) {

		// In most cases, our active touch will be in the touches collection,
		// but we can't assert that because occasionally two touch end events can
		// occur at almost the same time with both having empty touches lists.
		return;
	}

	// this is touch end for the touch we're monitoring
	assert(!fnTouch.find(oEvent.touches, this._iActiveTouch), 'sap.m.Switch.prototype._ontouchend(): touch ended also still active');

	// remove active state
	this._$Switch.removeClass("sapMSwtPressed");

	// change the state
	this.setState(this._bDragged ? this._bTempState : !this._bTempState, true);
};

/**
 * Handle the touch cancel event on the switch.
 *
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.Switch.prototype._ontouchcancel = sap.m.Switch.prototype._ontouchend;

/* ============================================================ */
/*                      end: event handlers						*/
/* ============================================================ */


/* =========================================================== */
/*                   begin: API method                         */
/* =========================================================== */

/**
 * Change the switch state between on and off.
 *
 * @param {boolean} bState
 * @public
 * @return {sap.m.Switch} <code>this</code> to allow method chaining
 */
sap.m.Switch.prototype.setState = function(bState, bTriggerEvent) {
	var sState,
		bNewState,
		Swt = sap.m.Switch;

	if (!this.getEnabled() && bTriggerEvent) {
		return this;
	}

	bNewState = !(this.getState() === bState);

	if (bNewState) {
		this.setProperty("state", bState, true);	// validation and suppress re-rendering
	}

	if (!this._$Switch) {
		return this;
	}

	bState = this.getState();
	sState = bState ? this._sOn : this._sOff;

	if (bNewState) {
		this._$Handle[0].setAttribute("data-sap-ui-swt", sState);
		this._$Checkbox[0].setAttribute("checked", bState);
		this._$Checkbox[0].setAttribute("value", sState);

		bState ? this._$Switch.removeClass("sapMSwtOff").addClass("sapMSwtOn")
				: this._$Switch.removeClass("sapMSwtOn").addClass("sapMSwtOff");

		if (bTriggerEvent) {
			if (Swt._bUseTransition) {
				jQuery.sap.delayedCall(Swt._iTransitionTime, this, function _sapSwtFireChangeDelayed() {
					this.fireChange({state:bState});
				}, [bState]);
			} else {
				this.fireChange({state:bState});
			}
		}
	}

	this._$Switch.addClass("sapMSwtTrans");

	// remove inline styles
	this._$SwitchInner.removeAttr("style");

	return this;
};

/* =========================================================== */
/*                     end: API method                         */
/* =========================================================== */
}; // end of sap.m.Switch
if ( !jQuery.sap.isDeclared('sap.m.Text') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Text.
jQuery.sap.declare("sap.m.Text");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Text.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getTextDirection textDirection} : sap.ui.core.TextDirection (default: sap.ui.core.TextDirection.Inherit)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getWrapping wrapping} : boolean (default: true)</li>
 * <li>{@link #getTextAlign textAlign} : sap.ui.core.TextAlign (default: sap.ui.core.TextAlign.Begin)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Text control is used to display some continuous text.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Text
 */
sap.ui.core.Control.extend("sap.m.Text", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "", defaultValue : '', bindable : "bindable"},
		"textDirection" : {type : "sap.ui.core.TextDirection", group : "Appearance", defaultValue : sap.ui.core.TextDirection.Inherit},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"wrapping" : {type : "boolean", group : "Appearance", defaultValue : true},
		"textAlign" : {type : "sap.ui.core.TextAlign", group : "Appearance", defaultValue : sap.ui.core.TextAlign.Begin},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.Text with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Text.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text to be displayed.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.Text#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setText
 * @function
 */


/**
 * Binder for property <code>text</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#bindText
 * @function
 */

/**
 * Unbinder for property <code>text</code>.
 *
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#unbindText
 * @function
 */


/**
 * Getter for property <code>textDirection</code>.
 * Available options for the text direction are LTR and RTL. By default the control inherits the text direction from its parent control.
 *
 * Default value is <code>Inherit</code>
 *
 * @return {sap.ui.core.TextDirection} the value of property <code>textDirection</code>
 * @public
 * @name sap.m.Text#getTextDirection
 * @function
 */

/**
 * Setter for property <code>textDirection</code>.
 *
 * Default value is <code>Inherit</code> 
 *
 * @param {sap.ui.core.TextDirection} oTextDirection  new value for property <code>textDirection</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setTextDirection
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Set this property to false to make text invisible.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.Text#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setVisible
 * @function
 */


/**
 * Getter for property <code>wrapping</code>.
 * Set this property to false to disable the automatic text wrapping.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>wrapping</code>
 * @public
 * @name sap.m.Text#getWrapping
 * @function
 */

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bWrapping  new value for property <code>wrapping</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setWrapping
 * @function
 */


/**
 * Getter for property <code>textAlign</code>.
 * Sets the horizontal alignment of the text.
 *
 * Default value is <code>Begin</code>
 *
 * @return {sap.ui.core.TextAlign} the value of property <code>textAlign</code>
 * @public
 * @name sap.m.Text#getTextAlign
 * @function
 */

/**
 * Setter for property <code>textAlign</code>.
 *
 * Default value is <code>Begin</code> 
 *
 * @param {sap.ui.core.TextAlign} oTextAlign  new value for property <code>textAlign</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setTextAlign
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * By default the Text control uses the full width available. Set this property to restrict the width to a custom value.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.Text#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.Text} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Text#setWidth
 * @function
 */


// Start of sap/m/Text.js
/*
 * @see JSDoc generated by SAPUI5 Control API generator
 */
sap.m.Text.prototype.setText = function(sText) {
	this.setProperty("text", sText, true); // no re-rendering!
	var oDomRef = this.getDomRef();
	if (oDomRef) {
		var aLines = this.getText().split("\n");
		for (var i = 0; i < aLines.length; i++) {
			aLines[i] = jQuery.sap.encodeHTML(aLines[i]);
		}
		sText = aLines.join("<br>");
		oDomRef.innerHTML = sText;
	}
	return this;
};
}; // end of sap.m.Text
if ( !jQuery.sap.isDeclared('sap.m.TextArea') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.TextArea.
jQuery.sap.declare("sap.m.TextArea");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new TextArea.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRows rows} : int (default: 2)</li>
 * <li>{@link #getCols cols} : int (default: 20)</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize</li>
 * <li>{@link #getValue value} : string (default: '')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getValueState valueState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getPlaceholder placeholder} : string</li>
 * <li>{@link #getWrapping wrapping} : sap.ui.core.Wrapping</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.TextArea#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TextArea#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enable users to input multi-line text.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.9.0
 * @name sap.m.TextArea
 */
sap.ui.core.Control.extend("sap.m.TextArea", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"rows" : {type : "int", group : "Appearance", defaultValue : 2},
		"cols" : {type : "int", group : "Appearance", defaultValue : 20},
		"width" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"height" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"value" : {type : "string", group : "Data", defaultValue : '', bindable : "bindable"},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Appearance", defaultValue : true},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"valueState" : {type : "sap.ui.core.ValueState", group : "Data", defaultValue : sap.ui.core.ValueState.None},
		"placeholder" : {type : "string", group : "Appearance", defaultValue : null},
		"wrapping" : {type : "sap.ui.core.Wrapping", group : "Behavior", defaultValue : null}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.TextArea with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.TextArea.extend
 * @function
 */

sap.m.TextArea.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>rows</code>.
 * Specifies the height of the text area (in lines).
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>rows</code>
 * @public
 * @name sap.m.TextArea#getRows
 * @function
 */

/**
 * Setter for property <code>rows</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iRows  new value for property <code>rows</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setRows
 * @function
 */


/**
 * Getter for property <code>cols</code>.
 * Specifies the width of the textarea (in average character width).
 *
 * Default value is <code>20</code>
 *
 * @return {int} the value of property <code>cols</code>
 * @public
 * @name sap.m.TextArea#getCols
 * @function
 */

/**
 * Setter for property <code>cols</code>.
 *
 * Default value is <code>20</code> 
 *
 * @param {int} iCols  new value for property <code>cols</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setCols
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * Defines the width of the textarea with CSS. This property can overwrite the cols property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.TextArea#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * Defines the height of the textarea with CSS. This property can overwrite the rows property.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.TextArea#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setHeight
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Value of the textarea
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.TextArea#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setValue
 * @function
 */


/**
 * Binder for property <code>value</code>.
 *
 * @param {string} sPath path to a property in the model 
 * @param {function} [fnFormatter=null] the formatter function
 * @param {sap.ui.model.BindingMode} [sMode=Default] the binding mode to be used for this property binding (e.g. one way) 
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#bindValue
 * @function
 */

/**
 * Unbinder for property <code>value</code>.
 *
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#unbindValue
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true).
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.m.TextArea#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setEnabled
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Boolean property to enable modifying the text area's text. Default value is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @since 1.12.0
 * @name sap.m.TextArea#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @since 1.12.0
 * @name sap.m.TextArea#setEditable
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Specifies whether or not an element is visible. Invisible textareas are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.m.TextArea#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setVisible
 * @function
 */


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters that user can input. If your value property's length bigger than maxLength then value is not truncated and user can see whole value property but cannot write anymore.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.m.TextArea#getMaxLength
 * @function
 */

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setMaxLength
 * @function
 */


/**
 * Getter for property <code>valueState</code>.
 * Visualizes warnings or errors related to the textarea field. Possible values: Warning, Error, Success.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>valueState</code>
 * @public
 * @name sap.m.TextArea#getValueState
 * @function
 */

/**
 * Setter for property <code>valueState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oValueState  new value for property <code>valueState</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setValueState
 * @function
 */


/**
 * Getter for property <code>placeholder</code>.
 * Specifies a short hint that describes the expected value of an textarea field.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>placeholder</code>
 * @public
 * @name sap.m.TextArea#getPlaceholder
 * @function
 */

/**
 * Setter for property <code>placeholder</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sPlaceholder  new value for property <code>placeholder</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setPlaceholder
 * @function
 */


/**
 * Getter for property <code>wrapping</code>.
 * The wrap attribute specifies how the text in a text area is to be wrapped when submitted in a form. Possible values are: Soft, Hard, Off.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.Wrapping} the value of property <code>wrapping</code>
 * @public
 * @name sap.m.TextArea#getWrapping
 * @function
 */

/**
 * Setter for property <code>wrapping</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.Wrapping} oWrapping  new value for property <code>wrapping</code>
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#setWrapping
 * @function
 */


/**
 * This event gets fired when the input operation has finished and the value has changed. 
 *
 * @name sap.m.TextArea#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The new value of the textarea.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.TextArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TextArea</code>.<br/> itself. 
 *  
 * This event gets fired when the input operation has finished and the value has changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.TextArea</code>.<br/> itself.
 *
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.TextArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The new value of the textarea.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TextArea#fireChange
 * @function
 */


/**
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @name sap.m.TextArea#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.value The new value of the textarea.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TextArea</code>.<br/> itself. 
 *  
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.TextArea</code>.<br/> itself.
 *
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.TextArea</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TextArea#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'value' of type <code>string</code> The new value of the textarea.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TextArea} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TextArea#fireLiveChange
 * @function
 */


// Start of sap/m/TextArea.js
/**
 * in IOS if transitions are in use textarea is not working properly
 * 	- auto-scroll to bottom doesn't work when typing 
 *  - user cannot focus to specific text position with tap
 *  
 * Switch this variable true to force ScrollEnablement not to use transitions 
 */
sap.m.TextArea._bExperimentalScroll = false;

/**
 * Detach textarea events if already bounded on before rendering.
 *
 * @private
 */
sap.m.TextArea.prototype.onBeforeRendering = function() {
	this._unbindEvents();
};


/**
 * Attach listeners on after rendering and find iscroll
 *
 * @private
 */
sap.m.TextArea.prototype.onAfterRendering = function() {
	// get textarea reference
	this._$textarea = this.$().find('textarea');

	// bind events
	this._$textarea.on("change input", jQuery.proxy(this._onChange, this));

	if (jQuery.support.touch) {
		if (!sap.m.TextArea._bExperimentalScroll) {
			// in iOS cursor leaves the visible area when typing more text than fits the area
			jQuery.os.ios && this._$textarea.keyup(function(e) {
				if (this.scrollTop + this.clientHeight + parseFloat(jQuery(this).css("font-size")) >= this.scrollHeight) {
					this.scrollTop = this.scrollHeight - this.clientHeight + 1;
				}
			});
		}
		
		if (this._behaviour.INSIDE_SCROLLABLE_WITHOUT_FOCUS) {
			delete this._oIScroll;	// delete iScroll reference
			this._oIScroll = null;	// set null to find iScroll
			this._$textarea.on("touchstart", jQuery.proxy(this._onTouchStart, this));
			this._$textarea.on("touchmove", jQuery.proxy(this._onTouchMove, this));
		}
		else if (this._behaviour.PAGE_NON_SCROLLABLE_AFTER_FOCUS) {
			// stop bubbling to disable iscroll
			this._$textarea.on("touchmove", function(e) {
				if (jQuery(this).is(":focus")) {
					e.stopPropagation();
				}
			});
		}
	} else {
		// in desktop let browser scroll
		this._$textarea.on("mousedown mousewheel", function(e) {
			e.stopPropagation();
		});
	}
};


/**
 * Detach all the event that we bind onAfterRendering
 *
 * @private
 */
sap.m.TextArea.prototype.exit = function() {
	this._unbindEvents();
};


/**
 * Some browsers let us to scroll inside of the textarea without focusing.
 * Android is very buggy and no touch event is publishing after focus.
 * Android 4.1+ has touch events but page scroll is not possible after
 * we reached the edge(bottom, top) of the textarea
 *
 * @private
 */
sap.m.TextArea.prototype._behaviour = (function() {
	return {
		INSIDE_SCROLLABLE_WITHOUT_FOCUS : jQuery.os.ios || jQuery.os.blackberry || jQuery.browser.chrome,
		PAGE_NON_SCROLLABLE_AFTER_FOCUS : jQuery.os.android && parseFloat(jQuery.os.version) >= 4.1
	};
}());


/**
 * Change listener fires Change or LiveChange event
 *
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.TextArea.prototype._onChange = function(oEvent) {
	var value = this._$textarea.val();
	this.setProperty("value", value, true);
	if (oEvent.type == "change") {
		this.fireChange({
			value : value
		});
	} else {
		this.fireLiveChange({
			value : value
		});
	}
};


/**
 * On touch start get iscroll and save starting point
 *
 * @private
 * @param {jQuery.EventObject} oEvent The event object
 */
sap.m.TextArea.prototype._onTouchStart = function(oEvent) {
	if (this._oIScroll === null) {
		this._oIScroll = sap.m.getIScroll(this);
	}
	this._startY = oEvent.touches[0].pageY;
	this._iDirection = 0;
};


/**
 * Touch move listener doing native scroll workaround
 * TODO: Two dimensional scrolling??
 *
 * @private
 * @param {jQuery.EventObject} e The event object
 */
sap.m.TextArea.prototype._onTouchMove = function(oEvent) {
	var textarea = this._$textarea[0],	// dom reference
		pageY = oEvent.touches[0].pageY,
		isTop = textarea.scrollTop <= 0,
		isBottom = textarea.scrollTop + textarea.clientHeight >= textarea.scrollHeight,
		isGoingUp = this._startY > pageY,
		isGoingDown =  this._startY < pageY;
	// update position
	this._startY = pageY;

	// if we reached the edges of textarea then enable page scrolling
	if ((isTop && isGoingDown) || (isBottom && isGoingUp)) {
		var iDirection = (isGoingDown) ? -1 : 1;
		if (!(this._iDirection == iDirection) && this._oIScroll) {
			// set current touch point as iscroll last point
			this._oIScroll.pointY = pageY;
			this._iDirection = iDirection;
		}

		// let page scroll happen
		oEvent.preventDefault();
		return;
	}

	// do not let event bubbling needed for textarea scrolling
	oEvent.stopPropagation();
};


/**
 * Unbind textarea events which are bounded on after rendering
 *
 * @private
 */
sap.m.TextArea.prototype._unbindEvents = function() {
	if (this._$textarea) {
		// remove all possible events, jquery take care unnecessary ones
		this._$textarea.off("change input keyup touchstart touchmove mousedown");
	}
};

}; // end of sap.m.TextArea
if ( !jQuery.sap.isDeclared('sap.m.Tile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Tile.
jQuery.sap.declare("sap.m.Tile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new Tile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getRemovable removable} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Tile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A tile to be displayed in the tile container. Use this
 * tile as the base class for
 * specialized tile implementations.
 * Use the renderers _addOuterClass methods to add a style class to the main
 * surface of the Tile. In this class set the background color, gradients
 * or background images.
 * Instead of implementing the default render method in the renderer implement
 * your content HTML in the _renderContent method of the specialized
 * tile.
 * 
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This
 * concept is still under discussion so this can be changed in future.
 * @name sap.m.Tile
 */
sap.ui.core.Control.extend("sap.m.Tile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"removable" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Tile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Tile.extend
 * @function
 */

sap.m.Tile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>removable</code>.
 * Determines whether the tile is movable within the surrounding tile container. The remove event is fired by the tile contianer.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>removable</code>
 * @public
 * @name sap.m.Tile#getRemovable
 * @function
 */

/**
 * Setter for property <code>removable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bRemovable  new value for property <code>removable</code>
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Tile#setRemovable
 * @function
 */


/**
 * Tap event is raised if the user tap or click to the
 * control. 
 *
 * @name sap.m.Tile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.m.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Tile</code>.<br/> itself. 
 *  
 * Tap event is raised if the user tap or click to the
 * control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Tile</code>.<br/> itself.
 *
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Tile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.m.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Tile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Tile#firePress
 * @function
 */


// Start of sap/m/Tile.js
/*
 * @see JSDoc generated by SAPUI5 Control API generator
 */
/**
 * Handles the internal event onAfterRendering
 * @private
 */
sap.m.Tile.prototype.onAfterRendering = function(x,y){
	if (this._rendered && !this._bIsDragged && this.getParent() instanceof sap.m.TileContainer) {
		this.setPos(this._posX,this._posY);
	}
	this._rendered = true;
	
};


/**
 * Sets the position of the tile to the given coordinates.
 * @param {int} iX left position
 * @param {int} iY top position
 * @private
 */ 
sap.m.Tile.prototype.setPos = function(iX,iY){
	// store in member
	this._posX = iX = Math.floor(iX);
	this._posY = iY = Math.floor(iY);
	if (!this._rendered) return;
	var o = this.getDomRef();
	if ("webkitTransform" in o.style) {
		this.$().css('-webkit-transform','translate3d('+iX+'px,'+iY+'px,0)');
	} else if ("transform" in o.style) {
		this.$().css('transform','translate3d('+iX+'px,'+iY+'px,0)');
	} else if ("msTransform" in o.style) {
		this.$().css('msTransform','translate('+iX+'px,'+iY+'px)');
	} else if ("MozTransform" in o.style) {
		this.$().css('-moz-transform','translate3d('+iX+'px,'+iY+'px,0)');
	}
	//jQuery.sap.log.info("Set tile pos, id:" + this.getId() + ", x:" + iX + ", y:" + iY);
	
};

/**
 * Sets the pixel size of the tile 
 * @param {int} iX left position
 * @param {int} iY top position
 * @private
 */ 
sap.m.Tile.prototype.setSize = function(iWidth,iHeight){
	//jQuery.sap.log.debug("Set tile size, id:" + this.getId() + ", x:" + iWidth + ", y:" + iHeight);
	this._width = iWidth;
	this._height = iHeight;
};


/**
 * Returns and optionally sets whether the tile is editable.
 * @param {boolean} optional The editable state of the tile.
 * @returns {boolean} whether the tile is editable
 * @see {TileContainer}
 * @private
 */
sap.m.Tile.prototype.isEditable = function(bIsEditable) {
	if (bIsEditable === true || bIsEditable === false) {
		this._bIsEditable = bIsEditable;
	}
	
	return this._bIsEditable;
};

/**
 * Returns and optionally sets whether the tile is dragged and applies or removes the drag styles.
 * @param {boolean} optional The editable state of the tile.
 * @returns {boolean} whether the tile is dragged
 * @see {TileContainer}
 * @private
 */
sap.m.Tile.prototype.isDragged = function(bIsDragged) {
	if (!this._bIsEditable) return;
	if (bIsDragged === true || bIsDragged === false) {
		var o = this.$();
		setTimeout(function() {
			 o.toggleClass("sapMTileDrag",bIsDragged);
		},1);
		this._bIsDragged = bIsDragged;
	}
	return this._bIsDragged;
};

/**
 * Set active state.
 * @private
 * @param oEvent
 */
sap.m.Tile.prototype.ontouchstart = function(oEvent) {
	if (!this.isEditable()) {
		var oParent = this.getParent();
		while (oParent) {
			if (oParent._bAvoidChildTapEvent || (oParent instanceof sap.m.Tile && oParent.isEditable())) {
				return;
			}
			oParent = oParent.getParent();
		}
		this.$().toggleClass("sapMTileActive",true);
		this.$().toggleClass("sapMTileActive-CTX",true);	
	}
};

/**
 * Unset active state.
 * @private
 * @param oEvent
 */
sap.m.Tile.prototype.ontouchend = function(oEvent) {
	if (!this.isEditable()) {
		this.$().toggleClass("sapMTileActive",false);
		this.$().toggleClass("sapMTileActive-CTX",false);
	}	
};

/**
 * Unset active state on touch move
 * @private
 * @param oEvent
 */
sap.m.Tile.prototype.ontouchmove = function(oEvent) {
	if (!this.isEditable()) {
		var oParent = this.getParent();
		while (oParent) {
			if (oParent._bAvoidChildTapEvent || (oParent instanceof sap.m.Tile && oParent.isEditable())) {
				return;
			}
			oParent = oParent.getParent();
		}
		this.$().toggleClass("sapMTileActive",false);
		this.$().toggleClass("sapMTileActive-CTX",false);	
	}
};

sap.m.Tile.prototype.ontap = function(oEvent) {
	if (!this.isEditable()) {
		var oParent = this.getParent();
		while (oParent) {
			if (oParent._bAvoidChildTapEvent || (oParent instanceof sap.m.Tile && oParent.isEditable())) {
				return;
			}
			oParent = oParent.getParent();
		}
		this.firePress({});
	}
};
}; // end of sap.m.Tile
if ( !jQuery.sap.isDeclared('sap.m.TileContainer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.TileContainer.
jQuery.sap.declare("sap.m.TileContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new TileContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEditable editable} : boolean</li>
 * <li>{@link #getAllowAdd allowAdd} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.TileContainer#event:tileMove tileMove} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TileContainer#event:tileDelete tileDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.TileContainer#event:tileAdd tileAdd} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container that arranges same-size tiles nicely on carousel pages
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * API is not yet finished and might change completely
 * @name sap.m.TileContainer
 */
sap.ui.core.Control.extend("sap.m.TileContainer", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"moveTile", "scrollIntoView", "getPageFirstTileIndex"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"editable" : {type : "boolean", group : "Misc", defaultValue : null},
		"allowAdd" : {type : "boolean", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "tiles",
	aggregations : {
    	"tiles" : {type : "sap.ui.core.Control", multiple : true, singularName : "tile"}
	},
	events : {
		"tileMove" : {}, 
		"tileDelete" : {}, 
		"tileAdd" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.TileContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.TileContainer.extend
 * @function
 */

sap.m.TileContainer.M_EVENTS = {'tileMove':'tileMove','tileDelete':'tileDelete','tileAdd':'tileAdd'};


/**
 * Getter for property <code>width</code>.
 * The width of the container in pixel
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.TileContainer#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the container in pixel
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.TileContainer#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#setHeight
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * Whether the tile container is editable and you can move or delete or add tiles.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.m.TileContainer#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#setEditable
 * @function
 */


/**
 * Getter for property <code>allowAdd</code>.
 * Determines whether the user is allowed to add tiles in edit mode (editable = true)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>allowAdd</code>
 * @public
 * @name sap.m.TileContainer#getAllowAdd
 * @function
 */

/**
 * Setter for property <code>allowAdd</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bAllowAdd  new value for property <code>allowAdd</code>
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#setAllowAdd
 * @function
 */


/**
 * Getter for aggregation <code>tiles</code>.<br/>
 * The tiles to be displayed by the tile container
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.TileContainer#getTiles
 * @function
 */


/**
 * Inserts a tile into the aggregation named <code>tiles</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTile the tile to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tile should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tile is inserted at 
 *             the last position        
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#insertTile
 * @function
 */

/**
 * Adds some tile <code>oTile</code> 
 * to the aggregation named <code>tiles</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTile the tile to add; if empty, nothing is inserted
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#addTile
 * @function
 */

/**
 * Removes an tile from the aggregation named <code>tiles</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTile the tile to remove or its index or id
 * @return {sap.ui.core.Control} the removed tile or null
 * @public
 * @name sap.m.TileContainer#removeTile
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.TileContainer#removeAllTiles
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tiles</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.TileContainer#indexOfTile
 * @function
 */
	

/**
 * Destroys all the tiles in the aggregation 
 * named <code>tiles</code>.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#destroyTiles
 * @function
 */


/**
 * Fired if a tile was moved 
 *
 * @name sap.m.TileContainer#tileMove
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Tile} oControlEvent.getParameters.tile The tile that has been moved
 * @param {int} oControlEvent.getParameters.newIndex The new index of the tile in the tiles aggregation
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br/> itself. 
 *  
 * Fired if a tile was moved 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 *
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#attachTileMove
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileMove' event of this <code>sap.m.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#detachTileMove
 * @function
 */

/**
 * Fire event tileMove to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'tile' of type <code>sap.m.Tile</code> The tile that has been moved</li>
 * <li>'newIndex' of type <code>int</code> The new index of the tile in the tiles aggregation</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TileContainer#fireTileMove
 * @function
 */


/**
 * Fired if a tile is deleted during edit mode. 
 *
 * @name sap.m.TileContainer#tileDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {sap.m.Tile} oControlEvent.getParameters.tile The tile

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br/> itself. 
 *  
 * Fired if a tile is deleted during edit mode. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 *
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#attachTileDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileDelete' event of this <code>sap.m.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#detachTileDelete
 * @function
 */

/**
 * Fire event tileDelete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'tile' of type <code>sap.m.Tile</code> The tile
</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TileContainer#fireTileDelete
 * @function
 */


/**
 * Fired if a Tile is added 
 *
 * @name sap.m.TileContainer#tileAdd
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.TileContainer</code>.<br/> itself. 
 *  
 * Fired if a Tile is added 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.TileContainer</code>.<br/> itself.
 *
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#attachTileAdd
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'tileAdd' event of this <code>sap.m.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileContainer#detachTileAdd
 * @function
 */

/**
 * Fire event tileAdd to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.TileContainer#fireTileAdd
 * @function
 */


/**
 * Moves a given tile to the given index
 *
 * @name sap.m.TileContainer.prototype.moveTile
 * @function
 * @param {int} 
 *         iTile
 *         The tile or tile index to move
 * @param {int} 
 *         iNewIndex
 *         The new Tile position in the tiles aggregation

 * @type void
 * @public
 */


/**
 * Scrolls to the page where the given tile or tile index is included.
 * Optionally this can be done animated or not. With IE9 the scroll is never animated.
 *
 * @name sap.m.TileContainer.prototype.scrollIntoView
 * @function
 * @param {int} 
 *         iTile
 *         The tile or tile index to be scrolled into view
 * @param {boolean} 
 *         bAnimated
 *         Whether the scroll should be animated

 * @type void
 * @public
 */


/**
 * Returns the index of the first tile that is visible in the current page
 *
 * @name sap.m.TileContainer.prototype.getPageFirstTileIndex
 * @function

 * @type int
 * @public
 */


// Start of sap/m/TileContainer.js

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();


/**
 * Initializes the control
 * @private
 */
sap.m.TileContainer.prototype.init = function() {
	
	this._bRendered = false; // whether the control is rendered or not
	this._iCurrentTileStartIndex = 0;
	this._iCurrentPage = 0;
	this._iPages = 0;
	this._iScrollLeft = 0;
	this._iScrollGap = 0; //gap to the left and right that is allowed to be moved while touchmove event if max scrollwidth or min scrollwidth is already reached
	if (!jQuery.device.is.desktop) {
		this._iScrollGap = 0; 
	}
	this.bAllowTextSelection = false;
	//ugly but needed, initial timeout to wait until all elements are resized. 
	//TODO: Check whether this is needed in no less mode
	this._iInitialResizeTimeout = 400; //needed
	
	this._oDragSession = null;
	this._oTouchSession = null;
	
	this._bAvoidChildTapEvent = false;
	
	this._iEdgeShowStart = jQuery.device.is.phone ? 10 : 20; //the amount on the left and right during drag drop of a tile needed to start showing the edge of the page
	this._iTriggerScrollOffset = jQuery.device.is.phone ? 10 : jQuery.device.is.desktop ? -40 : 20; //the amount of pixels a tile needs to be moved over the left or right edge to trigger a scroll 
	
};

/**
 * Handles the internal event onBeforeRendering
 * @private
 */
sap.m.TileContainer.prototype.onBeforeRendering = function() {
	
	//unregister the resize listener
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

/**
 * Handles the internal event onAfterRendering
 * @private
 */
sap.m.TileContainer.prototype.onAfterRendering = function() {
	
	this._bRendered = true;
	//init resizing
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef().parentElement,  jQuery.proxy(this._resize, this));
	//init the dimensions to the container scoll area 
	this._applyDimension();
	this.$().toggleClass("sapMTCEditable",this.getEditable() === true);
	var that = this;
	setTimeout(function() {
		that._update(true);
	},this._iInitialResizeTimeout);
};

/**
 * Sets the editable property to the tile container that allows to move icons
 * This is currently also set with a long tap
 * @param {boolean} Whether the container is in edit mode or not.
 * @returns {sap.m.TileContainer} This tile container.
 * @public
 */
sap.m.TileContainer.prototype.setEditable = function(bValue) {
	var aTiles = this.getTiles();
	//set the property
	this.setProperty("editable",bValue,true);
	var bEditable = this.getEditable();
	this.$().toggleClass("sapMTCEditable",bEditable);
	for (var i=0;i<aTiles.length; i++) {
		var oTile = aTiles[i];
		if (oTile instanceof sap.m.Tile) {
			oTile.isEditable(bEditable);
		}
	}
	return this; //allow chaining;
};

/**
 * Applies the containers dimensions
 * @private
 */
sap.m.TileContainer.prototype._applyDimension = function() {
	var oDim = this._getContainerDimension(),
		oScroll = jQuery.sap.byId( this.getId() + "-scrl")[0],
		oContent = jQuery.sap.byId( this.getId() + "-cnt")[0],
		oPager = jQuery.sap.byId( this.getId() + "-pager")[0];
	oScroll.style.width = oDim.outerwidth + "px";
	oScroll.style.height = (oDim.outerheight - oPager.offsetHeight) + "px";
	oContent.style.height = (oDim.outerheight - oPager.offsetHeight) + "px";
	this.getDomRef().style.visibility = "visible";
	oContent.style.visibility = "visible";
	
	var oBlind = jQuery.sap.byId( this.getId() + "-blind");
	var iOffset = 10;
	if (jQuery.device.is.phone) {
		iOffset = 2;
	} else if (jQuery.device.is.desktop) {
		iOffset = 0;
	}
	
	oBlind.css("top",(oContent.offsetTop + iOffset) + "px");
	oBlind.css("left",(oContent.offsetLeft + iOffset) + "px");
	oBlind.css("width",(oContent.offsetWidth - iOffset) + "px");
	oBlind.css("height",(oContent.offsetHeight - iOffset) + "px");
	
	var oRight = jQuery.sap.byId( this.getId() + "-rightedge");
	oRight.css("top",(this.getDomRef().offsetTop + iOffset) + "px");
	oRight.css("right", iOffset + "px");
	oRight.css("height",(oContent.offsetHeight - iOffset) + "px");

	var oLeft = jQuery.sap.byId( this.getId() + "-leftedge");
	oLeft.css("top",(this.getDomRef().offsetTop + iOffset) + "px");
	oLeft.css("left",(this.getDomRef().offsetLeft + iOffset) + "px");
	oLeft.css("height",(oContent.offsetHeight - iOffset) + "px");
};

/**
 * Handles the resize event for the tile container. 
 * This is be called whenever the orientation of browser size changes.
 * @private
 */
sap.m.TileContainer.prototype._resize = function() {
	if (this._oDragSession) {
		return;
	}
	var that = this;
	setTimeout(function() {
		that._update(true);
	},this._iInitialResizeTimeout);
	this._iInitialResizeTimeout = 0; //now we do not need to wait
};

/**
 * Called from parent if the control is destroyed
 * @private
 */
sap.m.TileContainer.prototype.exit = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
};

/**
 * Updates all tiles
 * @private
 */
sap.m.TileContainer.prototype._update = function(bAnimated) {
	if (!this._bRendered) return;
	
	this._updateTilePositions();
	if (this._oTileDimension) {
		jQuery.sap.byId( this.getId() + "-cnt")[0].style.width = ((this._iPages * this._iOffsetX * 2) + (this._iPages * this._iMaxTilesX * this._oTileDimension.width)) + "px";
	}
	if (!this._oDragSession) {
		this.scrollIntoView(this._iCurrentTileStartIndex || 0, bAnimated);
	}
};

/**
 * Returns the index of the first tile that is visible in the current page
 * @returns {sap.m.TileContainer} The index of the first tile that is visible in the current page.
 * @public
 */
sap.m.TileContainer.prototype.getPageFirstTileIndex = function() {
	return this._iCurrentTileStartIndex || 0;
};

/**
 * Moves a given tile to the given index
 * @param {sap.m.Tile} oTile The tile to move
 * @param {int} iIndex The new Tile position in the tiles aggregation.
 * @returns {sap.m.TileContainer} This tile container.
 * @public
 */
sap.m.TileContainer.prototype.moveTile = function(vTile, iNewIndex) {
	if (!isNaN(vTile)) {
		vTile = this.getTiles()[vTile];
	}
	if (!vTile) {
		jQuery.sap.log.info("No Tile to move");
		return this;
	}
	this.deleteTile(vTile);
	this.insertTile(vTile,iNewIndex);
	return this;
};

/**
 * Adds a tile to the end of the tiles collection
 * @param {sap.m.Tile} oTile The tile to add
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 */
sap.m.TileContainer.prototype.addTile = function(oTile) {
	this.insertTile(oTile,this.getTiles().length);
};

/**
 * Inserts a tile to the given index
 * @param {sap.m.Tile} oTile The tile to insert
 * @param {int} iIndex The new Tile position in the tiles aggregation.
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 */
sap.m.TileContainer.prototype.insertTile = function(oTile, iIndex) {
	if (this._bRendered) {
		this.insertAggregation("tiles",oTile,iIndex,true);
		if (!this._oDragSession) {
			var oRm = sap.ui.getCore().createRenderManager(),
				oContent = jQuery.sap.byId( this.getId() + "-cnt" )[0]; 
			oRm.render(oTile, oContent);
			oRm.destroy();
		}
		//this._applyPageStartIndex(iIndex);
		this._update(false);
	} else {
		this.insertAggregation("tiles",oTile,iIndex);
	}
	return this;
};

/**
 * Deletes a tile
 * @param {sap.m.Tile} oTile The tile to move
 * @returns {sap.m.TileContainer} This tile container.
 * @override
 * @public
 */
sap.m.TileContainer.prototype.deleteTile = function(oTile) {
	if (this._bRendered) {
		var iIndex = this.indexOfAggregation("tiles",oTile)-1;
		this.removeAggregation("tiles",oTile,true);
		if (!this._oDragSession) {
			oTile.getDomRef().parentNode.removeChild(oTile.getDomRef());
		}
		this._applyPageStartIndex(iIndex < 0 ? 0 : iIndex);
		this._update(false);
	} else {
		this.removeAggregation("tiles",oTile,false);
	}
	return this;
};

sap.m.TileContainer.prototype.rerender = function() {
	if (!this._oDragSession || this._oDragSession.bDropped) {
		sap.ui.core.Control.prototype.rerender.apply(this);
	} 
};

/**
 * Scrolls one page to the left
 * @public
 */ 
sap.m.TileContainer.prototype.scrollLeft = function() {
	this.scrollIntoView(this._iCurrentTileStartIndex - this._iMaxTiles);
};

/**
 * Scrolls one page to the right
 * @public
 */ 
sap.m.TileContainer.prototype.scrollRight = function() {
	this.scrollIntoView(this._iCurrentTileStartIndex + this._iMaxTiles);
};


/**
 * Scrolls to the page where the given tile or tile index is included. 
 * Optionally this can be done animated or not. With IE9 the scroll is never animated.
 * @param {sap.m.Tile|int} vTile The tile or tile index to be scrolled into view
 * @param {boolean} bAnimated Whether the scroll should be animated.
 * @public
 */ 
sap.m.TileContainer.prototype.scrollIntoView = function(vTile, bAnimated){
    var iIndex = vTile;
    if (isNaN(vTile)) {
    	iIndex = this.indexOfAggregation("tiles",vTile);
    }
    
    var oTile = this.getTiles()[iIndex];
    if (!oTile) return;
    
    this._applyPageStartIndex(iIndex);
    var oScroll = jQuery.sap.byId( this.getId() + "-scrl")[0];
    
    oScroll.scrollLeft = 0;
    var oTopTile = this.getTiles()[this._iCurrentTileStartIndex];
    
	this._scrollTo(oTopTile._posX - (this._iOffsetX || 0),bAnimated);
	this._iCurrentPage = Math.floor(this._iCurrentTileStartIndex / this._iMaxTiles);
	this._updatePager();
};

/**
 * Updates the tile positions
 * @private
 */
sap.m.TileContainer.prototype._updateTilePositions = function(){
	
	if (this.getTiles().length == 0) return; // no tiles
	
	this._applyPageStartIndex(this._iCurrentTileStartIndex);
	this._applyDimension();

	var aTiles = this.getTiles(),
		oContentDimension = this._getContentDimension();
	for (var i=0; i < aTiles.length; i++) {
		if (aTiles[i].isDragged()) {
			continue;
		}
		var iPage =  Math.floor(i / this._iMaxTiles),
			oTile = aTiles[i],
			iLeft = (iPage * oContentDimension.outerwidth) + this._iOffsetX + i % this._iMaxTilesX * this._oTileDimension.width,
			iTop =  this._iOffsetY + Math.floor(i / this._iMaxTilesX) * this._oTileDimension.height - (iPage * this._iMaxTilesY * this._oTileDimension.height);
		
		oTile.setPos(iLeft,iTop);
		oTile.setSize(this._oTileDimension.width, this._oTileDimension.height);
		oTile.$().css("visibility","visible");
	}
	this._iPages = Math.ceil(aTiles.length / this._iMaxTiles);
}; 

/**
 * Updates the pager part of the tile container.
 * This is done dynamically 
 */
sap.m.TileContainer.prototype._updatePager = function() {

	var oPager = jQuery.sap.byId(this.getId() + "-pager")[0],
		oScrollLeft = jQuery.sap.byId(this.getId() + "-leftscroller")[0],
		oScrollRight = jQuery.sap.byId(this.getId() + "-rightscroller")[0];
	if (this._iPages > 1) {
		var aHTML = [""];
		for (var i=0;i<this._iPages;i++) {
			aHTML.push("");
		}
		oPager.innerHTML = aHTML.join("<span></span>");
		oPager.style.display = "block";
		oPager.childNodes[this._iCurrentPage].className = "sapMTCActive";
		if (jQuery.device.is.desktop) {
			oScrollRight.style.right = this._iCurrentPage == this._iPages-1 ? "-100px" : "1rem";
			oScrollLeft.style.left = this._iCurrentPage == 0  ? "-100px" : "1rem";
			oScrollLeft.style.display = "block";
			oScrollRight.style.display = "block";
			if (this._iCurrentPage == this._iPages-1 ) {
				oScrollRight.style.display = "none";
			} 
			if (this._iCurrentPage == 0 ) {
				oScrollLeft.style.display = "none";
			} 
			
		}
	} else {
		oPager.innerHTML = "";
		oScrollRight.style.right = "-100px";
		oScrollLeft.style.left = "-100px";
		oScrollLeft.style.display = "none";
		oScrollRight.style.display = "none";
	}
};

/**
 * Returns the dimension (width and height) of the pages content
 * @returns {object} width and height of the pages content
 * @private
 */
sap.m.TileContainer.prototype._getContentDimension = function() {
	
	if (!this._bRendered) return;
	
	var oScroll = jQuery.sap.byId( this.getId() + "-scrl");
	return {
		width  		: oScroll.width(),
		height 		: oScroll.height()-20,
		outerheight : oScroll.outerHeight()-20,
		outerwidth 	: oScroll.outerWidth()
	};
};

/**
 * Returns the dimension (width and height) of the tile container content
 * @returns {object} width and height of the pages content
 * @private
 */
sap.m.TileContainer.prototype._getContainerDimension = function() {
	
	if (!this._bRendered) return;
	
	var oDomRef = this.$();
	return {
		width  		: oDomRef.width(),
		height 		: oDomRef.height(),
		outerheight : oDomRef.outerHeight(),
		outerwidth 	: oDomRef.outerWidth()
	};
};

/**
 * Returns the dimension (width and height) of a tile
 * @returns {object} width and height of a tile
 * @private
 */
sap.m.TileContainer.prototype._getTileDimension = function() {
	
	if (!this._bRendered) return;
	if (this._oTileDim) return this._oTileDim;
	
	var oTile = this.getTiles()[0];
	this._oTileDim = {
		width  : oTile.$().outerWidth(true),
		height : oTile.$().outerHeight(true)
	};
	return this._oTileDim;
};

/**
 * Calculates the tile page sizes
 * @private
 */
sap.m.TileContainer.prototype._calculatePositions = function() {
	
	if (this.getTiles().length == 0) return;
	
	this._oTileDimension = this._getTileDimension();
	
	var oContentDimension = this._getContainerDimension(),
		iTiles = this.getTiles().length,
		iPagerHeight = jQuery.sap.byId( this.getId() + "-pager")[0].offsetHeight;
	if (oContentDimension.height == 0) return; //nothing to do because the height of the content is not (yet) available
	if (jQuery.device.is.desktop) {
		oContentDimension.width  -= 45 * 2;
	}
	var iMaxTilesX = Math.max( Math.floor( oContentDimension.width / this._oTileDimension.width ),1), 		  //at least one tile needs to be visible
		iMaxTilesY = Math.max( Math.floor((oContentDimension.height - iPagerHeight) / this._oTileDimension.height),1), //at least one tile needs to be visible
		iNumTileX = (iTiles < iMaxTilesX)  ? iTiles : iMaxTilesX,
		iNumTileY = (iTiles / iNumTileX < iMaxTilesY)  ? Math.ceil(iTiles / iNumTileX) : iMaxTilesY;
	
	//set the member vars for further usage
	this._iMaxTiles = iMaxTilesX * iMaxTilesY;
	this._iMaxTilesX = iMaxTilesX;
	this._iMaxTilesY = iMaxTilesY;
	this._iOffsetX = Math.floor(( oContentDimension.width  -  (this._oTileDimension.width * iNumTileX)) / 2);
	if (jQuery.device.is.desktop) {
		this._iOffsetX += 45;
	}
	this._iOffsetY = Math.floor(( oContentDimension.height - iPagerHeight - (this._oTileDimension.height * iNumTileY )) / 2);
	jQuery.sap.log.debug("maxtiles "+ this._iMaxTiles +" on page " + this.getId());

};

/**
 * Returns an array for a given pixel position in the tile container.
 * Normally there is only one tile for a position.
 * @param {int} x position in pixels 
 * @param {int} y position in pixels 
 * @returns {array} Array of tiles for the given position
 * @private
 */
sap.m.TileContainer.prototype._getTilesFromPosition = function(iX, iY) {
	
	if (!this.getTiles().length) return [];
	iX = iX + this._iScrollLeft;
	
	var aTiles = this.getTiles(),
		aResult = [];
	for (var i=0;i<aTiles.length;i++) {
		var oTile = aTiles[i],
			oRect = {
				top: oTile._posY,
				left: oTile._posX,
				width: oTile._width,
				height: oTile._height
			};
		if (!aTiles[i].isDragged() && iY > oRect.top && iY < oRect.top + oRect.height && iX > oRect.left && iX < oRect.left + oRect.width) {
			aResult.push(aTiles[i]);
		}
	}
	return aResult;
};

/**
 * Applies the start index of the pages first tile according to the given index
 * @param {int} iIndex The index of the tile that should be visible
 */
sap.m.TileContainer.prototype._applyPageStartIndex = function(iIndex) {
	this._calculatePositions();
	var iLength = this.getTiles().length;
	
	if (iIndex < 0) {
		iIndex = 0;
	} else if (iIndex > iLength-1) {
		iIndex = iLength-1;
	}
	//where does the page start
	var iCurrentPage = Math.floor(iIndex / this._iMaxTiles || 0);
	this._iCurrentTileStartIndex = iCurrentPage * (this._iMaxTiles  || 0);
	jQuery.sap.log.info("current index " + this._iCurrentTileStartIndex);
};

/**
 * Scrolls to the given position 
 * @param {int} The new scroll position
 * @private
 */
sap.m.TileContainer.prototype._scrollTo = function(iScrollLeft,bAnimated) {
	if (bAnimated !== false) bAnimated = true; //animated needs to be set explicitly to false
	if (this._oDragSession && this._oDragSession.oTile) {
		//this._oDragSession.iDiffX = this._oDragSession.iDiffX + iScrollLeft;
		//this._oDragSession.oTile.setPos(this._oDragSession.oTile._posX + iScrollLeft,this._oDragSession.oTile._posY);
		//this._oDragSession.iOffsetLeft = iScrollLeft;
	}
	this._applyTranslate(jQuery.sap.byId( this.getId() + "-cnt"),-iScrollLeft,0,bAnimated);
	this._iScrollLeft = iScrollLeft;
};

/**
 * Applies the translate x and y to the given jQuery object.
 * @param {object} o$ The jQuery object
 * @param {int} iX The pixel x value for the translate
 * @param {int} iY The pixel y value for the translate
 * @param {boolean} bAnimated Whether the translate should be animated or not.
 * @private
 */
sap.m.TileContainer.prototype._applyTranslate = function(o$,iX,iY,bAnimated) {
	var o = o$[0];
	jQuery.sap.byId( this.getId() + "-cnt").toggleClass("sapMTCAnim",bAnimated);
	if ("webkitTransform" in o.style) {
		o$.css('-webkit-transform','translate3d('+iX+'px,'+iY+'px,0)');
	} else if ("transform" in o.style) {
		o$.css('transform','translate3d('+iX+'px,'+iY+'px,0)');
	} else if ("msTransform" in o.style) {
		o$.css('-ms-transform','translate('+iX+'px,'+iY+'px)');
	} else if ("MozTransform" in o.style) {
		o$.css('-moz-transform','translate3d('+iX+'px,'+iY+'px,0)');
	}
};

/**
 * Initializes the touch session for the tile container
 * @param {jQuery.EventObject} oEvent The event object that started the touch
 * @private
 */
sap.m.TileContainer.prototype._initTouchSession = function(oEvent) {
	
	this._oTouchSession = {
			dStartTime : new Date(),
			fStartX : oEvent.targetTouches[0].pageX,
			fStartY : oEvent.targetTouches[0].pageY,
			fDiffX : 0,
			fDiffY : 0,
			oControl : oEvent.srcControl,
			iOffsetX :  oEvent.targetTouches[0].pageX - oEvent.srcElement.offsetLeft
	};
};

/**
 * Initializes the drag session for the tile container
 * @param {jQuery.EventObject} oEvent The event object that started the drag
 * @private
 */
sap.m.TileContainer.prototype._initDragSession = function(oEvent) {
	while (oEvent.srcControl && oEvent.srcControl.getParent() != this) {
		 oEvent.srcControl =  oEvent.srcControl.getParent();
	}
	var iIndex = this.indexOfAggregation("tiles",oEvent.srcControl);
	this._oDragSession = {
		oTile  : oEvent.srcControl,
		oTileElement  : oEvent.srcControl.$()[0],
		iOffsetLeft : oEvent.targetTouches[0].pageX - oEvent.srcControl._posX + this._iScrollLeft,
		iOffsetTop  : oEvent.targetTouches[0].pageY - oEvent.srcControl._posY,
		iIndex : iIndex,
		iOldIndex : iIndex,
		iDiffX : oEvent.targetTouches[0].pageX,
		iDiffY : oEvent.targetTouches[0].pageY
	};
};

/**
 * Handle click events for scollers in desktop case
 * @param {jQuery.EventObject} oEvent The event object that started the drag
 * @private
 */
sap.m.TileContainer.prototype.onclick = function(oEvent) {
	var oPager = jQuery.sap.byId( this.getId() + "-pager")[0];
	if (oEvent.srcElement.id == this.getId() + "-leftscroller" || oEvent.srcElement.parentNode.id == this.getId() + "-leftscroller") {
		this.scrollLeft();
	} else if (oEvent.srcElement.id == this.getId() + "-rightscroller" || oEvent.srcElement.parentNode.id == this.getId() + "-rightscroller") {
		this.scrollRight();
	} else if (oEvent.srcElement == oPager && jQuery.device.is.desktop) {
		if (oEvent.offsetX < oPager.offsetWidth/2) {
			this.scrollLeft();
		} else {
			this.scrollRight();
		}
	}
};


/**
 * Handle the touch start event on the TileContainer.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.TileContainer.prototype.ontouchstart = function(oEvent) {
	if (oEvent.targetTouches.length > 1 || this._oTouchSession) return; //allow only one touch session
	while (oEvent.srcControl && oEvent.srcControl.getParent() != this) {
		 oEvent.srcControl =  oEvent.srcControl.getParent();
	}
	if ( oEvent.srcControl instanceof sap.m.Tile && this.getEditable()===true) {
		if (oEvent.srcElement.className != "sapMTCRemove") {
			this._initDragSession(oEvent);
			this._initTouchSession(oEvent);
			this._oDragSession.oTile.isDragged(true);
		} else {
			this._initTouchSession(oEvent);
		}
		this._bAvoidChildTapEvent = true;
	} else {
		this._initTouchSession(oEvent);
	}
};

/**
 * Handle the touch move event on the TileContainer.
 * @param {jQuery.EventObject} oEvent The event object
 * @private
 */
sap.m.TileContainer.prototype.ontouchmove = function(oEvent) {
	if (document.selection && document.selection.clear) {
		document.selection.clear();
	}
	if (oEvent.targetTouches && oEvent.targetTouches.length > 1) return; //allow only one touch session
	if (!oEvent.targetTouches) {
		oEvent.targetTouches=[{pageX:oEvent.pageX,pageY:oEvent.pageY}];
	}
	var oTouchSession = this._oTouchSession;
	oTouchSession.fDiffX = oTouchSession.fStartX - oEvent.targetTouches[0].pageX;
	oTouchSession.fDiffY = oTouchSession.fStartY - oEvent.targetTouches[0].pageY;
	if (this._oDragSession) {
		if (Math.abs(oTouchSession.fDiffX)>5) {
			if (!this._oDragSession.bStarted) {
				this._oDragSession.bStarted = true;
				this._onDragStart(oEvent);
			} else {
				this._onDrag(oEvent);
			}
			this._bAvoidChildTapEvent = true;
		}
	} else if (oTouchSession){
		var iNewLeft = -this._iScrollLeft - oTouchSession.fDiffX;
		if (iNewLeft > this._iScrollGap) {
			return;
		} else if (iNewLeft < -(((this._iPages-1) * this._getContentDimension().outerwidth) + this._iScrollGap)) {
		    return;
		}
		this._applyTranslate(jQuery.sap.byId( this.getId() + "-cnt"),iNewLeft,0,false);
	}
};

/**
 * Handle the touch end event on the TileContainer.
 * @param {jQuery.EventObject} The event object.
 * @private
 */
sap.m.TileContainer.prototype.ontouchend = function(oEvent) {
	
	if (this._oDragSession) {
		this._onDrop(oEvent);
		delete this._oTouchSession;
		return;
	}

	if (!this._oTouchSession) return;
	var oTouchSession = this._oTouchSession,
		oDate = new Date(),
		bFast = (oDate - oTouchSession.dStartTime < 600);
	//handle fast swipe or tap
	if (bFast) {
		var oPager = jQuery.sap.byId( this.getId() + "-pager")[0];
		if (Math.abs(oTouchSession.fDiffX) > 30) {
			this._applyPageStartIndex(this._iCurrentTileStartIndex + ((oTouchSession.fDiffX > 0 ? 1 : -1) * this._iMaxTiles));
			this._bAvoidChildTapEvent = true;
		} else if (oEvent.srcElement == oPager && !jQuery.device.is.desktop) {
			if (oTouchSession.iOffsetX < oPager.offsetWidth/2) {
				this.scrollLeft();
			} else {
				this.scrollRight();
			}
			this._bAvoidChildTapEvent = true;
		} else if (oEvent.srcElement.className == "sapMTCRemove") {
			this.fireTileDelete({tile:oTouchSession.oControl});
		}
	} else {
		this._bAvoidChildTapEvent = true;
		var oContentDimension = this._getContentDimension();
		if (Math.abs(oTouchSession.fDiffX) > oContentDimension.outerwidth/2) {
			this._applyPageStartIndex(this._iCurrentTileStartIndex + ((oTouchSession.fDiffX > 0 ? 1 : -1) * this._iMaxTiles));
		}
	}
	this._update();
	// remove unused properties
	delete this._oDragSession;
	delete this._oTouchSession;
	var that = this;
	setTimeout(function(){
		that._bAvoidChildTapEvent = false;
	},100);
};

/**
 * Handles the drag start of an item in edit mode
 * @param {jQuery.EventObject} oEvent The event object
 * @private 
 */
sap.m.TileContainer.prototype._onDragStart = function(oEvent) {
	this.$().append(this._oDragSession.oTileElement);
	this._oDragSession.iDiffX = this._oTouchSession.fStartX - this._oTouchSession.fDiffX;
	this._oDragSession.iDiffY = this._oTouchSession.fStartY - this._oTouchSession.fDiffY;
	this._oDragSession.oTile.setPos(this._oDragSession.iDiffX - this._oDragSession.iOffsetLeft,this._oDragSession.iDiffY - this._oDragSession.iOffsetTop);
	jQuery.sap.byId( this.getId() + "-blind").css("display","block");
};

/**
 * Handles the dragging of an item
 * @param {jQuery.EventObject} oEvent The event object
 * @private 
 */
sap.m.TileContainer.prototype._onDrag = function(oEvent) {
	//calculate the center and middle position of the dragged tile
	if (!this._oTouchSession) {
		//if onDrag is fired after an scroll interval but the drag session was already ended.
		clearTimeout(this.iScrollTimer);
		this._oDragSession = null;
		this.iScrollTimer = null;
		this._bTriggerScroll = false;
		return;
	}
	this._oDragSession.iDiffX = this._oTouchSession.fStartX - this._oTouchSession.fDiffX;
	this._oDragSession.iDiffY = this._oTouchSession.fStartY - this._oTouchSession.fDiffY;

	var oContentDimension = this._getContentDimension(),
		iTop = this._oDragSession.iDiffY - this._oDragSession.iOffsetTop,
		iLeft = this._oDragSession.iDiffX - this._oDragSession.iOffsetLeft,
		iMiddle = iTop + (this._oDragSession.oTileElement.offsetHeight/2),
		iCenter = iLeft + (this._oDragSession.oTileElement.offsetWidth/2),
		bScrollRight = iLeft +  this._oDragSession.oTileElement.offsetWidth - this._iTriggerScrollOffset > oContentDimension.width,
		bScrollLeft =  iLeft  < -this._iTriggerScrollOffset,
		iNearRight = oContentDimension.width - (iLeft +  this._oDragSession.oTileElement.offsetWidth),
		iNearLeft =  iLeft;
		//jQuery.sap.log.info("ScrollLeft = " + this._iScrollLeft + " Left = " + iLeft + " Top = " + iTop);
	this._oDragSession.oTile.setPos(iLeft,iTop);
	
	//reset the clipping of the tile
	this._oDragSession.oTile.$().css("clip","auto");
	
	//clip the right part of the tile if it is near the right edge
	var oRight = jQuery.sap.byId( this.getId() + "-rightedge")[0];
	if (iLeft + this._oDragSession.oTile._width > oRight.offsetLeft + oRight.offsetWidth && this._iCurrentPage < this._iPages-1) {
		var iClipRight =oRight.offsetLeft + oRight.offsetWidth - iLeft - ((this._oDragSession.oTile._width-this._oDragSession.oTile.$().outerWidth(false))/2)-2;
		this._oDragSession.oTile.$().css("clip","rect(-25px,"+iClipRight+"px," + (this._oDragSession.oTile._height +20) + "px,-25px)");
	} 

	//clip the left part of the tile if it is near the left edge
	var oLeft = jQuery.sap.byId( this.getId() + "-leftedge")[0];
	if (iLeft < oLeft.offsetLeft + 2 + ((this._oDragSession.oTile._width - this._oDragSession.oTile.$().outerWidth(false))/2) && this._iCurrentPage > 0) {
		var iClipLeft = oLeft.offsetLeft + 4 - iLeft - ((this._oDragSession.oTile._width-this._oDragSession.oTile.$().outerWidth(false))/2);
		this._oDragSession.oTile.$().css("clip","rect(-25px,"+this._oDragSession.oTile._width+"px," + (this._oDragSession.oTile._height +20) + "px,"+iClipLeft+"px)");	
	} 
	
	//increase the opacity of the right edge the closer the tile is moved 
	if (iNearRight < this._iEdgeShowStart && this._iCurrentPage < this._iPages-1) {
		var iOpacity = (this._iEdgeShowStart-iNearRight) / (this._iEdgeShowStart + this._iTriggerScrollOffset);
		jQuery.sap.byId( this.getId() + "-rightedge").css("opacity","" + iOpacity);
	} else {
		//not near the edge
		jQuery.sap.byId( this.getId() + "-rightedge").css("opacity","0.01");
	}

	//increase the opacity of the left edge the closer the tile is moved 
	if (iNearLeft < this._iEdgeShowStart && this._iCurrentPage > 0) {
		var iOpacity = (this._iEdgeShowStart-iNearLeft) / (this._iEdgeShowStart + this._iTriggerScrollOffset);
		jQuery.sap.byId( this.getId() + "-leftedge").css("opacity",""+iOpacity);
	} else {
		//not near the edge
		jQuery.sap.byId( this.getId() + "-leftedge").css("opacity","0.01");
	}
	
	//check if scrolling needed
	if ( (bScrollLeft && this._iCurrentPage > 0) || (bScrollRight && this._iCurrentPage < this._iPages-1) ) {
		//jQuery.sap.log.info("ScrollRight = " + iLeft + " > " + iLeft +  this._oDragSession.oTileElement.offsetWidth - this._iTriggerScrollOffset);
		//jQuery.sap.log.info("ScrollLeft  = " + iLeft + " < " + (-this._iTriggerScrollOffset));
		if (this._bTriggerScroll) {
			if (bScrollLeft) {
				this.scrollLeft();
			} else {
				this.scrollRight();
			}
		} else {
			//start the interval timer
			var that = this;
			if (!this.iScrollTimer) {
				this.iScrollTimer = setInterval(function () {
					that._bTriggerScroll = true;
					that._onDrag(oEvent); //retrigger the event
					that._bTriggerScroll = false;
				},1000);
			}
		}
		//do not process further to avoid hovered tiles from the next page to be processed
		return;
	} else {
		//reset the interval timer
		if (this.iScrollTimer) {
			clearTimeout(this.iScrollTimer);
			this._bTriggerScroll = false;
			this.iScrollTimer = null;
		}
	}
	
	//get the hovered tile
	var aHoveredTiles = this._getTilesFromPosition(iCenter,iMiddle);
	if (aHoveredTiles && aHoveredTiles.length > 0) {
		//insert the tile after if center is on the right half of the target tile
		var oHoveredTile = aHoveredTiles[0],
			oRect = {
				top: oHoveredTile._posY,
				left: oHoveredTile._posX,
				width: oHoveredTile._width,
				height: oHoveredTile._height
			};
		var iIndex = this.indexOfAggregation("tiles",oHoveredTile);
		//(iIndex % this._iMaxTilesX) != 0 = Not a start tile in a row to avoid inserting in previous row which would flicker if 
		// drag right before the first tile in a row.
		if (iCenter + this._iScrollLeft < ((oRect.left + oRect.width)/2) && (iIndex % this._iMaxTilesX) != 0) {
			iIndex--;
		} 
		this._oDragSession.iIndex = iIndex;
		this.moveTile(this._oDragSession.oTile,this._oDragSession.iIndex);
	} else if (this._iCurrentPage == this._iPages-1){
		//check whether the dragged tile is at the end of the tile container
		var aTiles = this.getTiles(),
			oLastTile = aTiles[aTiles.length-1];
		if (oLastTile && iCenter > oLastTile._posX - this._iScrollLeft && iMiddle > oLastTile._posY) {
			this._oDragSession.iIndex = aTiles.length-1;
			this.moveTile(this._oDragSession.oTile,this._oDragSession.iIndex);
		}
	}
};

/**
 * Handles the drop of a tile
 * @param {jQuery.EventObject} oEvent The event object
 * @private 
 */
sap.m.TileContainer.prototype._onDrop = function(oEvent) {
	if (this._oDragSession) {
		var oTile = this._oDragSession.oTile,
			iIndex = this._oDragSession.iIndex;
		this._oDragSession.oTile.isDragged(false);
		if (this._oDragSession.iOldIndex != this._oDragSession.iIndex) {
			this.fireTileMove({tile:oTile,newIndex: iIndex});
		}
		jQuery.sap.byId( this.getId() + "-blind").css("display","block");
		if (this._oDragSession.bStarted) {
			this._oDragSession.oTile.setPos(this._oDragSession.oTile._posX + this._iScrollLeft, this._oDragSession.oTile._posY);
		}
		//reset the clipping
		this._oDragSession.oTile.$().css("clip","auto");

		//reset the edges
		jQuery.sap.byId( this.getId() + "-rightedge").css("opacity","0.01");
		jQuery.sap.byId( this.getId() + "-leftedge").css("opacity","0.01");
		
		jQuery.sap.byId( this.getId() + "-cnt").append(this._oDragSession.oTileElement);
		delete this._oDragSession;
		this.moveTile(oTile,iIndex);
		this.scrollIntoView(oTile, false);
		jQuery.sap.byId( this.getId() + "-blind").css("display","none");
	}
	
};
}; // end of sap.m.TileContainer
if ( !jQuery.sap.isDeclared('sap.m.TileGroup') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.TileGroup.
jQuery.sap.declare("sap.m.TileGroup");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new TileGroup.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTileWidth tileWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTileHeight tileHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTilePadding tilePadding} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTitle title} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container that arranges same-size tiles nicely on carousel pages
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.TileGroup
 */
sap.ui.core.Control.extend("sap.m.TileGroup", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"tileWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"tileHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"tilePadding" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"title" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
    	"tiles" : {type : "sap.ui.core.Control", multiple : true, singularName : "tile"}
	}
}});


/**
 * Creates a new subclass of class sap.m.TileGroup with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.TileGroup.extend
 * @function
 */


/**
 * Getter for property <code>tileWidth</code>.
 * The width of a tile in pixel
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>tileWidth</code>
 * @public
 * @name sap.m.TileGroup#getTileWidth
 * @function
 */

/**
 * Setter for property <code>tileWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sTileWidth  new value for property <code>tileWidth</code>
 * @return {sap.m.TileGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileGroup#setTileWidth
 * @function
 */


/**
 * Getter for property <code>tileHeight</code>.
 * The height of a tile in pixel
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>tileHeight</code>
 * @public
 * @name sap.m.TileGroup#getTileHeight
 * @function
 */

/**
 * Setter for property <code>tileHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sTileHeight  new value for property <code>tileHeight</code>
 * @return {sap.m.TileGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileGroup#setTileHeight
 * @function
 */


/**
 * Getter for property <code>tilePadding</code>.
 * The distance between two tiles in pixel
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>tilePadding</code>
 * @public
 * @name sap.m.TileGroup#getTilePadding
 * @function
 */

/**
 * Setter for property <code>tilePadding</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sTilePadding  new value for property <code>tilePadding</code>
 * @return {sap.m.TileGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileGroup#setTilePadding
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * the title of the group
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.TileGroup#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.TileGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileGroup#setTitle
 * @function
 */


/**
 * Getter for aggregation <code>tiles</code>.<br/>
 * tiles to be displayed
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.TileGroup#getTiles
 * @function
 */


/**
 * Inserts a tile into the aggregation named <code>tiles</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTile the tile to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tile should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tile is inserted at 
 *             the last position        
 * @return {sap.m.TileGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileGroup#insertTile
 * @function
 */

/**
 * Adds some tile <code>oTile</code> 
 * to the aggregation named <code>tiles</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTile the tile to add; if empty, nothing is inserted
 * @return {sap.m.TileGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileGroup#addTile
 * @function
 */

/**
 * Removes an tile from the aggregation named <code>tiles</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTile the tile to remove or its index or id
 * @return {sap.ui.core.Control} the removed tile or null
 * @public
 * @name sap.m.TileGroup#removeTile
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.TileGroup#removeAllTiles
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tiles</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.TileGroup#indexOfTile
 * @function
 */
	

/**
 * Destroys all the tiles in the aggregation 
 * named <code>tiles</code>.
 * @return {sap.m.TileGroup} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TileGroup#destroyTiles
 * @function
 */


// Start of sap/m/TileGroup.js

/**
 * @private
 */

sap.m.TileGroup.prototype.init = function() {
}



sap.m.TileGroup.prototype.onBeforeRendering = function() {

	this._createTilePages();

	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
}

sap.m.TileGroup.prototype.onAfterRendering = function() {
	this._renderTiles(false);
	this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef().parentElement,  jQuery.proxy(this._resize, this));
}


sap.m.TileGroup.prototype._resize = function() {
	this._renderTiles(true);
}


sap.m.TileGroup.prototype.exit = function() {
	if (this._sResizeListenerId) {
		sap.ui.core.ResizeHandler.deregister(this._sResizeListenerId);
		this._sResizeListenerId = null;
	}
}

sap.m.TileGroup.prototype._renderTiles = function(bResize) {

	var maxtiles = this._getMaxTiles();
	



	// rendering
//	
//	if (bResize && !bzoom && tiles <= this._maxtilex && tiles <= maxtilex) return;
//	if (bResize && !bzoom && maxtilex === this._maxtilex && maxtiles === this._maxtiles) return;
//	if (bResize && !bzoom && maxtilex === this._maxtilex && tiles <= maxtiles && tiles <= this._maxtiles) return;
//	
//	if (bResize && (maxtiles == this._maxtiles || (tiles <= maxtiles && tiles <= this._maxtiles))){
//		sap.ui.getCore().byId(this._carousel.getActivePage()).setWidth(wwidth).setHeight(wheight);
//	} else {
//		this._carousel.destroyPages();
//		if (maxtiles > 0){
//			var pages = Math.ceil(tiles / maxtiles);
//			this._carousel.setShowPageIndicator(pages>1);
//			for (var p=0; p<pages;p++){
//				var tileGroup = new sap.m.internal.TileGroup({
//					tileWidthPx: tilewidth, 
//					tileHeightPx: tileheight, 
//					tilePaddingPx: tilepadding, 
//					width: wwidth, 
//					height: wheight,
//					tileWidth: this.getTileWidth(),
//					tileHeight: this.getTileHeight()
//				});
//				for (var i=p*maxtiles; i<Math.min(p*maxtiles+maxtiles,tiles); i++) {
//						tileGroup.addAssociation("tiles",aTiles[i], true);
//				}
//				this._carousel.addPage(TileGroup);
//			}
//		}
//	}
//	this._maxtiles = maxtiles;
//	this._maxtilex = maxtilex;
//	
}



}; // end of sap.m.TileGroup
if ( !jQuery.sap.isDeclared('sap.m.TilePage') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.TilePage.
jQuery.sap.declare("sap.m.TilePage");



/**
 * Constructor for a new TilePage.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTileWidth tileWidth} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTileHeight tileHeight} : sap.ui.core.CSSSize</li>
 * <li>{@link #getTilePadding tilePadding} : sap.ui.core.CSSSize</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '100%')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getGroup group} : string | sap.ui.core.Control</li>
 * <li>{@link #getContainer container} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Page#constructor sap.m.Page}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container that arranges same-size tiles nicely on carousel pages
 * @extends sap.m.Page
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.TilePage
 */
sap.m.Page.extend("sap.m.TilePage", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"tileWidth" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"tileHeight" : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : null},
		"tilePadding" : {type : "sap.ui.core.CSSSize", group : "Misc", defaultValue : null},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'}
	},
	aggregations : {
    	"tiles" : {type : "sap.ui.core.Control", multiple : true, singularName : "tile"}
	},
	associations : {
		"group" : {type : "sap.ui.core.Control", multiple : false}, 
		"container" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.TilePage with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.TilePage.extend
 * @function
 */


/**
 * Getter for property <code>tileWidth</code>.
 * The width of a tile in pixel
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>tileWidth</code>
 * @public
 * @name sap.m.TilePage#getTileWidth
 * @function
 */

/**
 * Setter for property <code>tileWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sTileWidth  new value for property <code>tileWidth</code>
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#setTileWidth
 * @function
 */


/**
 * Getter for property <code>tileHeight</code>.
 * The height of a tile in pixel
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>tileHeight</code>
 * @public
 * @name sap.m.TilePage#getTileHeight
 * @function
 */

/**
 * Setter for property <code>tileHeight</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sTileHeight  new value for property <code>tileHeight</code>
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#setTileHeight
 * @function
 */


/**
 * Getter for property <code>tilePadding</code>.
 * The distance between two tiles in pixel
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>tilePadding</code>
 * @public
 * @name sap.m.TilePage#getTilePadding
 * @function
 */

/**
 * Setter for property <code>tilePadding</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.CSSSize} sTilePadding  new value for property <code>tilePadding</code>
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#setTilePadding
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * The width of the container in pixel
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.m.TilePage#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#setWidth
 * @function
 */


/**
 * Getter for property <code>height</code>.
 * The height of the container in pixel
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.m.TilePage#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#setHeight
 * @function
 */


/**
 * Getter for aggregation <code>tiles</code>.<br/>
 * tiles on the page
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.TilePage#getTiles
 * @function
 */


/**
 * Inserts a tile into the aggregation named <code>tiles</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTile the tile to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tile should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tile is inserted at 
 *             the last position        
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#insertTile
 * @function
 */

/**
 * Adds some tile <code>oTile</code> 
 * to the aggregation named <code>tiles</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTile the tile to add; if empty, nothing is inserted
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#addTile
 * @function
 */

/**
 * Removes an tile from the aggregation named <code>tiles</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTile the tile to remove or its index or id
 * @return {sap.ui.core.Control} the removed tile or null
 * @public
 * @name sap.m.TilePage#removeTile
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.TilePage#removeAllTiles
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tiles</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.TilePage#indexOfTile
 * @function
 */
	

/**
 * Destroys all the tiles in the aggregation 
 * named <code>tiles</code>.
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#destroyTiles
 * @function
 */


/**
 * The group this page belongs to
 *
 * @return {string} Id of the element which is the current target of the <code>group</code> association, or null
 * @public
 * @name sap.m.TilePage#getGroup
 * @function
 */

/**
 * The group this page belongs to
 *
 * @param {string | sap.ui.core.Control} vGroup 
 *    Id of an element which becomes the new target of this <code>group</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#setGroup
 * @function
 */


	
/**
 * the container this page belongs to
 *
 * @return {string} Id of the element which is the current target of the <code>container</code> association, or null
 * @public
 * @name sap.m.TilePage#getContainer
 * @function
 */

/**
 * the container this page belongs to
 *
 * @param {string | sap.ui.core.Control} vContainer 
 *    Id of an element which becomes the new target of this <code>container</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.m.TilePage} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.TilePage#setContainer
 * @function
 */


	
// Start of sap/m/TilePage.js

/**
 * @private
 */

sap.m.TilePage.prototype.addTile = function(tile) {
	var pos = this.getTiles().length;
	if(pos < this._maxtiles){
		this.insertTile(tile,pos);
	} else {
		jQuery.sap.log.debug('Pos '+pos+' maxtiles ' + this._maxtiles);
		this._sendTileToNextPage(tile, false);
	}
}

sap.m.TilePage.prototype.insertTile = function(tile, index) {
	if (index > this.getTiles().length)  {
		jQuery.sap.log.debug('TilePage.insertTile trying to insert a tile too far out');
	}
	tile.setSize(this._tilewidth, this._tileheight);
	var rm = sap.ui.getCore().createRenderManager();
	var jQueryTilesSelector = jQuery.sap.byId( this.getId() + "-cont" ); 
	rm.render(tile, jQueryTilesSelector[0]);
	rm.destroy();
	if (index < this.getTiles().length){
		jQuery(jQueryTilesSelector.children()[index]).before(tile.getDomRef());
	}
	this.insertAggregation("tiles", tile, index, true);
	if (this.getTiles().length > this._maxtiles){
		this._sendTileToNextPage(this.getTiles()[this._maxtiles], true);
	}
	this._updateTilePositions();
}

sap.m.TilePage.prototype.deleteTile = function(tile) {
	var index = this.getTiles().indexOf(tile.getId()); 
	if (index>=0){
		this.removeAggregation("tiles",tile.getId(), false);
		tile.$().remove();
		this._updateTilePositions();
		if (this.getTiles().length < this._maxtiles) this._appendFirstTileFromNextPage();
	} else jQuery.sap.log.debug('TilePage.deleteTile trying to remove nonexisting tile');
}


sap.m.TilePage.prototype._resize = function() {

	this._calculateSpace();
	
	for (var i=this.getTiles().length; i<this._maxtiles; i++){
		if (!this._appendFirstTileFromNextPage()) break;
	}
	for (var i=this.getTiles().length-1; i>=this._maxtiles; i--){
		this._sendTileToNextPage(this.getTiles()[i], true);
	}
	
	this._updateTilePositions();
	
}

sap.m.TilePage.prototype.onBeforeRendering = function() {
//	this.setFooter(null);
//	this.setEnableScrolling(false);
}

sap.m.TilePage.prototype.onAfterRendering = function() {
	this._calculateSpace();
	var tiles = this.getTiles();
	var rm = sap.ui.getCore().createRenderManager();
	this._updateTilePositions();
	for (var t=0; t<tiles.length; t++){
		rm.render(tiles[t], jQuery.sap.byId( this.getId() + "-cont" )[0]);
	}
	rm.destroy();
}



sap.m.TilePage.prototype._appendFirstTileFromNextPage = function(){
	var nextpage = sap.ui.getCore().byId(this.getContainer()).getNextPage(this, false);
	if (nextpage){
		if (nextpage.getTiles().length>0){
			var tile = nextpage.getTiles()[0];
			nextpage.deleteTile(tile);
			this.addTile(tile);
			return true;
		}
		if (nextpage.getTiles().length==0){
			sap.ui.getCore().byId(this.getContainer()).deletePage(nextpage);
		}
	}
	return false;
}

sap.m.TilePage.prototype._sendTileToNextPage = function(tile, bBeggining){
	var nextpage = sap.ui.getCore().byId(this.getContainer()).getNextPage(this, true);
	this.deleteTile(tile);
	bBeggining ? nextpage.insertTile(tile,0) : nextpage.addTile(tile);
}

sap.m.TilePage.prototype._updateTilePositions = function(){
	//this._calculateSpace();
	var tiles = this.getTiles();
	for (var t=0; t<tiles.length; t++){
		tiles[t].setPos(
			this._borderx + t % this._maxtilex * (this._tilewidth + this._tilepadding),
			this._bordery + Math.floor(t / this._maxtilex) * (this._tileheight + this._tilepadding)
		);
		//tiles[t].setSize(this._tilewidth, this._tileheight);
	}
}

sap.m.TilePage.prototype._calculateSpace = function()
{
	var tilewidth = this._tilewidth;
	var tileheight = this._tileheight;
	var tilepadding = this._tilepadding; 
	var wwidth =  jQuery.sap.byId( this.getId() + "-cont" ).width();
	var wheight = jQuery.sap.byId( this.getId() + "-cont" ).height();
	var tiles = this.getTiles().length;

// calculation
	var maxtilex = Math.floor((wwidth  + tilepadding) / (tilewidth + tilepadding));
	var maxtiley = Math.floor((wheight + tilepadding) / (tileheight + tilepadding));
	var maxtiles = maxtilex * maxtiley;

	var numtilex = (tiles < maxtilex)  ? tiles : maxtilex;
	var numtiley = (tiles / numtilex < maxtiley)  ? Math.ceil(tiles / numtilex) : maxtiley;
	var numtiles = tiles < maxtiles ?  tiles : maxtiles;

	var borderx = Math.floor( ( wwidth  - ( tilewidth  + tilepadding ) * numtilex - tilepadding ) / 2);
	var bordery = Math.floor( ( wheight - ( tileheight + tilepadding ) * numtiley - tilepadding ) / 2);

	if (sap.ui.getCore().byId(this.getContainer()).getTileGroups().length>1 || sap.ui.getCore().byId(this.getGroup()).getTiles().length > maxtiles) { 
		wheight = wheight - 30; //30 is the carousel paging area // look at CSS definition!!!!
		var maxtiley = Math.floor((wheight + tilepadding) / (tileheight + tilepadding));
		var maxtiles = maxtilex * maxtiley;
		sap.ui.getCore().byId(this.getContainer())._carousel.setShowPageIndicator(true);
	} else sap.ui.getCore().byId(this.getContainer())._carousel.setShowPageIndicator(false);
	
	this._maxtiles = maxtiles;
	this._maxtilex = maxtilex;
	this._maxtiley = maxtiley;
	this._borderx  = borderx;
	this._bordery  = bordery;
	
	jQuery.sap.log.debug("maxtiles "+ maxtiles +" on page " + this.getId() + ", w:" + wwidth + ", h:" + wheight);

}


sap.m.TilePage.prototype._toPixel = function(size) {
	var test = jQuery('<div style="display:none; width:'+size+';">').appendTo('body');
	var pixelSize = test.width();
	test.remove();
	return pixelSize;
}

sap.m.TilePage.prototype.setTileWidth = function(tileWidth){
	this.setProperty("tileWidth", tileWidth, true);
	this._tilewidth = this._toPixel(tileWidth);
	jQuery.sap.log.debug("Tile width in pixel: " + this._tilewidth);
}
sap.m.TilePage.prototype.setTileHeight = function(tileHeight){
	this.setProperty("tileHeight", tileHeight, true);
	this._tileheight = this._toPixel(tileHeight);
	jQuery.sap.log.debug("Tile height in pixel: " + this._tileheight);
}
sap.m.TilePage.prototype.setTilePadding = function(tilePadding){
	this.setProperty("tilePadding", tilePadding, true);
	this._tilepadding = this._toPixel(tilePadding);
	jQuery.sap.log.debug("Tile padding in pixel: " + this._tilepadding);
}

}; // end of sap.m.TilePage
if ( !jQuery.sap.isDeclared('sap.m.VBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.VBox.
jQuery.sap.declare("sap.m.VBox");



/**
 * Constructor for a new VBox.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.FlexBox#constructor sap.m.FlexBox}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The VBox control builds the container for a vertical flexible box layout. VBox is a convenience control as it is just a specialized FlexBox control.
 * @extends sap.m.FlexBox
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.VBox
 */
sap.m.FlexBox.extend("sap.m.VBox", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m"
}});


/**
 * Creates a new subclass of class sap.m.VBox with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.VBox.extend
 * @function
 */


// Start of sap/m/VBox.js

}; // end of sap.m.VBox
if ( !jQuery.sap.isDeclared('sap.m.VBoxRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.m.VBoxRenderer");


/**
 * @class VBox renderer.
 * @static
 */
sap.m.VBoxRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.m.VBoxRenderer.render = function(oRm, oControl){
	sap.m.FlexBoxRenderer.render.apply(this, [oRm, oControl]);
};

}; // end of sap.m.VBoxRenderer
if ( !jQuery.sap.isDeclared('sap.m.ActionListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ActionListItem.
jQuery.sap.declare("sap.m.ActionListItem");



/**
 * Constructor for a new ActionListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ActionListItem should be used to fire actions when tapped.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.ActionListItem
 */
sap.m.ListItemBase.extend("sap.m.ActionListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.ActionListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ActionListItem.extend
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text of the action list item.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.ActionListItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.ActionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionListItem#setText
 * @function
 */


// Start of sap/m/ActionListItem.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained


sap.m.ActionListItem.prototype.init = function() {
	this.setType(sap.m.ListType.Active);
	sap.m.ListItemBase.prototype.init.apply(this, arguments);
};
}; // end of sap.m.ActionListItem
if ( !jQuery.sap.isDeclared('sap.m.ActionSheet') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ActionSheet.
jQuery.sap.declare("sap.m.ActionSheet");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new ActionSheet.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getPlacement placement} : sap.m.PlacementType (default: sap.m.PlacementType.Bottom)</li>
 * <li>{@link #getShowCancelButton showCancelButton} : boolean (default: true)</li>
 * <li>{@link #getCancelButtonText cancelButtonText} : string</li>
 * <li>{@link #getTitle title} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getButtons buttons} : sap.m.Button[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.ActionSheet#event:cancelButtonTap cancelButtonTap} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:beforeOpen beforeOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:afterOpen afterOpen} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:beforeClose beforeClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.ActionSheet#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ActionSheet is a special kind of control which contains one or more sap.m.Button(s) and the ActionSheet will be closed when one of the buttons is tapped. It looks similar as a sap.m.Dialog in iPhone and Android while as a sap.m.Popover in iPad.
 * @extends sap.ui.core.Control
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @name sap.m.ActionSheet
 */
sap.ui.core.Control.extend("sap.m.ActionSheet", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"openBy", "close", "isOpen"
	],

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"placement" : {type : "sap.m.PlacementType", group : "Appearance", defaultValue : sap.m.PlacementType.Bottom},
		"showCancelButton" : {type : "boolean", group : "Appearance", defaultValue : true},
		"cancelButtonText" : {type : "string", group : "Appearance", defaultValue : null},
		"title" : {type : "string", group : "Appearance", defaultValue : null}
	},
	aggregations : {
    	"buttons" : {type : "sap.m.Button", multiple : true, singularName : "button"}, 
    	"_cancelButton" : {type : "sap.m.Button", multiple : false, visibility : "hidden"}
	},
	events : {
		"cancelButtonTap" : {}, 
		"beforeOpen" : {}, 
		"afterOpen" : {}, 
		"beforeClose" : {}, 
		"afterClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.ActionSheet with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ActionSheet.extend
 * @function
 */

sap.m.ActionSheet.M_EVENTS = {'cancelButtonTap':'cancelButtonTap','beforeOpen':'beforeOpen','afterOpen':'afterOpen','beforeClose':'beforeClose','afterClose':'afterClose'};


/**
 * Getter for property <code>placement</code>.
 * The ActionSheet behaves as a sap.m.Popover in iPad and this property is the information about on which side will the popover be placed at. Possible values are sap.m.PlacementType.Left, sap.m.PlacementType.Right, sap.m.PlacementType.Top, sap.m.PlacementType.Bottom. The default value is sap.m.PlacementType.Bottom.
 *
 * Default value is <code>Bottom</code>
 *
 * @return {sap.m.PlacementType} the value of property <code>placement</code>
 * @public
 * @name sap.m.ActionSheet#getPlacement
 * @function
 */

/**
 * Setter for property <code>placement</code>.
 *
 * Default value is <code>Bottom</code> 
 *
 * @param {sap.m.PlacementType} oPlacement  new value for property <code>placement</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#setPlacement
 * @function
 */


/**
 * Getter for property <code>showCancelButton</code>.
 * If this is set to true, there will be a cancel button shown below the action buttons. There won't be any cancel button shown in iPad regardless of this property. The default value is set to true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCancelButton</code>
 * @public
 * @name sap.m.ActionSheet#getShowCancelButton
 * @function
 */

/**
 * Setter for property <code>showCancelButton</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCancelButton  new value for property <code>showCancelButton</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#setShowCancelButton
 * @function
 */


/**
 * Getter for property <code>cancelButtonText</code>.
 * This is the text displayed in the cancelButton. Default value is "Cancel", and it's translated according to the current locale setting. This property will be ignored when running either in iPad or showCancelButton is set to false.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>cancelButtonText</code>
 * @public
 * @name sap.m.ActionSheet#getCancelButtonText
 * @function
 */

/**
 * Setter for property <code>cancelButtonText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCancelButtonText  new value for property <code>cancelButtonText</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#setCancelButtonText
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title will be show in the header area in iPhone and every Android devices. This property will be ignored in iPad.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.ActionSheet#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#setTitle
 * @function
 */


/**
 * Getter for aggregation <code>buttons</code>.<br/>
 * These buttons are added to the content area in ActionSheet control. When button is tapped, the ActionSheet is closed before the tap event listener is called.
 * 
 * @return {sap.m.Button[]}
 * @public
 * @name sap.m.ActionSheet#getButtons
 * @function
 */


/**
 * Inserts a button into the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *          oButton the button to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the button should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the button is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the button is inserted at 
 *             the last position        
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#insertButton
 * @function
 */

/**
 * Adds some button <code>oButton</code> 
 * to the aggregation named <code>buttons</code>.
 *
 * @param {sap.m.Button}
 *            oButton the button to add; if empty, nothing is inserted
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#addButton
 * @function
 */

/**
 * Removes an button from the aggregation named <code>buttons</code>.
 *
 * @param {int | string | sap.m.Button} vButton the button to remove or its index or id
 * @return {sap.m.Button} the removed button or null
 * @public
 * @name sap.m.ActionSheet#removeButton
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>buttons</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.m.Button[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ActionSheet#removeAllButtons
 * @function
 */

/**
 * Checks for the provided <code>sap.m.Button</code> in the aggregation named <code>buttons</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.m.Button}
 *            oButton the button whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ActionSheet#indexOfButton
 * @function
 */
	

/**
 * Destroys all the buttons in the aggregation 
 * named <code>buttons</code>.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#destroyButtons
 * @function
 */


/**
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside. 
 *
 * @name sap.m.ActionSheet#cancelButtonTap
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event is fired when the cancelButton is tapped. For iPad, this event is also fired when showCancelButton is set to true, and Popover is closed by tapping outside. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachCancelButtonTap
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'cancelButtonTap' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachCancelButtonTap
 * @function
 */

/**
 * Fire event cancelButtonTap to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireCancelButtonTap
 * @function
 */


/**
 * This event will be fired before the ActionSheet is opened. 
 *
 * @name sap.m.ActionSheet#beforeOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event will be fired before the ActionSheet is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachBeforeOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachBeforeOpen
 * @function
 */

/**
 * Fire event beforeOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireBeforeOpen
 * @function
 */


/**
 * This event will be fired after the ActionSheet is opened. 
 *
 * @name sap.m.ActionSheet#afterOpen
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event will be fired after the ActionSheet is opened. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachAfterOpen
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterOpen' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachAfterOpen
 * @function
 */

/**
 * Fire event afterOpen to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireAfterOpen
 * @function
 */


/**
 * This event will be fired before the ActionSheet is closed. 
 *
 * @name sap.m.ActionSheet#beforeClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event will be fired before the ActionSheet is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachBeforeClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'beforeClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachBeforeClose
 * @function
 */

/**
 * Fire event beforeClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireBeforeClose
 * @function
 */


/**
 * This event will be fired after the ActionSheet is closed. 
 *
 * @name sap.m.ActionSheet#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.ActionSheet</code>.<br/> itself. 
 *  
 * This event will be fired after the ActionSheet is closed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.ActionSheet</code>.<br/> itself.
 *
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#attachAfterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.m.ActionSheet</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ActionSheet#detachAfterClose
 * @function
 */

/**
 * Fire event afterClose to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.ActionSheet} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.ActionSheet#fireAfterClose
 * @function
 */


/**
 * Calling this method will make the ActionSheet visible on the screen.
 *
 * @name sap.m.ActionSheet.prototype.openBy
 * @function
 * @param {object} 
 *         oControl
 *         The ActionSheet behaves as a sap.m.Popover in iPad and the control parameter is the object to which the popover will be placed. It can be not only a UI5 control, but also an existing dom reference. The side of the placement depends on the placement property set in the popover. In other platforms, ActionSheet behaves as a standard dialog and this parameter is ignored because dialog is aligned to the screen.

 * @type void
 * @public
 */


/**
 * Calling this method will make the ActionSheet disappear from the screen.
 *
 * @name sap.m.ActionSheet.prototype.close
 * @function

 * @type void
 * @public
 */


/**
 * The method checks if the ActionSheet is open. It returns true when the ActionSheet is currently open (this includes opening and closing animations), otherwise it returns false.
 *
 * @name sap.m.ActionSheet.prototype.isOpen
 * @function

 * @type boolean
 * @public
 */


// Start of sap/m/ActionSheet.js



sap.m.ActionSheet.prototype.exit = function(){
	if(this._parent){
		this._parent.destroy();
		this._parent = null;
	}
	if(this._oCancelButton){
		this._oCancelButton.destroy();
		this._oCancelButton = null;
	}
};


sap.m.ActionSheet.prototype.openBy = function(oControl){
	var that = this;
	if(!this._parent){
		if(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !jQuery.device.is.phone)){
		//create a Popover instance for iPad
			this._parent = new sap.m.Popover({
				placement: this.getPlacement(),
				showHeader: false,
				content: [this],
				beforeOpen: function(){
					that.fireBeforeOpen();
				},
				afterOpen: function(){
					that.fireAfterOpen();
				},
				beforeClose: function(){
					that.fireBeforeClose();
				},
				afterClose: function(){
					if(that.getShowCancelButton()){
						that.fireCancelButtonTap();
					}
					that.fireAfterClose();
				}
			}).addStyleClass("sapMActionSheetPopover");

			if(jQuery.browser.msie){
				this._parent._fSetArrowPosition = jQuery.proxy(function(){
					sap.m.Popover.prototype._setArrowPosition.apply(this);
					
					var $this = this.$(),
						iContentWidth = $this.children(".sapMPopoverCont")[0].getBoundingClientRect().width;
					jQuery.each($this.find(".sapMActionSheet > .sapMBtn"), function(index, oButtonDom){
						var $button = jQuery(oButtonDom),
							iButtonWidth;
						$button.css("width", "");
						iButtonWidth = oButtonDom.getBoundingClientRect().width;
						if(iButtonWidth <= iContentWidth){
							$button.css("width", "100%");
						}
					});
				}, this._parent);
			}
		}else{
			//create a Dialog instance for the rest
			this._parent = new sap.m.Dialog({
				title: this.getTitle(),
				type: sap.m.DialogType.Standard,
				content: [this],
				beforeOpen: function(){
					that.fireBeforeOpen();
				},
				afterOpen: function(){
					that.fireAfterOpen();
				},
				beforeClose: function(oEvent){
					that.fireBeforeClose({
						origin: oEvent.getParameter("origin")
					});
				},
				afterClose: function(oEvent){
					that.fireAfterClose({
						origin: oEvent.getParameter("origin")
					});
				}
			}).addStyleClass("sapMActionSheetDialog");
			
			if(this.getTitle()){
				this._parent.addStyleClass("sapMActionSheetDialogWithTitle");
			}
			
			if(!(jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && jQuery.device.is.phone))){
				this._parent.setLeftButton(this._getCancelButton());
			}
			
			//need to modify some internal methods of Dialog for iPhone, because
			//the actionsheet won't be sized full screen if the content is smaller than the whole screen.
			//Then the transform animation need to be set at runtime with some height calculation. 
			if(jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && jQuery.device.is.phone)){
				//remove the transparent property from blocklayer
				this._parent.oPopup.setModal(true);
				this._parent._setDimensions = function(){
					var $this = this.$(),
						$content = jQuery.sap.byId(this.getId() + "-cont");
					//CSS reset
					$this.css({
						"width": "100%",
						"max-height": "100%",
						"bottom": "",
						"left": "0px"
					});
					$content.css("max-height", "");
				};
				
				//Generate a translate3d string with the given y offset
				function genTransformCSS(y){
					return "translate3d(0px, " + (y > 0 ? y : 0) +"px, 0px)";
				}
				
				this._parent._openAnimation = function($this, iRealDuration, fnOpened){
					var $window = jQuery(window), 
						iWindowHeight = $window.height(),
						sStartTransform = genTransformCSS(iWindowHeight);
					
					//need to set the transform css before its visible, in order to trigger the animation properly.
					$this.css({
						"top": "",
						"-webkit-transform": sStartTransform,
						"transform": sStartTransform,
						"display": "block"
					});
					
					$this.bind("webkitTransitionEnd transitionend", function(){
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						$this.removeClass("sapMDialogSliding");
						fnOpened();
					});
					
					//need a timeout to trigger the animation
					setTimeout(function(){
						var iTop = iWindowHeight - $this.outerHeight(),
							//calculation for the end point of the animation
							sEndTransform = genTransformCSS(iTop);
						$this.css({
							"-webkit-transform": sEndTransform,
							"transform": sEndTransform
						}).addClass("sapMDialogSliding").removeClass("sapMDialogHidden");
					}, 0);
				};
				
				this._parent._closeAnimation = function($this, iRealDuration, fnClosed){
					var $window = jQuery(window), 
						sTransform = genTransformCSS($window.height());
					$this.bind("webkitTransitionEnd transitionend", function(){
						jQuery(this).unbind("webkitTransitionEnd transitionend");
						$this.removeClass("sapMDialogSliding");
						fnClosed();
					});
					$this.css({
						"-webkit-transform": sTransform,
						"transform": sTransform
					}).addClass("sapMDialogSliding");
				};
				
				//set the animation to the interal oPopup instance on Dialog
				this._parent.oPopup.setAnimations(jQuery.proxy(this._parent._openAnimation, this._parent), jQuery.proxy(this._parent._closeAnimation, this._parent));				
				
				
				//also need to change the logic for adjusting scrollable area.
				this._parent._adjustScrollingPane = function(){
					var $this = this.$(),
						iHeight = $this.height(),
						iHeaderHeight = $this.children("header.sapMBar").outerHeight(true),
						$content = jQuery.sap.byId(this.getId() + "-cont");
				
					$content.css("max-height", iHeight - iHeaderHeight);
					this._oScroller.refresh();
				};
				
				//only need to recalculate the transform offset when window resizes, doesn't need to reposition using Popup.js again for iPhone.
				this._parent._fOrientationChange = jQuery.proxy(function(){
					this._setDimensions();
					
					var $window = jQuery(window), 
						iWindowHeight = $window.height(),
						$this = this.$(),
						iTop = iWindowHeight - $this.outerHeight(),
						sTransform = genTransformCSS(iTop),
						$content = jQuery.sap.byId(this.getId() + "-cont");
					
					$this.css({
						"-webkit-transform": sTransform,
						"transform": sTransform
					});
					
					this._adjustScrollingPane();
				}, this._parent);
			}
		}
	}
	
	//open the ActionSheet
	if(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !jQuery.device.is.phone)){
		this._parent.openBy(oControl);
	}else{
		this._parent.open();
	}
};


sap.m.ActionSheet.prototype.close = function(oControl){
	if(this._parent){
		this._parent.close();
	}
};


sap.m.ActionSheet.prototype.isOpen = function(oControl){
	return !!this._parent && this._parent.isOpen();
};


sap.m.ActionSheet.prototype._createCancelButton = function(){
	if(!this._oCancelButton){
		var sCancelButtonText = (this.getCancelButtonText()) ? this.getCancelButtonText() : sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("ACTIONSHEET_CANCELBUTTON_TEXT"),
			that = this;
//			var sButtonStyle = (jQuery.os.ios) ? sap.m.ButtonType.Unstyled : sap.m.ButtonType.Default;
		this._oCancelButton = new sap.m.Button(this.getId() + '-cancelBtn', {
			text: sCancelButtonText,
			type: sap.m.ButtonType.Transparent,
			tap : function() {
				if(!(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !jQuery.device.is.phone)) && that._parent){
					that._parent._oCloseTrigger = this;
				}
				that.close();
				that.fireCancelButtonTap();
			}
		}).addStyleClass("sapMActionSheetButton sapMActionSheetCancelButton sapMBtnTransparent");
		
		if(jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && jQuery.device.is.phone)){
			this.setAggregation("_cancelButton", this._oCancelButton, true);
		}
	}
	return this;
};

sap.m.ActionSheet.prototype._getCancelButton = function(){
	if(!(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !jQuery.device.is.phone)) && this.getShowCancelButton()){
		this._createCancelButton();
		return this._oCancelButton;
	}
	return null;
};

sap.m.ActionSheet.prototype._preProcessActionButton = function(oButton){
	var that = this, sType = oButton.getType();
	
	if(sap.m.Dialog._bOneDesign){
		if(sType !== sap.m.ButtonType.Accept && sType !== sap.m.ButtonType.Reject){
			oButton.setType(sap.m.ButtonType.Transparent);
		}
	}
	
	//this is only an experiment to add a default behavior to the buttons in ActionSheet,
	//may be removed later
	//now a before delegate is added to the button, which means the actionsheet will be closed first and then the tap listener on the button will be executed.
	oButton.addDelegate({
		ontap: function(){
			if(!(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !jQuery.device.is.phone))){
				that._parent._oCloseTrigger = this;
			}
			that.close();
		}
	},true);
	
	return this;
};

sap.m.ActionSheet.prototype.setShowCancelButton = function(bValue){
	if(this._parent){
		if(jQuery.device.is.iphone || (sap.m.Dialog._bOneDesign && jQuery.device.is.phone)){
			//if iPhone, we need to rerender to show or hide the cancel button
			this.setProperty("showCancelButton", bValue, false);
		}else if(!sap.m.Dialog._bOneDesign && !jQuery.os.ios){
			this.setProperty("showCancelButton", bValue, true);
			this._parent.setLeftButton(this._getCancelButton());
		}
	}else{
		this.setProperty("showCancelButton", bValue, true);
	}
	return this;
};

sap.m.ActionSheet.prototype.setTitle = function(sTitle){
	this.setProperty("title", sTitle, true);
	if(this._parent && !(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !jQuery.device.is.phone))){
		this._parent.setTitle(sTitle);
	}
	
	if(this._parent){
		if(sTitle){
			this._parent.addStyleClass("sapMActionSheetDialogWithTitle");
		}else{
			this._parent.removeStyleClass("sapMActionSheetDialogWithTitle");
		}
	}
	return this;
};

sap.m.ActionSheet.prototype.setPlacement = function(sPlacement){
	this.setProperty("placement", sPlacement, true);
	
	if(jQuery.device.is.ipad || (sap.m.Dialog._bOneDesign && !jQuery.device.is.phone)){
		if(this._parent){
			this._parent.setPlacement(sPlacement);
		}
	}
	return this;
};
}; // end of sap.m.ActionSheet
if ( !jQuery.sap.isDeclared('sap.m.App') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.App.
jQuery.sap.declare("sap.m.App");



/**
 * Constructor for a new App.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHomeIcon homeIcon} : any</li>
 * <li>{@link #getBackgroundColor backgroundColor} : string</li>
 * <li>{@link #getBackgroundImage backgroundImage} : sap.ui.core.URI</li>
 * <li>{@link #getBackgroundRepeat backgroundRepeat} : boolean (default: false)</li>
 * <li>{@link #getBackgroundOpacity backgroundOpacity} : float (default: 1)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.App#event:orientationChange orientationChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.NavContainer#constructor sap.m.NavContainer}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * App is the root element of a UI5 mobile application. It inherits from NavContainer and thus provides its navigation capabilities.
 * It also adds certain header tags to the HTML page which are considered useful for mobile apps.
 * @extends sap.m.NavContainer
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.App
 */
sap.m.NavContainer.extend("sap.m.App", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"homeIcon" : {type : "any", group : "Misc", defaultValue : null},
		"backgroundColor" : {type : "string", group : "Appearance", defaultValue : null},
		"backgroundImage" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"backgroundRepeat" : {type : "boolean", group : "Appearance", defaultValue : false},
		"backgroundOpacity" : {type : "float", group : "Appearance", defaultValue : 1}
	},
	events : {
		"orientationChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.App with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.App.extend
 * @function
 */

sap.m.App.M_EVENTS = {'orientationChange':'orientationChange'};


/**
 * Getter for property <code>homeIcon</code>.
 * The icon to be displayed on the home screen of iOS devices after the user does "add to home screen".
 * 
 * Note that only the first attempt to set the homeIcon will be executed, subsequent settings are ignored.
 * 
 * This icon must be in PNG format. The property can either hold the URL of one single icon which is used for all devices (and possibly scaled, which looks not perfect), or an object holding icon URLs for the different required sizes.
 * 
 * A desktop icon (used for bookmarks and overriding the favicon) can also be configured. This requires an object to be given and the "icon" property of this object then defines the desktop bookmark icon. For this icon, PNG is not supported by Internet Explorer. The ICO format is supported by all browsers. ICO is also preferred for this desktop icon setting because the file can contain different images for different resolutions.
 * 
 * One example is:
 * 
 * app.setHomeIcon({
 * 'phone':'phone-icon.png',
 * 'phone@2':'phone-retina.png',
 * 'tablet':'tablet-icon.png',
 * 'tablet@2':'tablet-retina.png',
 * 'icon':'desktop.ico'
 * });
 * 
 * The respective image sizes are 57/114 px for the phone and 72/144 px for the tablet.
 * If an object is given but one of the sizes is not given, the largest given icon will be used for this size.
 * 
 * On Android these icons may or may not be used by the device. Apparently chances can be improved by adding glare effect and rounded corners, setting the file name so it ends with "-precomposed.png" and setting the "homeIconPrecomposed" property to "true".
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>homeIcon</code>
 * @public
 * @name sap.m.App#getHomeIcon
 * @function
 */

/**
 * Setter for property <code>homeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oHomeIcon  new value for property <code>homeIcon</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.App#setHomeIcon
 * @function
 */


/**
 * Getter for property <code>backgroundColor</code>.
 * Background color of the App. If set, this color will override the default background defined by the theme. So this should only be set when really required.
 * Any configured background image will be placed above this colored background. But any theme adaptation in the Theme Designer will override this setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>backgroundColor</code>
 * @public
 * @since 1.11.2
 * @name sap.m.App#getBackgroundColor
 * @function
 */

/**
 * Setter for property <code>backgroundColor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBackgroundColor  new value for property <code>backgroundColor</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.App#setBackgroundColor
 * @function
 */


/**
 * Getter for property <code>backgroundImage</code>.
 * Background image of the App. If set, this image will override the default background defined by the theme. So this should only be set when really required.
 * This background image will be placed above any color set for the background. But any theme adaptation in the Theme Designer will override this image setting.
 * Use the "backgroundRepeat" property to define whether this image should be stretched to cover the complete App or whether it should be tiled.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>backgroundImage</code>
 * @public
 * @since 1.11.2
 * @name sap.m.App#getBackgroundImage
 * @function
 */

/**
 * Setter for property <code>backgroundImage</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sBackgroundImage  new value for property <code>backgroundImage</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.App#setBackgroundImage
 * @function
 */


/**
 * Getter for property <code>backgroundRepeat</code>.
 * Whether the background image (if configured) should be proportionally stretched to cover the whole App (false) or whether it should be tiled (true).
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>backgroundRepeat</code>
 * @public
 * @since 1.11.2
 * @name sap.m.App#getBackgroundRepeat
 * @function
 */

/**
 * Setter for property <code>backgroundRepeat</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bBackgroundRepeat  new value for property <code>backgroundRepeat</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.App#setBackgroundRepeat
 * @function
 */


/**
 * Getter for property <code>backgroundOpacity</code>.
 * Opacity of the background image. The opacity can be set between 0 (fully transparent) and 1 fully opaque).
 * This can be used to make the application content better readable by making the background image partly transparent.
 *
 * Default value is <code>1</code>
 *
 * @return {float} the value of property <code>backgroundOpacity</code>
 * @public
 * @since 1.11.2
 * @name sap.m.App#getBackgroundOpacity
 * @function
 */

/**
 * Setter for property <code>backgroundOpacity</code>.
 *
 * Default value is <code>1</code> 
 *
 * @param {float} fBackgroundOpacity  new value for property <code>backgroundOpacity</code>
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @since 1.11.2
 * @name sap.m.App#setBackgroundOpacity
 * @function
 */


/**
 * Fired when the orientation (portrait/landscape) of the device is changed. 
 *
 * @name sap.m.App#orientationChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {boolean} oControlEvent.getParameters.landscape Whether the device is in landscape orientation.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'orientationChange' event of this <code>sap.m.App</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.App</code>.<br/> itself. 
 *  
 * Fired when the orientation (portrait/landscape) of the device is changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.App</code>.<br/> itself.
 *
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.App#attachOrientationChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'orientationChange' event of this <code>sap.m.App</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.App#detachOrientationChange
 * @function
 */

/**
 * Fire event orientationChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'landscape' of type <code>boolean</code> Whether the device is in landscape orientation.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.App} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.App#fireOrientationChange
 * @function
 */


// Start of sap/m/App.js
sap.m.App.prototype.init = function() {
	sap.m.NavContainer.prototype.init.apply(this, arguments);

	this.addStyleClass("sapMApp");

	jQuery(jQuery.proxy(function(){
		jQuery.sap.initMobile({
			viewport: !this._debugZoomAndScroll,
			statusBar: "default",
			hideBrowser: true,
			preventScroll: !this._debugZoomAndScroll,
			homeIcon: this.getHomeIcon(),
			rootId: this.getId()
		});
		jQuery(window).bind("resize", jQuery.proxy(this._handleOrientationChange, this));
	},this));
};


sap.m.App.prototype.onAfterRendering = function() {
	var ref = this.getDomRef().parentNode;
	// set all parent elements to 100% height this *should* be done by the application in CSS, but people tend to forget it...
	if (ref && !ref._sapui5_heightFixed) {
		ref._sapui5_heightFixed = true;
		while (ref && ref !== document.documentElement) {
			var $ref = jQuery(ref);
			if ($ref.hasClass("sapMShellContent")) { // Shell as parent does this already
				break;
			}
			if (!ref.style.height) ref.style.height = "100%";
			ref = ref.parentNode;
		}
	}
};


/**
 * Termination of the App control
 * @private
 */
sap.m.App.prototype.exit = function() {
	jQuery(window).unbind("resize", this._handleOrientationChange);
	
	if (this._sInitTimer) {
		jQuery.sap.clearDelayedCall(this._sInitTimer);
	}
};

sap.m.App.prototype._handleOrientationChange = function() {
	var $window = jQuery(window);
	var isLandscape = $window.width() > $window.height();
	if (this._oldIsLandscape !== isLandscape) {
		this.fireOrientationChange({landscape: isLandscape});
		this._oldIsLandscape = isLandscape;
	}
};

// TODO: later, introduce tabs as a kind of separation between histories


// API methods

sap.m.App.prototype.setBackgroundOpacity = function(fOpacity) {
	if (fOpacity > 1 || fOpacity < 0) {
		jQuery.sap.log.warning("Invalid value " + fOpacity + " for App.setBackgroundOpacity() ignored. Valid values are: floats between 0 and 1.");
		return;
	}
	jQuery.sap.byId(this.getId() + "-BG").css("opacity", fOpacity);
	this.setProperty("backgroundOpacity", fOpacity, true); // no rerendering - live opacity change looks cooler
};

}; // end of sap.m.App
if ( !jQuery.sap.isDeclared('sap.m.ColumnListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.ColumnListItem.
jQuery.sap.declare("sap.m.ColumnListItem");



/**
 * Constructor for a new ColumnListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCells cells} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * ColumnListItem can be used to create columns inside the List like Table.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.ColumnListItem
 */
sap.m.ListItemBase.extend("sap.m.ColumnListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	defaultAggregation : "cells",
	aggregations : {
    	"_clonedHeaders" : {type : "sap.ui.core.Control", multiple : true, singularName : "_clonedHeader", visibility : "hidden"}, 
    	"cells" : {type : "sap.ui.core.Control", multiple : true, singularName : "cell", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.m.ColumnListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.ColumnListItem.extend
 * @function
 */


/**
 * Getter for aggregation <code>cells</code>.<br/>
 * Every item inside the cells aggregation defines one column of the row.
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.ColumnListItem#getCells
 * @function
 */


/**
 * Inserts a cell into the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.core.Control}
 *          oCell the cell to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the cell should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the cell is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the cell is inserted at 
 *             the last position        
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#insertCell
 * @function
 */

/**
 * Adds some cell <code>oCell</code> 
 * to the aggregation named <code>cells</code>.
 *
 * @param {sap.ui.core.Control}
 *            oCell the cell to add; if empty, nothing is inserted
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#addCell
 * @function
 */

/**
 * Removes an cell from the aggregation named <code>cells</code>.
 *
 * @param {int | string | sap.ui.core.Control} vCell the cell to remove or its index or id
 * @return {sap.ui.core.Control} the removed cell or null
 * @public
 * @name sap.m.ColumnListItem#removeCell
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>cells</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.ColumnListItem#removeAllCells
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>cells</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oCell the cell whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.ColumnListItem#indexOfCell
 * @function
 */
	

/**
 * Destroys all the cells in the aggregation 
 * named <code>cells</code>.
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#destroyCells
 * @function
 */


/**
 * Binder for aggregation <code>cells</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#bindCells
 * @function
 */

/**
 * Unbinder for aggregation <code>cells</code>.
 *
 * @return {sap.m.ColumnListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.ColumnListItem#unbindCells
 * @function
 */


// Start of sap/m/ColumnListItem.js

// prototype lookup for pop-in id
sap.m.ColumnListItem.prototype._popinId = false;

// remove pop-in from DOM
sap.m.ColumnListItem.prototype.removePopin = function() {
	if (this._popinId) {
		jQuery.sap.byId(this._popinId).remove();
		delete this._popinId;
	}
	return this;
};

// remove pop-in on destroy
sap.m.ColumnListItem.prototype.exit = function() {
	if (sap.m.ListItemBase.prototype.exit) {
		sap.m.ListItemBase.prototype.exit.call(this);
	}
	this.destroyAggregation("_clonedHeaders", true);
	return this.removePopin();
};

// active feedback for pop-in
sap.m.ColumnListItem.prototype._activeHandlingInheritor = function() {
	if (this._popinId) {
		jQuery.sap.byId(this._popinId).addClass("sapMLIBActive");
	}
};

// inactive feedback for pop-in
sap.m.ColumnListItem.prototype._inactiveHandlingInheritor = function() {
	if (this._popinId) {
		jQuery.sap.byId(this._popinId).removeClass("sapMLIBActive");
	}
};


/**
 * Handles event delegation for pop-ins
 *
 * @static
 * @protected
 *
 * @param {object} oEvent jQuery event object
 * @param {string} sEventName event name to map
 * @param {object} oContainerDomRef max parent element to search in DOM to find pop-in
 */
sap.m.ColumnListItem.handleEvents = function(oEvent, sEventName, oContainerDomRef) {
	// check if event is coming from pop-in
	var $popin = jQuery(oEvent.target).closest(".sapMListTblSubRow", oContainerDomRef);
	if ($popin.length) {
		// get the related Column List Item
		var oColumnLI = sap.ui.getCore().byId($popin.prev().attr("id"));
		if (oColumnLI) {
			// try to find scrControl from event
			oEvent.srcControl = sap.ui.getCore().byId(oEvent.target.id) || oColumnLI;

			// call the related ListItemBase event
			if (oColumnLI["on" + sEventName]) {
				oColumnLI["on" + sEventName](oEvent);
			}
		}
	}
};

/**
 * Remove pop-in from DOM via ListItem
 * This method can be called from list if remove aggregation is implemented
 *
 * @static
 * @protected
 * @param {sap.m.ColumnListItem} sap.m.ColumnListItem Control
 */
sap.m.ColumnListItem.removePopin = function(oLI) {
	jQuery.sap.byId(oLI.getId() + "-sub").remove();
	delete oLI._popinId;
};


/**
 * Toggle class name of the pop-in via ListItem
 *
 * @static
 * @protected
 * @param {sap.m.ColumnListItem} oLI sap.m.ColumnListItem Control
 * @param {string} sClassName CSS class name(s) to be toggled.
 * @param {boolean} bSwitch Determine whether the class should be added or removed.
 */
sap.m.ColumnListItem.toggleClass = function(oLI, sClassName, bSwitch) {
	jQuery.sap.byId(oLI.getId() + "-sub").toggleClass(sClassName, bSwitch);
};
}; // end of sap.m.ColumnListItem
if ( !jQuery.sap.isDeclared('sap.m.CustomListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.CustomListItem.
jQuery.sap.declare("sap.m.CustomListItem");



/**
 * Constructor for a new CustomListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * sap.m.CustomListItem Control
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.CustomListItem
 */
sap.m.ListItemBase.extend("sap.m.CustomListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.m.CustomListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.CustomListItem.extend
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * The content of this list item
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.CustomListItem#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.CustomListItem#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.CustomListItem#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.CustomListItem#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#destroyContent
 * @function
 */


/**
 * Binder for aggregation <code>content</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#bindContent
 * @function
 */

/**
 * Unbinder for aggregation <code>content</code>.
 *
 * @return {sap.m.CustomListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomListItem#unbindContent
 * @function
 */


// Start of sap/m/CustomListItem.js


}; // end of sap.m.CustomListItem
if ( !jQuery.sap.isDeclared('sap.m.CustomTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.CustomTile.
jQuery.sap.declare("sap.m.CustomTile");



/**
 * Constructor for a new CustomTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Use the Custom Tile to show a application specific content in the tile.
 * The tile width is 8.5em and height is 10em
 * @extends sap.m.Tile
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.CustomTile
 */
sap.m.Tile.extend("sap.m.CustomTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.CustomTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.CustomTile.extend
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Defines the Content of the CustomTile
 * 
 * @return {sap.ui.core.Control}
 * @public
 * @name sap.m.CustomTile#getContent
 * @function
 */


/**
 * Setter for the aggregated <code>content</code>.
 * @param oContent {sap.ui.core.Control}
 * @return {sap.m.CustomTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomTile#setContent
 * @function
 */
	

/**
 * Destroys the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.CustomTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.CustomTile#destroyContent
 * @function
 */


// Start of sap/m/CustomTile.js


}; // end of sap.m.CustomTile
if ( !jQuery.sap.isDeclared('sap.m.DateTimeInput') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.DateTimeInput.
jQuery.sap.declare("sap.m.DateTimeInput");



/**
 * Constructor for a new DateTimeInput.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.DateTimeInputType (default: sap.m.DateTimeInputType.Date)</li>
 * <li>{@link #getDisplayFormat displayFormat} : string</li>
 * <li>{@link #getValueFormat valueFormat} : string</li>
 * <li>{@link #getDateValue dateValue} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.DateTimeInput#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Allows end users to interact with date and/or time and select from a date and/or time pad.
 * @extends sap.m.InputBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.9.1
 * @name sap.m.DateTimeInput
 */
sap.m.InputBase.extend("sap.m.DateTimeInput", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"type" : {type : "sap.m.DateTimeInputType", group : "Data", defaultValue : sap.m.DateTimeInputType.Date},
		"displayFormat" : {type : "string", group : "Appearance", defaultValue : null},
		"valueFormat" : {type : "string", group : "Data", defaultValue : null},
		"dateValue" : {type : "object", group : "Data", defaultValue : null}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.DateTimeInput with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.DateTimeInput.extend
 * @function
 */

sap.m.DateTimeInput.M_EVENTS = {'change':'change'};


/**
 * Getter for property <code>type</code>.
 * Type of DateTimeInput (e.g. Date, Time, DateTime)
 *
 * Default value is <code>Date</code>
 *
 * @return {sap.m.DateTimeInputType} the value of property <code>type</code>
 * @public
 * @name sap.m.DateTimeInput#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Date</code> 
 *
 * @param {sap.m.DateTimeInputType} oType  new value for property <code>type</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#setType
 * @function
 */


/**
 * Getter for property <code>displayFormat</code>.
 * Displays date value in this given format in text field. Default value is taken from locale settings.
 * If you use data-binding on value property with type sap.ui.model.type.Date then you can ignore this property or latter wins.
 * If user browser supports native picker then this property is overwritten by browser with locale settings.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>displayFormat</code>
 * @public
 * @name sap.m.DateTimeInput#getDisplayFormat
 * @function
 */

/**
 * Setter for property <code>displayFormat</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDisplayFormat  new value for property <code>displayFormat</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#setDisplayFormat
 * @function
 */


/**
 * Getter for property <code>valueFormat</code>.
 * Given value property should match with valueFormat to parse date. Default value is taken from locale settings.
 * You can set and get value in this format.
 * If you use data-binding on value property with type sap.ui.model.type.Date you can ignore this property or latter wins.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueFormat</code>
 * @public
 * @name sap.m.DateTimeInput#getValueFormat
 * @function
 */

/**
 * Setter for property <code>valueFormat</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueFormat  new value for property <code>valueFormat</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#setValueFormat
 * @function
 */


/**
 * Getter for property <code>dateValue</code>.
 * This property as JavaScript Date Object can be used to assign a new value which is independent from valueFormat.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>dateValue</code>
 * @public
 * @name sap.m.DateTimeInput#getDateValue
 * @function
 */

/**
 * Setter for property <code>dateValue</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oDateValue  new value for property <code>dateValue</code>
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#setDateValue
 * @function
 */


/**
 * This event gets fired when the selection has finished and the value has changed. 
 *
 * @name sap.m.DateTimeInput#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue The new string value of the control in given valueFormat(or locale format).
 * @param {object} oControlEvent.getParameters.newDateValue The new value of control as JavaScript Date Object or null if value is empty.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.DateTimeInput</code>.<br/> itself. 
 *  
 * This event gets fired when the selection has finished and the value has changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.DateTimeInput</code>.<br/> itself.
 *
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.m.DateTimeInput</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DateTimeInput#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> The new string value of the control in given valueFormat(or locale format).</li>
 * <li>'newDateValue' of type <code>object</code> The new value of control as JavaScript Date Object or null if value is empty.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.DateTimeInput} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.DateTimeInput#fireChange
 * @function
 */


// Start of sap/m/DateTimeInput.js
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained

jQuery.sap.require('sap.ui.model.type.Date'); // unlisted dependency retained


!function(oPrototype, $) {

	var oi18n = sap.m.getLocaleData(),
		hasNativePicker = (function() {
			// if not platform dependent then we load custom picker
			if (sap.ui.core.theming.Parameters.get("sapMPlatformDependent") != "true") {
				return false;
			}

			// samsung galaxy android 4.1 has picker but it hangs after selection
			// in fact most of the android has some problems like opening a keyboard to type under Android 4.1
			// blackberry 10 has native pickers but no change event. Blur comes before picker shown and these makes pickers useless
			// Test page (http://jsfiddle.net/vve3W/2/light/)
			// there is no date time support for IE
			// http://caniuse.com/#feat=input-datetime
			if ($.os.blackberry || $.browser.msie || ($.os.android && $.os.fVersion <= 4.1 && !$.browser.chrome)) {
				return false;
			}
		}());

	$.extend(oPrototype, {
		//In iOS5 date-time fields do not fire change/input events
		_hasChangeEventBug: jQuery.support.touch &&
							$.os.ios &&
							$.os.fVersion < 6,
		_hasChangeEvent : true,
		_origin : "value",
		_super : sap.m.InputBase.prototype,
		_types : {
			Date : {
				isNative : hasNativePicker,
				valueFormat : oi18n.getDatePattern("short"),
				displayFormat : oi18n.getDatePattern("medium"),
				nativeFormat : "yyyy-MM-dd",
				nativeType : "date"
			},
			Time : {
				isNative : hasNativePicker,
				valueFormat : oi18n.getTimePattern("short"),
				displayFormat : oi18n.getTimePattern("short"),
				nativeFormat : "HH:mm:ss",
				nativeType : "time"
			},
			DateTime : {
				isNative : hasNativePicker,
				valueFormat : oi18n.getDateTimePattern("short"),	// does not include pattern but e.g "{1} {0}"
				displayFormat : oi18n.getDateTimePattern("short"),	// does not include pattern but e.g "{1} {0}"
				nativeFormat : "yyyy-MM-ddTHH:mm:ss" + (jQuery.os.ios ? ".S" : ""), //ios uses milliseconds
				nativeType : "datetime-local"	// without time-zone
			}
		}
	});

	//build DateTime formats from Date And Time values
	$.each(["Time", "Date"], function(nIndex, sType) {
		$.each(["valueFormat", "displayFormat"], function() {
			var oTypes = oPrototype._types;
			oTypes.DateTime[this] = oTypes.DateTime[this].replace("{" + nIndex + "}", oTypes[sType][this]);
		});
	});

}(sap.m.DateTimeInput.prototype, jQuery);

/**
 * Overwrite sap.m.Input::onBeforeRendering
 */
sap.m.DateTimeInput.prototype.onBeforeRendering = function() {
	this._super.onBeforeRendering.call(this);
	if (!this.mProperties.hasOwnProperty("type")) {
		this.setType("Date");
	}
};

/**
 * Overwrite sap.m.Input::onAfterRendering
 */
sap.m.DateTimeInput.prototype.onAfterRendering = function() {
	this._super.onAfterRendering.call(this);

	if (!this._hasChangeEvent) {
		this._$input.bind("blur.input focus.input", this._changeProxy);
	}

	if (!this.isNative()) {
		// sap.m.DateTimeCustom enables custom date time and adds related methods to prototype
		jQuery.sap.require("sap.m.DateTimeCustom");
		this._$input[0].type = "text";
		this._$input.scroller(this._getScrollerConfig());
	} else {
		this._$input[0].type = this._types[this.getType()].nativeType;
	}

	this._showValue();
};

sap.m.DateTimeInput.prototype.setValue = function(sValue) {
	this.setProperty("value", sValue);
	this._origin = "value";
	this._getFormatFromBinding();
	return this;
};


/**
 * Check given dateValue is JS Date Object
 */
sap.m.DateTimeInput.prototype.setDateValue = function(oValue) {
	this._isDate(oValue);
	this._origin = "dateValue";
	return this.setProperty("dateValue", oValue);
};


/**
 * Convert value to JS Date Object
 * returns null for empty values
 */
sap.m.DateTimeInput.prototype.getDateValue = function() {
	var sValue = this.getProperty("value");
	if (!sValue) {
		return null;
	}

	return sap.ui.core.format.DateFormat.getDateInstance({
		pattern : this.getValueFormat()
	}).parse(this.getProperty("value"));
};

sap.m.DateTimeInput.prototype.getDisplayFormat = function() {
	return this.getProperty("displayFormat") || this._types[this.getType()].displayFormat;
};

sap.m.DateTimeInput.prototype.getValueFormat = function() {
	return this.getProperty("valueFormat") || this._types[this.getType()].valueFormat;
};

sap.m.DateTimeInput.prototype.getNativeFormat = function() {
	return this._types[this.getType()].nativeFormat;
};

sap.m.DateTimeInput.prototype.isNative = function(sType) {
	var oType = this._types[sType || this.getType()];
	if (typeof oType.isNative == "undefined") {
		oType.isNative = this._hasNativeSupport();
	}

	return oType.isNative;
};


/**
 * Check native elements on new type set
 */
sap.m.DateTimeInput.prototype.setType = function(sType) {
	this.setProperty("type", sType);

	// reach prototype values
	delete this._hasChangeEvent;
	delete this._showLabelAsPlaceholder;

	if (this.isNative()) {
		if (this._hasChangeEventBug) {
			this._hasChangeEvent = false;
		}
		if (this._showLabelAsPlaceholder === null) {
			this._showLabelAsPlaceholder = true;	//native pickers still need self-made placeholder
		}
	}

	return this;
};


/**
 * Check given is JS Date Object and throw error if not
 */
sap.m.DateTimeInput.prototype._isDate = function(oValue) {
	if (!sap.m.isDate(oValue)) {
		throw new Error("Type Error: Expected JavaScript Date Object for property dateValue of " + this);
	}
	return true;
};

/**
 * Overwrite sap.m.InputBase::_onChange
 * Change/Input or Focus/Blur event handler
 */
sap.m.DateTimeInput.prototype._onChange = function(oEvent) {
	var oDate,
		sNewValue = this._$input.val(),
		sOldValue = this.getProperty("value");

	if (sNewValue) {
		if (!this.isNative()) {
			oDate = this._$input.scroller("getDate");

			// reformat for CLDR
			oEvent && this._reformat && this._$input.val(
				sap.ui.core.format.DateFormat.getDateInstance({
					pattern : this.getDisplayFormat()
				}).format(oDate)
			);
		} else {
			sNewValue = this._$input.val();
			oDate = sap.ui.core.format.DateFormat.getDateInstance({
				pattern : this.getNativeFormat()
			}).parse(sNewValue);
		}

		if (!isNaN(oDate)) {
			sNewValue = sap.ui.core.format.DateFormat.getDateInstance({
				pattern : this.getValueFormat()
			}).format(oDate);
		} else {
			sNewValue = "";
			oDate = null;
		}
	}

	if (oEvent && oEvent.type != "change" && sOldValue == sNewValue) {
		return;
	}

	this.setProperty("value", sNewValue, true);
	this._setLabelVisibility();

	if (oEvent && oEvent.type != "focus") {
		this.fireChange({
			newValue : sNewValue,
			newDateValue : oDate
		});
	}
};

/**
 * Overwrite sap.m.InputBase::_unbindEvents
 */
sap.m.DateTimeInput.prototype._unbind = function() {
	this._super._unbind.call(this);
	if (this._$input instanceof jQuery && !this.isNative() && this._$input.scroller) {
		this._$input.scroller("destroy");
	}
};


/**
 * Checks if new HTML5 types are supported by browser
 *
 * This method only checks what the name is saying
 * So, does not cache the result for you
 * Do not call too often
 */
sap.m.DateTimeInput.prototype._hasNativeSupport = function(sType) {
	var bSupported, sUnSupportedValue = ":)",
		oElem = document.createElement("input");

	sType = sType || this._types[this.getType()].nativeType;
	oElem.setAttribute("type", sType);

	// If browser doesn't support, it will ignore the type and set to "text".
	bSupported = (oElem.type !== "text");

	// in android, type is still correct even if it is not supported
	// lets set unsupported value to force validation.
	if (bSupported) {
		oElem.value = sUnSupportedValue;
		bSupported = (oElem.value != sUnSupportedValue);
	}
	return bSupported;
};


sap.m.DateTimeInput.prototype._setInputValue = function(sValue) {
	this._$input.val(sValue);
	this._onChange();
};

/**
 * Do the required conversion and set input value
 */
sap.m.DateTimeInput.prototype._showValue = function() {
	var date = this.getProperty(this._origin);
	if (!date) {
		return;
	}

	if (this._origin == "value") {
		date = sap.ui.core.format.DateFormat.getDateInstance({
			pattern : this.getValueFormat()
		}).parse(date);

		if (+date == +sap.m.getInvalidDate()) {
			jQuery.sap.log.error( "Format Error: value property " + this.getValue()
								+ " does not match with valueFormat " + this.getValueFormat()
								+ " of " + this );
			this._setInputValue("");
			return;
		}
	} else {
		this._isDate(date);
	}

	if (!this.isNative()) {
		this._$input.scroller("setDate", date, false);
	}

	this._setInputValue(
		sap.ui.core.format.DateFormat.getDateInstance({
			pattern : this.isNative() ? this.getNativeFormat() : this.getDisplayFormat()
		}).format(date)
	);
};

/**
 * Check data-binding for value property
 * Get according pattern from type settings
 */
sap.m.DateTimeInput.prototype._getFormatFromBinding = function() {
	var oBindingInfo = this.getBindingInfo("value");
	if (!oBindingInfo) {
		return;
	}

	var oBindingType = oBindingInfo.type;
	if (!oBindingType || !(oBindingType instanceof sap.ui.model.type.Date)) {
		return;
	}

	var sFormat = oBindingType.getOutputPattern();
	this.setProperty("valueFormat", sFormat, true);
	this.setProperty("displayFormat", sFormat, true);
	return sFormat;
};

}; // end of sap.m.DateTimeInput
if ( !jQuery.sap.isDeclared('sap.m.DisplayListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.DisplayListItem.
jQuery.sap.declare("sap.m.DisplayListItem");



/**
 * Constructor for a new DisplayListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li>
 * <li>{@link #getValue value} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The display list item consists of a label and a value.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.DisplayListItem
 */
sap.m.ListItemBase.extend("sap.m.DisplayListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"label" : {type : "string", group : "Misc", defaultValue : null},
		"value" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.DisplayListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.DisplayListItem.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * List item label
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.m.DisplayListItem#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DisplayListItem#setLabel
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * List item value
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>value</code>
 * @public
 * @name sap.m.DisplayListItem#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValue  new value for property <code>value</code>
 * @return {sap.m.DisplayListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.DisplayListItem#setValue
 * @function
 */


// Start of sap/m/DisplayListItem.js
///**
// * This file defines behavior for the control,
// */
//sap.m.DisplayListItem.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap.m.DisplayListItem
if ( !jQuery.sap.isDeclared('sap.m.FeedListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.FeedListItem.
jQuery.sap.declare("sap.m.FeedListItem");



/**
 * Constructor for a new FeedListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getSender sender} : string</li>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getTimestamp timestamp} : string</li>
 * <li>{@link #getSenderActive senderActive} : boolean (default: true)</li>
 * <li>{@link #getIconActive iconActive} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.FeedListItem#event:senderPress senderPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.m.FeedListItem#event:iconPress iconPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The control provides a set of properties for text, sender information, time stamp
 * 
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.FeedListItem
 */
sap.m.ListItemBase.extend("sap.m.FeedListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"icon" : {type : "sap.ui.core.URI", group : "Data", defaultValue : null},
		"sender" : {type : "string", group : "Data", defaultValue : null},
		"text" : {type : "string", group : "Data", defaultValue : null},
		"info" : {type : "string", group : "Data", defaultValue : null},
		"timestamp" : {type : "string", group : "Data", defaultValue : null},
		"senderActive" : {type : "boolean", group : "Behavior", defaultValue : true},
		"iconActive" : {type : "boolean", group : "Behavior", defaultValue : true}
	},
	events : {
		"senderPress" : {}, 
		"iconPress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.FeedListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.FeedListItem.extend
 * @function
 */

sap.m.FeedListItem.M_EVENTS = {'senderPress':'senderPress','iconPress':'iconPress'};


/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the FeedListItem. This can be an image or an icon from the icon font.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.FeedListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>sender</code>.
 * Sender of the chunk
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>sender</code>
 * @public
 * @name sap.m.FeedListItem#getSender
 * @function
 */

/**
 * Setter for property <code>sender</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSender  new value for property <code>sender</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setSender
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * The FeedListItem text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.m.FeedListItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setText
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * The Info text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.m.FeedListItem#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setInfo
 * @function
 */


/**
 * Getter for property <code>timestamp</code>.
 * This chunks timestamp
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>timestamp</code>
 * @public
 * @name sap.m.FeedListItem#getTimestamp
 * @function
 */

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTimestamp  new value for property <code>timestamp</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setTimestamp
 * @function
 */


/**
 * Getter for property <code>senderActive</code>.
 * If true, sender string is an link, which will fire 'senderPress' events. If false, sender is normal text.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>senderActive</code>
 * @public
 * @name sap.m.FeedListItem#getSenderActive
 * @function
 */

/**
 * Setter for property <code>senderActive</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSenderActive  new value for property <code>senderActive</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setSenderActive
 * @function
 */


/**
 * Getter for property <code>iconActive</code>.
 * If true, icon is an link, which will fire 'iconPress' events. If false, icon is normal image
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconActive</code>
 * @public
 * @name sap.m.FeedListItem#getIconActive
 * @function
 */

/**
 * Setter for property <code>iconActive</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconActive  new value for property <code>iconActive</code>
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#setIconActive
 * @function
 */


/**
 * Event is fired when name of the sender is pressed. 
 *
 * @name sap.m.FeedListItem#senderPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's sender string to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FeedListItem</code>.<br/> itself. 
 *  
 * Event is fired when name of the sender is pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.
 *
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#attachSenderPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'senderPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#detachSenderPress
 * @function
 */

/**
 * Fire event senderPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the feed item's sender string to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.FeedListItem#fireSenderPress
 * @function
 */


/**
 * Event is fired when the icon is pressed. 
 *
 * @name sap.m.FeedListItem#iconPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.domRef Dom reference of the feed item's icon to be used for positioning.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.FeedListItem</code>.<br/> itself. 
 *  
 * Event is fired when the icon is pressed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.FeedListItem</code>.<br/> itself.
 *
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#attachIconPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'iconPress' event of this <code>sap.m.FeedListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.FeedListItem#detachIconPress
 * @function
 */

/**
 * Fire event iconPress to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'domRef' of type <code>string</code> Dom reference of the feed item's icon to be used for positioning.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.FeedListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.FeedListItem#fireIconPress
 * @function
 */


// Start of sap/m/FeedListItem.js
///**
// * This file defines behavior for the control,
// */

/**
 * Function is called when exiting the control.
 * 
 * @private
 */
sap.m.FeedListItem.prototype.exit = function(oEvent) {
	// destroy link control if initialized
	if (this._oLinkControl) {
		this._oLinkControl.destroy();
	}
	
	sap.m.ListItemBase.prototype.exit.apply(this);
};

/**
 * Overwrite ListItemBase's ontap. Triggers 'senderPress' if sender was pressed or
 * iconPress if icon was pressed. IN those cases, the tap is not propagated to ListItemBase.
 * Otherwise, ListItemBase's tap is executed which will take care of interaction response.
 * 
 * @private
 */
sap.m.FeedListItem.prototype.ontap = function(oEvent) {
	if (oEvent.srcElement.id === this.getId() + "-icon" && this.getIconActive()) {
		//Use figure dom ref because some image content might be cut off
		var sFigureDomRef = jQuery.sap.domById(this.getId() + "-figure");
		this.fireIconPress({ domRef: sFigureDomRef});
	} else if(!this._oLinkControl || !this.getSenderActive() || oEvent.srcElement.id !== this._oLinkControl.getId()) {
		sap.m.ListItemBase.prototype.ontap.apply(this, [oEvent]);
	}
};



/**
 * Returns a link control with sender text firing a 'senderPress' event. Does
 * not take care of the 'senderActive' flag, though
 * 
 * @returns link control with current sender text which fires a 'senderPress' event.
 * @private
 */
sap.m.FeedListItem.prototype._getLinkControl = function() {
	if(!this._oLinkControl) {
		jQuery.sap.require("sap.m.Link");
		var that = this;
		this._oLinkControl =  new sap.m.Link({
				press : function() {
					var sSenderDomRef = jQuery.sap.domById(this.getId());
					that.fireSenderPress({ domRef: sSenderDomRef});
				}
			});
		//Necessary so this gets garbage collected
		this._oLinkControl.setParent(this, null, true);
	}
	this._oLinkControl.setProperty("text", this.getSender(), true);
	this._oLinkControl.setProperty("enabled", this.getSenderActive(), true);
		
	return this._oLinkControl;
};
}; // end of sap.m.FeedListItem
if ( !jQuery.sap.isDeclared('sap.m.GroupHeaderListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.GroupHeaderListItem.
jQuery.sap.declare("sap.m.GroupHeaderListItem");



/**
 * Constructor for a new GroupHeaderListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getCount count} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The group header list item is used to display the title of a group and act as separator between groups in Lists.
 * 
 * There are several API parts inherited from ListItemBase which do not apply here:
 * The properties "type", "unread", "selected" and "counter" are currently ignored.
 * Tap events will not be fired.
 * 
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.GroupHeaderListItem
 */
sap.m.ListItemBase.extend("sap.m.GroupHeaderListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Data", defaultValue : null},
		"count" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.m.GroupHeaderListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.GroupHeaderListItem.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * The title of the group header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.GroupHeaderListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.GroupHeaderListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>count</code>.
 * A text to be displayed in the group header in brackets next to the group title. Usually the count of items in the group, but it could also be an amount which represents the sum of all amounts in the group.
 * Will not be displayed if not set.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>count</code>
 * @public
 * @name sap.m.GroupHeaderListItem#getCount
 * @function
 */

/**
 * Setter for property <code>count</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCount  new value for property <code>count</code>
 * @return {sap.m.GroupHeaderListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.GroupHeaderListItem#setCount
 * @function
 */


// Start of sap/m/GroupHeaderListItem.js

// overrides ListItemBase
sap.m.GroupHeaderListItem.prototype.getSelected = function() { // isSelected also uses this
	return false;
};


sap.m.GroupHeaderListItem.prototype.ontap = function(oEvent) {
	return; // no tap functionality needed
};

sap.m.GroupHeaderListItem.prototype.ontouchstart = function(oEvent) {
	oEvent.originalEvent._sapui_handledByControl = true;
};
}; // end of sap.m.GroupHeaderListItem
if ( !jQuery.sap.isDeclared('sap.m.GrowingList') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.GrowingList.
jQuery.sap.declare("sap.m.GrowingList");



/**
 * Constructor for a new GrowingList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getThreshold threshold} : int (default: 20)</li>
 * <li>{@link #getTriggerText triggerText} : string</li>
 * <li>{@link #getScrollToLoad scrollToLoad} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * sap.m.GrowingList control is the container for all list items and inherits from sap.m.List control. Everything like the selection, deletion, unread states and inset style are also maintained here. In addition the control provides a loading mechanism to request data from the model and append the list items to the list. The request is started manually by tapping on the trigger at the end of the list.
 * @extends sap.m.List
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @experimental Since version 1.8. 
 * API is not yet finished and might change completely
 * @name sap.m.GrowingList
 */
sap.m.List.extend("sap.m.GrowingList", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"threshold" : {type : "int", group : "Misc", defaultValue : 20},
		"triggerText" : {type : "string", group : "Appearance", defaultValue : null},
		"scrollToLoad" : {type : "boolean", group : "Misc", defaultValue : false}
	}
}});


/**
 * Creates a new subclass of class sap.m.GrowingList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.GrowingList.extend
 * @function
 */


/**
 * Getter for property <code>threshold</code>.
 * Number of list items requested from the server and added to the list.
 *
 * Default value is <code>20</code>
 *
 * @return {int} the value of property <code>threshold</code>
 * @public
 * @name sap.m.GrowingList#getThreshold
 * @function
 */

/**
 * Setter for property <code>threshold</code>.
 *
 * Default value is <code>20</code> 
 *
 * @param {int} iThreshold  new value for property <code>threshold</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.GrowingList#setThreshold
 * @function
 */


/**
 * Getter for property <code>triggerText</code>.
 * Text which is displayed on the trigger at the end of the list. The default is a translated text ("Load more data") coming from the messagebundle properties.
 * This property can be used only if scrollToLoad property is set false.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>triggerText</code>
 * @public
 * @name sap.m.GrowingList#getTriggerText
 * @function
 */

/**
 * Setter for property <code>triggerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTriggerText  new value for property <code>triggerText</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.GrowingList#setTriggerText
 * @function
 */


/**
 * Getter for property <code>scrollToLoad</code>.
 * If you set this property to true then user needs to scroll end to trigger loading a new page. Default value is false which means user needs to scroll end and then click button to load new page.
 * 
 * NOTE: This property can be set true, if you only have one instance of GrowingList inside the scroll container(e.g Page).
 * In
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>scrollToLoad</code>
 * @public
 * @since 1.11
 * @name sap.m.GrowingList#getScrollToLoad
 * @function
 */

/**
 * Setter for property <code>scrollToLoad</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bScrollToLoad  new value for property <code>scrollToLoad</code>
 * @return {sap.m.GrowingList} <code>this</code> to allow method chaining
 * @public
 * @since 1.11
 * @name sap.m.GrowingList#setScrollToLoad
 * @function
 */


// Start of sap/m/GrowingList.js


/**
 * Function is called to define the behavior for the control.
 */
sap.m.GrowingList.prototype.init = function() {
	if (sap.m.List.prototype.init) {
		sap.m.List.prototype.init.apply(this, arguments);
	}
	this._iRenderedDataItems = 0;
	this._trigger = null;
	this._loading = null;
	this._loadingByScroll = false;
	this._countChecked = false;
	this._iItemCount = 0;
	
	this._bExperimentalGrouping = false;
};


/**
 * Function is called after rendering the control.
 *
 * @private
 */
sap.m.GrowingList.prototype.onAfterRendering = function() {
	this._countChecked = false;
	if (sap.m.List.prototype.onAfterRendering) {
		sap.m.List.prototype.onAfterRendering.apply(this, arguments);
	}
	if (this.getScrollToLoad()) {
		var oScrollDelegate = sap.m.getScrollDelegate(this);
		if (oScrollDelegate) {
			oScrollDelegate.setGrowingList(this, this._triggerLoadingByScroll);
		}
	}
	this._updateTrigger();
};


/**
 * Remove the callback from iScroll if user disable scroll to load
 */
sap.m.GrowingList.prototype.setScrollToLoad = function(bScrollToLoad) {
	if (this.getScrollToLoad() && !bScrollToLoad) {
		var oScrollDelegate = sap.m.getScrollDelegate(this);
		if (oScrollDelegate) {
			oScrollDelegate.setGrowingList(null);
		}
	}
	return this.setProperty("scrollToLoad", bScrollToLoad);
};


/**
 * Function is called when exiting the control.
 *
 * @private
*/
sap.m.GrowingList.prototype.exit = function() {
	if (sap.m.List.prototype.exit) {
		sap.m.List.prototype.exit.apply(this, arguments);
	}
	if (this._busyIndicator) {
		this._busyIndicator.destroy();
	}
	if (this._trigger) {
		this._trigger.destroy();
	}
};


/**
 * Function is called to create or return the trigger control.
 *
 * @private
 */
sap.m.GrowingList.prototype._getTrigger = function(sId) {
	var that = this;
	// set default text, check and set custom text
	var sTriggerText = sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("LOAD_MORE_DATA");
	if (this.getTriggerText()) {
		sTriggerText = this.getTriggerText();
	}
	return this._trigger || (this._trigger = new sap.m.CustomListItem({
		id : sId,
		content : new sap.ui.core.HTML({
			content :	"<div class='sapMGrowingListTrigger'>" +
							"<div class='sapMGrowingListBusyIndicator' id='" + sId + "-busyIndicator'></div>" +
							"<div class='sapMSLITitleDiv sapMGrowingListTitel'>" +
								"<h1 class='sapMSLITitle'>" + sTriggerText + "</h1>" +
							"</div>" +
							"<div class='sapMGrowingListDescription'>" +
								"<p class='sapMSLIDescription' id='" + sId + "-itemInfo'>" + that._getListItemInfo() + "</p>" +
							"</div>" +
						"</div>",
			afterRendering : function(e) {
				var oBusyIndicator = that._getBusyIndicator();
				var rm = sap.ui.getCore().createRenderManager();
				rm.render(oBusyIndicator, this.getDomRef().firstChild);
				rm.destroy();
			}
		}),
		type : sap.m.ListType.Active
	}).setParent(this, null, true).attachTap(this._tap));
};


/**
 * Function is called to create or return the loading control.
 *
 * @private
 */
sap.m.GrowingList.prototype._getLoading = function(sId) {
	var that = this;
	return this._loading || (this._loading = new sap.m.CustomListItem({
		id : sId,
		content : new sap.ui.core.HTML({
			content :	"<div class='sapMSLIDiv sapMGrowingListLoading'>" +
							"<div class='sapMGrowingListBusyIndicator' id='" + sId + "-busyIndicator'></div>" +
						"</div>",
			afterRendering : function(e) {
				var oBusyIndicator = that._getBusyIndicator();
				var rm = sap.ui.getCore().createRenderManager();
				rm.render(oBusyIndicator, this.getDomRef().firstChild);
				rm.destroy();
			}
		})
	}).setParent(this, null, true));
};


/**
 * Function is called to create or return the busy indicator control.
 *
 * @private
*/
sap.m.GrowingList.prototype._getBusyIndicator = function() {
	return this._busyIndicator || (this._busyIndicator = new sap.m.BusyIndicator({
		size : "2.0em"
	}));
};


/**
 * Returns the information about the list items.
 * -> how many items are displayed
 * -> maximum items to be displayed
 *
 * @private
*/
sap.m.GrowingList.prototype._getListItemInfo = function() {
	return ("[ " + this._iRenderedDataItems + " / " + this._getListItemCount() + " ]");
};


/**
 * Calls the  method "_loadNewItems" of the list to append the loaded list items when trigger is tapped
 *
 * @private
*/
sap.m.GrowingList.prototype._tap = function(oEvent) {
	var that = this;
	// show busy indicator
	jQuery.sap.byId(this.getId() + '-busyIndicator').toggleClass('sapMGrowingListBusyIndicatorVisible', true);
	// load new items - add new rows
	window.setTimeout(function() {
		that.oParent._iItemCount += that.oParent.getThreshold();
		that.oParent.updateItems();
	}, 0);
};


/**
 * Function is called to add single list item to the existing list.
 *
 * @private
 */
sap.m.GrowingList.prototype.addListItem = function(oItem, bSuppressInvalidate) {
	if (!this._countChecked) {
		this._countChecked = true;
		if (this.getShowNoData()) {
			jQuery.sap.byId(this.getId() + "-listNoData").css("display", "none");
		}
	}
	oItem._mode = this.getMode();
	oItem._includeItemInSelection = this.getIncludeItemInSelection();
	oItem._select = this._select;
	oItem._delete = this._delete;
	oItem._listId = this.getId();
	oItem._showUnread = this.getShowUnread();
	this._iRenderedDataItems++;
	
	// Grouping support
	if (this._bExperimentalGrouping) {
		var oBinding = this.getBinding("items"),
			bGrouped = oBinding.isGrouped() && this.addItemGroup,
			oNewGroup = null,
			bNewGroup = false;
		
		if (bGrouped) {
			oNewGroup = this._getGroupForContext(oItem.getBindingContext());
			
			if (this.getItems().length == 0) {
				bNewGroup = true;
			} else{
				var aItems = this.getItems();
				if (oNewGroup.key !== this._getGroupForContext(aItems[aItems.length-1].getBindingContext()).key) {
					bNewGroup = true;
				}
			}
			
			if (bNewGroup) {
				var oGroupHeader;
				//If factory is defined use it
				var oBindingInfo = this.getBindingInfo("items");
				if (oBindingInfo.groupHeaderFactory) {
					oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
				}
				this.addItemGroup(oNewGroup, oGroupHeader);
			}
		}
	}
	
	this.addAggregation("items", oItem, bSuppressInvalidate);
	
	if (this._bExperimentalGrouping && bSuppressInvalidate) {
		var oDomRef = jQuery.sap.domById( this.getId() + "-listUl");
		if (oDomRef) {
			var rm = sap.ui.getCore().createRenderManager();
			rm.renderControl(oItem);
			rm.flush(oDomRef, false, true);
			rm.destroy();
		}
	}
	
	return this;
};


sap.m.GrowingList.prototype.addItemGroup = function(oGroup, oHeader) {
	if (!oHeader) {
		oHeader = new sap.m.GroupHeaderListItem({ title:oGroup.text || oGroup.key }).addStyleClass("sapMListHdr");
	}
	this.addAggregation("items", oHeader, true);
	
	var oDomRef = jQuery.sap.domById( this.getId() + "-listUl");
	if (oDomRef) {
		var rm = sap.ui.getCore().createRenderManager();
		rm.renderControl(oHeader);
		rm.flush(oDomRef, false, true);
		rm.destroy();
	}
};


/**
 * Only call when grouped!!
 * 
 * @param oContext
 * @returns
 */
sap.m.GrowingList.prototype._getGroupForContext = function(oContext) {
	var oNewGroup = this.getBinding("items").oSorter.fnGroup(oContext);
	if (typeof oNewGroup == "string") {
		oNewGroup = {
			key: oNewGroup
		};
	}
	return oNewGroup;
};

/**
 * Function is called to insert single list item to the existing list.
 *
 * @private
 */
sap.m.GrowingList.prototype.insertListItem = function(oItem, iIndex) {
	if (!this._countChecked) {
		this._countChecked = true;
		if (this.getShowNoData()) {
			jQuery.sap.byId(this.getId() + "-listNoData").css("display", "none");
		}
	}
	oItem._mode = this.getMode();
	oItem._includeItemInSelection = this.getIncludeItemInSelection();
	oItem._select = this._select;
	oItem._delete = this._delete;
	oItem._listId = this.getId();
	oItem._showUnread = this.getShowUnread();
	this._iRenderedDataItems++;
	this.insertAggregation("items", oItem, iIndex, true);
	var rm = sap.ui.getCore().createRenderManager();
	var sListId = this.getId() + "-listUl";
	rm.renderControl(oItem);
	rm.flush(jQuery.sap.domById(sListId), false, iIndex);
	rm.destroy();
	return this;
};


/**
 * Function is called to remove single list item from the existing list.
 *
 * @private
 */
sap.m.GrowingList.prototype.deleteListItem = function(oItem) {
	this._iRenderedDataItems--;
	this.removeAggregation("items", oItem, true);
	oItem.destroy();
	return this;
};

/**
 * Returns the row count. If aggregation rows is bound the count will be the length of the binding,
 * otherwise the count of the list items aggregation will be returned
 *
 * @private
*/
sap.m.GrowingList.prototype._getListItemCount = function() {
	var oBinding = this.getBinding("items");
	if (oBinding) {
		return oBinding.getLength();
	} else {
		return this.getItems().length;
	}
};


/**
 * Update loaded items ... called from the model.
 *
 * @private
*/
sap.m.GrowingList.prototype.updateItems =  function() {
	// collect the relevant informations
	if (this._iItemCount == 0) {
		this._iItemCount = this.getThreshold();
	}
	var oBindingInfo = this.getBindingInfo("items"),
		fnFactory = oBindingInfo.factory,
		oBinding = oBindingInfo.binding,
		iListItemCount = this._getListItemCount(),
		iNewListItemCount = Math.min(iListItemCount, this.getThreshold()),
		iThreshold = this.getThreshold(),
		aContexts = oBinding ? oBinding.getContexts(0, this._iItemCount) : [];
	// check context
	this._getBusyIndicator().setVisible(true);
	
	if (this._bExperimentalGrouping) {
		var bFromScratch = true;
		
		if (aContexts.length > 0) {
			var sListId = this.getId() + "-listUl";
			if (jQuery.sap.domById(sListId) != undefined || jQuery.sap.domById(sListId) != null) {
				// check if model diff-array exists and execute
				if (aContexts.diff) {
					bFromScratch = false;
					var bFirstAddedItemChecked = false;
					for ( var i = 0, l = aContexts.diff.length; i < l; i++) {
						var oItems = this.getAggregation("items");
						if (aContexts.diff[i].type === "delete") {
							bFromScratch = true;
							break;
						}
						if (aContexts.diff[i].type === "insert") {
							if (!bFirstAddedItemChecked && aContexts.diff[i].index !== this._iRenderedDataItems) {
								bFromScratch = true;
								break;
							}
							bFirstAddedItemChecked = true;
							
							var oClone = fnFactory("", aContexts[aContexts.diff[i].index]);
							oClone.setBindingContext(aContexts[aContexts.diff[i].index], oBindingInfo.model);
							this.addListItem(oClone, true);
						}
					}
				}

				if(bFromScratch) {
					// renderer available - fill the aggregation and render list items
					this.destroyItems();
					this._iRenderedDataItems = 0;
					for ( var i = 0, l = aContexts.length; i < l; i++) {
						var oClone = fnFactory("", aContexts[i]);
						oClone.setBindingContext(aContexts[i], oBindingInfo.model);
						this.addListItem(oClone, false);
					}
				}
			} else {
				// no renderer - fill only the aggregation
				for ( var i = 0, l = aContexts.length; i < l; i++) {
					var oClone = fnFactory("", aContexts[i]);
					oClone.setBindingContext(aContexts[i], oBindingInfo.model);
					this.addListItem(oClone, true);
				}
			}
		} else {
			this._iRenderedDataItems = 0;
			this.destroyItems();
		}
		
	} else { // no grouping, stable implementation
		if (aContexts.length > 0) {
			var sListId = this.getId() + "-listUl";
			if (jQuery.sap.domById(sListId) != undefined || jQuery.sap.domById(sListId) != null) {
				// check if model diff-array exists and execute
				if (aContexts.diff) {
					for ( var i = 0, l = aContexts.diff.length; i < l; i++) {
						var oItems = this.getAggregation("items");
						if (aContexts.diff[i].type === "delete") {
							this.deleteListItem(oItems[aContexts.diff[i].index]);
						}
						if (aContexts.diff[i].type === "insert") {
							var oClone = fnFactory("", aContexts[aContexts.diff[i].index]);
							oClone.setBindingContext(aContexts[aContexts.diff[i].index], oBindingInfo.model);
							this.insertListItem(oClone, aContexts.diff[i].index);
						}
					}
				} else {
					// most likely a new binding is set in this case - therefore remove all items and aggregations 
					this._iRenderedDataItems = 0;
					this.destroyItems();
					// renderer available - fill the aggregation and render list items
					for ( var i = 0, l = aContexts.length; i < l; i++) {
						var oClone = fnFactory("", aContexts[i]);
						oClone.setBindingContext(aContexts[i], oBindingInfo.model);
						this.addListItem(oClone, false);
					}
				}
			} else {
				// no renderer - fill only the aggregation
				for ( var i = 0, l = aContexts.length; i < l; i++) {
					var oClone = fnFactory("", aContexts[i]);
					oClone.setBindingContext(aContexts[i], oBindingInfo.model);
					this.addListItem(oClone, true);
				}
			}
		} else {
			this._iRenderedDataItems = 0;
			this.destroyItems();
		}
	}
	// hide busy indicator and update item information
	this._hideIndicator();
	// reset trigger check
	var maxItemCount = this._iRenderedDataItems + this.getThreshold(); // FIXME
	if (this._iItemCount > maxItemCount) {
		this._iItemCount = maxItemCount;
	}
	this._updateTrigger();
};


/**
 * Hide loading trigger list item.
 *
 * @private
*/
sap.m.GrowingList.prototype._updateTrigger = function() {
	var iMaxItems = this._getListItemCount();

	// hide trigger if maximum of items reached
	if (this._iItemCount >= iMaxItems) {
		jQuery.sap.byId(this.getId() + "-triggerList").css("display", "none");	
	} else {
		jQuery.sap.byId(this.getId() + "-triggerList").css("display", "block");	
	}
};


/**
 * Hide/update indicator.
 *
 * @private
*/
sap.m.GrowingList.prototype._hideIndicator = function() {
	var that = this,
		sId = that.getId(),
		$byId = jQuery.sap.byId;
		
	window.setTimeout(function() {
		if (that.getScrollToLoad()) {
			$byId(sId + '-triggerList').css("display", "none");
			that._loadingByScroll = false;
		} else {
			$byId(sId + '-trigger-itemInfo').html(that._getListItemInfo());
			$byId(sId + '-trigger-busyIndicator').toggleClass('sapMGrowingListBusyIndicatorVisible', false);
		}
		that._getBusyIndicator().setVisible(false);
	}, 0);
};


/**
 * Trigger loading by scroll.
 *
 * @private
*/
sap.m.GrowingList.prototype._triggerLoadingByScroll = function() {
	if (!this._loadingByScroll) {// && this._iRenderedDataItems !== this.getBindingInfo("items").binding.iLength) {
		jQuery.sap.byId(this.getId() + '-triggerList').css("display", "block");
		this._getBusyIndicator().setVisible(true);
		this._loadingByScroll = true;
		this._iItemCount += this.getThreshold();
		this.updateItems();
	}
};

/**
 * Enable extended change detection for bindings
 *
 * @private
*/
sap.m.GrowingList.prototype.bUseExtendedChangeDetection = true;

}; // end of sap.m.GrowingList
if ( !jQuery.sap.isDeclared('sap.m.Input') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.Input.
jQuery.sap.declare("sap.m.Input");



/**
 * Constructor for a new Input.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getType type} : sap.m.InputType (default: sap.m.InputType.Text)</li>
 * <li>{@link #getMaxLength maxLength} : int (default: 0)</li>
 * <li>{@link #getValueStateText valueStateText} : string</li>
 * <li>{@link #getShowValueStateMessage showValueStateMessage} : boolean (default: true)</li>
 * <li>{@link #getDateFormat dateFormat} : string (default: 'YYYY-MM-dd')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.m.Input#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.InputBase#constructor sap.m.InputBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Enables users to input data.
 * @extends sap.m.InputBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.Input
 */
sap.m.InputBase.extend("sap.m.Input", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"type" : {type : "sap.m.InputType", group : "Data", defaultValue : sap.m.InputType.Text},
		"maxLength" : {type : "int", group : "Behavior", defaultValue : 0},
		"valueStateText" : {type : "string", group : "Misc", defaultValue : null},
		"showValueStateMessage" : {type : "boolean", group : "Misc", defaultValue : true},
		"dateFormat" : {type : "string", group : "Misc", defaultValue : 'YYYY-MM-dd', deprecated: true}
	},
	events : {
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.m.Input with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.Input.extend
 * @function
 */

sap.m.Input.M_EVENTS = {'liveChange':'liveChange'};


/**
 * Getter for property <code>type</code>.
 * Type of input (e.g. Text, Number, Email, Phone)
 *
 * Default value is <code>Text</code>
 *
 * @return {sap.m.InputType} the value of property <code>type</code>
 * @public
 * @name sap.m.Input#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>Text</code> 
 *
 * @param {sap.m.InputType} oType  new value for property <code>type</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setType
 * @function
 */


/**
 * Getter for property <code>maxLength</code>.
 * Maximum number of characters. Value '0' means the feature is switched off.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>maxLength</code>
 * @public
 * @name sap.m.Input#getMaxLength
 * @function
 */

/**
 * Setter for property <code>maxLength</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iMaxLength  new value for property <code>maxLength</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setMaxLength
 * @function
 */


/**
 * Getter for property <code>valueStateText</code>.
 * The text which is shown in the value state message popup. If not specfied a default text is shown.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>valueStateText</code>
 * @public
 * @name sap.m.Input#getValueStateText
 * @function
 */

/**
 * Setter for property <code>valueStateText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sValueStateText  new value for property <code>valueStateText</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setValueStateText
 * @function
 */


/**
 * Getter for property <code>showValueStateMessage</code>.
 * Whether the value state message should be shown.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showValueStateMessage</code>
 * @public
 * @name sap.m.Input#getShowValueStateMessage
 * @function
 */

/**
 * Setter for property <code>showValueStateMessage</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowValueStateMessage  new value for property <code>showValueStateMessage</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#setShowValueStateMessage
 * @function
 */


/**
 * Getter for property <code>dateFormat</code>.
 * Only used if type=date and no datepicker is available.
 * The data is displayed and the user input is parsed according to this format.
 * NOTE: The value property is always of the form RFC 3339 (YYYY-MM-dd).
 *
 * Default value is <code>YYYY-MM-dd</code>
 *
 * @return {string} the value of property <code>dateFormat</code>
 * @public
 * @deprecated Since version 1.9.1. 
 * sap.m.DateTimeInput should be used for date/time inputs and formating.
 * @name sap.m.Input#getDateFormat
 * @function
 */

/**
 * Setter for property <code>dateFormat</code>.
 *
 * Default value is <code>YYYY-MM-dd</code> 
 *
 * @param {string} sDateFormat  new value for property <code>dateFormat</code>
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @deprecated Since version 1.9.1. 
 * sap.m.DateTimeInput should be used for date/time inputs and formating.
 * @name sap.m.Input#setDateFormat
 * @function
 */


/**
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @name sap.m.Input#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.newValue the new value of the input
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.m.Input</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.m.Input</code>.<br/> itself. 
 *  
 * This event is fired when the value of the input is changed - e.g. at each keypress 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.m.Input</code>.<br/> itself.
 *
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.m.Input</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.Input#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'newValue' of type <code>string</code> the new value of the input</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.m.Input} <code>this</code> to allow method chaining
 * @protected
 * @name sap.m.Input#fireLiveChange
 * @function
 */


// Start of sap/m/Input.js
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

sap.ui.core.IconPool.insertFontFaceStyle();

sap.m.Input.prototype.init = function() {
	sap.m.InputBase.prototype.init.call(this);
	this._inputProxy = jQuery.proxy(this._onInput, this);
};

sap.m.Input.prototype.onAfterRendering = function() {
	sap.m.InputBase.prototype.onAfterRendering.call(this);
	this._$input.bind("input.input", this._inputProxy);
};

sap.m.Input.prototype._onInput = function(oEvent) {
	var value = this._$input.val();
	this.setProperty("value", value, true);
	this._setLabelVisibility();
	this.fireLiveChange({
		newValue : value
	});
};


(function(){

	function closeMessage(oInput){
		if(oInput._popup){
			oInput._popup.close();
		}
	};
	
	function openMessage(oInput){
		var oState = oInput.getValueState();
		
		if (oInput.getShowValueStateMessage() && oState && ((oState === sap.ui.core.ValueState.Warning)
				|| (oState === sap.ui.core.ValueState.Error)) && oInput.getEnabled() && oInput.getEditable()) { 
			var sText = oInput.getValueStateText();
			if(!sText){
				sText = sap.ui.core.ValueStateSupport.getAdditionalText(oInput);
			}
			if(!sText){
				return;
			}
		
			var messageId = oInput.getId()+"-message";
			if(!oInput._popup){
				jQuery.sap.require("sap.ui.core.Popup");
				jQuery.sap.require("jquery.sap.encoder");
				oInput._popup = new sap.ui.core.Popup("<span></span>" /*Just some dummy*/, false, false, false);
				oInput._popup.attachClosed(function(){
					jQuery.sap.byId(messageId).remove();
				});
			}
			
			var $Input = jQuery(oInput.getFocusDomRef());
			var dock = sap.ui.core.Popup.Dock;
			var bIsRightAligned = $Input.css("text-align") === "right";
			
			var sClass = "sapMInputMessage " + ((oState === sap.ui.core.ValueState.Warning) ? "sapMInputMessageWarning" : "sapMInputMessageError");
			
			oInput._popup.setContent(jQuery("<div style=\"max-width:"+$Input.outerWidth()+"px;\" class=\""+sClass+"\" id=\""+messageId+"\"><span id=\""+messageId+"-text\">"+jQuery.sap.encodeHTML(sText)+"</span></div>"));
			
			oInput._popup.close(0);
			oInput._popup.open(
					200,
					bIsRightAligned ? dock.EndTop : dock.BeginTop,
					bIsRightAligned ? dock.EndBottom : dock.BeginBottom,
					oInput.getFocusDomRef(),
					null,
					null,
					function(){
						oInput._popup.close();
					}
			);
		}
	};

	sap.m.Input.prototype.setValueState = function(sValueState) {
		var sOldValueState = this.getValueState();
	
		sap.m.InputBase.prototype.setValueState.apply(this, arguments);
		
		var sNewValueState = this.getValueState();
	
		if(this.getDomRef() && sNewValueState != sOldValueState && this.getFocusDomRef() === document.activeElement){
			switch(sNewValueState){
				case sap.ui.core.ValueState.Error:
				case sap.ui.core.ValueState.Warning:
					openMessage(this);
					break;
				default:
					closeMessage(this);
			}
			
		}
	
		return this;
	};
	
	sap.m.Input.prototype.setValueStateText = function(sText) {
		jQuery.sap.byId(this.getId()+"-message-text").text(sText);
		return this.setProperty("valueStateText", sText, true);
	};
	
	sap.m.Input.prototype.onfocusin = function(oEvent) {
		openMessage(this);
	};
	
	sap.m.Input.prototype.onkeydown = function(oEvent) {
		closeMessage(this);
	};
	
	sap.m.Input.prototype.onfocusout = function(oEvent) {
		closeMessage(this);
	};

})();
}; // end of sap.m.Input
if ( !jQuery.sap.isDeclared('sap.m.InputListItem') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.InputListItem.
jQuery.sap.declare("sap.m.InputListItem");



/**
 * Constructor for a new InputListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getLabel label} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * List item should be used for a label and an input field.
 * @extends sap.m.ListItemBase
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.m.InputListItem
 */
sap.m.ListItemBase.extend("sap.m.InputListItem", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"label" : {type : "string", group : "Misc", defaultValue : null}
	},
	defaultAggregation : "content",
	aggregations : {
    	"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content", bindable : "bindable"}
	}
}});


/**
 * Creates a new subclass of class sap.m.InputListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.InputListItem.extend
 * @function
 */


/**
 * Getter for property <code>label</code>.
 * Label of the list item
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>label</code>
 * @public
 * @name sap.m.InputListItem#getLabel
 * @function
 */

/**
 * Setter for property <code>label</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sLabel  new value for property <code>label</code>
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#setLabel
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * Content controls can be added
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.m.InputListItem#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.m.InputListItem#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.m.InputListItem#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.m.InputListItem#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#destroyContent
 * @function
 */


/**
 * Binder for aggregation <code>content</code>.
 *
 * @param {string} sPath path to a list in the model 
 * @param {sap.ui.core.Element} oTemplate the control template for this aggregation
 * @param {sap.ui.model.Sorter} oSorter the initial sort order (optional)
 * @param {array} aFilters the predefined filters for this aggregation (optional)
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#bindContent
 * @function
 */

/**
 * Unbinder for aggregation <code>content</code>.
 *
 * @return {sap.m.InputListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.InputListItem#unbindContent
 * @function
 */


// Start of sap/m/InputListItem.js

}; // end of sap.m.InputListItem
if ( !jQuery.sap.isDeclared('sap.m.MessageBox') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

// Provides class sap.m.MessageBox
jQuery.sap.declare("sap.m.MessageBox");



jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained


/**
 * @class Provides easier methods to create sap.m.Dialog with type sap.m.DialogType.Message, such as standard alerts, 
 * confirmation dialogs, or arbitrary message dialogs.
 *
 * As <code>MessageBox</code> is a static class, a <code>jQuery.sap.require("sap.m.MessageBox");</code> statement
 * must be explicitly executed before the class can be used. Example:
 * <pre>
 *   jQuery.sap.require("sap.m.MessageBox");
 *   sap.m.MessageBox.show(
 *       "This message should appear in the message box.",
 *       sap.m.MessageBox.Icon.INFORMATION,
 *       "My message box title",
 *       [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO],
 *       function() { / * do something * / }
 *	 );
 * </pre>
 *
 * @static
 * @public
 * @since 1.9.2
 */
sap.m.MessageBox = {};

sap.m.MessageBox._bOneDesign = (sap.ui.core.theming.Parameters.get("sapMPlatformDependent") !== "true");

sap.m.MessageBox._rb = sap.ui.getCore().getLibraryResourceBundle("sap.m");

/**
 * @class Enumeration of supported actions in a MessageBox.
 *
 * Each action is represented as a button in the message box. The values of this enumeration are used for both,
 * specifying the set of allowed actions as well as reporting back the user choice.
 * @static
 * @public
 */
sap.m.MessageBox.Action = {

  /**
   * Adds an "Ok" button to the message box.
   * @public
   */
  OK : "OK",

  /**
   * Adds a "Cancel" button to the message box.
   * @public
   */
  CANCEL : "CANCEL",

  /**
   * Adds a "Yes" button to the message box.
   * @public
   */
  YES : "YES",

  /**
   * Adds a "No" button to the message box.
   * @public
   */
  NO : "NO",

  /**
   * Adds an "Abort" button to the message box.
   * @public
   */
  ABORT : "ABORT",

  /**
   * Adds a "Retry" button to the message box.
   * @public
   */
  RETRY : "RETRY",

  /**
   * Adds an "Ignore" button to the message box.
   * @public
   */
  IGNORE : "IGNORE",

  /**
   * Adds a "Close" button to the message box.
   * @public
   */
  CLOSE : "CLOSE",
	  
  /**
   * Adds a "Delete" button to the message box.
   * @public
   */
  DELETE : "DELETE"
};

/**
 * @class Enumeration of the pre-defined icons that can be used in a MessageBox.
 * @static
 * @public
 */
sap.m.MessageBox.Icon = {

  /**
   * Shows no icon in the message box.
   * @public
   */
  NONE : undefined,
  /**
   * Shows the information icon in the message box.
   * @public
   */
  INFORMATION : "INFORMATION",

  /**
   * Shows the warning icon in the message box.
   * @public
   */
  WARNING : "WARNING",

  /**
   * Shows the error icon in the message box.
   * @public
   */
  ERROR : "ERROR",

  /**
   * Shows the success icon in the message box.
   * @public
   */
  SUCCESS : "SUCCESS",

  /**
   * Shows the question icon in the message box.
   * @public
   */
  QUESTION : "QUESTION"
};

(function() {
	var Action = sap.m.MessageBox.Action,
		Icon = sap.m.MessageBox.Icon,
		mClasses = {
				"INFORMATION": "sapMMessageBoxInfo",
				"WARNING": "sapMMessageBoxWarning",
				"ERROR": "sapMMessageBoxError",
				"SUCCESS": "sapMMessageBoxSuccess",
				"QUESTION": "sapMMessageBoxQuestion"
			},
		sURLBase,
		mIcons;
	
		if(sap.m.MessageBox._bOneDesign){
			mIcons = {
				"INFORMATION": sap.ui.core.IconPool.getIconURI("hint"),
				"WARNING": sap.ui.core.IconPool.getIconURI("warning2"),
				"ERROR": sap.ui.core.IconPool.getIconURI("alert"),
				"SUCCESS": sap.ui.core.IconPool.getIconURI("accept"),
				"QUESTION": sap.ui.core.IconPool.getIconURI("incident")
			};
		}else{
			sURLBase = jQuery.sap.getModulePath("sap.m", "/") + "themes/" 
				+ sap.ui.getCore().getConfiguration().getTheme()
				+ "/img/messagebox/";
			mIcons = {
				"INFORMATION": sURLBase + "info.png",
				"WARNING": sURLBase + "warning.png",
				"ERROR": sURLBase + "error.png",
				"SUCCESS": sURLBase + "success.png",
				"QUESTION": sURLBase + "question.png"
			};
		}

	/**
	 * Creates and displays a sap.m.Dialog with type sap.m.DialogType.Message with the given text and buttons, and optionally other parts.
	 * After the user has tapped a button, the <code>callback</code> function is invoked when given.
	 *
	 * The only mandatory parameter is <code>sMessage</code>.
	 *
	 * The created dialog is executed asynchronously. When it has been created and registered for rendering,
	 * this function returns without waiting for a user reaction.
	 *
	 * When applications have to react on the users choice, they have to provide a callback function and
	 * postpone any reaction on the user choice until that callback is triggered.
	 *
	 * The signature of the callback is
	 *
	 *   function (oAction);
	 *
	 * where <code>oAction</code> is the button that the user has tapped. For example, when the user has pressed the close button,
	 * a sap.m.MessageBox.Action.Close is returned.
	 *
	 * @param {string} sMessage The message to be displayed.
	 * @param {sap.m.MessageBox.Icon} [oIcon=None] The icon to be displayed.
	 * @param {string} [sTitle=''] The title of the message box.
	 * @param {sap.m.MessageBox.Action|sap.m.MessageBox.Action[]|string|string[]} [vActions] Either a single action, or an array of two actions.
	 *      If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter. If more than two actions are given,
	 *      only the first two actions are taken. Custom action string(s) can be provided, and then the translation of custom action string(s) needs to be done by the application.
	 * @param {function} [fnCallback] Function to be called when the user has tapped a button or has closed the message box.
	 * @param {string} [sDialogId] ID to be used for the dialog. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.m.MessageBox.show = function(sMessage, oIcon, sTitle, vActions, fnCallback, sDialogId) {
		var oDialog, oResult = null, that = this;
		
		// normalize the vActions array
		if(typeof vActions !== "undefined" && !jQuery.isArray(vActions)) {
			vActions = [vActions];
		}
		if(!vActions || vActions.length === 0) {
			vActions = [Action.OK];
		}
		//only allows maximum two actions
		if(vActions.length > 2) {
			vActions = vActions.slice(0, 2);
		}
		// create a unique ID
		sDialogId = sDialogId || sap.ui.core.ElementMetadata.uid("mbox");

		/** creates a button for the given action */
		function button(sAction) {
			var sKey = "MSGBOX_"+ sAction,
				sText = that._rb.getText(sKey);
			
			//not from defined actions
			if(sKey === sText){
				sText = sAction;
			}
			
			var	oButton = new sap.m.Button({
				id: sDialogId + "--btn-" + sAction,
				text: sText || sAction,
				tap: function () {
					oResult = sAction;
					oDialog.close();
				}
			});
			return oButton;
		}

		function onclose() {
			if(typeof fnCallback === "function") {
				fnCallback(oResult);
			}
			oDialog.detachAfterClose(onclose);
			oDialog.destroy();
		}
		
		oDialog = new sap.m.Dialog({
			id: sDialogId,
			type: sap.m.DialogType.Message,
			title: sTitle,
			icon: mIcons[oIcon],
			leftButton: button(vActions[0]),
			content: new sap.m.Text({
				text: sMessage
			}).addStyleClass("sapMMsgBoxText"),
			afterClose: onclose
		}).addStyleClass(mClasses[oIcon]);
		
		if(vActions[1]){
			oDialog.setRightButton(button(vActions[1]));
		}
		
		oDialog.open();
	};

	/**
	 * Displays an alert dialog with the given message and an OK button (no icons).
	 * If a callback is given, it is called after the alert dialog has been closed
	 * by the user via the OK button. The callback is called with the following signature:
	 *
	 * <pre>
	 *   function (oAction)
	 * </pre>
	 * 
	 * where <code>oAction</code> can be either sap.m.MessageBox.Action.OK when the alert dialog is closed by tapping on the OK button 
	 * 	or null when the alert dialog is closed by calling <code>sap.m.InstanceManager.closeAllDialogs()</code>.
	 *
	 * The alert dialog opened by this method is processed asynchronously.
	 * Applications have to use the <code>fnCallback</code> to continue work after the
	 * user closed the alert dialog.
	 *
	 * @param {string} sMessage Message to be displayed in the alert dialog
	 * @param {function} [fnCallback] callback function to be called when the user closes the dialog
	 * @param {string} [sTitle='Alert'] Title to be displayed in the alert dialog
	 * @param {string} [sDialogId] ID to be used for the alert dialog. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.m.MessageBox.alert = function(sMessage, fnCallback, sTitle, sDialogId) {
		return sap.m.MessageBox.show(sMessage, Icon.NONE, 
				sTitle ? sTitle : this._rb.getText("MSGBOX_TITLE_ALERT"), Action.OK,
				function(oAction) {
					if ( typeof fnCallback === "function" ) {
						fnCallback(oAction);
					}
				}, sDialogId || sap.ui.core.ElementMetadata.uid("alert"));
	};

	
	//TODO: change the documentation after icon is available
	/**
	 * Displays a confirmation dialog with the given message, no icon (will be provided later)
	 * an OK button, and a Cancel button. If a callback is given, it is called after the
	 * alert box has been closed by the user via one of the buttons.
	 * The callback is called with the following signature
	 *
	 * <pre>
	 *   function(oAction)
	 * </pre>
	 *
	 * where oAction is set by one of the following three values:
	 * 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.
	 * 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.
	 * 3. null: Confirm dialog is closed by Calling <code>sap.m.InstanceManager.closeAllDialogs()</code>
	 *
	 * The confirmation dialog opened by this method is processed asynchronously.
	 * Applications have to use the <code>fnCallback</code> to continue work after the
	 * user closed the confirmation dialog
	 *
	 * @param {string} sMessage Message to display in the confirmation dialog
	 * @param {function} [fnCallback] Callback to be called when the user closes the dialog
	 * @param {string} [sTitle='Confirmation'] Title to display in the confirmation dialog
	 * @param {string} [sDialogId] ID to be used for the confirmation dialog. Intended for test scenarios, not recommended for productive apps
	 * @public
	 */
	sap.m.MessageBox.confirm = function(sMessage, fnCallback, sTitle, sDialogId) {
		return sap.m.MessageBox.show(sMessage, Icon.QUESTION,
				sTitle ? sTitle : this._rb.getText("MSGBOX_TITLE_CONFIRM"), [Action.OK, Action.CANCEL],
				function(oAction) {
					if ( typeof fnCallback === "function" ) {
						fnCallback(oAction);
					}
				}, sDialogId || sap.ui.core.ElementMetadata.uid("confirm"));
	};

}());
}; // end of sap.m.MessageBox
if ( !jQuery.sap.isDeclared('sap.m.StandardTile') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)
 * 
 * (c) Copyright 2009-2013 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.m.StandardTile.
jQuery.sap.declare("sap.m.StandardTile");



/**
 * Constructor for a new StandardTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getActiveIcon activeIcon} : sap.ui.core.URI</li>
 * <li>{@link #getNumber number} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ui.core.ValueState (default: sap.ui.core.ValueState.None)</li>
 * <li>{@link #getType type} : sap.m.StandardTileType (default: sap.m.StandardTileType.None)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Tile#constructor sap.m.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The StandardTile
 * @extends sap.m.Tile
 *
 * @author SAP AG 
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @since 1.12
 * @experimental Since version 1.12. 
 * This concept is still under discussion so this can be changed in future.
 * @name sap.m.StandardTile
 */
sap.m.Tile.extend("sap.m.StandardTile", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.m",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"info" : {type : "string", group : "Misc", defaultValue : null},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"activeIcon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"number" : {type : "string", group : "Misc", defaultValue : null},
		"numberUnit" : {type : "string", group : "Misc", defaultValue : null},
		"infoState" : {type : "sap.ui.core.ValueState", group : "Misc", defaultValue : sap.ui.core.ValueState.None},
		"type" : {type : "sap.m.StandardTileType", group : "Misc", defaultValue : sap.m.StandardTileType.None}
	}
}});


/**
 * Creates a new subclass of class sap.m.StandardTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.m.StandardTile.extend
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Tile title
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.m.StandardTile#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setTitle
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * Tile description
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.m.StandardTile#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setInfo
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Tile icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.m.StandardTile#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setIcon
 * @function
 */


/**
 * Getter for property <code>activeIcon</code>.
 * Tile active icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>activeIcon</code>
 * @public
 * @name sap.m.StandardTile#getActiveIcon
 * @function
 */

/**
 * Setter for property <code>activeIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sActiveIcon  new value for property <code>activeIcon</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setActiveIcon
 * @function
 */


/**
 * Getter for property <code>number</code>.
 * Number field
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>number</code>
 * @public
 * @name sap.m.StandardTile#getNumber
 * @function
 */

/**
 * Setter for property <code>number</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumber  new value for property <code>number</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setNumber
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * Number units qualifier
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.m.StandardTile#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>infoState</code>.
 * Info state defines the color of the info text. E.g. Error, Warning, Success...
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ui.core.ValueState} the value of property <code>infoState</code>
 * @public
 * @name sap.m.StandardTile#getInfoState
 * @function
 */

/**
 * Setter for property <code>infoState</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ui.core.ValueState} oInfoState  new value for property <code>infoState</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setInfoState
 * @function
 */


/**
 * Getter for property <code>type</code>.
 * Tile type.
 *
 * Default value is <code>None</code>
 *
 * @return {sap.m.StandardTileType} the value of property <code>type</code>
 * @public
 * @name sap.m.StandardTile#getType
 * @function
 */

/**
 * Setter for property <code>type</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.m.StandardTileType} oType  new value for property <code>type</code>
 * @return {sap.m.StandardTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.m.StandardTile#setType
 * @function
 */


// Start of sap/m/StandardTile.js
///**
// * This file defines behavior for the control,
// */
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained



/**
 * Called when the control is destroyed.
 * 
 * @private
 */
sap.m.StandardTile.prototype.exit = function() {
	if(this._icon) {
		this._icon.destroy();
		this._icon = null;
	}
	if(this._image) {
		this._image.destroy();
		this._image = null;
	}	
};

sap.m.StandardTile.prototype.getIcon = function() {
	if(!this.getProperty("icon") && this.getType() === "Create") {
		return sap.ui.core.IconPool.getIconURI("add");
	} else {
		return this.getProperty("icon");
	}
};


/**
 * Lazy load tile icon image.
 * @private
 */
sap.m.StandardTile.prototype._getImage = function() {

	var oImage;
	var sSize = jQuery.device.is.phone ? "1.3rem": "2rem";
	var sURI = this.getIcon();
	if (sap.ui.core.IconPool.isIconURI(sURI)){
		oImage = this._icon || sap.ui.core.IconPool.createControlByURI({
			src : sURI,
			id : this.getId() + "-icon",
			size: sSize
			}, sap.m.Image);
		this._icon = oImage;
	} else {
		oImage = this._image || sap.ui.core.IconPool.createControlByURI({
			src : sURI,
			id : this.getId() + "-img",
			height: sSize,
			width: sSize
			}, sap.m.Image);
		this._image = oImage;
	}
	oImage.setSrc(sURI);
	
	return oImage;
};

}; // end of sap.m.StandardTile
