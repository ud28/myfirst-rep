// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.commons.library-all');
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeScrollerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.DateRangeScrollerRenderer");

/**
 * @class DateRangeScroller renderer.
 * @static
 */
sap.suite.ui.commons.DateRangeScrollerRenderer = {};

/**
 * Render decrementScrollButton
 * 
 * @private
 */
sap.suite.ui.commons.DateRangeScrollerRenderer.renderDecrementScrollButton=function (oRm, oDateRangeScroller, oDisplay) {

    oRm.write("<a>");
    oRm.write('<span id="' + oDateRangeScroller.getId() + '-decrementScrollButton"');
    oRm.write('title="');
    oRm.writeEscaped(oDisplay.resBundle.getText("DATERANGESCROLLER_PREV_TEXT"));
    oRm.write('"');
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerScrollBtn");
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerDecBtnArrow");
    oRm.writeClasses();
    oRm.write(">");
    if (sap.ui.getCore().getConfiguration().getRTL()) {
        oRm.write(oDisplay.nextArrowSymbol);
    } else {
        oRm.write(oDisplay.prevArrowSymbol);
    }

    oRm.write("</span>");
    oRm.write("</a>");
};

/**
 * Render incrementScrollButton
 * 
 * @private
 */
sap.suite.ui.commons.DateRangeScrollerRenderer.renderIncrementScrollButton = function (oRm, oDateRangeScroller, oDisplay) {

    oRm.write("<a>");
    oRm.write('<span id="' + oDateRangeScroller.getId() + '-incrementScrollButton"');
    oRm.write('title="');
    oRm.writeEscaped(oDisplay.resBundle.getText("DATERANGESCROLLER_NEXT_TEXT"));
    oRm.write('"');
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerScrollBtn");
    oRm.addClass("sapSuiteUiCommonsDateRangeScrollerIncBtnArrow");
    oRm.writeClasses();
    oRm.write(">");
    if (sap.ui.getCore().getConfiguration().getRTL()) {
        oRm.write(oDisplay.prevArrowSymbol);
    } else {
        oRm.write(oDisplay.nextArrowSymbol);
    }
    oRm.write("</span>");
    oRm.write("</a>");
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oDateRangeScroller an object representation of the control that should be rendered
 */
sap.suite.ui.commons.DateRangeScrollerRenderer.render = function(oRm, oDateRangeScroller) {

    var oLocale = sap.ui.getCore().getConfiguration().getLanguage();
    var oResBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons", oLocale);
    var sPrevArrowSymbol = "&#9668";
    var sNextArrowSymbol = "&#9658";
    var oDisplay = {
        resBundle : oResBundle,
        prevArrowSymbol : sPrevArrowSymbol,
        nextArrowSymbol : sNextArrowSymbol
    };

    // write the HTML into the render manager
    oRm.write("<span");
    oRm.writeControlData(oDateRangeScroller);
    oRm.addClass("sapSuiteUiCommonsDateRangeScroller");
    oRm.writeClasses();
    oRm.writeAttribute("tabindex", "-1");
    oRm.write(">"); // span element

    // invisible span with tooltip as text for aria
    if (oDateRangeScroller.getTooltip_AsString()) {
        oRm.write('<SPAN id="' + oDateRangeScroller.getId() + '-Descr" style="visibility: hidden; display: none;"');
        oRm.write('>');
        oRm.writeEscaped(oDateRangeScroller.getTooltip_AsString());
        oRm.write('</SPAN>');
    }

    this.renderDecrementScrollButton(oRm, oDateRangeScroller, oDisplay);

    this.renderIncrementScrollButton(oRm, oDateRangeScroller, oDisplay);

    // Start label area
    oRm.write("<span");
    oRm.writeAttribute("id", oDateRangeScroller.getId() + "-labelarea");
    oRm.writeAttribute("tabindex", "0");
    oRm.writeClasses();

    // ARIA
    oRm.writeAccessibilityState(oDateRangeScroller, {
        role : 'list',
        live : 'assertive',
        describedby : oDateRangeScroller.getTooltip_AsString() ? (oDateRangeScroller.getId() + '-Descr ' + oDateRangeScroller.getAriaDescribedBy().join(" ")) : undefined
    });

    oRm.write(">");

    oRm.renderControl(oDateRangeScroller._oDateRangeLabel);

    oRm.write("</span>"); // label span

    oRm.write("</span>");
};

}; // end of sap.suite.ui.commons.DateRangeScrollerRenderer
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSliderInternalRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.DateRangeSliderInternalRenderer");
jQuery.sap.require('sap.ui.commons.RangeSliderRenderer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained


/**
 * @class DateRangeSlider renderer.
 * @static
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer = sap.ui.core.Renderer.extend(sap.ui.commons.RangeSliderRenderer);

/**
 * Render buffer div to accommodate bubbles height.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderBufferDivForBubbles = function(oRm, oDateRangeSliderInternal) {

    if (oDateRangeSliderInternal.getShowBubbles()) {
        oRm.write('<DIV id="' + oDateRangeSliderInternal.getId() + '-bubbleBuffer" style="height:40px">');
        oRm.write('</DIV>');
    }
};

/**
 * Render enclosing DIV with styles and classes.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderEnclosingDiv = function(oRm, oDateRangeSliderInternal) {

    oRm.write('<DIV');
    oRm.writeControlData(oDateRangeSliderInternal);
    oRm.addClass('sapUiSli');
    this.controlAdditionalCode(oRm, oDateRangeSliderInternal);
    if (oDateRangeSliderInternal.getTooltip_AsString()) {
        oRm.writeAttributeEscaped('title', oDateRangeSliderInternal.getTooltip_AsString());
    }

    if (!oDateRangeSliderInternal.getVertical() && oDateRangeSliderInternal.getWidth()) {
        oRm.writeAttribute('style', 'width:' + oDateRangeSliderInternal.getWidth() + ';');
    }

    if (!oDateRangeSliderInternal.getEnabled()) {
        oRm.addClass('sapUiSliDsbl');
    } else {
        if (!oDateRangeSliderInternal.getEditable()) {
            oRm.addClass('sapUiSliRo');
        } else {
            oRm.addClass('sapUiSliStd');
        }
    }

    if (!oDateRangeSliderInternal.getVertical()) {
        oRm.addClass('sapUiSliHori');
    }

    if (oDateRangeSliderInternal.getShowBubbles()) {
        oRm.addClass('sapUiSuiteDRSliBub');
    }

    oRm.writeClasses();
    oRm.write('>');
};

/**
 * Render closing tag for enclosing DIV.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderEnclosingDivEnd = function(oRm, oDateRangeSliderInternal) {

    oRm.write('</DIV>');
};

/**
 * Render invisible span with tooltip as text for aria on grip.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderAriaGripTooltip = function(oRm, oDateRangeSliderInternal) {

    if (oDateRangeSliderInternal.getTooltip_AsString()) {
        oRm.write('<SPAN id="' + oDateRangeSliderInternal.getId() + '-Descr" style="visibility: hidden; display: none;">');
        oRm.writeEscaped(oDateRangeSliderInternal.getTooltip_AsString());
        oRm.write('</SPAN>');
    }
};

/**
 * Renders the HTML for two bubbles to show selected dates on top of the slider. *
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered.
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderBubbles = function(oRm, oDateRangeSliderInternal) {

    if (!oDateRangeSliderInternal.getShowBubbles()) {
        return;
    }

    oRm.write('<div id="' + oDateRangeSliderInternal.getId() + '-bubble"');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubble");
    oRm.writeClasses();
    oRm.write('>');
    oRm.write('<div');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubbleLbl");
    oRm.writeClasses();
    oRm.write('>');
    oRm.renderControl(oDateRangeSliderInternal._oBubble);
    oRm.write('</div>');
    oRm.write('</div>');
    oRm.write('<div id="' + oDateRangeSliderInternal.getId() + '-bubble2"');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubble");
    oRm.writeClasses();
    oRm.write('>');
    oRm.write('<div');
    oRm.addClass("sapSuiteUiCommonsDateRangeSliderBubbleLbl");
    oRm.writeClasses();
    oRm.write('>');
    oRm.renderControl(oDateRangeSliderInternal._oBubble2);
    oRm.write('</div>');
    oRm.write('</div>');
};

/**
 * Render the slide bar.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderSliderBar = function(oRm, oDateRangeSliderInternal) {

    oRm.write('<DIV');
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-right');
    oRm.write('class="sapUiSliR"> <DIV');

    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-left');
    oRm.write('class="sapUiSliL"> <DIV');

    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-bar');
    oRm.write('class="sapUiSliBar">');
};

/**
 * Render closing tag for the slide bar.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderSliderBarEnd = function(oRm, oDateRangeSliderInternal) {

    oRm.write('</DIV></DIV></DIV>');
};

/**
 * Render labels and ticks.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderTicksAndLabels = function(oRm, oDateRangeSliderInternal) {

    var bUseTextLabels = false;
    if (oDateRangeSliderInternal.getLabels() && oDateRangeSliderInternal.getLabels().length > 0) {
        bUseTextLabels = true;
    }

    if (oDateRangeSliderInternal.getTotalUnits() > 0 || bUseTextLabels) {
        var iTotalUnits = oDateRangeSliderInternal.getTotalUnits();
        if (bUseTextLabels) {
            iTotalUnits = oDateRangeSliderInternal.getLabels().length - 1;
        }

        // Add ticks
        for ( var i = 0; i <= iTotalUnits; i++) {
            oRm.write('<DIV');
            oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-tick' + i);
            oRm.write('class="sapUiSliTick" ');
            oRm.write('></DIV>'); // tick

            if (oDateRangeSliderInternal.getStepLabels()) {
                // Texts
                oRm.write('<DIV');
                oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-text' + i);
                switch (i) {
                    case (0):
                        oRm.write('class="sapUiSliText sapUiSliTextLeft" >');
                        break;
                    case (iTotalUnits):
                        oRm.write('class="sapUiSliText sapUiSliTextRight" >');
                        break;
                    default:
                        oRm.write('class="sapUiSliText" >');
                        break;
                }

                if (bUseTextLabels) {
                    oRm.write(oDateRangeSliderInternal.getLabels()[i]);
                } else {
                    var fStepSize = (oDateRangeSliderInternal.getMax() - oDateRangeSliderInternal.getMin()) / iTotalUnits;
                    oRm.write(oDateRangeSliderInternal.getMin() + i * fStepSize);
                }

                oRm.write('</DIV>'); // Text
            }
        }
    }
};

/**
 * Render highlight bar between grips.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 * @protected
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderHighlightBar = function(oRm, oDateRangeSliderInternal) {

    // Highlight bar
    oRm.write('<DIV');
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-hili');
    oRm.write('class="sapUiSliHiLi"></DIV>');
};

/**
 * Renders the Grip for the slider control, using the provided {@link sap.ui.fw.RenderManager}.
 * 
 * @param {sap.ui.fw.RenderManager}
 *                oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal An object representation of the control that should be rendered.
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderGrip = function(oRm, oDateRangeSliderInternal) {

    // Left Grip
    oRm.write('<DIV');

    // Icon for grip
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-grip');
    if (oDateRangeSliderInternal.getEnabled()) {
        oRm.writeAttribute('tabIndex', '0');
    } else {
        oRm.writeAttribute('tabIndex', '-1');
    }

    if (oDateRangeSliderInternal.getPinGrip()) {
        oRm.write('class="sapUiSliGrip sapUiSliGripPin"');
    } else {
        oRm.write('class="sapUiSliGrip"');
    }

    oRm.writeAttribute('title', oDateRangeSliderInternal.getValue());

    // ARIA
    oRm.writeAccessibilityState(oDateRangeSliderInternal, {
        role : 'slider',
        controls : oDateRangeSliderInternal.getId() + '-grip2',
        orientation : 'horizontal',
        valuemin : oDateRangeSliderInternal.getMin(),
        valuemax : oDateRangeSliderInternal.getValue2(),
        live : 'assertive',
        disabled : !oDateRangeSliderInternal.getEditable() || !oDateRangeSliderInternal.getEnabled(),
        describedby : oDateRangeSliderInternal.getTooltip_AsString() ? (oDateRangeSliderInternal.getId() + '-Descr ' + oDateRangeSliderInternal.getAriaDescribedBy().join(" ")) : undefined
    });

    oRm.write('>&#9650;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)
};

/**
 * Renders the Grip2 for the slider control, using the provided {@link sap.ui.fw.RenderManager}.
 * 
 * @param {sap.ui.fw.RenderManager}
 *                oRm The RenderManager that can be used for writing to the render output buffer.
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal An object representation of the control that should be rendered.
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.renderGrip2 = function(oRm, oDateRangeSliderInternal) {

    // Right Grip
    oRm.write('<DIV');

    // Icon for grip
    oRm.writeAttribute('id', oDateRangeSliderInternal.getId() + '-grip2');
    if (oDateRangeSliderInternal.getEnabled()) {
        oRm.writeAttribute('tabIndex', '0');
    } else {
        oRm.writeAttribute('tabIndex', '-1');
    }

    if (oDateRangeSliderInternal.getPinGrip2()) {
        oRm.write('class="sapUiSliGrip sapUiSliGripPin"');
    } else {
        oRm.write('class="sapUiSliGrip"');
    }

    oRm.writeAttribute('title', oDateRangeSliderInternal.getValue2());

    // ARIA
    oRm.writeAccessibilityState(oDateRangeSliderInternal, {
        role : 'slider',
        controls : oDateRangeSliderInternal.getId() + '-grip',
        orientation : 'horizontal',
        valuemin : oDateRangeSliderInternal.getValue(),
        valuemax : oDateRangeSliderInternal.getMax(),
        live : 'assertive',
        disabled : !oDateRangeSliderInternal.getEditable() || !oDateRangeSliderInternal.getEnabled(),
        describedby : oDateRangeSliderInternal.getTooltip_AsString() ? (oDateRangeSliderInternal.getId() + '-Descr ' + oDateRangeSliderInternal.getAriaDescribedBy().join(" ")) : undefined
    });

    oRm.write('>&#9650;</DIV>'); // Symbol for HCB Theme (Must be hidden in other themes)

};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSliderInternal}
 *                oDateRangeSliderInternal an object representation of the control that should be rendered
 */
sap.suite.ui.commons.DateRangeSliderInternalRenderer.render = function(oRm, oDateRangeSliderInternal) {

    // Return immediately if control is invisible
    if (!oDateRangeSliderInternal.getVisible()) {
        return;
    }

    this.renderEnclosingDiv(oRm, oDateRangeSliderInternal);
    this.renderBufferDivForBubbles(oRm, oDateRangeSliderInternal);
    this.renderAriaGripTooltip(oRm, oDateRangeSliderInternal);
    this.renderBubbles(oRm, oDateRangeSliderInternal);
    this.renderSliderBar(oRm, oDateRangeSliderInternal);
    this.renderTicksAndLabels(oRm, oDateRangeSliderInternal);
    this.renderHighlightBar(oRm, oDateRangeSliderInternal);

    if (oDateRangeSliderInternal.getPinGrip() || 
       (oDateRangeSliderInternal.getPinGrip() && oDateRangeSliderInternal.getPinGrip2()) || 
       (!oDateRangeSliderInternal.getPinGrip() && !oDateRangeSliderInternal.getPinGrip2())) {
        this.renderGrip(oRm, oDateRangeSliderInternal);
        this.renderGrip2(oRm, oDateRangeSliderInternal);
    } else if (oDateRangeSliderInternal.getPinGrip2()) {
        this.renderGrip2(oRm, oDateRangeSliderInternal);
        this.renderGrip(oRm, oDateRangeSliderInternal);
    }

    this.renderSliderBarEnd(oRm, oDateRangeSliderInternal);
    this.renderEnclosingDivEnd(oRm, oDateRangeSliderInternal);
};

}; // end of sap.suite.ui.commons.DateRangeSliderInternalRenderer
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSliderRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.DateRangeSliderRenderer");

/**
 * @class DateRangeSlider renderer.
 * @static
 */
sap.suite.ui.commons.DateRangeSliderRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.suite.ui.commons.DateRangeSlider}
 *                oDateRangeSlider an object representation of the control that should be rendered
 */
sap.suite.ui.commons.DateRangeSliderRenderer.render = function(oRm, oDateRangeSlider) {

    if (!oDateRangeSlider.getVisible()) {
        return;
    }
    // write the HTML into the render manager
    oRm.write("<span");
    oRm.writeControlData(oDateRangeSlider);
    oRm.addClass("sapSuiteUiCommonsDateRangeSlider");
    oRm.writeClasses();
    oRm.write(">"); // span element
    oRm.renderControl(oDateRangeSlider._oDateRangeSliderInternal);
    oRm.write("</span>");
};

}; // end of sap.suite.ui.commons.DateRangeSliderRenderer
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerFeederRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerFeederRenderer");

/**
 * @class NoteTakerFeeder renderer. 
 * @static
 */
sap.suite.ui.commons.NoteTakerFeederRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NoteTakerFeederRenderer.render = function(oRm, oControl){ 
    // write the HTML into the render manager
    oRm.write("<div");
    oRm.writeControlData(oControl);
    oRm.addClass("sapSuiteUiCommonsNoteTakerFeeder");
    oRm.writeClasses();
    oRm.writeAttribute("tabindex", "0");
    oRm.writeAccessibilityState(oControl, {
		role : 'region',
		describedby : oControl.getId() + "-header"
	});
    oRm.write(">");

    //write header
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-header");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederHeader");
        oRm.writeClasses();
        oRm.write(">");
            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-header-text");
            oRm.writeAccessibilityState(oControl, {
        		role : 'heading'
            });
            oRm.write(">");
                oRm.writeEscaped(oControl._rb.getText("NOTETAKERFEEDER_TITLE"));
            oRm.write("</div>");
        oRm.write("</div>");

    //write tag panel
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-tag-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederTagPanel");
        oRm.writeClasses();
        oRm.write(">");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-left-toolbar");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederLeftPanel");
            oRm.writeClasses();
            oRm.write(">");
                oRm.renderControl(oControl._oTagButton);
            oRm.write("</div>");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-right-toolbar");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederRightPanel");
            oRm.writeClasses();
            oRm.write(">");
                oRm.renderControl(oControl._oThumbUpButton);
                oRm.renderControl(oControl._oThumbDownButton);
                oRm.renderControl(oControl._oAddAttachButton);
                oRm.renderControl(oControl._oFileUploader);
            oRm.write("</div>");
        oRm.write("</div>");

        //write attachment panel
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-attachment-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederAttachmentPanel");
        oRm.writeClasses();
        oRm.write(">");
            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-attachment-content");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederAttachmentContent");
            oRm.writeClasses();
            oRm.write(">");
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-attachment-name");
                oRm.addClass("sapSuiteUiCommonsNtfAttachmentNamelbl");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.write("<div");
                    oRm.writeAttribute("id", oControl.getId() + "-attachment-image");
                    oRm.addClass("sapSuiteUiCommonsNtfAttachImg");
                    oRm.writeClasses();
                    oRm.write("/>");
                    oRm.renderControl(oControl._oAttachmentLink);
                oRm.write("</div>"); 
                
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-attachment-loading");
                oRm.addClass("sapSuiteUiCommonsNtfLoadingLbl");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.renderControl(oControl._oAttachmentLoadingLabel);
                oRm.write("</div>");
                
                oRm.write("<div");
                oRm.writeAttribute("id", oControl.getId() + "-attachment-delete");
                oRm.addClass("sapSuiteUiCommonsNtfDeleteBtn");
                oRm.writeClasses();
                oRm.write(">");
                    oRm.renderControl(oControl._oDeleteAttachButton);
                oRm.write("</div>");
            oRm.write("</div>"); 
        oRm.write("</div>");
        
    //write title panel
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-title-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederTitlePanel");
        oRm.writeClasses();
        oRm.write(">");
            oRm.renderControl(oControl._oTitle);
        oRm.write("</div>");

    //write body
        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-body");
        if(oControl._oAddAttachButton.getEnabled()) {
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederBody");            
        } else {
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederBodySmaller");
        }
        oRm.writeClasses();
        oRm.write(">");
            oRm.renderControl(oControl._oBody);
        oRm.write("</div>");

        oRm.renderControl(oControl._oAddButton);

        oRm.write("<div");
        oRm.writeAttribute("id", oControl.getId() + "-selectTag-panel");
        oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagPanel");
        oRm.addClass("sapUiShd");
        oRm.writeClasses();
        oRm.write(">");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-selectTag-arrow");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagArrow");
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("</div>");

            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-selectTag-header");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagHeader");
            oRm.writeClasses();
            oRm.write(">");
                oRm.writeEscaped(oControl._rb.getText("NOTETAKERFEEDER_TOOLPOPUP_TITLE"));
            oRm.write("</div>");

            oRm.write("<div>");
                oRm.renderControl(oControl._oTagInput);
            oRm.write("</div>");

            oRm.write("<div>");
                oRm.renderControl(oControl._oTagList);
            oRm.write("</div>");

            oRm.write("<div");
            oRm.addClass("sapSuiteUiCommonsNoteTakerFeederSelectTagButtons");
            oRm.writeClasses();
            oRm.write(">");
                oRm.renderControl(oControl._oAddTagButton);
                oRm.renderControl(oControl._oCancelTagButton);
            oRm.write("</div>");
        oRm.write("</div>");
    oRm.write("</div>");
};
}; // end of sap.suite.ui.commons.NoteTakerFeederRenderer
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerRenderer");

/**
 * @class NoteTaker renderer. 
 * @static
 */
sap.suite.ui.commons.NoteTakerRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NoteTakerRenderer.render = function(rm, oControl){ 
	rm.write("<div");
	rm.writeControlData(oControl);
	rm.addClass("sapSuiteUiCommonsNoteTaker");
	rm.writeClasses();
	rm.writeAttribute("style", "width:" + (oControl.getVisibleNotes() * 350 + 50) + "px");
	rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-filterPane");
        rm.addClass("sapSuiteUiCommonsNoteTakerFilterPane");
        rm.writeClasses();
        rm.write(">");
            // Left section
            rm.write("<div");
            rm.addClass("suiteUiNtFilterPaneLeftSection");
            rm.writeClasses();
            rm.write(">");
                rm.renderControl(oControl._oHomeButton);
                rm.write("<span");
                rm.writeAttribute("id", oControl.getId() + "-filterPane-header");
                rm.addClass("suiteUiNtFilterTitle");
                rm.writeClasses();
                rm.write(">");
                    rm.writeEscaped(oControl._rb.getText("NOTETAKER_FILTER_TITLE") + ":");
                rm.write("</span>");
                rm.renderControl(oControl._oFilterTagButton);
                rm.renderControl(oControl._oFilterThumbUpButton);
                rm.renderControl(oControl._oFilterThumbDownButton);
                rm.renderControl(oControl._oFilterAllButton);
            rm.write("</div>");

            // Right section
            rm.write("<div");
            rm.addClass("suiteUiNtFilterPaneRightSection");
            rm.writeClasses();
            rm.write(">");
                if (oControl.getVisibleNotes() > 1) {
                    rm.renderControl(oControl._oFilterSearchField);
                } else {
                	rm.renderControl(oControl._oSearchButton);
                }
            rm.write("</div>");
        rm.write("</div>");

        rm.renderControl(oControl._carousel);
        
        if (oControl.getVisibleNotes() == 1) {
        	this.searchTextRender(rm, oControl);
		}
        
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-filterTag-panel");
        rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagPanel");
        rm.addClass("sapUiShd");
        rm.writeClasses();
        rm.write(">");

            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-filterTag-arrow");
            rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagArrow");
            rm.writeClasses();
            rm.write(">");
            rm.write("</div>");

            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-filterTag-header");
            rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagHeader");
            rm.writeClasses();
            rm.write(">");
                rm.writeEscaped(oControl._rb.getText("NOTETAKERFEEDER_TOOLPOPUP_TITLE"));
            rm.write("</div>");

            rm.write("<div>");
                rm.renderControl(oControl._oFilterTagList);
            rm.write("</div>");

            rm.write("<div");
            rm.addClass("sapSuiteUiCommonsNoteTakerFilterTagButtons");
            rm.writeClasses();
            rm.write(">");
                rm.renderControl(oControl._oApplyFilterTagButton);
                rm.renderControl(oControl._oCancelFilterTagButton);
            rm.write("</div>");
        rm.write("</div>");
        
	rm.write("</div>");
};

sap.suite.ui.commons.NoteTakerRenderer.searchTextRender = function(rm, oControl){
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-search-panel");
    rm.addClass("sapSuiteUiCommonsNoteTakerSearchPanel");
    rm.addClass("sapUiShd");
    rm.writeClasses();
    rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-search-arrow");
        rm.addClass("sapSuiteUiCommonsNoteTakerSearchArrow");
        rm.writeClasses();
        rm.write(">");
        rm.write("</div>");
        
        rm.write("<div>");
        rm.renderControl(oControl._oFilterSearchField);
        rm.write("</div>");
    rm.write("</div>");
};	

}; // end of sap.suite.ui.commons.NoteTakerRenderer
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.SplitButtonRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.SplitButtonRenderer");

/**
 * @class SplitButton renderer.
 * @static
 */
sap.suite.ui.commons.SplitButtonRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *                oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control}
 *                oSplitButton an object representation of the control that should be rendered
 */
sap.suite.ui.commons.SplitButtonRenderer.render = function(oRm, oSplitButton) {

    // return immediately if control is invisible
    if (!oSplitButton.getVisible()) {
        return;
    }
    // write the HTML into the render manager
    oRm.write("<span");
    oRm.writeControlData(oSplitButton);
    oRm.addClass("sapSuiteUiCommonsSplitButton");
    oRm.writeClasses();
    oRm.write(">"); // span element
    oRm.renderControl(oSplitButton._oDefaultActionButton);
    oRm.renderControl(oSplitButton._oMenuButton);
    oRm.write("</span>");
};

}; // end of sap.suite.ui.commons.SplitButtonRenderer
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.suite.ui.commons (1.12.1)
 */
jQuery.sap.declare("sap.suite.ui.commons.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: sap.suite.ui.commons
 *
 * @namespace
 * @name sap.suite.ui.commons
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
  name : "sap.suite.ui.commons",
  dependencies : ["sap.ui.core","sap.ui.commons"],
  types: [],
  interfaces: [],
  controls: [
    "sap.suite.ui.commons.DateRangeScroller",
    "sap.suite.ui.commons.DateRangeSlider",
    "sap.suite.ui.commons.DateRangeSliderInternal",
    "sap.suite.ui.commons.NoteTaker",
    "sap.suite.ui.commons.NoteTakerCard",
    "sap.suite.ui.commons.NoteTakerFeeder",
    "sap.suite.ui.commons.SplitButton"
  ],
  elements: [],
  version: "1.12.1"});


}; // end of sap.suite.ui.commons.library
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.DateUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.DateUtils");

/**
 * Constructor for DateUtils - must not be used. All functions are static, so it is illegal to call this constructor.
 * 
 * @class DateUtils is a static class for Date utility functions.
 * 
 * @public
 */
sap.suite.ui.commons.util.DateUtils = function() {

    throw new Error();
};

/**
 * Adjust the given date to the start of the day, with time set to 0 hours, 0 minutes, and 0 seconds.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setHours(0);
        dDate.setMinutes(0);
        dDate.setSeconds(0);
        dDate.setMilliseconds(0);
    }
};

/**
 * Adjust the given date to the end of the day, with time set to 23 hours, 59 minutes, and 59 seconds.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setHours(23);
        dDate.setMinutes(59);
        dDate.setSeconds(59);
        dDate.setMilliseconds(999);
    }
};

/**
 * Adjust the given date to the first day of the month, start of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setDate(1);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dDate);
    }
};

/**
 * Adjust the given date to the last day of the month, end of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setDate(1);
        dDate.setMonth(dDate.getMonth() + 1);
        dDate.setDate(0);
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dDate);
    }
};

/**
 * Adjust the given date to the first day of the year, start of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfYear = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setMonth(0);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dDate);
    }
};

/**
 * Adjust the given date to the last day of the year, end of day.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear = function(dDate) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        dDate.setMonth(11);
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(dDate);
    }
};

/**
 * Adjust the given date to the day specified by <code>iFirstDayOfWeek</code>. The date will be set to the previous first day of the week. For example, if the date is Tuesday,
 * February 19 and the value of <code>iFirstDayOfWeek</code> is 4 (Thursday), then the date will be adjusted to the previous Thursday, which is February 14.
 * 
 * @param {Date}
 *                The date to be adjusted.
 * @param [iFirstDayOfWeek=1]
 *                The day considered to be the first day of the week. Valid values are 0-6, with 0=Sunday and 6=Saturday.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToStartOfWeek = function(dDate, iFirstDayOfWeek) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {
        if (iFirstDayOfWeek === undefined) {
            iFirstDayOfWeek = 1;
        } else if (isNaN(iFirstDayOfWeek) || !isFinite(iFirstDayOfWeek)) {
            jQuery.sap.log.error("DateUtils iFirstDayOfWeek value ='" + iFirstDayOfWeek + "' is invalid.");
            return;
        }

        dDate.setDate(dDate.getDate() - (dDate.getDay() - iFirstDayOfWeek + 7) % 7);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dDate);
    }
};

/**
 * Adjust the given date to <code>oSettings.iDuration</code> days after the day specified by <code>oSettings.iFirstDayOfWeek</code>. See <code>resetDateToStartOfWeek()</code>
 * for a description of how the date is adjusted to the first day of week.
 * 
 * @param {Object}
 *                oSettings
 * @param [oSettings.iDuration=7]
 *                The number of days in the week with a minimum of 1 and maximum of 7.
 * @param [oSettings.iFirstDayOfWeek=1]
 *                The day considered to be the first day of the week. Valid values are 0-6, with 0=Sunday and 6=Saturday.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.resetDateToEndOfWeek = function(dDate, oSettings) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate)) {

        var duration;
        if (oSettings && !(oSettings instanceof Object)) {
            jQuery.sap.log.error("DateUtils oSettings is not an object.");
            return;
        }

        if (!oSettings) {
            oSettings = {};
        }

        if (oSettings.iDuration === undefined) {
            duration = 7;
        } else {
            duration = oSettings.iDuration;

            if (isNaN(duration) || !isFinite(duration)) {
                jQuery.sap.log.error("DateUtils duration value ='" + duration + "' is invalid.");
                return;
            }
        }

        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfWeek(dDate, oSettings.iFirstDayOfWeek);
        dDate.setDate(dDate.getDate() + duration - 1);
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dDate);
    }
};

/**
 * Test if the given date is a valid date object. If the date is invalid an error message is logged.
 * 
 * @param {Date}
 *                The date to be validated.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.isValidDate = function(dDate) {

    if (Object.prototype.toString.call(dDate) !== "[object Date]" || isNaN(dDate.getTime())) {
        jQuery.sap.log.error("DateUtils invalid date=" + dDate);
        return false;
    }
    return true;
};

/**
 * Tests to see if two dates have the same year, month, and day. Time is not included in the equality. Invalid dates, such as null or undefined, are never equal.
 * 
 * @param {Date}
 *                dDate1 First date to compare.
 * @param {Date}
 *                dDate2 Second date to compare.
 * @return {boolean} true if two dates have same year, month, and day, otherwise false
 * @public
 */
sap.suite.ui.commons.util.DateUtils.dateDaysEqual = function(dDate1, dDate2) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate1) && sap.suite.ui.commons.util.DateUtils.isValidDate(dDate2)) {

        return (dDate1.getFullYear() === dDate2.getFullYear() && dDate1.getMonth() === dDate2.getMonth() && dDate1.getDate() === dDate2.getDate());

    }
    return false;
};

/**
 * Tests to see if two dates have the same year and month. Time is not included in the equality. Invalid dates, such as null or undefined, are never equal.
 * 
 * @param {Date}
 *                dDate1 First date to compare.
 * @param {Date}
 *                dDate2 Second date to compare.
 * @return {boolean} true if two dates have same year and month, otherwise false
 * @public
 */
sap.suite.ui.commons.util.DateUtils.dateMonthsEqual = function(dDate1, dDate2) {

    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dDate1) && sap.suite.ui.commons.util.DateUtils.isValidDate(dDate2)) {

        return (dDate1.getFullYear() === dDate2.getFullYear() && dDate1.getMonth() === dDate2.getMonth());
    }
    return false;
};

/**
 * Returns the date that is iIndex days from the dStartDate
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {int}
 *                iIndex how many days to move forward or backward from dStartDate.
 * @return {Date} date that is iIndex days from the dStartDate if dStartDate and iIndex are valid, otherwise null.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.incrementDateByIndex = function(dStartDate, iIndex) {

    var dReturnDate = null;
    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dStartDate) && isFinite(iIndex)) {
        dReturnDate = new Date(dStartDate);
        dReturnDate.setDate(dStartDate.getDate() + parseInt(iIndex, 10));
    }
    return dReturnDate;
};

/**
 * Returns the date that is iIndex months from the dStartDate
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {int}
 *                iIndex how many months to move forward or backward from dStartDate.
 * @return {Date} date that is iIndex months from the dStartDate if dStartDate and iIndex are valid, otherwise null.
 * @public
 */
sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex = function(dStartDate, iIndex) {

    var dReturnDate = null;
    if (sap.suite.ui.commons.util.DateUtils.isValidDate(dStartDate) && isFinite(iIndex)) {
        dReturnDate = new Date(dStartDate);
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dReturnDate);
        dReturnDate.setMonth(dStartDate.getMonth() + parseInt(iIndex, 10));
    }
    return dReturnDate;
};

/**
 * Returns the number of months two dates are apart
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {Date}
 *                dEndDate End date.
 * @return {Number} number of months two dates are apart
 * 
 * @public
 */
sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart = function(dStartDate, dEndDate) {

    dStartDate = new Date(dStartDate);
    dEndDate = new Date(dEndDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dStartDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dEndDate);

    var bForward = dStartDate.getTime() <= dEndDate.getTime();
    var iForward = 0, iBackward = 0, iNumberApart = 0;

    for (iForward = 0, iBackward = 0; 
    !(dStartDate.getDate() === dEndDate.getDate() && dStartDate.getMonth() === dEndDate.getMonth() && dStartDate.getFullYear() === dEndDate.getFullYear());
    iForward++, iBackward--) {
        if (bForward) {
            dStartDate.setMonth(dStartDate.getMonth() + 1);        
        } else {
            dStartDate.setMonth(dStartDate.getMonth() - 1);          
        }
    }    
    
    if(bForward){
        iNumberApart = iForward;
    } else {
        iNumberApart = iBackward;
    }
    return iNumberApart;
};

/**
 * Returns the number of days two dates are apart
 * 
 * @param {Date}
 *                dStartDate Start date.
 * @param {Date}
 *                dEndDate End date.
 * @return {Number} number of days two dates are apart
 * 
 * @public
 */
sap.suite.ui.commons.util.DateUtils.numberOfDaysApart = function(dStartDate, dEndDate) {

    dStartDate = new Date(dStartDate);
    dEndDate = new Date(dEndDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dStartDate);
    sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dEndDate);

    var bForward = dStartDate.getTime() <= dEndDate.getTime();   
    var iForward = 0, iBackward = 0, iNumberApart = 0;

    for (iForward = 0, iBackward = 0;  
    !(dStartDate.getDate() === dEndDate.getDate() && dStartDate.getMonth() === dEndDate.getMonth() && dStartDate.getFullYear() === dEndDate.getFullYear());
    iForward++, iBackward--) {
        if (bForward) {
            dStartDate.setDate(dStartDate.getDate() + 1);            
        } else {
            dStartDate.setDate(dStartDate.getDate() - 1);            
        }
    }

    if(bForward){
        iNumberApart = iForward;
    } else {
        iNumberApart = iBackward;
    }
    return iNumberApart;
};

}; // end of sap.suite.ui.commons.util.DateUtils
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.util.RenderUtils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.suite.ui.commons.util.RenderUtils");

jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained


sap.suite.ui.commons.util.RenderingHelper = function(oRenderManager) {
    this._rm = oRenderManager;
};
sap.suite.ui.commons.util.RenderingHelper.prototype = jQuery.sap.newObject(sap.ui.base.Object.prototype);

/**
 * Returns render manager, throw {Error} if undefined.
 */
sap.suite.ui.commons.util.RenderingHelper.prototype._getRenderManager = function() {
    if (!(this._rm)) {
        throw new Error("Render manager not defined");
    }
    return this._rm;
};

/**
 * Writes complete opening tag with name sTagName.
 * @param {String} sTagName The name for the tag.
 * @param {Object} [oTag] Object which contains tag's classes and attributes.
 */
sap.suite.ui.commons.util.RenderingHelper.prototype.writeOpeningTag = function(sTagName, oTag) {
    oTag = oTag || {};

    // Get manager
    var rm = this._getRenderManager();
    var attrName;

    // Write tag name
    rm.write("<");
    rm.writeEscaped(sTagName);

    // Write CSS classes
    if (oTag.classes) {
        for (var i = 0; i < oTag.classes.length; i++) {
            rm.addClass(oTag.classes[i]);
        }
        rm.writeClasses();
    }

    // Write attributes
    if (oTag.attributes) {
        for (attrName in oTag.attributes) {
            rm.writeAttribute(attrName, oTag.attributes[attrName]);
        }
    }

    // Write escaped attributes
    if (oTag.escapedAttributes) {
        for (attrName in oTag.escapedAttributes) {
            rm.writeAttributeEscaped(attrName, oTag.escapedAttributes[attrName]);
        }
    }

    rm.write(">");
};

/**
 * Writes complete opening tag with name sTagName.
 * @param {String} sTagName The name for the tag.
 */
sap.suite.ui.commons.util.RenderingHelper.prototype.writeClosingTag = function(sTagName) {
    // Get manager
    var rm = this._getRenderManager();

    // Write tag name
    rm.write("</");
    rm.writeEscaped(sTagName);
    rm.write(">");
};

}; // end of sap.suite.ui.commons.util.RenderUtils
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeScroller') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DateRangeScroller.
jQuery.sap.declare("sap.suite.ui.commons.DateRangeScroller");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new DateRangeScroller.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getAriaDescribedBy ariaDescribedBy} : string | sap.ui.core.Control</li>
 * <li>{@link #getAriaLabelledBy ariaLabelledBy} : string | sap.ui.core.Control</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.DateRangeScroller#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The DateRangeScroller provides a method to scroll through a series of time periods, each of which is represented by a starting date and an ending date, known as the date range. The user may scroll to the previous or next date range. Several predefined ranges are supported such as day, week, work week, month, and year.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.DateRangeScroller", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	associations : {
		"ariaDescribedBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaDescribedBy"}, 
		"ariaLabelledBy" : {type : "sap.ui.core.Control", multiple : true, singularName : "ariaLabelledBy"}
	},
	events : {
		"change" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DateRangeScroller with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DateRangeScroller.extend
 * @function
 */

sap.suite.ui.commons.DateRangeScroller.M_EVENTS = {'change':'change'};


/**
 * Association to controls / ids which describe this control (see WAI-ARIA attribute aria-describedby).
 * 
 * @return {string[]}
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#getAriaDescribedBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaDescribedBy
 *    Id of a ariaDescribedBy which becomes an additional target of this <code>ariaDescribedBy</code> association.
 *    Alternatively, a ariaDescribedBy instance may be given. 
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#addAriaDescribedBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaDescribedBy the ariaDescribedBy to remove or its index or id
 * @return {string} the id of the removed ariaDescribedBy or null
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAriaDescribedBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAllAriaDescribedBy
 * @function
 */

	
/**
 * Association to controls / ids which label this control (see WAI-ARIA attribute aria-labelledby).
 * 
 * @return {string[]}
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#getAriaLabelledBy
 * @function
 */

	
/**
 *
 * @param {string | sap.ui.core.Control} vAriaLabelledBy
 *    Id of a ariaLabelledBy which becomes an additional target of this <code>ariaLabelledBy</code> association.
 *    Alternatively, a ariaLabelledBy instance may be given. 
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#addAriaLabelledBy
 * @function
 */

/**
 * @param {int | string | sap.ui.core.Control} vAriaLabelledBy the ariaLabelledBy to remove or its index or id
 * @return {string} the id of the removed ariaLabelledBy or null
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAriaLabelledBy
 * @function
 */

/**
 * @return {string[]} an array with the ids of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#removeAllAriaLabelledBy
 * @function
 */

	
/**
 * This event is fired whenever the date range is changed. 
 *
 * @name sap.suite.ui.commons.DateRangeScroller#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {any} oControlEvent.getParameters.dateRange Object containing startDate and endDate Date properties signifying the start and ending dates of the currently selected range.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/> itself. 
 *  
 * This event is fired whenever the date range is changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.suite.ui.commons.DateRangeScroller</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeScroller#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'dateRange' of type <code>any</code> Object containing startDate and endDate Date properties signifying the start and ending dates of the currently selected range.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeScroller#fireChange
 * @function
 */


// Start of sap/suite/ui/commons/DateRangeScroller.js
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained



(function() {

    /* Internal values for date range types. */
    var DAY = "d";
    var WEEK = "w";
    var MONTH = "m";
    var YEAR = "y";
    var CUSTOM = "c";

    var iWeekStepSize = 7;


    /**
     * Format start and end date according to default formatting option and current date range
     * 
     * @param {String}
     *                sRangeType defines the date range type for formatting
     * @param {Object}
     *                oDateRange object contains start and end date for current date range
     * @param {Date}
     *                oDateRange.startDate The start date.
     * @param {Date}
     *                oDateRange.endDate The end date.
     * @param {sap.ui.core.format.DateFormat}
     *                oDateFormat The date format to use for formatting
     * @returns Formatted date range as string.
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.getFormattedDate = function(sRangeType, oDateRange, oDateFormat) {

        var oDateFormatter;
        var sFormattedDateRange;

        switch (sRangeType) {
        case (DAY):
            oDateFormatter = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : "MMMM d, YYYY"
            });
            sFormattedDateRange = oDateFormatter.format(oDateRange.startDate, false);
            break;
        case (WEEK):
        case (CUSTOM):
            var oStartDateFormat = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMMM d'
            });
            var oEndDateFormat = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMMM d, YYYY'
            });
            if (oDateRange.startDate.getYear() !== oDateRange.endDate.getYear()) {
                oStartDateFormat = oEndDateFormat;
            } else if (oDateRange.startDate.getMonth() === oDateRange.endDate.getMonth()) {
                oEndDateFormat = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                    pattern : 'd, YYYY'
                });
            }
            var sStartDate = oStartDateFormat.format(oDateRange.startDate, false);
            var sEndDate = oEndDateFormat.format(oDateRange.endDate, false);
            sFormattedDateRange = sStartDate + " - " + sEndDate;
            break;
        case (MONTH):
            oDateFormatter = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMMM YYYY'
            });
            sFormattedDateRange = oDateFormatter.format(oDateRange.startDate, false);
            break;
        case (YEAR):
            oDateFormatter = oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'YYYY'
            });
            sFormattedDateRange = oDateFormatter.format(oDateRange.startDate, false);
            break;
        default:
            sFormattedDateRange = oDateRange.startDate + " - " + oDateRange.endDate;
            break;
        }

        return sFormattedDateRange;
    };

    /**
     * Update the date range value in the label control and rerender.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue = function(sRangeType, oDateRange, oRangeLabel, oDateFormat) {

        oRangeLabel.setText(sap.suite.ui.commons.DateRangeScroller.getFormattedDate(sRangeType, oDateRange, oDateFormat));
        if (oRangeLabel.isActive()) { // Don't rerender if the control is not placed in the DOM
            oRangeLabel.rerender();
        }
    };

    /**
     * Add <code>iStep</code> days to the given date. A negative step value moves the date backward in time.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.adjustDateByStep = function(dDate, iStep) {

        if (iStep === 0) {
            return;
        }
        dDate.setDate(dDate.getDate() + iStep);
    };

    /**
     * Adjust the start/end dates by the given step.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep = function(oRange, iStep) {

        var dStartDate = oRange.startDate;
        var dEndDate = oRange.endDate;
        dStartDate.setDate(dStartDate.getDate() + iStep);
        dEndDate.setDate(dEndDate.getDate() + iStep);
    };

    /**
     * Test if the given duration is a positive, non-infinite integer. The duration must be less than the upper limit if a limit is specified. A duration of undefined returns true.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.isValidDuration = function(iDuration, iUpperLimit) {

        var bValidDuration = false;
        
        if (iDuration === undefined) {
            bValidDuration = true;
        } else if (!isNaN(iDuration) && isFinite(iDuration)) {

            if ((iDuration >= 1) && (!iUpperLimit || iDuration <= iUpperLimit)) {
                bValidDuration = true;
            }
        }
        
        if(!bValidDuration){
            jQuery.sap.log.error("DateRangeScroller duration value ='" + iDuration + "' is invalid.");
        }
       
        return bValidDuration;
    };

    /**
     * Initialize the control.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.init = function() {

        this._sRangeType = DAY;
        this._iCustomDuration = 1;
        this._oDateFormat = null;

        this._oDateRangeLabel = new sap.ui.commons.Label(this.getId() + "-dateRangeLabel", {
            labelFor : this.getId()
        });
        this._oDateRangeLabel.addStyleClass("sapSuiteUiCommonsDateRangeScrollerLabel");

        var dStart = new Date();
        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dStart);
        var dEnd = new Date();
        sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dEnd);
        this._oDateRange = {
            startDate : dStart,
            endDate : dEnd
        };
        sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
    };

    /**
     * Set a date range equal to a single day, starting with the given initial date.
     * 
     * @param {Date}
     *                dInitialDate The initial date.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeDay = function(dInitialDate) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(this._oDateRange.startDate);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = DAY;
        }
        return this;
    };

    /**
     * Set a date range that steps one week at a time. The starting date is set according to the first day of the week (default is Monday) and the initial date. For example, if the
     * first day of the week is set to Tuesday and the initial date is Wednesday, January 9, 2013, then the starting date will be Tuesday, January 8, 2013.
     * 
     * The last day of the range is calculated by adding (duration - 1) days to the starting date.
     * 
     * @param {Date}
     *                dInitialDate Any date that falls on the desired week. Start/end dates will be adjusted according to the first day of the week.
     * @param {Object}
     *                [oSettings]
     * @param [oSettings.duration=7]
     *                The number of days in the range with a minimum of 1 and maximum of 7.
     * @param [oSettings.iFirstDayOfWeek=1]
     *                The starting day for the range. Valid values are 0-6, with 0=Sunday and 6=Saturday.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeWeek = function(dInitialDate, oSettings) {

        var iDuration = iWeekStepSize;
        var iFirstDayOfWeek = 1;
        if (oSettings) {
            iDuration = oSettings.duration;
            iFirstDayOfWeek = oSettings.firstDayOfWeek;
        }

        if (iDuration === undefined) {
            iDuration = iWeekStepSize;
        } else if (iDuration && !isNaN(iDuration)) {
            iDuration = parseInt(iDuration, 10);
        }

        if (iFirstDayOfWeek === undefined) {
            iFirstDayOfWeek = 1;
        } else if (iFirstDayOfWeek && !isNaN(iFirstDayOfWeek)) {
            iFirstDayOfWeek = parseInt(iFirstDayOfWeek, 10);
        }

        // If first day of week is specified (defined), but invalid, do not proceed even if the passed start date is valid.
        if ((iFirstDayOfWeek === null) || iFirstDayOfWeek === "" || isNaN(iFirstDayOfWeek) || iFirstDayOfWeek < 0 || iFirstDayOfWeek > 6) {

            jQuery.sap.log.error("DateRangeScroller oSettings.firstDayOfWeek value ='" + oSettings.firstDayOfWeek + "' is invalid.");

        } else if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate) && sap.suite.ui.commons.DateRangeScroller.isValidDuration(iDuration, iWeekStepSize)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());

            var duration = iDuration;
            var firstDay = iFirstDayOfWeek;
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfWeek(this._oDateRange.startDate, iFirstDayOfWeek);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfWeek(this._oDateRange.endDate, {iDuration: duration, iFirstDayOfWeek: firstDay});
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(WEEK, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);

            this._sRangeType = WEEK;
        }
        return this;
    };

    /**
     * Set a date range that increments/decrements one calendar month at a time. The month date range begins on the first day of the month (beginning of the day) and ends on the
     * last day of the month (end of the day).
     * 
     * @param {Date}
     *                dInitialDate Any date that falls within the desired month.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeMonth = function(dInitialDate) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(this._oDateRange.startDate);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(MONTH, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = MONTH;
        }
        return this;
    };

    /**
     * Set a date range that increments/decrements one calendar year at a time. The year date range begins on the first day of the year (beginning of the day) and ends on the last
     * day of the year (end of the day).
     * 
     * @param {Date}
     *                dInitialDate Any date that falls within the desired year.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeYear = function(dInitialDate) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate)) {
            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfYear(this._oDateRange.startDate);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(YEAR, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = YEAR;
        }
        return this;
    };

    /**
     * Set a custom date range beginning with the specified start date that increments/decrements <code>iDuration</code> days at a time.
     * 
     * @param dInitialDate
     *                The initial date for the custom range.
     * @param [iDuration=current
     *                custom duration] The number of days in the custom range, including the start date.
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateRangeCustom = function(dInitialDate, iDuration) {

        if (iDuration === undefined) {
            iDuration = this._iCustomDuration;
        } else if (iDuration && !isNaN(iDuration)) {
            iDuration = parseInt(iDuration, 10);
        }

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dInitialDate) && sap.suite.ui.commons.DateRangeScroller.isValidDuration(iDuration)) {

            this._oDateRange.startDate.setTime(dInitialDate.getTime());
            this._oDateRange.endDate.setTime(dInitialDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(this._oDateRange.startDate);

            sap.suite.ui.commons.DateRangeScroller.adjustDateByStep(this._oDateRange.endDate, iDuration - 1);
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(CUSTOM, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            this._sRangeType = CUSTOM;
            this._iCustomDuration = iDuration;
        }
        return this;
    };

    /**
     * Increment the date range by a time period increment according to the the date range type and fire the dateChange event.
     * 
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.incrementDateRange = function() {

        switch (this._sRangeType) {
        case (DAY):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, 1);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (WEEK):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, iWeekStepSize);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(WEEK, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (CUSTOM):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, this._iCustomDuration);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(CUSTOM, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (MONTH):
            var iStart = this._oDateRange.startDate.getMonth() + 1;
            this._oDateRange.startDate.setMonth(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(MONTH, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (YEAR):
            iStart = this._oDateRange.startDate.getFullYear() + 1;
            this._oDateRange.startDate.setFullYear(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(YEAR, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        }

        var oCopyDateRange = this.getDateRange();
        this.fireChange({
            dateRange : oCopyDateRange
        });
        return this;
    };

    /**
     * Decrement the date range by a time period increment according to the the date range type and fire the dateChange event.
     * 
     * @returns {sap.suite.ui.commons.DateRangeScroller} <code>this</code> to allow method chaining
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.decrementDateRange = function() {

        switch (this._sRangeType) {
        case (DAY):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, -1);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(DAY, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (WEEK):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, -iWeekStepSize);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(WEEK, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (CUSTOM):
            sap.suite.ui.commons.DateRangeScroller.adjustRangeByStep(this._oDateRange, -this._iCustomDuration); // Here the step amount equals the range duration
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(CUSTOM, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (MONTH):
            var iStart = this._oDateRange.startDate.getMonth() - 1;
            this._oDateRange.startDate.setMonth(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(MONTH, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        case (YEAR):
            iStart = this._oDateRange.startDate.getFullYear() - 1;
            this._oDateRange.startDate.setFullYear(iStart);
            this._oDateRange.endDate.setTime(this._oDateRange.startDate.getTime());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfYear(this._oDateRange.endDate);
            sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(YEAR, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
            break;
        }
        var oCopyDateRange = this.getDateRange();
        this.fireChange({
            dateRange : oCopyDateRange
        });
        return this;
    };

    /**
     * Returns an object containing startDate and endDate set to the current start and end Date objects.
     * 
     * @returns The date range containing start and end Date.
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.getDateRange = function() {

        var oCopyDateRange = {
            startDate : new Date(this._oDateRange.startDate.getTime()),
            endDate : new Date(this._oDateRange.endDate.getTime())
        };
        return oCopyDateRange;
    };

    /**
     * Setter for dateFormat which is used for formating the dates If passed object is null or is of incorrect type, control's default formatting will be used.
     * 
     * @param oDateFormat
     *                {sap.ui.core.format.DateFormat}
     * @public
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.setDateFormat = function(oDateFormat) {

        if (oDateFormat && oDateFormat instanceof sap.ui.core.format.DateFormat) {
            this._oDateFormat = oDateFormat;
        } else {
            this._oDateFormat = null;
        }
        sap.suite.ui.commons.DateRangeScroller.updateDateRangeValue(this._sRangeType, this._oDateRange, this._oDateRangeLabel, this._oDateFormat);
    };

    /**
     * Control click handler to trigger increment or decrement of the date range.
     * 
     * @param oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onclick = function(oEvent) {

        switch (oEvent.target) {
        case jQuery.sap.byId(this.getId() + '-decrementScrollButton')[0]:
            this.decrementDateRange();
            break;
        case jQuery.sap.byId(this.getId() + '-incrementScrollButton')[0]:
            this.incrementDateRange();
            break;
        }

        jQuery.sap.byId(this.getId() + "-labelarea").focus();
    };

    /**
     * Function is called when right arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapright = function(oEvent) {

        this.incrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Function is called when left arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapleft = function(oEvent) {

        this.decrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Function is called when up arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapup = function(oEvent) {

        this.incrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

    /**
     * Function is called when DOWN arrow is pressed
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeScroller.prototype.onsapdown = function(oEvent) {

        this.decrementDateRange();

        oEvent.preventDefault();
        oEvent.stopPropagation();
    };

}());

}; // end of sap.suite.ui.commons.DateRangeScroller
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSlider') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DateRangeSlider.
jQuery.sap.declare("sap.suite.ui.commons.DateRangeSlider");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new DateRangeSlider.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '100%')</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getEditable editable} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getShowBubbles showBubbles} : boolean (default: true)</li>
 * <li>{@link #getSmallStepWidth smallStepWidth} : float</li>
 * <li>{@link #getTotalUnits totalUnits} : int</li>
 * <li>{@link #getStepLabels stepLabels} : boolean (default: false)</li>
 * <li>{@link #getLabels labels} : string[]</li>
 * <li>{@link #getMin min} : object</li>
 * <li>{@link #getMax max} : object</li>
 * <li>{@link #getValue value} : object</li>
 * <li>{@link #getValue2 value2} : object</li>
 * <li>{@link #getPinGrip pinGrip} : boolean (default: false)</li>
 * <li>{@link #getPinGrip2 pinGrip2} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.DateRangeSlider#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.DateRangeSlider#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.DateRangeSlider", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '100%'},
		"enabled" : {type : "boolean", group : "Appearance", defaultValue : true},
		"editable" : {type : "boolean", group : "Behavior", defaultValue : true},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"showBubbles" : {type : "boolean", group : "Misc", defaultValue : true},
		"smallStepWidth" : {type : "float", group : "Appearance", defaultValue : null},
		"totalUnits" : {type : "int", group : "Appearance", defaultValue : null},
		"stepLabels" : {type : "boolean", group : "Misc", defaultValue : false},
		"labels" : {type : "string[]", group : "Misc", defaultValue : null},
		"min" : {type : "object", group : "Behavior", defaultValue : null},
		"max" : {type : "object", group : "Behavior", defaultValue : null},
		"value" : {type : "object", group : "Behavior", defaultValue : null},
		"value2" : {type : "object", group : "Behavior", defaultValue : null},
		"pinGrip" : {type : "boolean", group : "Misc", defaultValue : false},
		"pinGrip2" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DateRangeSlider with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DateRangeSlider.extend
 * @function
 */

sap.suite.ui.commons.DateRangeSlider.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>width</code>.
 * Width of the horizontal date range slider.
 *
 * Default value is <code>100%</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>100%</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setWidth
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * This property switches the enabled state of the control. Disabled fields have different colors, and can not be focused.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setEnabled
 * @function
 */


/**
 * Getter for property <code>editable</code>.
 * This property switches the enabled state of the control. Using the date range slider interactively requires this property to be true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>editable</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getEditable
 * @function
 */

/**
 * Setter for property <code>editable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEditable  new value for property <code>editable</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setEditable
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * This property switches the visible state of the control. Invisible date range slider are not rendered.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setVisible
 * @function
 */


/**
 * Getter for property <code>showBubbles</code>.
 * Property to show or hide bubbles. Default is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showBubbles</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getShowBubbles
 * @function
 */

/**
 * Setter for property <code>showBubbles</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowBubbles  new value for property <code>showBubbles</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setShowBubbles
 * @function
 */


/**
 * Getter for property <code>smallStepWidth</code>.
 * The grips of the control can only be moved in steps of this width.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {float} the value of property <code>smallStepWidth</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getSmallStepWidth
 * @function
 */

/**
 * Setter for property <code>smallStepWidth</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {float} fSmallStepWidth  new value for property <code>smallStepWidth</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setSmallStepWidth
 * @function
 */


/**
 * Getter for property <code>totalUnits</code>.
 * Number of units that are displayed by ticks. The PageUp and PageDown keys navigate according to these units.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>totalUnits</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getTotalUnits
 * @function
 */

/**
 * Setter for property <code>totalUnits</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iTotalUnits  new value for property <code>totalUnits</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setTotalUnits
 * @function
 */


/**
 * Getter for property <code>stepLabels</code>.
 * Display step numbers for the ticks on the slider.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>stepLabels</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getStepLabels
 * @function
 */

/**
 * Setter for property <code>stepLabels</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bStepLabels  new value for property <code>stepLabels</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setStepLabels
 * @function
 */


/**
 * Getter for property <code>labels</code>.
 * Labels to be displayed instead of dates. Attribute totalUnits and label count should be the same.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string[]} the value of property <code>labels</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getLabels
 * @function
 */

/**
 * Setter for property <code>labels</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string[]} aLabels  new value for property <code>labels</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setLabels
 * @function
 */


/**
 * Getter for property <code>min</code>.
 * Minimum date for the slider.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>min</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getMin
 * @function
 */

/**
 * Setter for property <code>min</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oMin  new value for property <code>min</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setMin
 * @function
 */


/**
 * Getter for property <code>max</code>.
 * Maximum date for the slider.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>max</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getMax
 * @function
 */

/**
 * Setter for property <code>max</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oMax  new value for property <code>max</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setMax
 * @function
 */


/**
 * Getter for property <code>value</code>.
 * Value date for the slider.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>value</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getValue
 * @function
 */

/**
 * Setter for property <code>value</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oValue  new value for property <code>value</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setValue
 * @function
 */


/**
 * Getter for property <code>value2</code>.
 * Value2 date for the slider.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>value2</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getValue2
 * @function
 */

/**
 * Setter for property <code>value2</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oValue2  new value for property <code>value2</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setValue2
 * @function
 */


/**
 * Getter for property <code>pinGrip</code>.
 * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getPinGrip
 * @function
 */

/**
 * Setter for property <code>pinGrip</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip  new value for property <code>pinGrip</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setPinGrip
 * @function
 */


/**
 * Getter for property <code>pinGrip2</code>.
 * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip2</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#getPinGrip2
 * @function
 */

/**
 * Setter for property <code>pinGrip2</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip2  new value for property <code>pinGrip2</code>
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#setPinGrip2
 * @function
 */


/**
 * This event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @name sap.suite.ui.commons.DateRangeSlider#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself. 
 *  
 * This event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSlider#fireChange
 * @function
 */


/**
 * This live event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @name sap.suite.ui.commons.DateRangeSlider#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself. 
 *  
 * This live event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSlider</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSlider#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSlider#fireLiveChange
 * @function
 */


// Start of sap/suite/ui/commons/DateRangeSlider.js
jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained



(function() {

    var DAY = "d";
    var MONTH = "m";

    /**
     * Validate if dFirstDate and dSecondDate are same day for Granularity=day or if they are same months for Granularity=month
     * 
     * @param {Date}
     *                dFirstDate The first date.
     * @param {Date}
     *                dSecondDate The second date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if two dates are same based on Granularity otherwise false
     * @private
     */

    sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity = function(dFirstDate, dSecondDate, sGranularity) {

        var bSame = false;

        switch (sGranularity) {

        case (DAY):
            bSame = sap.suite.ui.commons.util.DateUtils.dateDaysEqual(dFirstDate, dSecondDate);
            break;

        case (MONTH):
            bSame = sap.suite.ui.commons.util.DateUtils.dateMonthsEqual(dFirstDate, dSecondDate);
            break;
        }

        return bSame;
    };

    /**
     * Validate date value min and max. The max date must be after min date: max > min.
     * 
     * @param {Date}
     *                dMin The min date.
     * @param {Date}
     *                dMax The max date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if min date is before max date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isMinBeforeMax = function(dMin, dMax, sGranularity) {

        var bMinBfrMax = false;

        if (dMin.getFullYear() < dMax.getFullYear()) {
            bMinBfrMax = true;
        } else if (dMin.getFullYear() === dMax.getFullYear()) {
            if (dMin.getMonth() < dMax.getMonth()) {
                bMinBfrMax = true;
            } else if (dMin.getMonth() === dMax.getMonth() && sGranularity === DAY) {
                if (dMin.getDate() < dMax.getDate()) {
                    bMinBfrMax = true;
                }
            }
        }

        if (!bMinBfrMax) {
            jQuery.sap.log.error("DateRangeSlider: Min Date = " + dMin + " should be before Max Date = " + dMax);
        }

        return bMinBfrMax;
    };

    /**
     * Validate value date >= min date.
     * 
     * @param {Date}
     *                dMin The min date.
     * @param {Date}
     *                dValue The value date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if value date is equal or after min date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isValueEqualOrAfterMin = function(dMin, dValue, sGranularity) {

        var bValueEqualOrAfterMin = false;

        if (dMin.getFullYear() < dValue.getFullYear()) {
            bValueEqualOrAfterMin = true;
        } else if (dMin.getFullYear() === dValue.getFullYear()) {
            if (dMin.getMonth() < dValue.getMonth()) {
                bValueEqualOrAfterMin = true;
            } else if (dMin.getMonth() === dValue.getMonth() && sGranularity === MONTH) {
                bValueEqualOrAfterMin = true;
            } else if (dMin.getMonth() === dValue.getMonth() && sGranularity === DAY) {
                if (dMin.getDate() <= dValue.getDate()) {
                    bValueEqualOrAfterMin = true;
                }
            }
        }

        if (!bValueEqualOrAfterMin) {
            jQuery.sap.log.error("DateRangeSlider: Value Date = " + dValue + " should be after or equal to Min Date = " + dMin);
        }

        return bValueEqualOrAfterMin;
    };

    /**
     * Validate value2 date <= max date.
     * 
     * @param {Date}
     *                dValue2 The value2 date.
     * @param {Date}
     *                dMax The max date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if value2 date is equal to before max date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isValue2EqualOrBeforeMax = function(dValue2, dMax, sGranularity) {

        var bValue2EqualOrBeforeMax = false;

        if (dValue2.getFullYear() < dMax.getFullYear()) {
            bValue2EqualOrBeforeMax = true;
        } else if (dValue2.getFullYear() === dMax.getFullYear()) {
            if (dValue2.getMonth() < dMax.getMonth()) {
                bValue2EqualOrBeforeMax = true;
            } else if (dValue2.getMonth() === dMax.getMonth() && sGranularity === MONTH) {
                bValue2EqualOrBeforeMax = true;
            } else if (dValue2.getMonth() === dMax.getMonth() && sGranularity === DAY) {
                if (dValue2.getDate() <= dMax.getDate()) {
                    bValue2EqualOrBeforeMax = true;
                }
            }
        }

        if (!bValue2EqualOrBeforeMax) {
            jQuery.sap.log.error("DateRangeSlider: Value2 Date = " + dValue2 + " should be before or equal to Max Date = " + dMax);
        }

        return bValue2EqualOrBeforeMax;
    };

    /**
     * Validate value date <= value2 date.
     * 
     * @param {Date}
     *                dValue The value date.
     * @param {Date}
     *                dValue2 The value2 date.
     * @param {String}
     *                sGranularity The Granularity - day as "d" or month as "m".
     * @returns true if dValue2 date is equal or after value date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.isValueBeforeOrEqualValue2 = function(dValue, dValue2, sGranularity) {

        var bValueBeforeOrEqualValue2 = false;

        if (dValue.getFullYear() < dValue2.getFullYear()) {
            bValueBeforeOrEqualValue2 = true;
        } else if (dValue.getFullYear() === dValue2.getFullYear()) {
            if (dValue.getMonth() < dValue2.getMonth()) {
                bValueBeforeOrEqualValue2 = true;
            } else if (dValue.getMonth() === dValue2.getMonth() && sGranularity === MONTH) {
                bValueBeforeOrEqualValue2 = true;
            } else if (dValue.getMonth() === dValue2.getMonth() && sGranularity === DAY) {
                if (dValue.getDate() <= dValue2.getDate()) {
                    bValueBeforeOrEqualValue2 = true;
                }
            }
        }

        if (!bValueBeforeOrEqualValue2) {
            jQuery.sap.log.error("DateRangeSlider: Value Date = " + dValue + " should be before or equal to Value2 Date = " + dValue2);
        }

        return bValueBeforeOrEqualValue2;
    };

    /**
     * Set min property for the DateRangeSlider. This sets the minimum date for the slider.
     * 
     * @param {Date}
     *                dMin
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setMin = function(dMin) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dMin) && sap.suite.ui.commons.DateRangeSlider.isMinBeforeMax(dMin, new Date(this.getMax()), this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getMin()), dMin, this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dMin);
            this._oDateRangeSliderInternal.setMinDate(dMin);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };

    /**
     * Set max property for the DateRangeSlider. This sets the maximum date for the slider.
     * 
     * @param {Date}
     *                dMax
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setMax = function(dMax) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dMax) && sap.suite.ui.commons.DateRangeSlider.isMinBeforeMax(new Date(this.getMin()), dMax, this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getMax()), dMax, this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dMax);
            this._oDateRangeSliderInternal.setMaxDate(dMax);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };

    /**
     * Set value property for the DateRangeSlider. This sets the value date for the slider.
     * 
     * @param {Date}
     *                dValue
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setValue = function(dValue) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dValue)
                && sap.suite.ui.commons.DateRangeSlider.isValueBeforeOrEqualValue2(dValue, new Date(this.getValue2()), this._sGranularity)
                && sap.suite.ui.commons.DateRangeSlider.isValueEqualOrAfterMin(new Date(this.getMin()), dValue, this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getValue()), dValue, this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dValue);
            this._oDateRangeSliderInternal.setValueDate(dValue);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };
    
    
    /**
     * Get value property for the control.  
     * 
     * @returns Date - date representing position of the grip  
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.getValue = function() {
        
        var dValue = this._oDateRangeSliderInternal.getValueDate();
        return dValue;
    };

    /**
     * Set value2 property for the DateRangeSlider. This sets the value2 date for the slider.
     * 
     * @param {Date}
     *                dValue2
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setValue2 = function(dValue2) {

        if (sap.suite.ui.commons.util.DateUtils.isValidDate(dValue2)
                && sap.suite.ui.commons.DateRangeSlider.isValueBeforeOrEqualValue2(new Date(this.getValue()), dValue2, this._sGranularity)
                && !sap.suite.ui.commons.DateRangeSlider.areDaysSameBasedOnGranularity(new Date(this.getValue2()), dValue2, this._sGranularity)
                && sap.suite.ui.commons.DateRangeSlider.isValue2EqualOrBeforeMax(dValue2, new Date(this.getMax()), this._sGranularity)) {

            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dValue2);
            this._oDateRangeSliderInternal.setValue2Date(dValue2);
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        }
    };
    
    
    /**
     * Get value2 property for the control.  
     * 
     * @returns Date - date representing position of the grip2  
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.getValue2 = function() {
        
        var dValue2 = this._oDateRangeSliderInternal.getValue2Date();
        return dValue2;
    };

    /**
     * Set visible property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bVisible
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setVisible = function(bVisible) {

        this._oDateRangeSliderInternal.setVisible(bVisible);
        this.setProperty("visible", bVisible);
    };

    /**
     * Set enabled property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bEnabled
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setEnabled = function(bEnabled) {

        this._oDateRangeSliderInternal.setEnabled(bEnabled);
        this.setProperty("enabled", bEnabled);
    };

    /**
     * Set labels property for the DateRangeSlider
     * 
     * @param {string[]}
     *                aLabels
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setLabels = function(aLabels) {

        this._oDateRangeSliderInternal.setLabels(aLabels);
        this.setProperty("labels", aLabels);
    };

    /**
     * Set stepLabels property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bStepLabels
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setStepLabels = function(bStepLabels) {

        this._oDateRangeSliderInternal.setStepLabels(bStepLabels);
        this.setProperty("stepLabels", bStepLabels);
    };

    /**
     * Set editable property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bEditable
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setEditable = function(bEditable) {

        this._oDateRangeSliderInternal.setEditable(bEditable);
        this.setProperty("editable", bEditable);
    };

    /**
     * Set width property for the DateRangeSlider
     * 
     * @param {sap.ui.core.CSSSize}
     *                tWidth
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setWidth = function(tWidth) {

        this._oDateRangeSliderInternal.setWidth(tWidth);
        this.setProperty("width", tWidth);
    };

    /**
     * Set showBubbles property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bShowBubbles
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setShowBubbles = function(bShowBubbles) {

        this._oDateRangeSliderInternal.setShowBubbles(bShowBubbles);
        this.setProperty("showBubbles", bShowBubbles);
    };

    /**
     * Set smallStepWidth property for the DateRangeSlider
     * 
     * @param {float}
     *                fSmallStepWidth
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setSmallStepWidth = function(fSmallStepWidth) {

        this._oDateRangeSliderInternal.setSmallStepWidth(fSmallStepWidth);
        this.setProperty("smallStepWidth", fSmallStepWidth);
    };

    /**
     * Set totalUnits property for the DateRangeSlider
     * 
     * @param {int}
     *                iTotalUnits
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setTotalUnits = function(iTotalUnits) {

        this._oDateRangeSliderInternal.setTotalUnits(iTotalUnits);
        this.setProperty("totalUnits", iTotalUnits);
    };

    /**
     * Set 4 base properties min, max, value and value2 for given DateRangeSlider
     * 
     * @param {sap.suite.ui.commons.DateRangeSlider}
     *                oDateRangeSlider
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal = function(oDateRangeSlider) {

        oDateRangeSlider.setProperty("min", oDateRangeSlider._oDateRangeSliderInternal.getMinDate());
        oDateRangeSlider.setProperty("max", oDateRangeSlider._oDateRangeSliderInternal.getMaxDate());
        oDateRangeSlider.setProperty("value", oDateRangeSlider._oDateRangeSliderInternal.getValueDate());
        oDateRangeSlider.setProperty("value2", oDateRangeSlider._oDateRangeSliderInternal.getValue2Date());
        oDateRangeSlider._sGranularity = oDateRangeSlider._oDateRangeSliderInternal._sGranularity;
    };

    /**
     * Set Date Range Slider Granularity to Day
     * 
     * @returns {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setDayGranularity = function() {

        this._oDateRangeSliderInternal.setDayGranularity();
        if (this._oDateRangeSliderInternal.isActive()) {
            this._oDateRangeSliderInternal.rerender();
        }
        sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        return this;
    };

    /**
     * Set Date Range Slider Granularity to Month
     * 
     * @returns {sap.suite.ui.commons.DateRangeSlider} <code>this</code> to allow method chaining.
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setMonthGranularity = function() {

        var iMonthsApart = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(this.getMin(), this.getMax());
        if (iMonthsApart >= 1) {
            this._oDateRangeSliderInternal.setMonthGranularity();
            if (this._oDateRangeSliderInternal.isActive()) {
                this._oDateRangeSliderInternal.rerender();
            }
            sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);
        } else {
            jQuery.sap.log.error("DateRangeSlider.setMonthGranularity(): Max Date should be 1 month after Min Date.");
        }

        return this;
    };

    /**
     * Setter for dateFormat which is used to format the dates for Labels, bubble texts, and tool tips. If passed object is null or is of incorrect type,
     * _oDateRangeSliderInternal's default formatting will be used.
     * 
     * @param {sap.ui.core.format.DateFormat}
     *                oDateFormat
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setDateFormat = function(oDateFormat) {

        this._oDateRangeSliderInternal.setDateFormat(oDateFormat);
        if (this._oDateRangeSliderInternal.isActive()) {
            this._oDateRangeSliderInternal.rerender();
        }
    };

    /**
     * Set pinGrip property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bPinGrip
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setPinGrip = function(bPinGrip) {

        this._oDateRangeSliderInternal.setPinGrip(bPinGrip);
        this.setProperty("pinGrip", bPinGrip);
    };

    /**
     * Set pinGrip2 property for the DateRangeSlider
     * 
     * @param {boolean}
     *                bPinGrip2
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.setPinGrip2 = function(bPinGrip2) {

        this._oDateRangeSliderInternal.setPinGrip2(bPinGrip2);
        this.setProperty("pinGrip2", bPinGrip2);
    };

    /**
     * Cleans up the DateRangeSlider instance before destruction.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.exit = function() {

        this._oDateRangeSliderInternal.destroy();
        this._oDateRangeSliderInternal = null;
    };

    /**
     * Initialize the DateRangeSlider.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.init = function() {

        this._oDateRangeSliderInternal = new sap.suite.ui.commons.DateRangeSliderInternal({
            id : this.getId() + "-dateRangeSliderInternal"
        });

        sap.suite.ui.commons.DateRangeSlider.setPropertiesBasedOnSliderInternal(this);

        var oSelf = this;

        this._oDateRangeSliderInternal.attachChange(function(oEvent) {

            oSelf.handleChange(oEvent);
        });

        this._oDateRangeSliderInternal.attachLiveChange(function(oEvent) {

            oSelf.handleLiveChange(oEvent);
        });
    };

    /**
     * Handles the change event of _oDateRangeSliderInternal and fires the change event with start and end date values
     * 
     * @param {sap.ui.base.Event}
     *                oEvent
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.handleChange = function(oEvent) {

        var dValueDate = oEvent.getParameter("value");
        var dValue2Date = oEvent.getParameter("value2");
        this.fireChange({
            value : dValueDate,
            value2 : dValue2Date
        });
    };

    /**
     * Handles the live change event of _oDateRangeSliderInternal and fires the change event with start and end date values
     * 
     * @param {sap.ui.base.Event}
     *                oEvent
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSlider.prototype.handleLiveChange = function(oEvent) {

        var dValueDate = oEvent.getParameter("value");
        var dValue2Date = oEvent.getParameter("value2");
        this.fireLiveChange({
            value : dValueDate,
            value2 : dValue2Date
        });
    };

}());

}; // end of sap.suite.ui.commons.DateRangeSlider
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.DateRangeSliderInternal') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.DateRangeSliderInternal.
jQuery.sap.declare("sap.suite.ui.commons.DateRangeSliderInternal");

jQuery.sap.require('sap.ui.commons.RangeSlider'); // unlisted dependency retained


/**
 * Constructor for a new DateRangeSliderInternal.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowBubbles showBubbles} : boolean (default: true)</li>
 * <li>{@link #getPinGrip pinGrip} : boolean (default: false)</li>
 * <li>{@link #getPinGrip2 pinGrip2} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.DateRangeSliderInternal#event:change change} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.DateRangeSliderInternal#event:liveChange liveChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ui.commons.RangeSlider#constructor sap.ui.commons.RangeSlider}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Date Range Slider provides the user with a Range Slider control that is optimized for use with Dates.
 * @extends sap.ui.commons.RangeSlider
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal
 */
sap.ui.commons.RangeSlider.extend("sap.suite.ui.commons.DateRangeSliderInternal", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"showBubbles" : {type : "boolean", group : "Misc", defaultValue : true},
		"pinGrip" : {type : "boolean", group : "Misc", defaultValue : false},
		"pinGrip2" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"change" : {}, 
		"liveChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.DateRangeSliderInternal with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.DateRangeSliderInternal.extend
 * @function
 */

sap.suite.ui.commons.DateRangeSliderInternal.M_EVENTS = {'change':'change','liveChange':'liveChange'};


/**
 * Getter for property <code>showBubbles</code>.
 * Property to show or hide bubbles. Default is true.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showBubbles</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#getShowBubbles
 * @function
 */

/**
 * Setter for property <code>showBubbles</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowBubbles  new value for property <code>showBubbles</code>
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#setShowBubbles
 * @function
 */


/**
 * Getter for property <code>pinGrip</code>.
 * Property to pin Grip (left grip) of the slider so that user cannot move it with key or mouse clicks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#getPinGrip
 * @function
 */

/**
 * Setter for property <code>pinGrip</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip  new value for property <code>pinGrip</code>
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#setPinGrip
 * @function
 */


/**
 * Getter for property <code>pinGrip2</code>.
 * Property to pin Grip2 (right grip) of the slider so that user cannot move it with key or mouse clicks.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>pinGrip2</code>
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#getPinGrip2
 * @function
 */

/**
 * Setter for property <code>pinGrip2</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bPinGrip2  new value for property <code>pinGrip2</code>
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#setPinGrip2
 * @function
 */


/**
 * This event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @name sap.suite.ui.commons.DateRangeSliderInternal#change
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'change' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself. 
 *  
 * This event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#attachChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'change' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#detachChange
 * @function
 */

/**
 * Fire event change to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSliderInternal#fireChange
 * @function
 */


/**
 * This live event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @name sap.suite.ui.commons.DateRangeSliderInternal#liveChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself. 
 *  
 * This live event is fired when user changes the positions of the grips of the control. It contains value as Date object and value2 as Date object which are based on the positions of two grips. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#attachLiveChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'liveChange' event of this <code>sap.suite.ui.commons.DateRangeSliderInternal</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.DateRangeSliderInternal#detachLiveChange
 * @function
 */

/**
 * Fire event liveChange to attached listeners.

 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.DateRangeSliderInternal} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.DateRangeSliderInternal#fireLiveChange
 * @function
 */


// Start of sap/suite/ui/commons/DateRangeSliderInternal.js
jQuery.sap.require('sap.ui.commons.RangeSlider'); // unlisted dependency retained

jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained



(function() {

    var DEFAULT_TOTAL_UNITS = 12;
    var DAY = "d";
    var MONTH = "m";

    /**
     * Not yet supported
     * 
     * @param {boolean}
     *                bVertical - if the control is to be displayed as Vertical
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setVertical = function(bVertical) {

        jQuery.sap.log.error("DateRangeSliderInternal.setVertical method is not yet supported!");
    };

    /**
     * Not yet supported
     * 
     * @param {string}
     *                sHeight - new height of the control
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setHeight = function(sHeight) {

        jQuery.sap.log.error("DateRangeSliderInternal.setHeight method is not yet supported!");
    };

    /**
     * Creates rail labels.
     * 
     * @param oDateRangeSliderInternal -
     *                The DateRangeSliderInternal object
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels = function(oDateRangeSliderInternal) {

        var aRailLabels = [];
        var iTotalUnits = oDateRangeSliderInternal.getTotalUnits();
        var fStepSize = (oDateRangeSliderInternal.getMax() - oDateRangeSliderInternal.getMin()) / iTotalUnits;

        for ( var i = 0; i <= iTotalUnits; i++) {
            var iDateIndex = Math.round(parseFloat(oDateRangeSliderInternal.getMin() + i * fStepSize));
            if (iDateIndex > oDateRangeSliderInternal.getMax()) {
                iDateIndex = oDateRangeSliderInternal.getMax();
            }

            var dTmpDate = null;
            if (oDateRangeSliderInternal._sGranularity === DAY) {
                dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(oDateRangeSliderInternal.getMinDate(), iDateIndex);
            } else if (oDateRangeSliderInternal._sGranularity === MONTH) {
                dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(oDateRangeSliderInternal.getMinDate(), iDateIndex);
            }
            aRailLabels[i] = oDateRangeSliderInternal.getFormattedDate(dTmpDate);
        }

        oDateRangeSliderInternal.setProperty("labels", aRailLabels);

        return aRailLabels;
    };

    /**
     * Reposition the bubbles based on grip positions.
     * 
     * @param oDateRangeSliderInternal -
     *                The DateRangeSliderInternal object
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles = function(oDateRangeSliderInternal) {

        var sGripId = oDateRangeSliderInternal.getId() + '-grip';
        var oGrip = jQuery.sap.domById(sGripId);
        var sLeftpx = oGrip.style.left;
        var sLeftPositionOfGrip = sLeftpx.substring(0, sLeftpx.length - 2);
        var iLeftPositionOfGrip = parseInt(sLeftPositionOfGrip, 10);

        var sGrip2Id = oDateRangeSliderInternal.getId() + '-grip2';
        var oGrip2 = jQuery.sap.domById(sGrip2Id);
        var sLeftpx2 = oGrip2.style.left;
        var sLeftPositionOfGrip2 = sLeftpx2.substring(0, sLeftpx2.length - 2);
        var iLeftPositionOfGrip2 = parseInt(sLeftPositionOfGrip2, 10);

        var sBubbleId = oDateRangeSliderInternal.getId() + '-bubble';
        var oBubble = jQuery.sap.domById(sBubbleId);
        var sBubble2Id = oDateRangeSliderInternal.getId() + '-bubble2';
        var oBubble2 = jQuery.sap.domById(sBubble2Id);

        var sBubbleleft = null, sBubble2left = null;

        var sBubbleleftpx = oBubble.style.left;
        if (sBubbleleftpx) {
            sBubbleleft = sBubbleleftpx.substring(0, sBubbleleftpx.length - 2);
        }
        var sBubble2leftpx = oBubble2.style.left;
        if (sBubble2leftpx) {
            sBubble2left = sBubble2leftpx.substring(0, sBubble2leftpx.length - 2);
        }

        var sWidthOfBubblePx = jQuery(oBubble).css("width");
        var iWidthOfBubble = parseInt(sWidthOfBubblePx, 10);

        var iDiff = 41;

        if ((iLeftPositionOfGrip + iWidthOfBubble) < iLeftPositionOfGrip2) {
            oBubble.style.left = (iLeftPositionOfGrip - iDiff) + "px";
            oBubble2.style.left = (iLeftPositionOfGrip2 - iDiff) + "px";
        }
        if (!sBubbleleft && !sBubble2left) {
            oBubble.style.left = (iLeftPositionOfGrip - iDiff) + "px";
            oBubble2.style.left = (iLeftPositionOfGrip2 - iDiff) + "px";
        }

        var sValue = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate());
        var sValue2 = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date());

        oDateRangeSliderInternal._oBubble.setText(sValue);
        oDateRangeSliderInternal._oBubble2.setText(sValue2);

        if (oDateRangeSliderInternal.isActive()) {
            oDateRangeSliderInternal._oBubble.rerender();
            oDateRangeSliderInternal._oBubble2.rerender();
        }
    };

    /**
     * Function is called when grip position shall be changed
     * 
     * @param {float}
     *                fNewValue the new grip value
     * @param {int}
     *                iNewPos the new grip position
     * @param {DOMNode}
     *                oGrip the changed grip
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.changeGrip = function(fNewValue, iNewPos, oGrip) {

        sap.ui.commons.Slider.prototype.changeGrip.apply(this, arguments);

        if (!isNaN(fNewValue)) {
            var iDateIndex = Math.round(fNewValue);
            var dTmpDate = null;
            if (this._sGranularity === DAY) {
                dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, iDateIndex);
            } else if (this._sGranularity === MONTH) {
                dTmpDate = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, iDateIndex);
            }
            oGrip.title = this.getFormattedDate(dTmpDate);
        }
    };

    /**
     * Format the given date based on the Granularity and DateFormat.
     * 
     * @param {Date}
     *                dDate The date to be formatted.
     * 
     * @Return the formatted date string
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.getFormattedDate = function(dDate) {

        var oFormatter = null;

        switch (this._sGranularity) {

        case (DAY):
            oFormatter = this._oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                style : "medium"
            });
            break;

        case (MONTH):
            oFormatter = this._oDateFormat || sap.ui.core.format.DateFormat.getDateInstance({
                pattern : 'MMM YYYY'
            });
            break;
        }

        return oFormatter.format(dDate);
    };

    /**
     * Update the Labels, Bubble text and Tool Tip values and re-render DateRangeSliderInternal control.
     * 
     * @param oDateRangeSliderInternal
     *                {sap.suite.ui.commons.DateRangeSliderInternal}
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.updateLabelBubbleToolTipValues = function(oDateRangeSliderInternal) {

        // update Labels based on DateFormat
        if (oDateRangeSliderInternal._bUsingDefaultLabels) {
            sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(oDateRangeSliderInternal);
        }

        // update bubble text based on DateFormat
        if (oDateRangeSliderInternal.getShowBubbles()) {
            var sValue = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValueDate());
            var sValue2 = oDateRangeSliderInternal.getFormattedDate(oDateRangeSliderInternal.getValue2Date());
            oDateRangeSliderInternal._oBubble.setText(sValue);
            oDateRangeSliderInternal._oBubble2.setText(sValue2);
        }
    };

    /**
     * Getter for dateFormat which is used for formating the dates for Labels, bubble texts, and tool tips.
     * 
     * @return oDateFormat {sap.ui.core.format.DateFormat}
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.getDateFormat = function() {

        return this._oDateFormat;
    };

    /**
     * Setter for dateFormat which is used for formating the dates for Labels, bubble texts, and tool tips. If passed object is null or is of incorrect type, control's default
     * formatting will be used.
     * 
     * @param oDateFormat
     *                {sap.ui.core.format.DateFormat}
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setDateFormat = function(oDateFormat) {

        if (oDateFormat && oDateFormat instanceof sap.ui.core.format.DateFormat) {
            this._oDateFormat = oDateFormat;
        } else {
            this._oDateFormat = null;
        }
        sap.suite.ui.commons.DateRangeSliderInternal.updateLabelBubbleToolTipValues(this);
    };

    /**
     * Initialize the DateRangeSliderInternal.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.init = function() {

        this.setSmallStepWidth(1);
        this._sGranularity = DAY;
        this._oDateFormat = null;

        var dMaxDate = new Date();
        this._dMinDate = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(dMaxDate, -365);

        if (!this.getTotalUnits()) {
            this.setTotalUnits(DEFAULT_TOTAL_UNITS);
        }

        this.setMin(0);
        this.setMax(365);
        this.setValue(0);
        this.setValue2(365);

        var bTextLabels = (this.getLabels() && this.getLabels().length > 0);
        this._bUsingDefaultLabels = this.getStepLabels() && !bTextLabels;
        if (this._bUsingDefaultLabels) {
            sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
        }

        if (this.getShowBubbles()) {
            this._oBubble = new sap.ui.commons.Label({
                id : this.getId() + '-bubbleTxt'
            });
            this._oBubble2 = new sap.ui.commons.Label({
                id : this.getId() + '-bubbleTxt2'
            });

            this._oBubble.addStyleClass("sapSuiteUiCommonsDateRangeSliderBubbleLblTxt");
            this._oBubble2.addStyleClass("sapSuiteUiCommonsDateRangeSliderBubbleLblTxt");

            this._oBubble.setText(this.getFormattedDate(this.getValueDate()));
            this._oBubble2.setText(this.getFormattedDate(this.getValue2Date()));
        }
    };

    /**
     * Returns an object containing valueDate and value2Date which are set to the values based on two grips of the DateRangeSliderInternal.
     * 
     * @return {Object} The date range object containing valueDate and value2Date Date.
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.getDateRange = function() {

        var dValueDate = this.getValueDate();
        var dValue2Date = this.getValue2Date();

        var oCopy = {
            valueDate : dValueDate,
            value2Date : dValue2Date
        };
        return oCopy;
    };

    /**
     * Handles the change event fired by the range slider after reseting the date range, fires the change event of DateRangeSliderInternal.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.handleFireChange = function() {

        if (this.getShowBubbles()) {
            sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
        }
        var oRange = this.getDateRange();
        this.fireChange({
            value : oRange.valueDate,
            value2 : oRange.value2Date
        });
        this.fireLiveChange({
            value : oRange.valueDate,
            value2 : oRange.value2Date
        });
    };

    /**
     * fires the change event. The liveEvent is not fired here.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.handleFireChangeWithoutLive = function() {

        if (this.getShowBubbles()) {
            sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
        }
        var oRange = this.getDateRange();
        this.fireChange({
            value : oRange.valueDate,
            value2 : oRange.value2Date
        });
    };

    /**
     * Handles the live change event fired by the range slider after reseting the date range, fires the live change event of DateRangeSliderInternal.
     * 
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.fireLiveChangeForGrip = function(oGrip, fNewValue, fOldValue) {

        if (this.getShowBubbles() && fOldValue !== fNewValue) {
            sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
        }
        var oRange;
        if (oGrip === this.oGrip) {
            if (fOldValue !== fNewValue) {
                // fire event only if value changed
                oRange = this.getDateRange();
                this.fireLiveChange({
                    value : oRange.valueDate,
                    value2 : oRange.value2Date
                });
            }
        } else if (oGrip === this.oGrip2) {
            if (fOldValue !== fNewValue) {
                // fire event only if value changed
                oRange = this.getDateRange();
                this.fireLiveChange({
                    value : oRange.valueDate,
                    value2 : oRange.value2Date
                });
            }
        }
    };

    /**
     * This function is called after the DateRangeSliderInternal is rendered
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.onAfterRendering = function() {

        sap.ui.commons.RangeSlider.prototype.onAfterRendering.apply(this);
        if (this.getShowBubbles()) {
            sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
        }
    };

    /**
     * Function is called when window is resized
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.onresize = function(oEvent) {

        sap.ui.commons.RangeSlider.prototype.onresize.apply(this, arguments);
        if (this.getDomRef()) {
            if (this.getShowBubbles()) {
                sap.suite.ui.commons.DateRangeSliderInternal.repositionBubbles(this);
            }
        }
    };

    /**
     * Sets the stepLabels property
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setStepLabels = function(bStepLabels) {

        this.setProperty("stepLabels", bStepLabels);

        if (bStepLabels === true) {
            var bTextLabels = (this.getLabels() && this.getLabels().length > 0);
            if (!bTextLabels) {
                sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
                this._bUsingDefaultLabels = true;
            }
        }
    };

    /**
     * Sets the labels property
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setLabels = function(aLabels) {

        this.setProperty("labels", aLabels);

        var bTextLabels = (this.getLabels() && this.getLabels().length > 0);
        if (this.getStepLabels() && !bTextLabels) {
            sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
            this._bUsingDefaultLabels = true;
        }
    };

    /**
     * Sets the smallStepWidth property
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setSmallStepWidth = function(fSmallStepWidth) {

        this.setProperty("smallStepWidth", Math.round(fSmallStepWidth));
    };

    /**
     * Sets the totalUnits property
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setTotalUnits = function(iTotalUnits) {

        this.setProperty("totalUnits", iTotalUnits);

        if (this._bUsingDefaultLabels) {
            sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
        }
    };

    /**
     * Getter to get the max date for the DateRangeSliderInternal.
     * 
     * @return {Date} max date
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.getMaxDate = function() {

        var dMax = null;

        switch (this._sGranularity) {

        case (DAY):
            dMax = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, this.getMax());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dMax);
            break;

        case (MONTH):
            dMax = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, this.getMax());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(dMax);
            break;
        }

        return dMax;
    };

    /**
     * Setter to set the max date for the DateRangeSliderInternal.
     * 
     * @param {Date}
     *                max date
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setMaxDate = function(dMax) {

        var dMinOld = this.getMinDate();
        var dValueOld = this.getValueDate();
        var dValue2Old = this.getValue2Date();

        var bFireEvent = false;
        var iNewMax = 0, iNewValue = 0, iNewValue2 = 0;

        switch (this._sGranularity) {

        case (DAY):
            iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinOld, dMax);
            iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinOld, dValueOld);
            iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinOld, dValue2Old);
            break;

        case (MONTH):
            iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinOld, dMax);
            iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinOld, dValueOld);
            iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinOld, dValue2Old);
            break;
        }

        bFireEvent = iNewValue > iNewMax || iNewValue2 > iNewMax;
        iNewValue = iNewValue > iNewMax ? iNewMax : iNewValue;
        iNewValue2 = iNewValue2 > iNewMax ? iNewMax : iNewValue2;

        this.setProperty('min', 0, true);
        this.setProperty('max', iNewMax, true);
        this.setProperty('value', iNewValue, true);
        this.setProperty('value2', iNewValue2, true);

        if (this._bUsingDefaultLabels) {
            sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
        }

        if (bFireEvent) {
            var oRange = this.getDateRange();

            this.fireChange({
                value : oRange.valueDate,
                value2 : oRange.value2Date
            });
        }
    };

    /**
     * Getter to get the min date for the DateRangeSliderInternal.
     * 
     * @return {Date} min date
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.getMinDate = function() {

        var dMin = new Date(this._dMinDate);

        switch (this._sGranularity) {

        case (DAY):
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dMin);
            break;

        case (MONTH):
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dMin);
            break;
        }

        return dMin;
    };

    /**
     * Setter to set the min date for the DateRangeSliderInternal.
     * 
     * @param {Date}
     *                min date
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setMinDate = function(dMin) {

        var dMaxOld = this.getMaxDate();
        var dValueOld = this.getValueDate();
        var dValue2Old = this.getValue2Date();

        this._dMinDate = new Date(dMin);

        var bFireEvent = false;
        var iNewMax = 0, iNewValue = 0, iNewValue2 = 0;

        switch (this._sGranularity) {

        case (DAY):
            iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMin, dMaxOld);
            iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMin, dValueOld);
            iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMin, dValue2Old);
            break;

        case (MONTH):
            iNewMax = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMin, dMaxOld);
            iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMin, dValueOld);
            iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMin, dValue2Old);
            break;
        }

        bFireEvent = iNewValue < 0 || iNewValue2 < 0;
        iNewValue = iNewValue < 0 ? 0 : iNewValue;
        iNewValue2 = iNewValue2 < 0 ? 0 : iNewValue2;

        this.setProperty('min', 0, true);
        this.setProperty('max', iNewMax, true);
        this.setProperty('value', iNewValue, true);
        this.setProperty('value2', iNewValue2, true);

        if (this._bUsingDefaultLabels) {
            sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
        }

        if (bFireEvent) {
            var oRange = this.getDateRange();

            this.fireChange({
                value : oRange.valueDate,
                value2 : oRange.value2Date
            });
        }
    };

    /**
     * Getter to get the value2 date for the DateRangeSliderInternal.
     * 
     * @return {Date} value2 date
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.getValue2Date = function() {

        var dValue2 = null;

        switch (this._sGranularity) {

        case (DAY):
            dValue2 = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, this.getValue2());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfDay(dValue2);
            break;

        case (MONTH):
            dValue2 = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, this.getValue2());
            sap.suite.ui.commons.util.DateUtils.resetDateToEndOfMonth(dValue2);
            break;
        }

        return dValue2;
    };

    /**
     * Setter to set the value2 date for the DateRangeSliderInternal.
     * 
     * @param {Date}
     *                dValue2 date
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setValue2Date = function(dValue2) {

        var iNewValue2 = 0;

        switch (this._sGranularity) {

        case (DAY):
            iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(this._dMinDate, dValue2);
            break;

        case (MONTH):
            iNewValue2 = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(this._dMinDate, dValue2);
            break;
        }

        this.setProperty('value2', iNewValue2, true);

        var oRange = this.getDateRange();

        this.fireChange({
            value : oRange.valueDate,
            value2 : oRange.value2Date
        });
    };

    /**
     * Getter to get the value date for the DateRangeSliderInternal.
     * 
     * @return {Date} value date
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.getValueDate = function() {

        var dValue = null;

        switch (this._sGranularity) {

        case (DAY):
            dValue = sap.suite.ui.commons.util.DateUtils.incrementDateByIndex(this._dMinDate, this.getValue());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfDay(dValue);
            break;

        case (MONTH):
            dValue = sap.suite.ui.commons.util.DateUtils.incrementMonthByIndex(this._dMinDate, this.getValue());
            sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(dValue);
            break;
        }

        return dValue;
    };

    /**
     * Setter to set the value date for the DateRangeSliderInternal.
     * 
     * @param {Date}
     *                dValue date
     * @public
     */

    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setValueDate = function(dValue) {

        var iNewValue = 0;

        switch (this._sGranularity) {

        case (DAY):
            iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(this._dMinDate, dValue);
            break;

        case (MONTH):
            iNewValue = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(this._dMinDate, dValue);
            break;
        }

        this.setProperty('value', iNewValue, true);

        var oRange = this.getDateRange();

        this.fireChange({
            value : oRange.valueDate,
            value2 : oRange.value2Date
        });
    };

    /**
     * Setter to set the Granularity to DAY
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setDayGranularity = function() {

        var dMinDate = this.getMinDate();
        var dValueDate = this.getValueDate();
        var dValue2Date = this.getValue2Date();
        var dMaxDate = this.getMaxDate();

        var iNoOfDaysValueDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinDate, dValueDate);
        var iNoOfDaysValue2DateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinDate, dValue2Date);
        var iNoOfDaysMaxDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfDaysApart(dMinDate, dMaxDate);

        this.setProperty('min', 0, true);
        this.setProperty('value', iNoOfDaysValueDateApartFromMinDate, true);
        this.setProperty('value2', iNoOfDaysValue2DateApartFromMinDate, true);
        this.setProperty('max', iNoOfDaysMaxDateApartFromMinDate, true);

        this._sGranularity = DAY;

        if (this._bUsingDefaultLabels) {
            sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
        }

        var oRange = this.getDateRange();

        this.fireChange({
            value : oRange.valueDate,
            value2 : oRange.value2Date
        });
    };

    /**
     * Setter to set the Granularity to MONTH
     * 
     * @public
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.setMonthGranularity = function() {

        var dMinDate = this.getMinDate();
        var dValueDate = this.getValueDate();
        var dValue2Date = this.getValue2Date();
        var dMaxDate = this.getMaxDate();

        var iNoOfMonthsValueDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinDate, dValueDate);
        var iNoOfMonthsValue2DateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinDate, dValue2Date);
        var iNoOfMonthsMaxDateApartFromMinDate = sap.suite.ui.commons.util.DateUtils.numberOfMonthsApart(dMinDate, dMaxDate);

        this.setProperty('min', 0, true);
        this.setProperty('value', iNoOfMonthsValueDateApartFromMinDate, true);
        this.setProperty('value2', iNoOfMonthsValue2DateApartFromMinDate, true);
        this.setProperty('max', iNoOfMonthsMaxDateApartFromMinDate, true);

        this._sGranularity = MONTH;

        sap.suite.ui.commons.util.DateUtils.resetDateToStartOfMonth(this._dMinDate);

        if (this._bUsingDefaultLabels) {
            sap.suite.ui.commons.DateRangeSliderInternal.createRailLabels(this);
        }

        var oRange = this.getDateRange();

        this.fireChange({
            value : oRange.valueDate,
            value2 : oRange.value2Date
        });
    };

    /**
     * Function is called when DateRangeSliderInternal grip or grip2 is moved, over-write base RangeSlider function based on pinGrip and pinGrip2
     * 
     * @param {DOM.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.handleMove = function(oEvent) {

        if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

            sap.ui.commons.RangeSlider.prototype.handleMove.apply(this, [ oEvent ]);
        }
    };

    /**
     * Function is called when End key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapend = function(oEvent) {

        if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

            sap.ui.commons.RangeSlider.prototype.onsapend.apply(this, [ oEvent ]);
        }

    };

    /**
     * Function is called when Home key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsaphome = function(oEvent) {

        if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

            sap.ui.commons.RangeSlider.prototype.onsaphome.apply(this, [ oEvent ]);
        }

    };

    /**
     * Function is called when Ctrl+right key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsaprightmodifiers = function(oEvent) {

        if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

            sap.ui.commons.RangeSlider.prototype.onsaprightmodifiers.apply(this, [ oEvent ]);
        }

    };

    /**
     * Function is called when Ctrl+left key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapleftmodifiers = function(oEvent) {

        if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

            sap.ui.commons.RangeSlider.prototype.onsapleftmodifiers.apply(this, [ oEvent ]);
        }

    };

    /**
     * Function is called when right key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapright = function(oEvent) {

        if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

            sap.ui.commons.RangeSlider.prototype.onsapright.apply(this, [ oEvent ]);
        }

    };

    /**
     * Function is called when left key pressed, over-write base RangeSlider function based on pinGrip and pinGrip2
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.onsapleft = function(oEvent) {

        if ((this.oMovingGrip === this.oGrip2 && !this.getPinGrip2()) || (this.oMovingGrip === this.oGrip && !this.getPinGrip())) {

            sap.ui.commons.RangeSlider.prototype.onsapleft.apply(this, [ oEvent ]);
        }

    };

    /**
     * Function is called when DateRangeSliderInternal is clicked. over-write base Slider function based on pinGrip and pinGrip2
     * 
     * @param {jQuery.Event}
     *                oEvent
     * @private
     */
    sap.suite.ui.commons.DateRangeSliderInternal.prototype.onclick = function(oEvent) {

        var oMovingGrip = this.oMovingGrip;

        if (this.getEditable() && this.getEnabled()) {

            var fMultiplicator;

            // Check for ID where the behavior depends on the clicked area.
            var sMyTargetId = oEvent.target.getAttribute('ID');

            var fNewValue = this.getValue();
            var iNewPos = this.getOffsetLeft(this.oGrip) + this.iShiftGrip;

            switch (sMyTargetId) {
            case (this.oBar.id):
            case (this.oHiLi.id):
                // Click on slide bar
                if (this.getVertical()) {
                    fMultiplicator = this.getBarWidth() - this.getOffsetX(oEvent);
                } else {
                    fMultiplicator = this.getOffsetX(oEvent);
                }
                if (sMyTargetId == this.oHiLi.id) {
                    if (this.getVertical()) {
                        fMultiplicator -= this.getOffsetLeft(this.oHiLi);
                    } else {
                        fMultiplicator += this.getOffsetLeft(this.oHiLi);
                    }
                }
                fNewValue = this.convertRtlValue(this.getMin() + (((this.getMax() - this.getMin()) / this.getBarWidth()) * fMultiplicator));
                iNewPos = this.getOffsetX(oEvent);
                if (sMyTargetId == this.oHiLi.id) {
                    iNewPos += this.getOffsetLeft(this.oHiLi);
                }
                if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
                    oMovingGrip = this.oStartTarget;
                } else if (this.targetIsGrip(sMyTargetId)) {
                    oMovingGrip = oEvent.target;
                } else {
                    oMovingGrip = this.getNearestGrip(iNewPos);
                }
                break;
            case (this.getId() + '-left'):
                // Click on left end
                iNewPos = 0;
                if (this.getVertical()) {
                    fNewValue = this.getMax();
                    oMovingGrip = this.getRightGrip();
                } else {
                    fNewValue = this.getMin();
                    oMovingGrip = this.getLeftGrip();
                }
                break;
            case (this.getId() + '-right'):
                // Click on right end
                iNewPos = this.getBarWidth();
                if (!this.getVertical()) {
                    fNewValue = this.getMax();
                    oMovingGrip = this.getRightGrip();
                } else {
                    fNewValue = this.getMin();
                    oMovingGrip = this.getLeftGrip();
                }
                break;
            default:
                // If target is grip return
                // Not implemented as case because RangeSlider has multiple grips, for which cases cannot be inserted afterwards
                if (this.targetIsGrip(sMyTargetId)) {
                    return;
                }
                // Check whether tick is clicked
                var iTickPos = sMyTargetId.search('-tick');
                if (iTickPos >= 0) {
                    var iTickNum = parseInt(sMyTargetId.slice(this.getId().length + 5), 10);
                    iNewPos = this.fTickDist * iTickNum;
                    fNewValue = this.convertRtlValue(this.getMin() + (((this.getMax() - this.getMin()) / this.getTotalUnits()) * iTickNum));
                    if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
                        oMovingGrip = this.oStartTarget;
                    } else if (this.targetIsGrip(sMyTargetId)) {
                        oMovingGrip = oEvent.target;
                    } else {
                        oMovingGrip = this.getNearestGrip(iNewPos);
                    }
                    break;
                }

                // Outer DIV clicked -> ID given by caller. This is the case if all other DIVs are smaller,
                // or if tick text is clicked
                var iOffsetBar = jQuery(this.oBar).offset();
                var iOffsetMe = jQuery(oEvent.target).offset();
                if (this.getVertical()) {
                    iNewPos = this.getOffsetX(oEvent) - (iOffsetBar.top - iOffsetMe.top);
                } else {
                    iNewPos = this.getOffsetX(oEvent) - (iOffsetBar.left - iOffsetMe.left);
                }
                if (iNewPos <= 0) {
                    iNewPos = 0;
                    if (this.getVertical()) {
                        fNewValue = this.getMax();
                    } else {
                        fNewValue = this.getMin();
                    }
                } else {
                    if (iNewPos >= this.getBarWidth()) {
                        iNewPos = this.getBarWidth();
                        if (this.getVertical()) {
                            fNewValue = this.getMin();
                        } else {
                            fNewValue = this.getMax();
                        }
                    } else {
                        if (this.getVertical()) {
                            fMultiplicator = this.getBarWidth() - iNewPos;
                        } else {
                            fMultiplicator = iNewPos;
                        }
                        fNewValue = this.getMin() + (((this.getMax() - this.getMin()) / this.getBarWidth()) * fMultiplicator);
                    }
                }
                fNewValue = this.convertRtlValue(fNewValue);
                if (this.oStartTarget && this.targetIsGrip(this.oStartTarget.id)) {
                    oMovingGrip = this.oStartTarget;
                } else if (this.targetIsGrip(sMyTargetId)) {
                    oMovingGrip = oEvent.target;
                } else {
                    oMovingGrip = this.getNearestGrip(iNewPos);
                }
                break;
            }

            if ((oMovingGrip === this.oGrip2 && this.getPinGrip2()) || (oMovingGrip === this.oGrip && this.getPinGrip())) {
                return;
            }

            var validation = this.validateNewPosition(fNewValue, iNewPos, oMovingGrip, (this.getValueForGrip(oMovingGrip) > fNewValue));
            fNewValue = validation.fNewValue;
            iNewPos = validation.iNewPos;

            this.changeGrip(fNewValue, iNewPos, oMovingGrip);
            this.handleFireChange();

        }

        // Set focus to grip
        oMovingGrip.focus();
        this.oMovingGrip = oMovingGrip;
        this.oStartTarget = null;

    };

}());

}; // end of sap.suite.ui.commons.DateRangeSliderInternal
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTaker') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NoteTaker.
jQuery.sap.declare("sap.suite.ui.commons.NoteTaker");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new NoteTaker.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisibleNotes visibleNotes} : int (default: 2)</li>
 * <li>{@link #getCardViewAllTrigger cardViewAllTrigger} : int (default: 1800)</li>
 * <li>{@link #getFilterCriteria filterCriteria} : object</li>
 * <li>{@link #getAttachmentUploadUrl attachmentUploadUrl} : string</li>
 * <li>{@link #getAttachmentName attachmentName} : string (default: 'attachment')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCards cards} : sap.suite.ui.commons.NoteTakerCard[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:addCard addCard} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:deleteCard deleteCard} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:editCard editCard} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentSelect attachmentSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentUploadComplete attachmentUploadComplete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentDelete attachmentDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTaker#event:attachmentClick attachmentClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to create and store your notes for further reference.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.NoteTaker
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NoteTaker", { metadata : {

	// ---- object ----
	publicMethods : [
		// methods
		"getAllTags", "setNextCardUid", "uploadAttachment", "setAttachmentData", "handleAttachmentUploadFail", "setNextCardAttachmentUrl"
	],

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"visibleNotes" : {type : "int", group : "Misc", defaultValue : 2},
		"cardViewAllTrigger" : {type : "int", group : "Misc", defaultValue : 1800},
		"filterCriteria" : {type : "object", group : "Misc", defaultValue : null},
		"attachmentUploadUrl" : {type : "string", group : "Misc", defaultValue : null},
		"attachmentName" : {type : "string", group : "Misc", defaultValue : 'attachment'}
	},
	aggregations : {
    	"cards" : {type : "sap.suite.ui.commons.NoteTakerCard", multiple : true, singularName : "card"}, 
    	"carousel" : {type : "sap.ui.commons.Carousel", multiple : false, visibility : "hidden"}
	},
	events : {
		"addCard" : {}, 
		"deleteCard" : {}, 
		"editCard" : {}, 
		"attachmentSelect" : {}, 
		"attachmentUploadComplete" : {}, 
		"attachmentDelete" : {}, 
		"attachmentClick" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NoteTaker with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NoteTaker.extend
 * @function
 */

sap.suite.ui.commons.NoteTaker.M_EVENTS = {'addCard':'addCard','deleteCard':'deleteCard','editCard':'editCard','attachmentSelect':'attachmentSelect','attachmentUploadComplete':'attachmentUploadComplete','attachmentDelete':'attachmentDelete','attachmentClick':'attachmentClick'};


/**
 * Getter for property <code>visibleNotes</code>.
 * Number of notes to display.
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>visibleNotes</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getVisibleNotes
 * @function
 */

/**
 * Setter for property <code>visibleNotes</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iVisibleNotes  new value for property <code>visibleNotes</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setVisibleNotes
 * @function
 */


/**
 * Getter for property <code>cardViewAllTrigger</code>.
 * The View All link appears in the Note Taker card when length of a card body text exceeds the specified value. The updated value of this property is not applied to the existing cards.
 *
 * Default value is <code>1800</code>
 *
 * @return {int} the value of property <code>cardViewAllTrigger</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getCardViewAllTrigger
 * @function
 */

/**
 * Setter for property <code>cardViewAllTrigger</code>.
 *
 * Default value is <code>1800</code> 
 *
 * @param {int} iCardViewAllTrigger  new value for property <code>cardViewAllTrigger</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setCardViewAllTrigger
 * @function
 */


/**
 * Getter for property <code>filterCriteria</code>.
 * A composite object containing criteria for filtering cards in the Note Taker.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>filterCriteria</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getFilterCriteria
 * @function
 */

/**
 * Setter for property <code>filterCriteria</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oFilterCriteria  new value for property <code>filterCriteria</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setFilterCriteria
 * @function
 */


/**
 * Getter for property <code>attachmentUploadUrl</code>.
 * Defines a path on the server where the attached files are uploaded.
 * 
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentUploadUrl</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getAttachmentUploadUrl
 * @function
 */

/**
 * Setter for property <code>attachmentUploadUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentUploadUrl  new value for property <code>attachmentUploadUrl</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setAttachmentUploadUrl
 * @function
 */


/**
 * Getter for property <code>attachmentName</code>.
 * The attachment property name for identification on the server side after sending data to the server.
 *
 * Default value is <code>attachment</code>
 *
 * @return {string} the value of property <code>attachmentName</code>
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getAttachmentName
 * @function
 */

/**
 * Setter for property <code>attachmentName</code>.
 *
 * Default value is <code>attachment</code> 
 *
 * @param {string} sAttachmentName  new value for property <code>attachmentName</code>
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#setAttachmentName
 * @function
 */


/**
 * Getter for aggregation <code>cards</code>.<br/>
 * This aggregation allows you to add note cards to the Note Taker and remove them from the Note Taker.
 * 
 * @return {sap.suite.ui.commons.NoteTakerCard[]}
 * @public
 * @name sap.suite.ui.commons.NoteTaker#getCards
 * @function
 */


/**
 * Inserts a card into the aggregation named <code>cards</code>.
 *
 * @param {sap.suite.ui.commons.NoteTakerCard}
 *          oCard the card to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the card should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the card is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the card is inserted at 
 *             the last position        
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#insertCard
 * @function
 */

/**
 * Adds some card <code>oCard</code> 
 * to the aggregation named <code>cards</code>.
 *
 * @param {sap.suite.ui.commons.NoteTakerCard}
 *            oCard the card to add; if empty, nothing is inserted
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#addCard
 * @function
 */

/**
 * Removes an card from the aggregation named <code>cards</code>.
 *
 * @param {int | string | sap.suite.ui.commons.NoteTakerCard} vCard the card to remove or its index or id
 * @return {sap.suite.ui.commons.NoteTakerCard} the removed card or null
 * @public
 * @name sap.suite.ui.commons.NoteTaker#removeCard
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>cards</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.suite.ui.commons.NoteTakerCard[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.suite.ui.commons.NoteTaker#removeAllCards
 * @function
 */

/**
 * Checks for the provided <code>sap.suite.ui.commons.NoteTakerCard</code> in the aggregation named <code>cards</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.suite.ui.commons.NoteTakerCard}
 *            oCard the card whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.suite.ui.commons.NoteTaker#indexOfCard
 * @function
 */
	

/**
 * Destroys all the cards in the aggregation 
 * named <code>cards</code>.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#destroyCards
 * @function
 */


/**
 * The event is fired when a new card is added if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to add an element to the model. 
 *
 * @name sap.suite.ui.commons.NoteTaker#addCard
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of the note to be added.
 * @param {string} oControlEvent.getParameters.body The text of the note to be added.
 * @param {object} oControlEvent.getParameters.timestamp The timestamp of the note to be added.
 * @param {int} oControlEvent.getParameters.viewAllTrigger The View All link appears in the Note Taker card when length of a body text exceeds the specified value.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for a new card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for a new card.
 * @param {string} oControlEvent.getParameters.attachmentFilename Stores the name of the file attached to the card.
 * @param {string} oControlEvent.getParameters.uid The unique ID if available.
 * @param {string} oControlEvent.getParameters.attachmentUrl Stores the URL of the file attached to the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'addCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a new card is added if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to add an element to the model. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAddCard
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'addCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAddCard
 * @function
 */

/**
 * Fire event addCard to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the note to be added.</li>
 * <li>'body' of type <code>string</code> The text of the note to be added.</li>
 * <li>'timestamp' of type <code>object</code> The timestamp of the note to be added.</li>
 * <li>'viewAllTrigger' of type <code>int</code> The View All link appears in the Note Taker card when length of a body text exceeds the specified value.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for a new card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for a new card.</li>
 * <li>'attachmentFilename' of type <code>string</code> Stores the name of the file attached to the card.</li>
 * <li>'uid' of type <code>string</code> The unique ID if available.</li>
 * <li>'attachmentUrl' of type <code>string</code> Stores the URL of the file attached to the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAddCard
 * @function
 */


/**
 * The event is fired when a new card is deleted if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to delete the element from the model. 
 *
 * @name sap.suite.ui.commons.NoteTaker#deleteCard
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of the card to be deleted.
 * @param {string} oControlEvent.getParameters.body The text of the card to be deleted.
 * @param {string} oControlEvent.getParameters.timestamp The timestamp of the card to be deleted.
 * @param {string} oControlEvent.getParameters.uid The unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the deleted card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the deleted card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deleteCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a new card is deleted if no data binding is available.
 * If data binding is available, the event is fired to notify a developer to delete the element from the model. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachDeleteCard
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deleteCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachDeleteCard
 * @function
 */

/**
 * Fire event deleteCard to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the card to be deleted.</li>
 * <li>'body' of type <code>string</code> The text of the card to be deleted.</li>
 * <li>'timestamp' of type <code>string</code> The timestamp of the card to be deleted.</li>
 * <li>'uid' of type <code>string</code> The unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the deleted card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the deleted card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireDeleteCard
 * @function
 */


/**
 * The event is fired when a new card has been edited. 
 *
 * @name sap.suite.ui.commons.NoteTaker#editCard
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of the edited card.
 * @param {string} oControlEvent.getParameters.body A new text of the edited card.
 * @param {string} oControlEvent.getParameters.timestamp A new timestamp of the edited card.
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the edited card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the edited card.
 * @param {object} oControlEvent.getParameters.tags Updated array of the String type tags applied to the card during editing.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'editCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a new card has been edited. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachEditCard
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'editCard' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachEditCard
 * @function
 */

/**
 * Fire event editCard to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the edited card.</li>
 * <li>'body' of type <code>string</code> A new text of the edited card.</li>
 * <li>'timestamp' of type <code>string</code> A new timestamp of the edited card.</li>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the edited card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the edited card.</li>
 * <li>'tags' of type <code>object</code> Updated array of the String type tags applied to the card during editing.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireEditCard
 * @function
 */


/**
 * The event is fired when the value of attached file has been changed. 
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when the value of attached file has been changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentSelect
 * @function
 */

/**
 * Fire event attachmentSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentSelect
 * @function
 */


/**
 * Fire event uploadComplete to attached listeners. 
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentUploadComplete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.response The response message of the String type  that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
 * @param {string} oControlEvent.getParameters.uid The unique ID of the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * Fire event uploadComplete to attached listeners. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentUploadComplete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentUploadComplete
 * @function
 */

/**
 * Fire event attachmentUploadComplete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'response' of type <code>string</code> The response message of the String type  that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.</li>
 * <li>'uid' of type <code>string</code> The unique ID of the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentUploadComplete
 * @function
 */


/**
 * The event is fired, when user deletes the attached file. 
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @param {string} oControlEvent.getParameters.uid The unique ID of the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired, when user deletes the attached file. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentDelete
 * @function
 */

/**
 * Fire event attachmentDelete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * <li>'uid' of type <code>string</code> The unique ID of the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentDelete
 * @function
 */


/**
 * The event is fired when a user presses the attachment link. 
 *
 * @name sap.suite.ui.commons.NoteTaker#attachmentClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.uid The unique ID of the card.
 * @param {string} oControlEvent.getParameters.isCardAttachment If true, a user chooses the attachment in the Note card. If false, a user chooses the attachment in the Feeder card.
 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself. 
 *  
 * The event is fired when a user presses the attachment link. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTaker</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#attachAttachmentClick
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTaker</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTaker#detachAttachmentClick
 * @function
 */

/**
 * Fire event attachmentClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'uid' of type <code>string</code> The unique ID of the card.</li>
 * <li>'isCardAttachment' of type <code>string</code> If true, a user chooses the attachment in the Note card. If false, a user chooses the attachment in the Feeder card.</li>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTaker} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTaker#fireAttachmentClick
 * @function
 */


/**
 * Returns tags from all cards in the control.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.getAllTags
 * @function

 * @type object
 * @public
 */


/**
 * Sets a iunique ID of the next card.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.setNextCardUid
 * @function
 * @param {string} 
 *         sSUid
 *         

 * @type void
 * @public
 */


/**
 * Uploads the attached file to the server. Exposed from the FileUploader control.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.uploadAttachment
 * @function

 * @type void
 * @public
 */


/**
 * Additional data that is sent to the back end service. Data will be transmitted as a value of a hidden input where the name is derived from the name property with suffix -data. Exposed from the FileUploader control.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.setAttachmentData
 * @function
 * @param {string} 
 *         sAdditionalData
 *         Actual additional data.

 * @type void
 * @public
 */


/**
 * Must be called when the file upload to the server fail and it is needed to remove the attachment panel from the Feeder card.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.handleAttachmentUploadFail
 * @function

 * @type void
 * @public
 */


/**
 * Sets a URL for downloading the attachment. It must be called in the attachmentUploadComplete event handler.
 *
 * @name sap.suite.ui.commons.NoteTaker.prototype.setNextCardAttachmentUrl
 * @function
 * @param {string} 
 *         sSUrl
 *         The download URL of attachment for a card that will be added when a user chooses the Add button.

 * @type void
 * @public
 */


// Start of sap/suite/ui/commons/NoteTaker.js
jQuery.sap.require('sap.ui.commons.Carousel'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.SearchField'); // unlisted dependency retained


(function() {

   /**
    * The NoteTaker initialization hook.
    * Creates a carousel control initializing it with required parameters.
    * Adds NoteTakerFeeder to the created carousel control.
    * 
    * @private
    */ 
    sap.suite.ui.commons.NoteTaker.prototype.init = function() {
        this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
        this._bFilterTagPopupOpen = false;
        this._bSearchPopupOpen = false;
        var that = this;

        this._carousel = new sap.ui.commons.Carousel({
            id: this.getId() + "-carousel",
            height: "540px"
        });

        this.setAggregation("carousel", this._carousel);

        this._carousel.addContent(this._createFeederAndAddToThis());

        this._notFilteredCards = [];

        this._oHomeButton = new sap.ui.commons.Button({
            id: this.getId() + "-home-button",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_HOME_TOOLTIP"),
            press: function() {
                that._handleHomeButton();
            }
        });
        this._oHomeButton.addStyleClass("sapSuiteUiCommonsNoteTakerHomeButton");

        this._oFilterTagButton = new sap.ui.commons.Button({
            id: this.getId() + "-filterTag-button",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_TOOLTIP"),
            press : function() {
                that._toggleFilterTagPopup();
            }
        });
        this._oFilterTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterTagButton");

        this._oFilterThumbUpButton = new sap.ui.commons.Button({
            id: this.getId() + "-filter-thumb-up-button",
            tooltip : this._rb.getText("NOTETAKER_BUTTON_FILTER_THUMB_UP_TOOLTIP"),
            press: function() {
                that._handleFilteringByThumbUp();
            }
        });
        this._oFilterThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterThumbUpButton");

        this._oFilterThumbDownButton = new sap.ui.commons.Button({
            id: this.getId() + "-filter-thumb-down-button",
            tooltip : this._rb.getText("NOTETAKER_BUTTON_FILTER_THUMB_DOWN_TOOLTIP"),
            press: function() {
                that._handleFilteringByThumbDown();
            }
        });
        this._oFilterThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterThumbDownButton");

        this._oFilterAllButton = new sap.ui.commons.Button({
            id: this.getId() + "-filterAll-button",
            text: this._rb.getText("NOTETAKER_BUTTON_FILTER_ALL_TEXT"),
            tooltip: this._rb.getText("NOTETAKER_BUTTON_FILTER_ALL_TOOLTIP"),
            press: function() {
                that._handleResetFilters();
            }
        });
        this._oFilterAllButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterAllButton");

        this._oSearchButton = new sap.ui.commons.Button({
            id: this.getId() + "-filter-search-button",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"),
            press: function() {
                that._handleSearchPopup();
            }
        });
        this._oSearchButton.addStyleClass("sapSuiteUiCommonsNoteTakerSearchBtn");
        
        this._oFilterSearchField = new sap.ui.commons.SearchField({
            id: this.getId() + "-filter-searchField",
            tooltip: this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"),
            showListExpander: false,
            enableFilterMode: true,
            enableListSuggest: false,
            search: function(oEvent) {
                that._handleSearchingByText(oEvent.getParameter("query"));
            }
        });
        this._oFilterSearchField.addStyleClass("suiteUiNtFilterSearchField");

        this._oFilterTagList = new sap.ui.commons.ListBox({
            id: this.getId() + "-filterTag-listBox",
            allowMultiSelect: true,
            visibleItems: 10,
            width: "100%",
            height: "194px"
        });

        this._oCancelFilterTagButton = new sap.ui.commons.Button({
            id: this.getId() + "-cancel-filterTags-button",
            text: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS"),
            tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS_TOOLTIP"),
            press: function() {
                that._toggleFilterTagPopup();
            }
        });
        this._oCancelFilterTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerCancelFilterTagButton");

        this._oApplyFilterTagButton = new sap.ui.commons.Button({
            id: this.getId() + "-apply-filterTags-button",
            text: this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_APPLY_TEXT"),
            tooltip: this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_APPLY_TOOLTIP"),
            press: function() {
                that._toggleFilterTagPopup();
                setTimeout( function() {
                    that._handleFilteringByTags();
                }, 400);
            }
        });
    };

    /**
     * Required adaptations before rendering.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype.onBeforeRendering = function() {
        this._carousel.setVisibleItems(this.getVisibleNotes());
        this._adjustFilteringButtonsStyle();
        this._feeder.setAttachmentName(this.getAttachmentName());
    };

    /**
     * Required adaptations after rendering.
     *
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype.onAfterRendering = function() {
        this._adjustPopupState();
        if(!this.getAttachmentUploadUrl()) {
            jQuery.sap.byId(this._feeder._oAddAttachButton.getId()).hide();
        };
        
        jQuery.sap.byId(this._oFilterThumbUpButton.getId()).attr("aria-pressed", this.getFilterCriteria() && this.getFilterCriteria().thumbUp);
        jQuery.sap.byId(this._oFilterThumbDownButton.getId()).attr("aria-pressed", this.getFilterCriteria() && this.getFilterCriteria().thumbDown);
    };

    /**
     * Destroys this instance of NoteTaker.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype.exit = function() {
        this.destroyAggregation("carousel", true);
        this._carousel = null;
        this._oHomeButton.destroy();
        this._oHomeButton = null;
        this._oFilterTagButton.destroy();
        this._oFilterTagButton = null;
        this._oFilterThumbUpButton.destroy();
        this._oFilterThumbUpButton = null;
        this._oFilterThumbDownButton.destroy();
        this._oFilterThumbDownButton = null;
        this._oFilterAllButton.destroy();
        this._oFilterAllButton = null;
        this._oFilterTagList.destroy();
        this._oFilterTagList = null;
        this._oCancelFilterTagButton.destroy();
        this._oCancelFilterTagButton = null;
        this._oApplyFilterTagButton.destroy();
        this._oApplyFilterTagButton = null;
        this._oFilterSearchField.destroy();
        this._oFilterSearchField = null;
        this._oSearchButton.destroy();
        this._oSearchButton = null;
    };
    
    /**
    * Handles the Add button press event generated by NoteTakerFeeder.
    *
    * @param {jQuery.EventObject} oEvent The event object
    *
    * @private
    */    
    sap.suite.ui.commons.NoteTaker.prototype._handleAddNote = function(oEvent) {
        var title = oEvent.getParameter("title");
        var body = oEvent.getParameter("body");
        var timestamp = oEvent.getParameter("timestamp");
        var tags = oEvent.getParameter("tags");
        var thumbUp = oEvent.getParameter("thumbUp");
        var thumbDown = oEvent.getParameter("thumbDown");
        var attachmentFilename = oEvent.getParameter("attachmentFilename");
        
        var eData = {};
        eData.title = title;
        eData.body = body;
        eData.timestamp = timestamp;
        eData.viewAllTrigger = this.getCardViewAllTrigger();
        eData.tags = tags;
        eData.thumbUp = thumbUp;
        eData.thumbDown = thumbDown;
        eData.attachmentFilename = attachmentFilename;
        eData.uid = this._nextCardUid;
        eData.attachmentUrl = this._nextCardAttachmentUrl;

        var oBinding = this.getBinding("cards");
        if (oBinding) {
            //in case of data binding model has to be updated
            this.fireAddCard(eData);
            //sorting should happen when model is updated
            var oTimestampSorter = new sap.ui.model.Sorter("timestamp", true);
            oBinding.sort(oTimestampSorter);
        } else {
            var oNoteCard = new sap.suite.ui.commons.NoteTakerCard();
            oNoteCard.setBody(body);
            oNoteCard.setHeader(title);
            oNoteCard.setTimestamp(timestamp);
            oNoteCard.setViewAllTrigger(this.getCardViewAllTrigger());
            oNoteCard.setTags(tags);
            oNoteCard.setThumbUp(thumbUp);
            oNoteCard.setThumbDown(thumbDown);
            oNoteCard.setAttachmentFilename(attachmentFilename);
            oNoteCard.setUid(this._nextCardUid);
            oNoteCard.setAttachmentUrl(this._nextCardAttachmentUrl);
            
            this.insertCard(oNoteCard, 0);
            this.fireAddCard(eData);
        }
        
        this._nextCardUid = null;
        this._nextCardAttachmentUrl = null;
        
        this._filter();
    };
    
    /**
     * Adds a note card to the cards aggregation.
     * 
     * @param {NoteTakerCard} oCard. The object which is added to the cards aggregation.
     */
    sap.suite.ui.commons.NoteTaker.prototype.addCard = function(oCard) {
        this._addDeleteDelegate(oCard);
        this._addEditDelegate(oCard);
        this._addAttachmentDelegate(oCard);
        this.getNotFilteredCards().push(oCard);
        var result = this._carousel.addContent(oCard);
        this._sortIfNeeded();
        this._spreadTagList();
        return result;
    };
    
    /**
     * Gets a list of the note cards. It does not return NoteTakerFeeder to the list.
     */
    sap.suite.ui.commons.NoteTaker.prototype.getCards = function() {
        return this._carousel.getContent().slice(1);
    };
    
    /**
     * Inserts a note card in the specified position.
     * @param {NoteTakerCard} oCard. The object which is added to the cards aggregation.
     * @param {int} iIndex. The position of the object it is inserted into.
     */
    sap.suite.ui.commons.NoteTaker.prototype.insertCard = function(oCard, iIndex) {
        this._addDeleteDelegate(oCard);
        this._addEditDelegate(oCard);
        this._addAttachmentDelegate(oCard);
        this.getNotFilteredCards().push(oCard);
        var result = this._carousel.insertContent(oCard, ++iIndex);
        this._spreadTagList();
        return result;
    };

    /**
     * Removes a specified note card from the cards aggregation.
     * @param {NoteTakerCard} oCard. Object which will be removed.
     * 
     */
    sap.suite.ui.commons.NoteTaker.prototype.removeCard = function(oCard) {
        this._spreadTagList();
        return this._carousel.removeContent(oCard);
    };
    
    /**
     * Removes all the note cards from the cards aggregation. 
     */
    sap.suite.ui.commons.NoteTaker.prototype.removeAllCards = function() {
        var aContent = this._carousel.removeAllContent();
        this._feeder.setTags([]);
        this._carousel.addContent(this._feeder);
        return aContent.slice(1);
    };
    
    /**
     * Returns a position of the note card in the cards aggregation.
     * @param {NoteTakerCard} oCard. Object which position is returned.
     */
    sap.suite.ui.commons.NoteTaker.prototype.indexOfCard = function(oCard) {
        var iIndex = this._carousel.indexOfContent(oCard);
        return (iIndex > 0) ? --iIndex : -1;
    };

    /**
     * Destroys the cards aggregation. After the cards aggregation is destroyed a new instance of NoteTakerFeeder is added to the cards aggregation.
     */
    sap.suite.ui.commons.NoteTaker.prototype.destroyCards = function() {
        this._carousel.destroyContent();
        this._carousel.addContent(this._createFeederAndAddToThis());
        return this;
    };

    /**
     * The utility method which creates NoteTakerFeeder. 
     * Minimizes code duplication.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype._createFeederAndAddToThis = function() {
        var that = this;
        this._feeder = new sap.suite.ui.commons.NoteTakerFeeder({
            id : this.getId() + "-feeder",
            attachmentName : that.getAttachmentName(),
            addNote: function(e){
                that._handleAddNote(e);
            },
            attachmentUploadUrl: that.getAttachmentUploadUrl(),
            attachmentSelect : function(e){
                var eData = {filename : e.getParameter("filename")};
                that.fireAttachmentSelect(eData);
            },
            attachmentUploadComplete : function(e) {
                var eData = {
                        response: e.getParameter("response"),
                        uid : that._nextCardUid
                };
                that.fireAttachmentUploadComplete(eData);
                this._oAttachmentLink.setHref(that._nextCardAttachmentUrl);
                this._oAttachmentLink.rerender();
            },
            attachmentDelete : function(e) {
                var eData = {
                        filename : e.getParameter("filename"),
                        uid : that._nextCardUid
                };
                
                that.fireAttachmentDelete(eData);
            },
            attachmentClick : function(e) {
                var eData = {
                        filename : e.getParameter("filename"),
                        uid : that._nextCardUid,
                        isCardAttachment : false
                };
                
                that.fireAttachmentClick(eData);
            }
        });
        this._spreadTagList();
        return this._feeder;
    };

    /**
     * Method for sorting cards inside NoteTaker. 
     * It is called only when databinding is undefined.
     * 
     * @private
     */
    sap.suite.ui.commons.NoteTaker.prototype._sortIfNeeded = function() {
        var oBinding = this.getBinding();
        if(oBinding == undefined) {
            var aCards = this.getCards();
            aCards.sort(function(oCard1, oCard2) {
                // descending sort
                return oCard2.getTimestamp().getTime() - oCard1.getTimestamp().getTime();
            });
            
            this.removeAllCards();
            
            for(var i = 0; i<aCards.length; i++) {
                this._carousel.addContent(aCards[i]); 
            }
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype.getAllTags = function() {
        var oBinding = this.getBinding("cards");
        var aCards = oBinding ? this.getCards() : this.getNotFilteredCards();
        var oTagSet = {};
        var aResult = [];
        for (var i = 0; i<aCards.length; i++) {
            var aTags = aCards[i].getTags();
            for (var j = 0; j<aTags.length; j++) {
                if (aTags[j] != "") {
                    oTagSet[aTags[j]] = true;
                }
            }
        }

        for (var tag in oTagSet) {
            aResult.push(tag);
        }

        return aResult.sort();
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleDeleteNote = function(oEvent) {
        var oBinding = this.getBinding("cards");
        var eData = {};
        eData.title = oEvent.getParameter("title");
        eData.timestamp = oEvent.getParameter("timestamp");
        eData.body = oEvent.getParameter("body");
        eData.uid = oEvent.getParameter("uid");
        eData.thumbUp = oEvent.getParameter("thumbUp");
        eData.thumbDown = oEvent.getParameter("thumbDown");
        
        if(oBinding) {
            this.fireDeleteCard(eData);
        } else {
            var card2Delete = oEvent.getParameter("cardId");
            var allCards = this.getNotFilteredCards();
            for (var i=0; i<allCards.length; i++) {
                if (allCards[i].getId() == card2Delete) {
                    allCards.splice(i, 1);
                }
            }
            this.removeCard(card2Delete);
            this.fireDeleteCard(eData);
        }
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleEditNote = function(oEvent) {
        var eData = {};
        eData.title = oEvent.getParameter("title");
        eData.timestamp = oEvent.getParameter("timestamp");
        eData.body = oEvent.getParameter("body");
        eData.uid = oEvent.getParameter("uid");
        eData.thumbUp = oEvent.getParameter("thumbUp");
        eData.thumbDown = oEvent.getParameter("thumbDown");
        eData.tags = oEvent.getParameter("tags");
        
        this.fireEditCard(eData);
        
        this._sortIfNeeded();

        this._spreadTagList();
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._addDeleteDelegate = function(oCard) {
        var that = this;
        oCard.attachDeleteNote(function(oEvent) { 
            that._handleDeleteNote(oEvent);
        });
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._addEditDelegate = function(oCard) {
        var that = this;
        oCard.attachEditNote(function(oEvent) { 
            that._handleEditNote(oEvent);
        });
    };

    /**
     * Handles home button click. Scrolls carousel to its first element that is a feeder.
     */
    sap.suite.ui.commons.NoteTaker.prototype._handleHomeButton = function() {
        this._carousel.setFirstVisibleIndex(0);
        this._feeder._focusDefaultControl();
    };

    /*
     * Override to automatically apply filter
     */
    sap.suite.ui.commons.NoteTaker.prototype.setFilterCriteria = function(oFilterCriteria) {
        this.setProperty("filterCriteria", oFilterCriteria);
        this._filter();
    };

    sap.suite.ui.commons.NoteTaker.prototype._toggleFilterTagPopup = function() {
        if (this._bFilterTagPopupOpen) {
            jQuery.sap.byId(this.getId() + "-filterTag-panel").slideToggle();
            this._bFilterTagPopupOpen = false;
        } else {
            this._addTagsToFilterListBox(this.getAllTags());
            jQuery.sap.byId(this.getId() + "-filterTag-panel").slideToggle();
            this._oFilterTagList.focus();
            this._bFilterTagPopupOpen = true;
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._addTagsToFilterListBox = function(aTags) {
        var aSelectedItems = [];
        var aFilterTags = this._getFilterTags();
        var aListItems = jQuery.map(aTags, function(v, i) {

            // The Array.indexOf() method is not supported in Internet Explorer 8
            if (aFilterTags.indexOf) {
                if (aFilterTags.indexOf(v) >= 0) {
                    aSelectedItems.push(i);
                }
            } else {
                for (var k in aFilterTags) {
                    if (aFilterTags[k] == v) {
                        aSelectedItems.push(i);
                        break;
                    }
                }
            }

            return new sap.ui.core.ListItem({text: v});
        });

        this._oFilterTagList.setItems(aListItems, true);
        this._oFilterTagList.setSelectedIndices(aSelectedItems);
        this._oFilterTagList.rerender();
    };

    sap.suite.ui.commons.NoteTaker.prototype._cloneFilterCriteria = function() {
        var oFilterCriteria = this.getFilterCriteria();
        var oNewCriteria = {};

        if (oFilterCriteria) {
            for (var pName in oFilterCriteria) {
                oNewCriteria[pName] = oFilterCriteria[pName];
            }
        }

        return oNewCriteria;
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleFilteringByTags = function() {
        var oFilterCriteria = this._cloneFilterCriteria();
        var aSelectedItems = this._oFilterTagList.getSelectedItems();
        var aTags = [];

        for (var i in aSelectedItems) {
            aTags.push(aSelectedItems[i].getText());
        }

        oFilterCriteria.tags = aTags;
        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleFilteringByThumbUp = function() {
        var oFilterCriteria = this._cloneFilterCriteria();
        oFilterCriteria.thumbUp = !oFilterCriteria.thumbUp;
        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleFilteringByThumbDown = function() {
        var oFilterCriteria = this._cloneFilterCriteria();
        oFilterCriteria.thumbDown = !oFilterCriteria.thumbDown;
        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleResetFilters = function() {
        var oFilterCriteria = this.getFilterCriteria();
        var oNewCriteria = null;

        if (oFilterCriteria && oFilterCriteria.search && oFilterCriteria.search.length > 0) {
            oNewCriteria = {};
            oNewCriteria.search = oFilterCriteria.search;
        }

        this.setFilterCriteria(oNewCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._handleSearchingByText = function(sSearchText) {
        var oFilterCriteria = this._cloneFilterCriteria();
        var aSearchWords = [];
        var aNewWords = sSearchText.split(new RegExp("\\s+"));

        for (var i = 0; i < aNewWords.length; i++) {
            if (aNewWords[i].length > 0) {
                aSearchWords.push(aNewWords[i]);
            }
        }

        oFilterCriteria.search = aSearchWords;

        this.setFilterCriteria(oFilterCriteria);
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilterTagButton = function() {
        var aFilterTags = this._getFilterTags();

        if (aFilterTags.length) {
            this._oFilterTagButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_APPLY_SELECTED_TOOLTIP") + ": " + aFilterTags.join(" "));
            this._oFilterTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        } else {
            this._oFilterTagButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_FILTER_TAG_TOOLTIP"));
            this._oFilterTagButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleSearchPopup = function() {
        if (this._bSearchPopupOpen) {
            jQuery.sap.byId(this.getId() + "-search-panel").slideToggle();
            this._bSearchPopupOpen = false;
        } else {
            var oPosition = jQuery.sap.byId(this.getId() + "-filter-search-button").position();
            jQuery.sap.byId(this.getId() + "-search-panel").css("right", oPosition.right - 20).slideToggle();
            this._oFilterSearchField.focus();
            this._bSearchPopupOpen = true;
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustSearchButton = function() {
        var sSearchText = this._oFilterSearchField.getValue();

        if (sSearchText.length) {
            this._oSearchButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCHED_BY_TOOLTIP") + ": " + sSearchText);
            this._oFilterSearchField.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCHED_BY_TOOLTIP") + ": " + sSearchText);
            this._oSearchButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        } else {
            this._oSearchButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"));
            this._oFilterSearchField.setTooltip(this._rb.getText("NOTETAKER_BUTTON_SEARCH_TOOLTIP"));
            this._oSearchButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };

    /**
     * Extracts array of filtering tags from a filtering criteria object
     */
    sap.suite.ui.commons.NoteTaker.prototype._getFilterTags = function() {
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria && oFilterCriteria.tags && oFilterCriteria.tags.length) {
            return oFilterCriteria.tags;
        } else {
            return [];
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustPopupState = function() {
        var oTagPosition = jQuery.sap.byId(this.getId() + "-filterTag-button").position();
        jQuery.sap.byId(this.getId() + "-filterTag-panel").css("left", oTagPosition.left - 20);
        if (this._bFilterTagPopupOpen) {
            jQuery.sap.byId(this.getId() + "-filterTag-panel").show();
        }
        if (this._bSearchPopupOpen) {
            jQuery.sap.byId(this.getId() + "-search-panel").show();
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilteringButtonsStyle = function() {
        this._adjustFilterTagButton();
        this._adjustFilteringByThumbUpButtonStyle();
        this._adjustFilteringByThumbDownButtonStyle();
        this._adjustSearchButton();
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilteringByThumbUpButtonStyle = function() {
        if (this.getFilterCriteria() && this.getFilterCriteria().thumbUp) {
            this._oFilterThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
            
        } else {
            this._oFilterThumbUpButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype._adjustFilteringByThumbDownButtonStyle = function() {
        if (this.getFilterCriteria() && this.getFilterCriteria().thumbDown) {
            this._oFilterThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        } else {
            this._oFilterThumbDownButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFilterButtonSelected");
        }
    };

    sap.suite.ui.commons.NoteTaker.prototype.getNotFilteredCards = function() {
        if(!this._notFilteredCards) {
            this._notFilteredCards = [];
        }
      return this._notFilteredCards;
    };

    // Update all cards including feeder with new list of tags available to choose.
    sap.suite.ui.commons.NoteTaker.prototype._spreadTagList = function() {
        var aAllTags = this.getAllTags();
        this._feeder.setTags(aAllTags);
        var aCards = this.getCards();
        for (var i=0; i<aCards.length; i++) {
            aCards[i].setAllTags(aAllTags);
        }
    };

    /**
     * Filters note taker cards using filterCriteria property. Two different filtering methods implemented for control
     * with and without binding.
     */
    sap.suite.ui.commons.NoteTaker.prototype._filter = function() {
        var oBinding = this.getBinding("cards");
        var oCard;
        var i;

        if (oBinding) {
            var aModelCards = this.getModel().oData['cards'];

            for (i = 0; i < aModelCards.length; i++) {
                oCard = aModelCards[i];
                oCard.isFiltered = this._applyFilters(oCard);
            }

            this.getModel().updateBindings();
            oBinding.filter([new sap.ui.model.Filter("isFiltered", sap.ui.model.FilterOperator.EQ, false)]);
        } else {
            var aNotFilteredCards = this.getNotFilteredCards();
            var aVisibleCards = this.getCards();

            //for newly created taker notFilteredCards may not be set
            if (aNotFilteredCards.length == 0 && aVisibleCards.length > 0) {
                this.setNotFilteredCards(aVisibleCards);
                aNotFilteredCards = aVisibleCards;
            }

            for (i = 0; i < aNotFilteredCards.length; i++) {
                oCard = aNotFilteredCards[i];
                oCard.setIsFiltered(this._applyFilters(oCard));

                if (oCard.getIsFiltered()) {
                    this.removeCard(oCard);
                } else if (this.indexOfCard(oCard) < 0) {
                    this.addCard(oCard);
                }
            }
        }
    };

    /**
     * Iterates through the list of filtering criteria and checks if given card should be filtered out and thus
     * should be hidden from a user in the note taker.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyFilters = function(oCard) {
        var bFilterPassed = true;

        if (this.getFilterCriteria()) {
            for (var i = 0; (i < this._filters.length) && bFilterPassed; i++) {
                var fnFilter = this._filters[i];
                bFilterPassed = fnFilter.call(this, oCard);
            }
        }

        return !bFilterPassed;    // filter not passed means card is filtered out
    };

    /**
     * Validates whether given card passes filter by thumbs.
     * @param oCard validated card could be NoteTakerCard instance or json object.
     */
    sap.suite.ui.commons.NoteTaker.prototype._validateCardByThumbsFilter = function(oCard) {
        if (oCard.getThumbUp && oCard.getThumbDown) {
            return this._applyThumbsFilter(oCard.getThumbUp(), oCard.getThumbDown());
        } else {
            return this._applyThumbsFilter(oCard.thumbUp, oCard.thumbDown);
        }
    };

    /**
     * Validates whether given card passes filter by tags.
     * @param oCard validated card could be NoteTakerCard instance or json object.
     */
    sap.suite.ui.commons.NoteTaker.prototype._validateCardByTagsFilter = function(oCard) {
        if (oCard.getTags) {
            return this._applyTagsFilter(oCard.getTags());
        } else {
            return this._applyTagsFilter(oCard.tags);
        }
    };

    /**
     * Validates whether given card passes search by text.
     * @param oCard validated card could be NoteTakerCard instance or json object.
     */
    sap.suite.ui.commons.NoteTaker.prototype._validateCardByTextSearch = function(oCard) {
        if (oCard.getBody) {
            return this._applyTextSearch(oCard.getBody(), oCard.getHeader());
        } else {
            return this._applyTextSearch(oCard.body, oCard.header);
        }
    };

    /**
     * Implements filtering criteria by thumbs. Validates whether given parameters conform to filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyThumbsFilter = function(bThumbUp, bThumbDown) {
        var bResult = true;
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria.thumbUp && oFilterCriteria.thumbDown) {
            bResult = bThumbUp || bThumbDown;
        } else if (oFilterCriteria.thumbUp) {
            bResult = bThumbUp;
        } else if (oFilterCriteria.thumbDown) {
            bResult = bThumbDown;
        }

        return bResult;
    };

    /**
     * Implements filtering criteria by tags. Validates whether given parameter conforms to filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyTagsFilter = function(aTags) {
        var bResult = true;
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria.tags && oFilterCriteria.tags.length > 0) {
            var i, j;
            var aTagCriteria = oFilterCriteria.tags;

            bResult = false;     //  assume initially no tag matches

            //iterate since IE8 doesn't support Array.indexOf() method.
            for (i = 0; i < aTagCriteria.length && !bResult; i++) {
                for (j = 0; aTags && (j < aTags.length); j++) {
                    if (aTagCriteria[i] == aTags[j]) {
                        bResult = true;
                        break;
                    }
                }
            }
        }

        return bResult;
    };

    /**
     * Implements searching by text. Validates whether given strings contain text given in filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._applyTextSearch = function(sBody, sHeader) {
        var bResult = true;
        var oFilterCriteria = this.getFilterCriteria();

        if (oFilterCriteria.search && oFilterCriteria.search.length > 0) {
            var aSearchCriteria = oFilterCriteria.search;

            bResult = false;     // assume initially search found nothing
            sBody = sBody.toLowerCase();
            sHeader = sHeader ? sHeader.toLowerCase() : null;

            for (var i = 0; i < aSearchCriteria.length; i++) {
                var sWord = aSearchCriteria[i].toLowerCase();
                if ((sBody.indexOf(sWord) >= 0) || (sHeader && sHeader.indexOf(sWord) >= 0)) {
                    bResult = true;
                    break;
                }
            }
        }

        return bResult;
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.setAttachmentUploadUrl = function(sUrl) {
        this.setProperty("attachmentUploadUrl", sUrl, true);
        this._feeder.setAttachmentUploadUrl(sUrl);
    };

    /**
     * Array of methods that implements validation by filtering criteria.
     */
    sap.suite.ui.commons.NoteTaker.prototype._filters = [
        sap.suite.ui.commons.NoteTaker.prototype._validateCardByThumbsFilter,
        sap.suite.ui.commons.NoteTaker.prototype._validateCardByTagsFilter,
        sap.suite.ui.commons.NoteTaker.prototype._validateCardByTextSearch
    ];
    
    //TODO: add jsdocs
    sap.suite.ui.commons.NoteTaker.prototype.setNextCardUid = function(sUid) {
        this._nextCardUid = sUid;
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._addAttachmentDelegate = function(oCard) {
        var that = this;
        oCard.attachAttachmentClick(function(oEvent) { 
            that._handleCardAttachmentClick(oEvent);
        });
    };
    
    sap.suite.ui.commons.NoteTaker.prototype._handleCardAttachmentClick = function(oEvent) {
        var eData = {
                filename : oEvent.getParameter("filename"),
                uid :  oEvent.getParameter("uid"),
                isCardAttachment : true
        };
        
        this.fireAttachmentClick(eData);
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.uploadAttachment = function() {
        this._feeder._oFileUploader.upload();
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.setAttachmentData = function(sAdditionalData) {
        this._feeder._oFileUploader.setAdditionalData(sAdditionalData);
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.handleAttachmentUploadFail = function() {
        this._feeder._handleDeleteAttachUI();    
    };
    
    sap.suite.ui.commons.NoteTaker.prototype.setNextCardAttachmentUrl = function(sUrl) {
        this._nextCardAttachmentUrl = sUrl;
    };
}());

}; // end of sap.suite.ui.commons.NoteTaker
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerCard') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NoteTakerCard.
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerCard");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new NoteTakerCard.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeader header} : string</li>
 * <li>{@link #getBody body} : string</li>
 * <li>{@link #getTimestamp timestamp} : object (default: new Date())</li>
 * <li>{@link #getTags tags} : object (default: [])</li>
 * <li>{@link #getViewAllTrigger viewAllTrigger} : int (default: 1800)</li>
 * <li>{@link #getUid uid} : string</li>
 * <li>{@link #getIsFiltered isFiltered} : boolean (default: false)</li>
 * <li>{@link #getThumbUp thumbUp} : boolean</li>
 * <li>{@link #getThumbDown thumbDown} : boolean</li>
 * <li>{@link #getAllTags allTags} : object (default: [])</li>
 * <li>{@link #getAttachmentFilename attachmentFilename} : string</li>
 * <li>{@link #getAttachmentUrl attachmentUrl} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NoteTakerCard#event:editNote editNote} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerCard#event:deleteNote deleteNote} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerCard#event:attachmentClick attachmentClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to store Note Taker card header and body text.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NoteTakerCard", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"header" : {type : "string", group : "Misc", defaultValue : null},
		"body" : {type : "string", group : "Misc", defaultValue : null},
		"timestamp" : {type : "object", group : "Misc", defaultValue : new Date()},
		"tags" : {type : "object", group : "Misc", defaultValue : []},
		"viewAllTrigger" : {type : "int", group : "Misc", defaultValue : 1800},
		"uid" : {type : "string", group : "Misc", defaultValue : null},
		"isFiltered" : {type : "boolean", group : "Misc", defaultValue : false},
		"thumbUp" : {type : "boolean", group : "Misc", defaultValue : null},
		"thumbDown" : {type : "boolean", group : "Misc", defaultValue : null},
		"allTags" : {type : "object", group : "Misc", defaultValue : []},
		"attachmentFilename" : {type : "string", group : "Misc", defaultValue : null},
		"attachmentUrl" : {type : "string", group : "Misc", defaultValue : null}
	},
	events : {
		"editNote" : {}, 
		"deleteNote" : {}, 
		"attachmentClick" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NoteTakerCard with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NoteTakerCard.extend
 * @function
 */

sap.suite.ui.commons.NoteTakerCard.M_EVENTS = {'editNote':'editNote','deleteNote':'deleteNote','attachmentClick':'attachmentClick'};


/**
 * Getter for property <code>header</code>.
 * Stores the Note Taker card header.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>header</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getHeader
 * @function
 */

/**
 * Setter for property <code>header</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeader  new value for property <code>header</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setHeader
 * @function
 */


/**
 * Getter for property <code>body</code>.
 * Stores the Note Taker card body text.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>body</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getBody
 * @function
 */

/**
 * Setter for property <code>body</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBody  new value for property <code>body</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setBody
 * @function
 */


/**
 * Getter for property <code>timestamp</code>.
 * Stores a timestamp of the Note Taker card.
 *
 * Default value is <code>new Date()</code>
 *
 * @return {object} the value of property <code>timestamp</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getTimestamp
 * @function
 */

/**
 * Setter for property <code>timestamp</code>.
 *
 * Default value is <code>new Date()</code> 
 *
 * @param {object} oTimestamp  new value for property <code>timestamp</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setTimestamp
 * @function
 */


/**
 * Getter for property <code>tags</code>.
 * Contains an array of the String type tags applied to the current card.
 *
 * Default value is <code>[]</code>
 *
 * @return {object} the value of property <code>tags</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getTags
 * @function
 */

/**
 * Setter for property <code>tags</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {object} oTags  new value for property <code>tags</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setTags
 * @function
 */


/**
 * Getter for property <code>viewAllTrigger</code>.
 * The View All link appears in the Note Taker card if a body text length exceeds the specified value.
 *
 * Default value is <code>1800</code>
 *
 * @return {int} the value of property <code>viewAllTrigger</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getViewAllTrigger
 * @function
 */

/**
 * Setter for property <code>viewAllTrigger</code>.
 *
 * Default value is <code>1800</code> 
 *
 * @param {int} iViewAllTrigger  new value for property <code>viewAllTrigger</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setViewAllTrigger
 * @function
 */


/**
 * Getter for property <code>uid</code>.
 * The card ID. This property should be set by an application developer.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uid</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getUid
 * @function
 */

/**
 * Setter for property <code>uid</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUid  new value for property <code>uid</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setUid
 * @function
 */


/**
 * Getter for property <code>isFiltered</code>.
 * Shows whether the note card is hidden by the applied filter.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isFiltered</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getIsFiltered
 * @function
 */

/**
 * Setter for property <code>isFiltered</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsFiltered  new value for property <code>isFiltered</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setIsFiltered
 * @function
 */


/**
 * Getter for property <code>thumbUp</code>.
 * Indicates positive information for the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbUp</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getThumbUp
 * @function
 */

/**
 * Setter for property <code>thumbUp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbUp  new value for property <code>thumbUp</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setThumbUp
 * @function
 */


/**
 * Getter for property <code>thumbDown</code>.
 * Indicates negative information for the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbDown</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getThumbDown
 * @function
 */

/**
 * Setter for property <code>thumbDown</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbDown  new value for property <code>thumbDown</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setThumbDown
 * @function
 */


/**
 * Getter for property <code>allTags</code>.
 * Contains an array of the String type tags available for selection during the card update.
 *
 * Default value is <code>[]</code>
 *
 * @return {object} the value of property <code>allTags</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getAllTags
 * @function
 */

/**
 * Setter for property <code>allTags</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {object} oAllTags  new value for property <code>allTags</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setAllTags
 * @function
 */


/**
 * Getter for property <code>attachmentFilename</code>.
 * Stores the name of the file attached to the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentFilename</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getAttachmentFilename
 * @function
 */

/**
 * Setter for property <code>attachmentFilename</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentFilename  new value for property <code>attachmentFilename</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setAttachmentFilename
 * @function
 */


/**
 * Getter for property <code>attachmentUrl</code>.
 * Stores the address of the file attached to the card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentUrl</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#getAttachmentUrl
 * @function
 */

/**
 * Setter for property <code>attachmentUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentUrl  new value for property <code>attachmentUrl</code>
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#setAttachmentUrl
 * @function
 */


/**
 * The event is fired when a user chooses the Edit button in the note card. 
 *
 * @name sap.suite.ui.commons.NoteTakerCard#editNote
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of edited card.
 * @param {string} oControlEvent.getParameters.body A new text of the edited card.
 * @param {string} oControlEvent.getParameters.timestamp A new timestamp of the edited card.
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the edited card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the edited card.
 * @param {object} oControlEvent.getParameters.tags Updated array of the String type tags applied to the card during editing.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'editNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself. 
 *  
 * The event is fired when a user chooses the Edit button in the note card. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#attachEditNote
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'editNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#detachEditNote
 * @function
 */

/**
 * Fire event editNote to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of edited card.</li>
 * <li>'body' of type <code>string</code> A new text of the edited card.</li>
 * <li>'timestamp' of type <code>string</code> A new timestamp of the edited card.</li>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the edited card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the edited card.</li>
 * <li>'tags' of type <code>object</code> Updated array of the String type tags applied to the card during editing.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerCard#fireEditNote
 * @function
 */


/**
 * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control. 
 *
 * @name sap.suite.ui.commons.NoteTakerCard#deleteNote
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.cardId The HTML ID of a card that needs to be deleted.
 * @param {string} oControlEvent.getParameters.title The title of the card to be deleted.
 * @param {string} oControlEvent.getParameters.body The text of the card to be deleted.
 * @param {string} oControlEvent.getParameters.timestamp The timestamp of the card to be deleted.
 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {boolean} oControlEvent.getParameters.thumbUp Indicates positive information for the deleted card.
 * @param {boolean} oControlEvent.getParameters.thumbDown Indicates negative information for the deleted card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deleteNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself. 
 *  
 * The event is fired when a card needs to be deleted. This event is needed for the Note Taker control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#attachDeleteNote
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deleteNote' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#detachDeleteNote
 * @function
 */

/**
 * Fire event deleteNote to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'cardId' of type <code>string</code> The HTML ID of a card that needs to be deleted.</li>
 * <li>'title' of type <code>string</code> The title of the card to be deleted.</li>
 * <li>'body' of type <code>string</code> The text of the card to be deleted.</li>
 * <li>'timestamp' of type <code>string</code> The timestamp of the card to be deleted.</li>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'thumbUp' of type <code>boolean</code> Indicates positive information for the deleted card.</li>
 * <li>'thumbDown' of type <code>boolean</code> Indicates negative information for the deleted card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerCard#fireDeleteNote
 * @function
 */


/**
 * The event is fired when a user chooses the attachment download link. 
 *
 * @name sap.suite.ui.commons.NoteTakerCard#attachmentClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.uid A unique ID that was set by an application developer.
 * @param {string} oControlEvent.getParameters.url The address of the file attached to the card.
 * @param {string} oControlEvent.getParameters.filename The name of the file attached to the card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself. 
 *  
 * The event is fired when a user chooses the attachment download link. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#attachAttachmentClick
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerCard</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerCard#detachAttachmentClick
 * @function
 */

/**
 * Fire event attachmentClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'uid' of type <code>string</code> A unique ID that was set by an application developer.</li>
 * <li>'url' of type <code>string</code> The address of the file attached to the card.</li>
 * <li>'filename' of type <code>string</code> The name of the file attached to the card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerCard} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerCard#fireAttachmentClick
 * @function
 */


// Start of sap/suite/ui/commons/NoteTakerCard.js
jQuery.sap.require('sap.ui.core.Locale'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ui.ux3.OverlayContainer'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.Link'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MessageBox'); // unlisted dependency retained


///**
// * This file defines behavior for the control,
// */
sap.suite.ui.commons.NoteTakerCard.prototype.init = function(){
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

    var that = this;
    this._oEditButton = new sap.ui.commons.Button({
        id: this.getId() + "-edit-button",
        press: function(e){
            that._handleEdit();
        },
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_OPEN_EDIT_TOOLTIP")
    });
    this._oEditButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");

    this._oDeleteButton = new sap.ui.commons.Button({
        id: this.getId() + "-delete-button",
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_DELETE_TOOLTIP"),
        press: function() {
            that._handleDelete();
        }
    });
    this._oDeleteButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardDeleteButton");

    this._oViewAllLink = new sap.ui.commons.Link({
    	id: this.getId() + "-viewAll-link",
    	text: this._rb.getText("NOTETAKERCARD_LINK_VIEW_ALL_TEXT"),
    	tooltip: this._rb.getText("NOTETAKERCARD_LINK_VIEW_ALL_TOOLTIP"),
    	press: function() {
			that._openOverlay();
		}
	});
    
    this._oOverlayCard = new sap.ui.ux3.OverlayContainer(this.getId() + "-overlay", {
        openButtonVisible: false,
        close: function(oEvent) {
            that._handleOverlayCloseEvent(oEvent.getSource());
            oEvent.preventDefault();    // close overlay functionality already handled so prevent default close
        }
    });
    
    // fixed unwanted scrolling of underlying content
    this._oOverlayCard._superOnsapselect = this._oOverlayCard.onsapselect;
    this._oOverlayCard.onsapselect = function(oEvent) {
        var controlId = oEvent.srcControl.getId();

        if (controlId.indexOf("-overlayBody") < 0 && controlId.indexOf("-inputTag") < 0 && controlId.indexOf("-overlayCardTitle") < 0) {
            oEvent.stopPropagation();
            oEvent.preventDefault();
        }

        //this is needed for Firefox
        setTimeout( function() {
            that._oOverlayCard._superOnsapselect(oEvent);
        }, 10);
    };
    
    this._oOverlayCard.addStyleClass("sapSuiteCommonsNoteTakerCardOverlayWindow");
    this._oOverlayCard._tagControls = {};
};

sap.suite.ui.commons.NoteTakerCard.prototype.exit = function() {
	this._oDeleteButton.destroy();
	this._oDeleteButton = null;
	
	this._oEditButton.destroy();
    this._oEditButton = null;

    this._oViewAllLink.destroy();
    this._oViewAllLink = null;
    
    this._oOverlayCard.destroy();
    this._oOverlayCard = null;
};

/**
 * Formats timestamp using medium format style and current locale.
 */
sap.suite.ui.commons.NoteTakerCard.prototype.getFormattedTimestamp = function() {
    var oLocale = sap.ui.getCore().getConfiguration().getLocale();
    var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({style: "medium"}, oLocale);

    return oDateFormat.format(this.getTimestamp());
};

/**
 * Closes overlay. If overlay is in edit mode then shows confirmation dialog before closing.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._handleOverlayCloseEvent = function(oControl) {
    if (oControl.bEditMode) {
        var that = this;
        sap.ui.commons.MessageBox.show(this._rb.getText("NOTETAKERCARD_CONFIRMATION_CANCEL_EDIT_MESSAGE"),
                                       sap.ui.commons.MessageBox.Icon.QUESTION,
                                       this._rb.getText("NOTETAKERCARD_CONFIRMATION_CANCEL_EDIT_TITLE"),
                                       [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
                                       function(sResult) {
                                           if (sResult == sap.ui.commons.MessageBox.Action.YES) {
                                               that._closeOverlay();
                                               that._oEditButton.focus();
                                           } else {
                                               jQuery.sap.focus(jQuery.sap.domById(that.getId() + "-overlayBody"));
                                           }
                                       },
                                       sap.ui.commons.MessageBox.Action.NO);
    } else {
        this._closeOverlay();
    }
};

/**
 * Destroys overlay content and closes overlay
 */
sap.suite.ui.commons.NoteTakerCard.prototype._closeOverlay = function() {
    this._destroyTagControls();
    this._oOverlayCard.bEditMode = false;
    this._oOverlayCard.destroyContent();
    this._oOverlayCard.close();
};

sap.suite.ui.commons.NoteTakerCard.prototype._openOverlay = function(bEditMode) {
    var sInitiallyFocusedId;

    if (!this._oOverlayCard.isOpen()) {

        this._oOverlayCard.bThumbUp = this.getThumbUp();
        this._oOverlayCard.bThumbDown = this.getThumbDown();

        this._prepareOverlayLayouts();
        this._prepareOverlayToolbar(bEditMode);
        this._prepareOverlayHeaderBtns(bEditMode);
        this._prepareOverlayBody();
        this._prepareOverlayButtons(bEditMode);

        if (bEditMode) {
            sInitiallyFocusedId = this.getId() + "-overlayBody";
        } else {
            sInitiallyFocusedId = this.getId() + "-overlay-close";
        }

        this._oOverlayCard.open(sInitiallyFocusedId);
        
        jQuery.sap.byId(this.getId() + "-overlay-thumb-down-button").attr("aria-pressed", this.getThumbDown());
        jQuery.sap.byId(this.getId() + "-overlay-thumb-up-button").attr("aria-pressed", this.getThumbUp());
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._getFormattedBody = function() {
    var aBuffer = [];
    var sText = this.getBody();
    do {
        var iPos = sText.search(/[\s<>]/); //search for whitespace character
        var sSpace = "",
            sWord = "";

        if (iPos < 0) {
            // only 1 word
            sWord = sText;
        } else {
            sWord = sText.slice(0, iPos);
            sSpace = sText.slice(iPos, iPos + 1);
            sText = sText.slice(iPos + 1);
        }

        // check for special strings
        switch (true) {
            case (this._isFullUrl(sWord)) :
                this.wrapFullUrl(aBuffer, sWord, sSpace);
                break;

            case (this._isShortUrl(sWord)) :
                this._wrapShortUrl(aBuffer, sWord, sSpace);
                break;

            case (this._isEmail(sWord)) :
                this._wrapEmail(aBuffer, sWord, sSpace);
                break;

            default :
                // regular word
                //rm.writeEscaped(sWord + sSpace, true);
                aBuffer.push(jQuery.sap.encodeHTML(sWord + sSpace));
        }
    } while(iPos >= 0);
    
    return aBuffer.join("");
};

/**
 * Verifies if the given word is a valid URL address starting with HTTP, HTTPS or FTP protocol.
 * The check is case-insensitive.
 * @param sWord - Word to check.
 * @return {Boolean} - true if the word starts with http, https or ftp and is a valid URL.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._isFullUrl = function(sWord) {
    return /^(https?|ftp):\/\//i.test(sWord) && jQuery.sap.validateUrl(sWord);
};

/**
 * Verifies if the given word is a valid URL address starting with WWW.
 * The check is case-insensitive.
 * @param sWord - Word to check.
 * @return {Boolean} - true if the word starts with www and is a valid URL for http request.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._isShortUrl = function (sWord) {
    return /^(www\.)/i.test(sWord) && jQuery.sap.validateUrl("http://" + sWord);
};

/**
 * Verifies if the given word is a valid e-mail address.
 * The check is case-insensitive. E-mail address is valid if contains @-sign, and 2-6 chars long domain extension.
 * @param sWord - Word to check.
 * @return {Boolean} - true if the word is a valid e-mail address.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._isEmail = function (sWord) {
    return /^[\w\.=-]+@[\w\.-]+\.[\w]{2,5}$/.test(sWord);
};

/*
 * Renders full URL (with protocol specified) as clickable link.
 * @param aBuffer - string array.
 * @param sWord - Parsed word to render as URL.
 * @param sSpace - Whitespace character(s) to render after the link.
 */
sap.suite.ui.commons.NoteTakerCard.prototype.wrapFullUrl = function(aBuffer, sWord, sSpace) {
    aBuffer.push('<a class="sapUiLnk" ');
    aBuffer.push('href = ' + '"' + jQuery.sap.encodeHTML(sWord) + '"');
    aBuffer.push(' target = "_blank"');
    aBuffer.push('>');
    aBuffer.push(jQuery.sap.encodeHTML(sWord));
    aBuffer.push('</a>' + sSpace);
};

/*
 * Renders short URL (without protocol specified) as clickable link.
 * @param aBuffer - string array.
 * @param sWord - Parsed word to render as URL.
 * @param sSpace - Whitespace character(s) to render after the link.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._wrapShortUrl = function(aBuffer, sWord, sSpace) {
    aBuffer.push('<a class="sapUiLnk" ');
    aBuffer.push('href = ' + '"' + jQuery.sap.encodeHTML("http://" + sWord) + '"');
    aBuffer.push(' target = "_blank"');
    aBuffer.push('>');
    aBuffer.push(jQuery.sap.encodeHTML(sWord));
    aBuffer.push('</a>' + sSpace);
};

/*
 * Renders Email (with protocol specified) as clickable link.
 * @param aBuffer - string array.
 * @param sWord - Parsed word to render as email address.
 * @param sSpace - Whitespace character(s) to render after the link.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._wrapEmail = function(aBuffer, sWord, sSpace) {
    aBuffer.push('<a class="sapUiLnk" ');
    aBuffer.push('href = "mailto:' + jQuery.sap.encodeHTML(sWord) + '"');
    aBuffer.push('>');
    aBuffer.push(jQuery.sap.encodeHTML(sWord));
    aBuffer.push('</a>' + sSpace);
};

sap.suite.ui.commons.NoteTakerCard.prototype._wrapBodyToDiv = function(sText) {
    return "<div class='sapSuiteUiCommonsNoteTakerCardBody'>" + sText + "</div>";
};

sap.suite.ui.commons.NoteTakerCard.prototype._wrapTagPanelToDiv = function(sText, bEditMode) {
    if(bEditMode) {
        return "<div class='suiteUiNtcOverlayTagPanelEditMode'>" + sText + "</div>";
    }
    else {
        return "<div class='suiteUiNtcOverlayTagPanelViewMode'>" + sText + "</div>";
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleEdit = function() {
    this._openOverlay(true);
};

/*
 * Prepares tag list as HTML code for rendering.
 */
sap.suite.ui.commons.NoteTakerCard.prototype._getFormattedTags = function() {
    var aBuffer = [];
    var aTags;

    if (this._oOverlayCard.isOpen()) {
        aTags = this._oOverlayCard._selectedTags;
    } else {
        aTags = this.getTags();
    }

    aBuffer.push("<div id='" + this.getId() + "-tag-list' class='sapSuiteUiCommonsNoteTakerCardTagList'>");

    if (aTags.length==0) {
        aBuffer.push(this._rb.getText("NOTETAKERCARD_LABEL_TAGS_EMPTY"));
    } else {
        aBuffer.push(this._rb.getText("NOTETAKERCARD_LABEL_TAGS_FULL") + ": ");
        var sTags = jQuery.sap.encodeHTML(aTags.sort().join(" "));
        aBuffer.push("<span title='" + sTags + "'>");
        aBuffer.push(sTags);
        aBuffer.push("</span>");
    }
    aBuffer.push("</div>");
    return aBuffer.join("");
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleDelete = function(bCloseOverlay) {
    var that = this;
    sap.ui.commons.MessageBox.show(
            this._rb.getText("NOTETAKERCARD_CONFIRMATION_DELETE_MESSAGE"),
            sap.ui.commons.MessageBox.Icon.QUESTION,
            this._rb.getText("NOTETAKERCARD_CONFIRMATION_DELETE_TITLE"),
            [sap.ui.commons.MessageBox.Action.YES, sap.ui.commons.MessageBox.Action.NO],
            function(sResult) {
                if (sResult == sap.ui.commons.MessageBox.Action.YES) {
                    if (bCloseOverlay) {
                        that._closeOverlay();
                    }
                    that._handleDeleteClick();
                }
            },
            sap.ui.commons.MessageBox.Action.NO
    );
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleDeleteClick = function() {
    var eData = {};
    eData.uid = this.getUid();
    eData.cardId = this.getId();
    eData.title = this.getHeader();
    eData.timestamp = this.getTimestamp();
    eData.body = this.getBody();
    eData.thumbUp = this.getThumbUp();
    eData.thumbDown = this.getThumbDown();

    this.fireDeleteNote(eData);
};

sap.suite.ui.commons.NoteTakerCard.prototype.setUid = function(sUid) {
    this.setProperty("uid", sUid, true); // no automatic rerendering
};

sap.suite.ui.commons.NoteTakerCard.prototype._wrapThumbToDiv = function(sId) {
	var sClassName = null;
	var sTooltip = null;
	
	if (this.getThumbUp() && !this.getThumbDown()) {
		sClassName = "sapSuiteUiCommonsNoteTakerCardThumbUp";
		sTooltip = this._rb.getText("NOTETAKERCARD_ICON_THUMB_UP_TOOLTIP");
        this._oOverlayCard.removeStyleClass("suiteUiNtcNegativeCard");
        this._oOverlayCard.addStyleClass("suiteUiNtcPositiveCard");
	} else if (!this.getThumbUp() && this.getThumbDown()) {
		sClassName = "sapSuiteUiCommonsNoteTakerCardThumbDown";
		sTooltip = this._rb.getText("NOTETAKERCARD_ICON_THUMB_DOWN_TOOLTIP");
        this._oOverlayCard.removeStyleClass("suiteUiNtcPositiveCard");
        this._oOverlayCard.addStyleClass("suiteUiNtcNegativeCard");
	} else {
        this._oOverlayCard.removeStyleClass("suiteUiNtcPositiveCard");
        this._oOverlayCard.removeStyleClass("suiteUiNtcNegativeCard");
    }
	var aBuffer = [];
	aBuffer.push("<div");
	if (sId) {
		aBuffer.push(" id='");
		aBuffer.push(sId);
		aBuffer.push("'");
	}
	if (sClassName) {
		aBuffer.push(" class='");
		aBuffer.push(sClassName);
		aBuffer.push("'");

		aBuffer.push(" title='");
		aBuffer.push(sTooltip);
		aBuffer.push("'");
	}
	
	aBuffer.push("></div>");
	
	return aBuffer.join("");
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleAddTag = function(sTag) {
    this._oOverlayCard._selectedTags = [];
    var aNewTags = sTag.split(new RegExp("\\s+"));

    var oTemp = {};

    for (var i = 0; i < aNewTags.length; i++) {
        if (aNewTags[i].length != 0) {
            oTemp[aNewTags[i]] = 0;
        }
    }

    for (var field in oTemp) {
        this._oOverlayCard._selectedTags.push(field);
    }

    // Update tag panel with new values
    var oTagPanel = sap.ui.getCore().byId(this.getId() + '-overlayTagPanel');
    oTagPanel.setContent(this._wrapTagPanelToDiv(this._getFormattedTags(), true));
    this._adjustTagButton();
};

sap.suite.ui.commons.NoteTakerCard.prototype._adjustTagButton = function() {
    var oTagButton = this._oOverlayCard._tagControls.tagButton;
    if (this._oOverlayCard._selectedTags.length) {
        oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        oTagButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._toggleTagPopup = function() {
    var aSelectedTags = this._oOverlayCard._selectedTags;

    if (this._bTagPopupOpen) {
    	jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        this._focusDefaultControl();
        this._bTagPopupOpen = false;
    } else {
        this._addTagsToListBox(this.getAllTags());
        jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        jQuery.sap.byId(this.getId() + "-inputTag").val(aSelectedTags.length == 0 ? "" : aSelectedTags.join(" ") + " ");
        this._oOverlayCard._tagControls.tagInput.focus();
        this._bTagPopupOpen = true;
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._focusDefaultControl = function() {
    this._oOverlayCard._tagControls.tagButton.focus();
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleTagInputLive = function(oEvent) {
    var sLiveValue = oEvent.getParameter("liveValue");
    var aNewTags = sLiveValue.split(" ");
    var sCurrentlyEntering = aNewTags[aNewTags.length - 1];
    this._filterListBox(sCurrentlyEntering);
};

sap.suite.ui.commons.NoteTakerCard.prototype._filterListBox = function(sInput) {
    if (sInput.length == 0) {
        this._addTagsToListBox(this.getAllTags());
        return;
    }

    var aFiltered = jQuery.grep(this.getAllTags(), function(a){
        if (a.indexOf(sInput) >= 0) {
            return true;
        }
    });

    this._addTagsToListBox(aFiltered);
};

sap.suite.ui.commons.NoteTakerCard.prototype._addTagsToListBox = function(aTags) {
    var aListItems = jQuery.map(aTags, function(v, i) {
        return new sap.ui.core.ListItem({text: v});
    });

    this._oOverlayCard._tagControls.tagList.setItems(aListItems, true);
    this._oOverlayCard._tagControls.tagList.rerender();
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleListSelect = function(oEvent) {
    var sSelectedTag = oEvent.getParameter("selectedItem").getText();
    var oTagInput = this._oOverlayCard._tagControls.tagInput;
    var sTemp = oTagInput.getValue();
    var aNewTags = sTemp.split(" ");

    aNewTags.pop();

    if(aNewTags.length == 0) {
        oTagInput.setValue(sSelectedTag + " ");
    } else {
        oTagInput.setValue(aNewTags.join(" ") + " " + sSelectedTag + " ");
    }

    this._oOverlayCard._tagControls.tagList.setSelectedIndex(-1);
    oTagInput.focus();
};

sap.suite.ui.commons.NoteTakerCard.prototype._destroyTagControls = function() {
    var tagControls = this._oOverlayCard._tagControls;
    for (var controlName in tagControls) {
        tagControls[controlName].destroy();
    }
    this._oOverlayCard._tagControls = {};
};

sap.suite.ui.commons.NoteTakerCard.prototype._createTagSelectorControl = function() {

    var oTagControls = this._oOverlayCard._tagControls;

    var oTagSelectorLayout = new sap.ui.commons.layout.VerticalLayout({
        id: this.getId() + "-selectTag-panel"
    });
    oTagSelectorLayout.addStyleClass("sapSuiteUiCommonsNoteTakerFeederSelectTagPanel");
    oTagSelectorLayout.addStyleClass("sapUiShd");
    oTagControls.tagSelectorLayout = oTagSelectorLayout;

    // Arrow
    oTagSelectorLayout.addContent(new sap.ui.core.HTML({
        content: ["<div id='", this.getId(), "-selectTag-arrow' class='sapSuiteUiCommonsNoteTakerFeederSelectTagArrow' ></div>"].join("")
    }));

    // Title
    oTagSelectorLayout.addContent(new sap.ui.core.HTML({
        content: ["<div id='", this.getId(), "-selectTag-header' class='sapSuiteUiCommonsNoteTakerFeederSelectTagHeader' >",
                    this._rb.getText("NOTETAKERFEEDER_TOOLPOPUP_TITLE"),
                  "</div>"].join("")
    }));

    oTagSelectorLayout.addContent(oTagControls.tagInput);
    oTagSelectorLayout.addContent(oTagControls.tagList);

    //Buttons
    var oTagSelectorButtonsLayout = new sap.ui.commons.layout.HorizontalLayout();
    oTagSelectorButtonsLayout.addStyleClass("sapSuiteUiCommonsNoteTakerFeederSelectTagButtons");
    oTagSelectorButtonsLayout.addContent(oTagControls.tagApplyBtn);
    oTagSelectorButtonsLayout.addContent(oTagControls.tagCancelBtn);
    oTagSelectorLayout.addContent(oTagSelectorButtonsLayout);

    return oTagSelectorLayout;
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareAttachmentPanel = function(bIsInOverlay) {
    var sIdPrefix = bIsInOverlay ? "-overlay" : "";
    var sCssPrefix = bIsInOverlay ? "Overlay" : "";

    var sId = [this.getId(), sIdPrefix, "-attachmentPanel"].join("");
    var oCurrentControl = sap.ui.getCore().byId(sId);
    if (oCurrentControl) {
        oCurrentControl.destroy();
    }

    var oAttachmentLayout = new sap.ui.commons.layout.HorizontalLayout(sId);
    oAttachmentLayout.addStyleClass(["suiteUiNtc", sCssPrefix, "AttachmentPanel"].join(""));
    oAttachmentLayout.addContent( new sap.ui.core.HTML({content: "<div class='suiteUiNtcAttachmentIcon'></div>"}) );
    var oAttachmentLink = new sap.ui.commons.Link({
        id: [this.getId(), sIdPrefix, "-attachmentLink"].join(""),
        text: this.getAttachmentFilename(),
        tooltip: this._rb.getText("NOTETAKERCARD_LINK_ATTACHMENT_TOOLTIP"),
        press: this._handleAttachmentDownload,
        href: this.getAttachmentUrl()
    });
    oAttachmentLink._ntc = this;
    oAttachmentLayout.addContent( oAttachmentLink );
    return oAttachmentLayout;
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayLayouts = function() {

    var oTopSectionLayout = new sap.ui.commons.layout.VerticalLayout();
    
    // Header&Timestamp (left side)
    var oHeaderLeftSideLayout = new sap.ui.commons.layout.VerticalLayout();
    oHeaderLeftSideLayout.addStyleClass("sapSuiteUiCommonsNtcOverlayTitle");
    
    // Edit&Delete buttons (right side)
    var oHeaderRightSideLayout = new sap.ui.commons.layout.HorizontalLayout();
    oHeaderRightSideLayout.addStyleClass("sapSuiteUiCommonsNtcHeaderButtons");

	// Title, timestamp and Edit&Delete buttons
    var oHeaderLayout = new sap.ui.commons.layout.HorizontalLayout(this.getId() + '-overlayHeader', {
    	content:[oHeaderLeftSideLayout, oHeaderRightSideLayout]
    });
    oHeaderLayout.addStyleClass("sapSuiteUiCommonsNtcOverlayHeader");
    oTopSectionLayout.addContent(oHeaderLayout);

    // Toolbar
    var oToolbarLayout = new sap.ui.commons.layout.HorizontalLayout(this.getId() + '-overlayToolbar');
    oToolbarLayout.addStyleClass("suiteUiNtcToolbar");

    // Left side section
    var oToolbarLeftSideLayout = new sap.ui.commons.layout.HorizontalLayout();
    oToolbarLeftSideLayout.addStyleClass("suiteUiNtcOverlayToolbarLeftPanel");

    // Thumbs section of the toolbar
    var oToolbarRightSideLayout = new sap.ui.commons.layout.HorizontalLayout();
    oToolbarRightSideLayout.addStyleClass("suiteUiNtcOverlayToolbarRightPanel");

    // Construct toolbar
    oToolbarLayout.addContent(oToolbarLeftSideLayout);
    oToolbarLayout.addContent(oToolbarRightSideLayout);
    oTopSectionLayout.addContent(oToolbarLayout);
    this._oOverlayCard.addContent(oTopSectionLayout);

    // Body section
    var oBodySectionVerticalLayout = new sap.ui.commons.layout.VerticalLayout();
    oBodySectionVerticalLayout.addStyleClass("sapSuiteUiCommonsNoteTakerCardContent");
    
    // Buttons section
    var oButtonsHorizontalLayout = new sap.ui.commons.layout.HorizontalLayout(this.getId() + "-buttons");
    oButtonsHorizontalLayout.addStyleClass("sapSuiteUiCommonsNoteTakerCardOverlayButtonPanel");

    this._oOverlayCard.layouts = {
        topSection: oTopSectionLayout,
        headerLeft: oHeaderLeftSideLayout,
        headerRight: oHeaderRightSideLayout,
        toolbar: oToolbarLayout,
        toolbarLeft: oToolbarLeftSideLayout,
        toolbarRight: oToolbarRightSideLayout,
        body: oBodySectionVerticalLayout,
        buttons: oButtonsHorizontalLayout
    };
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayHeaderBtns = function(bEditMode) {
    var that = this;

    // Edit button
    var oEditButton = new sap.ui.commons.Button(this.getId() + "-editButton", {
    	tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_EDIT_TOOLTIP"),
        press : function() {
            that._fnEdit();
        }
    });
    that._oOverlayCard.layouts.headerRight.addContent(oEditButton, 0);
    if (bEditMode) {
    	oEditButton.setEnabled(false);
        oEditButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButtonDsbl");
    }
    else {
    	oEditButton.setEnabled(true);
        oEditButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");
    }
    
    // Delete button
    var oDeleteButton = new sap.ui.commons.Button(this.getId() + "-deleteButton", {
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_DELETE_TOOLTIP"),
        press : function() {
            that._handleDelete(true);
        }
    });
    oDeleteButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardDeleteButton");
    that._oOverlayCard.layouts.headerRight.addContent(oDeleteButton, 1);
    
    // Timestamp
    var oTimeStamp = new sap.ui.commons.Label(this.getId() + "-overlayTimestamp", {
		text : that.getFormattedTimestamp()
		});
	oTimeStamp.addStyleClass("sapSuiteUiCommonsNoteTakerCardTimestamp");
	that._oOverlayCard.layouts.headerLeft.addContent(oTimeStamp, 1);
};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayToolbar = function(bEditMode) {

    // Create tag list
    this._oOverlayCard._selectedTags = this.getTags();

    // Attachment panel
    if (this.getAttachmentFilename()!=="") {
        var oAttachmentPanel = this._prepareAttachmentPanel(true);
        this._oOverlayCard.layouts.topSection.addContent(oAttachmentPanel);

        this._oOverlayCard.layouts.body.addStyleClass("suiteUiNtcOverlayWithAttachment");
    } else {
        this._oOverlayCard.layouts.body.addStyleClass("suiteUiNtcOverlayWithoutAttachment");
    }
};


sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayBody = function() {
    this._oOverlayCard.addContent(this._oOverlayCard.layouts.body);

};

sap.suite.ui.commons.NoteTakerCard.prototype._prepareOverlayButtons = function(bEditMode) {
    var that = this;

    // Close button
    var oCloseButton = new sap.ui.commons.Button(this.getId() + "-closeButton", {
        text : this._rb.getText("NOTETAKERCARD_BUTTON_CLOSE_OVERLAY"),
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_CLOSE_OVERLAY_TOOLTIP"),
        press : function() {
        	that._handleOverlayCloseEvent(that._oOverlayCard);
        }
    });
    oCloseButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardOverlayButtonClose");

    // Save button
    var oSaveButton = new sap.ui.commons.Button(this.getId() + "-saveButton", {
        text : this._rb.getText("NOTETAKERCARD_BUTTON_SAVE_TEXT"),
        tooltip : this._rb.getText("NOTETAKERCARD_BUTTON_SAVE_TOOLTIP"),
        press : function() {
          that._fnSave();
        }
    });
    oSaveButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardOverlayButtonSave");
    that._oOverlayCard.layouts.buttons.addContent(oCloseButton, 0);
    that._oOverlayCard.layouts.buttons.addContent(oSaveButton, 1);

    if (bEditMode) {
    	oSaveButton.setEnabled(true);
        this._fnCreateInEditMode();
    }
    else {
    	oSaveButton.setEnabled(false);
        this._fnCreateInViewMode();
    }

    this._oOverlayCard.addContent(this._oOverlayCard.layouts.buttons);
};

// Adds components for the View mode of the overlay
sap.suite.ui.commons.NoteTakerCard.prototype._fnCreateInViewMode = function() {
    var that = this;
    that._oOverlayCard.bEditMode = false;

    //Title viewer section
    var oCardLabel = new sap.ui.commons.Label(that.getId() + "-overlayCardHeader", {
        text : that.getHeader()
    });
    oCardLabel.addStyleClass("sapSuiteUiCommonsNoteTakerCardTitle");
    that._oOverlayCard.layouts.headerLeft.insertContent(oCardLabel, 0);

    // Tag viewer section of the toolbar
    var oTagPanel = new sap.ui.core.HTML(that.getId() + '-overlayTagPanel');
    oTagPanel.setContent(that._wrapTagPanelToDiv(that._getFormattedTags(), that._oOverlayCard.bEditMode));

    that._oOverlayCard.layouts.toolbarLeft.addContent(oTagPanel);

    // Display thumb if any
    var oThumb = new sap.ui.core.HTML({
        id: that.getId() + "-overlay-thumb",
        content: that._wrapThumbToDiv()
    });
    that._oOverlayCard.layouts.toolbarRight.addContent(oThumb);

    // Display body
    var oCardBody = new sap.ui.core.HTML(that.getId() + "-overlayBody");
    oCardBody.setContent(that._wrapBodyToDiv(that._getFormattedBody()));
    oCardBody.addStyleClass("sapSuiteUiCommonsNoteTakerCardBody");
    that._oOverlayCard.layouts.body.addContent(oCardBody);

    // Display Save button in the correct state
    var oSaveButton = that._oOverlayCard.layouts.buttons.getContent()[1];
    oSaveButton.setEnabled(false);
    // Display Edit button in the correct state
    var oEditBtn = that._oOverlayCard.layouts.headerRight.getContent()[0];
    oEditBtn.setEnabled(true);
    oEditBtn.removeStyleClass("sapSuiteUiCommonsNoteTakerCardEditButtonDsbl");
    oEditBtn.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");
};

// Adds components for the Edit mode of the overlay
sap.suite.ui.commons.NoteTakerCard.prototype._fnCreateInEditMode = function() {
    var that = this;
    that._oOverlayCard.bEditMode = true;

    // Display editable title
	var oCardTitleField = new sap.ui.commons.TextField(that.getId() + "-overlayCardTitle", {
		maxLength : 50
	});
	oCardTitleField.setValue(that.getHeader());
	oCardTitleField.addStyleClass("sapSuiteUiCommonsNoteTakerCardTitle");
	var oTitleEdit = new sap.ui.commons.InPlaceEdit(that.getId() + "-overlayCardTitleEdit", {
		content: oCardTitleField,
		tooltip: that._rb.getText("NOTETAKERCARD_EDITFIELD_TITLE_TOOLTIP"),
		design: sap.ui.commons.TextViewDesign.H2,
		undoEnabled: false
	});
	oTitleEdit.addStyleClass("sapSuiteUiCommonsNtcdTitleEdit");
    that._oOverlayCard.layouts.headerLeft.insertContent(oTitleEdit, 0);

    // Tag viewer section of the toolbar
    var oTagPanel = new sap.ui.core.HTML(that.getId() + '-overlayTagPanel');
    oTagPanel.setContent(that._wrapTagPanelToDiv(that._getFormattedTags(), that._oOverlayCard.bEditMode));

    that._oOverlayCard.layouts.toolbarLeft.addContent(oTagPanel);

    // Create tag selector button
    var oTagButton = new sap.ui.commons.Button({
        id: that.getId() + "-tag-button",
        tooltip: that._rb.getText("NOTETAKERCARD_BUTTON_TAG_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederTagButton");

    var oTagList = new sap.ui.commons.ListBox({
        id: that.getId() + "-tagListBox",
        visibleItems: 10,
        width: "100%",
        height: "194px",
        select: function(oEvent) {
            that._handleListSelect(oEvent);
        }
    });

    var oTagInput = new sap.ui.commons.TextField({
        id: that.getId() + "-inputTag",
        liveChange: function(oEvent) {
            that._handleTagInputLive(oEvent);
        }
    });
    oTagInput.onsapdown = function(oEvent) {
        oEvent.preventDefault();
        oEvent.stopPropagation();
        jQuery("#" + that.getId() + "-tagListBox li:eq(0)").focus();
    };

    var oCancelTagButton = new sap.ui.commons.Button({
        id: that.getId() + "-cancel-tags-button",
        text: that._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS"),
        tooltip: that._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    oCancelTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederCancelTagButton");

    var oAddTagButton = new sap.ui.commons.Button({
        id: that.getId() + "-add-tags-button",
        text: that._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS"),
        tooltip: that._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS_TOOLTIP"),
        press: function() {
            that._handleAddTag(oTagInput.getValue());
            oTagButton.rerender();
            that._toggleTagPopup();
        }
    });

    // Store tag controls
    that._oOverlayCard._tagControls = {
        tagButton: oTagButton,
        tagList: oTagList,
        tagInput: oTagInput,
        tagCancelBtn: oCancelTagButton,
        tagApplyBtn: oAddTagButton
    };

    that._oOverlayCard.addContent(that._createTagSelectorControl());

    // Create thumb up button
    var oThumbUpButton = new sap.ui.commons.Button({
        id: that.getId() + "-overlay-thumb-up-button",
        press: function(e){
            that._oOverlayCard.bThumbUp = !that._oOverlayCard.bThumbUp;
            if (that._oOverlayCard.bThumbUp) {
                that._oOverlayCard.bThumbDown = false;
            }

            fnSetThumbsView();
        },
        tooltip : that._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_UP_TOOLTIP")
    });
    oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerThumbUpBtn");

    // Create thumb down button
    var oThumbDownButton = new sap.ui.commons.Button({
        id: that.getId() + "-overlay-thumb-down-button",
        press: function(e){
            that._oOverlayCard.bThumbDown = !that._oOverlayCard.bThumbDown;
            if (that._oOverlayCard.bThumbDown) {
                that._oOverlayCard.bThumbUp = false;
            }

            fnSetThumbsView();
        },
        tooltip : that._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_DOWN_TOOLTIP")
    });
    oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerThumbDownBtn");

    // Thumb buttons adjustment
    var fnSetThumbsView = function() {
        if (that._oOverlayCard.bThumbUp) {
            oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.addStyleClass("suiteUiNtcPositiveCard");
        } else {
            oThumbUpButton.removeStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.removeStyleClass("suiteUiNtcPositiveCard");
        }

        if (that._oOverlayCard.bThumbDown) {
            oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.addStyleClass("suiteUiNtcNegativeCard");
        } else {
            oThumbDownButton.removeStyleClass("sapSuiteUiCommonsNoteTakerCardSelectedBtn");
            that._oOverlayCard.removeStyleClass("suiteUiNtcNegativeCard");
        }
        
        jQuery.sap.byId(oThumbUpButton.getId()).attr("aria-pressed", that._oOverlayCard.bThumbUp);
        jQuery.sap.byId(oThumbDownButton.getId()).attr("aria-pressed", that._oOverlayCard.bThumbDown);
    };

    fnSetThumbsView();

    // Adding toolbar elements
    that._oOverlayCard.layouts.toolbarLeft.insertContent(oTagButton, 0);
    that._oOverlayCard.layouts.toolbarRight.addContent(oThumbUpButton);
    that._oOverlayCard.layouts.toolbarRight.addContent(oThumbDownButton);

    // Display editable body
    var oSaveButton = that._oOverlayCard.layouts.buttons.getContent()[1];
    oSaveButton.setEnabled(true);
    var oCardBody = new sap.ui.commons.TextArea(that.getId() + "-overlayBody" ,{
        liveChange : function(e) {
            var sEnteredText = e.getParameter("liveValue");
            var bEnabled = (sEnteredText != null) && !/^\s*$/.test(sEnteredText);

            if (bEnabled !== oSaveButton.getEnabled()) {
                oSaveButton.setEnabled(bEnabled);
            }
        }
    });
    oCardBody.setValue(that.getBody());
    oCardBody.addStyleClass("sapSuiteUiCommonsNoteTakerCardBody");
    that._oOverlayCard.layouts.body.addContent(oCardBody);

    // Display Edit button in the correct state
    var oEditBtn = that._oOverlayCard.layouts.headerRight.getContent()[0];
    oEditBtn.setEnabled(false);
    oEditBtn.removeStyleClass("sapSuiteUiCommonsNoteTakerCardEditButton");
    oEditBtn.addStyleClass("sapSuiteUiCommonsNoteTakerCardEditButtonDsbl");
    
};

sap.suite.ui.commons.NoteTakerCard.prototype._fnSave = function() {
    var that = this;
    //._ntc;
    var oTitleEdit = that._oOverlayCard.layouts.headerLeft.getContent()[0];
    var oCardTitleField = oTitleEdit.getContent();
    var oCardBody = that._oOverlayCard.layouts.body.getContent()[0];

    if (oCardBody.getValue()) {
    	that.setHeader(oCardTitleField.getValue());
        that.setBody(oCardBody.getValue());
        that.setTimestamp(new Date());

        that.setThumbUp(that._oOverlayCard.bThumbUp);
        that.setThumbDown(that._oOverlayCard.bThumbDown);
        that.setTags(that._oOverlayCard._selectedTags);

        var eData = {};
        eData.uid = that.getUid();
        eData.title = that.getHeader();
        eData.body = that.getBody();
        eData.timestamp = that.getTimestamp();
        eData.thumbUp = that.getThumbUp();
        eData.thumbDown = that.getThumbDown();
        eData.tags = that.getTags();
        that.fireEditNote(eData);

        that._oOverlayCard.layouts.headerLeft.removeContent(oTitleEdit);
        oTitleEdit.destroy();
        oCardTitleField.destroy();
        that._oOverlayCard.layouts.body.removeContent(oCardBody);
        oCardBody.destroy();

        that._destroyTagControls();
        that._oOverlayCard.layouts.toolbarLeft.destroyContent();
        that._oOverlayCard.layouts.toolbarRight.destroyContent();

        that._fnCreateInViewMode();

        jQuery.sap.byId(that.getId() + "-overlayTimestamp").html(that.getFormattedTimestamp());
        jQuery.sap.byId(that.getId() + "-overlay-close").focus();
    } else {
        //TODO oEditSaveButton.setEnabled(false);
    }
};

sap.suite.ui.commons.NoteTakerCard.prototype._fnEdit = function() {
    var that = this;
    var oCardLabel = that._oOverlayCard.layouts.headerLeft.getContent()[0];
    var oCardBody = that._oOverlayCard.layouts.body.getContent()[0];

    that._oOverlayCard.layouts.topSection.removeContent(oCardLabel);
    oCardLabel.destroy();
    that._oOverlayCard.layouts.body.removeContent(oCardBody);
    oCardBody.destroy();
    that._oOverlayCard.layouts.toolbarLeft.destroyContent();
    that._oOverlayCard.layouts.toolbarRight.destroyContent();

    that._fnCreateInEditMode();

    that._oOverlayCard.layouts.topSection.rerender();
    //set focus to text area. render it first
    that._oOverlayCard.layouts.body.rerender();
    jQuery.sap.focus(jQuery.sap.domById(that.getId() + "-overlayBody"));
};

sap.suite.ui.commons.NoteTakerCard.prototype._handleAttachmentDownload = function() {
    var that = this._ntc;

    var eData = {};
    eData.uid = that.getUid();
    eData.url = that.getAttachmentUrl();
    eData.filename = that.getAttachmentFilename();
    
    that.fireAttachmentClick(eData);
};

}; // end of sap.suite.ui.commons.NoteTakerCard
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerCardRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerCardRenderer");



/**
 * @class NoteTakerCard renderer.
 * @static
 */
sap.suite.ui.commons.NoteTakerCardRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.suite.ui.commons.NoteTakerCardRenderer.render = function(rm, oControl){

    // write the HTML into the render manager
    var sFullHeader = oControl.getHeader();
    var sTruncatedHeader = this.getTruncatedHeader(sFullHeader);
    var bShowViewAllLink = oControl.getBody().length > oControl.getViewAllTrigger();
    var bShowAttachment = oControl.getAttachmentFilename() !== "";
    var rh = new sap.suite.ui.commons.util.RenderingHelper(rm);

    // main DIV element
    rm.write("<div");
    rm.writeControlData(oControl);
    rm.addClass("sapSuiteUiCommonsNoteTakerCard");
    if (oControl.getThumbUp()) {
        rm.addClass("suiteUiNtcPositiveCard");
    }
    if (oControl.getThumbDown()) {
        rm.addClass("suiteUiNtcNegativeCard");
    }
    rm.writeClasses();
    rm.writeAttribute("tabindex", "0");
    rm.writeAccessibilityState(oControl, {
		role : 'region',
		labelledby : [oControl.getId() + "-headerLabel", oControl.getId() + "-timestamp",
		              oControl.getId() + "-toolbar", oControl.getId() + "-body"].join(" ")
	});
    rm.write(">");

        // header DIV element
//      rm.write("<div");
//      rm.writeAttribute("id", oControl.getId() + "-header");
//      rm.addClass("sapSuiteUiCommonsNoteTakerCardHeader");
//      rm.writeClasses();
//      rm.write(">");
        rh.writeOpeningTag('div', {
            attributes: {id: oControl.getId() + "-header"},
            classes: ['sapSuiteUiCommonsNoteTakerCardHeader']
        });
//	        rm.write("<div");
//	        rm.writeAttribute("id", oControl.getId() + "-header-buttons");
//          rm.addClass("sapSuiteUiCommonsNoteTakerCardHeaderButtons");
//          rm.writeClasses();
//	        rm.write(">");
            rh.writeOpeningTag('div', {
                attributes: {id: oControl.getId() + "-header-buttons"},
                classes: ['sapSuiteUiCommonsNoteTakerCardHeaderButtons']
            });
            	rm.renderControl(oControl._oEditButton);
	            rm.renderControl(oControl._oDeleteButton);
	        rh.writeClosingTag('div');
	        //rm.write("</div>");

            if (!sFullHeader) {
                rm.write("&nbsp;");
            } else {
                rm.write("<label");
                rm.writeAttribute("id", oControl.getId() + "-headerLabel");
                if (sFullHeader !== sTruncatedHeader) {
                    rm.writeAttributeEscaped("title", sFullHeader);
                }
                rm.write(">");
                    rm.writeEscaped(sTruncatedHeader);
                rm.write("</label>");
            }

            // timestamp DIV element
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-timestamp");
            rm.addClass("sapSuiteUiCommonsNoteTakerCardTimestamp");
            rm.writeClasses();
            rm.write(">");
                rm.writeEscaped(oControl.getFormattedTimestamp());
            rm.write("</div>");
        rm.write("</div>");

        //body container DIV
        rm.write("<div");
        rm.addClass("sapSuiteUiCommonsNoteTakerCardBodyContent");
        rm.writeClasses();
        rm.write(">");

            //tag panel DIV
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-toolbar");
            rm.addClass("suiteUiNtcToolbar");
            rm.writeClasses();
            rm.write(">");
                this.renderToolbar(rm, oControl);
            rm.write("</div>");

            //attachment bar DIV
            if (bShowAttachment) {
                rm.renderControl(oControl._prepareAttachmentPanel(false));
            }

            // body DIV element
            rm.write("<div");
            rm.writeAttribute("id", oControl.getId() + "-body");
            rm.addClass("sapSuiteUiCommonsNoteTakerCardBody");
            if (bShowAttachment && bShowViewAllLink) {
                rm.addClass("sapSuiteUiCommonsNtcBodyViewAllAttach");
            } else if (bShowViewAllLink) {
                rm.addClass("sapSuiteUiCommonsNtcBodyViewAll");
            } else if (bShowAttachment) {
                rm.addClass("sapSuiteUiCommonsNtcBodyAttach");
            }
            rm.writeClasses();
            rm.write(">");
                rm.write(oControl._getFormattedBody());
            rm.write("</div>");

            // view all DIV element
            if (bShowViewAllLink) {
                rm.write("<div");
                rm.writeAttribute("id", oControl.getId() + "-viewAll");
                rm.addClass("sapSuiteUiCommonsNoteTakerCardViewAll");
                rm.writeClasses();
                rm.write(">&nbsp;");
                    oControl._oViewAllLink.addStyleClass("sapSuiteUiCommonsNoteTakerCardViewAllLink");
                    rm.renderControl(oControl._oViewAllLink);
                rm.write("</div>");
            }

        rm.write("</div>"); // body container div

    rm.write("</div>"); // card div
};

/*
 * Returns truncated version of the header if it exceeds iLength
 */
sap.suite.ui.commons.NoteTakerCardRenderer.getTruncatedHeader = function(sFullHeader) {
    var iLength = 20;
    var sTerminator = "...";
    if (sFullHeader && sFullHeader.length > iLength) {
        return sFullHeader.substr(0, iLength - sTerminator.length) + sTerminator;
    } else {
        return sFullHeader;
    }
};

sap.suite.ui.commons.NoteTakerCardRenderer.renderToolbar = function(rm, oControl) {
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-left-toolbar");
    rm.addClass("sapSuiteUiCommonsNoteTakerCardLeftPanel");
    if(oControl.getThumbUp() || oControl.getThumbDown()) {
        rm.addClass("sapSuiteUiCommonsNoteTakerCardWithThumbs"); 
    } else {
        rm.addClass("sapSuiteUiCommonsNoteTakerCardNoThumbs");
    }
    rm.writeClasses();
    rm.write(">");
    rm.write(oControl._getFormattedTags());
    rm.write("</div>");
    
    rm.write("<div");
    rm.writeAttribute("id", oControl.getId() + "-right-toolbar");
    rm.addClass("sapSuiteUiCommonsNoteTakerCardRightPanel");
    rm.writeClasses();
    rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-thumb");
        
        var thumbTooltip = "";
        if(oControl.getThumbUp() && !oControl.getThumbDown()) {
            rm.writeAttribute("class", "sapSuiteUiCommonsNoteTakerCardThumbUp");
            thumbTooltip = oControl._rb.getText("NOTETAKERCARD_ICON_THUMB_UP_TOOLTIP");
            rm.writeAttribute("title", thumbTooltip);
        } else if(!oControl.getThumbUp() && oControl.getThumbDown()) {
            rm.writeAttribute("class", "sapSuiteUiCommonsNoteTakerCardThumbDown");
            thumbTooltip = oControl._rb.getText("NOTETAKERCARD_ICON_THUMB_DOWN_TOOLTIP");
            rm.writeAttribute("title", thumbTooltip);
        }
        rm.write(">");
        
        //ARIA info
        rm.write("<span");
        rm.writeAttribute("style", "visibility: hidden; display: none;");
        rm.write(">");
        rm.writeEscaped(thumbTooltip);
        rm.write("</span>");
        
        rm.write("</div>");
    rm.write("</div>");
};
}; // end of sap.suite.ui.commons.NoteTakerCardRenderer
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.NoteTakerFeeder') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.NoteTakerFeeder.
jQuery.sap.declare("sap.suite.ui.commons.NoteTakerFeeder");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new NoteTakerFeeder.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBody body} : string</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getTags tags} : object (default: [])</li>
 * <li>{@link #getThumbUp thumbUp} : boolean</li>
 * <li>{@link #getThumbDown thumbDown} : boolean</li>
 * <li>{@link #getAttachmentUploadUrl attachmentUploadUrl} : string</li>
 * <li>{@link #getAttachmentName attachmentName} : string (default: 'attachment')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:addNote addNote} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentSelect attachmentSelect} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentUploadComplete attachmentUploadComplete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentDelete attachmentDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.suite.ui.commons.NoteTakerFeeder#event:attachmentClick attachmentClick} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * This control allows you to enter a quick note and N note cards.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.NoteTakerFeeder", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"body" : {type : "string", group : "Data", defaultValue : null},
		"title" : {type : "string", group : "Data", defaultValue : null},
		"tags" : {type : "object", group : "Misc", defaultValue : []},
		"thumbUp" : {type : "boolean", group : "Misc", defaultValue : null},
		"thumbDown" : {type : "boolean", group : "Misc", defaultValue : null},
		"attachmentUploadUrl" : {type : "string", group : "Misc", defaultValue : null},
		"attachmentName" : {type : "string", group : "Misc", defaultValue : 'attachment'}
	},
	events : {
		"addNote" : {}, 
		"attachmentSelect" : {}, 
		"attachmentUploadComplete" : {}, 
		"attachmentDelete" : {}, 
		"attachmentClick" : {}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.NoteTakerFeeder with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.NoteTakerFeeder.extend
 * @function
 */

sap.suite.ui.commons.NoteTakerFeeder.M_EVENTS = {'addNote':'addNote','attachmentSelect':'attachmentSelect','attachmentUploadComplete':'attachmentUploadComplete','attachmentDelete':'attachmentDelete','attachmentClick':'attachmentClick'};


/**
 * Getter for property <code>body</code>.
 * The text inside the note card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>body</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getBody
 * @function
 */

/**
 * Setter for property <code>body</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sBody  new value for property <code>body</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setBody
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * This text is the header of a new note.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setTitle
 * @function
 */


/**
 * Getter for property <code>tags</code>.
 * The list of tags selected for addition to a new note card.
 *
 * Default value is <code>[]</code>
 *
 * @return {object} the value of property <code>tags</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getTags
 * @function
 */

/**
 * Setter for property <code>tags</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {object} oTags  new value for property <code>tags</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setTags
 * @function
 */


/**
 * Getter for property <code>thumbUp</code>.
 * Sets positive indication for a new note.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbUp</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getThumbUp
 * @function
 */

/**
 * Setter for property <code>thumbUp</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbUp  new value for property <code>thumbUp</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setThumbUp
 * @function
 */


/**
 * Getter for property <code>thumbDown</code>.
 * Sets negative indication for a new note.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>thumbDown</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getThumbDown
 * @function
 */

/**
 * Setter for property <code>thumbDown</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bThumbDown  new value for property <code>thumbDown</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setThumbDown
 * @function
 */


/**
 * Getter for property <code>attachmentUploadUrl</code>.
 * Sets the upload attachment URL for a new card.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>attachmentUploadUrl</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getAttachmentUploadUrl
 * @function
 */

/**
 * Setter for property <code>attachmentUploadUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAttachmentUploadUrl  new value for property <code>attachmentUploadUrl</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setAttachmentUploadUrl
 * @function
 */


/**
 * Getter for property <code>attachmentName</code>.
 * The attachment property name for identification on the server side after sending data to the server.
 *
 * Default value is <code>attachment</code>
 *
 * @return {string} the value of property <code>attachmentName</code>
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#getAttachmentName
 * @function
 */

/**
 * Setter for property <code>attachmentName</code>.
 *
 * Default value is <code>attachment</code> 
 *
 * @param {string} sAttachmentName  new value for property <code>attachmentName</code>
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#setAttachmentName
 * @function
 */


/**
 * The event is fired when a user chooses the Add button in the control. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#addNote
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.title The title of the note to be added.
 * @param {string} oControlEvent.getParameters.body The text of the note to be added.
 * @param {object} oControlEvent.getParameters.timestamp The timestamp of the note to be added.
 * @param {boolean} oControlEvent.getParameters.thumbUp If set to true, a new card should be marked as positive one.
 * @param {boolean} oControlEvent.getParameters.thumbDown If set to true, a new card should be marked as negative one.
 * @param {string} oControlEvent.getParameters.attachmentFilename Stores the attachment file name for a new card.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'addNote' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when a user chooses the Add button in the control. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAddNote
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'addNote' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAddNote
 * @function
 */

/**
 * Fire event addNote to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'title' of type <code>string</code> The title of the note to be added.</li>
 * <li>'body' of type <code>string</code> The text of the note to be added.</li>
 * <li>'timestamp' of type <code>object</code> The timestamp of the note to be added.</li>
 * <li>'thumbUp' of type <code>boolean</code> If set to true, a new card should be marked as positive one.</li>
 * <li>'thumbDown' of type <code>boolean</code> If set to true, a new card should be marked as negative one.</li>
 * <li>'attachmentFilename' of type <code>string</code> Stores the attachment file name for a new card.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAddNote
 * @function
 */


/**
 * The event is fired when the value of attached file has been changed. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentSelect
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when the value of attached file has been changed. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentSelect
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentSelect' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentSelect
 * @function
 */

/**
 * Fire event attachmentSelect to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentSelect
 * @function
 */


/**
 * The event is fired when the upload of the file is completed. However this covers only the client side of the Upload process and does not give any success status from the server. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentUploadComplete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.response The response message that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when the upload of the file is completed. However this covers only the client side of the Upload process and does not give any success status from the server. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentUploadComplete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentUploadComplete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentUploadComplete
 * @function
 */

/**
 * Fire event attachmentUploadComplete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'response' of type <code>string</code> The response message that comes from the server. On the server side this response has to be put within the "body" tags of the response document of the iFrame. It can consist of a return code and an optional message. This does not work in cross-domain scenarios.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentUploadComplete
 * @function
 */


/**
 * The event is fired when a user presses the Delete button in the Feeder card. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when a user presses the Delete button in the Feeder card. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentDelete' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentDelete
 * @function
 */

/**
 * Fire event attachmentDelete to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentDelete
 * @function
 */


/**
 * The event is fired when a user presses the attachment link. 
 *
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachmentClick
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters

 * @param {string} oControlEvent.getParameters.filename A name of the attached file.
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself. 
 *  
 * The event is fired when a user presses the attachment link. 
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener=this] Context object to call the event handler with. Defaults to this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/> itself.
 *
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#attachAttachmentClick
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'attachmentClick' event of this <code>sap.suite.ui.commons.NoteTakerFeeder</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.NoteTakerFeeder#detachAttachmentClick
 * @function
 */

/**
 * Fire event attachmentClick to attached listeners.
 * 
 * Expects following event parameters:
 * <ul>
 * <li>'filename' of type <code>string</code> A name of the attached file.</li>
 * </ul>
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.suite.ui.commons.NoteTakerFeeder} <code>this</code> to allow method chaining
 * @protected
 * @name sap.suite.ui.commons.NoteTakerFeeder#fireAttachmentClick
 * @function
 */


// Start of sap/suite/ui/commons/NoteTakerFeeder.js
jQuery.sap.require('sap.ui.ux3.ToolPopup'); // unlisted dependency retained

///**
// * This file defines behavior for the control,
// */

sap.suite.ui.commons.NoteTakerFeeder.prototype.init = function() {
    this._rb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
    this._selectedTags = [];
    this._bTagPopupOpen = false;
    var that = this;

    this._oAddButton = new sap.ui.commons.Button({
        id: this.getId() + "-add-button",
        text: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TEXT"),
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TOOLTIP"),
        press: function() {
            that._handleAdd();
        }
    });
    this._oAddButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederHeaderAddButton");

    this._oTagList = new sap.ui.commons.ListBox({
        id: this.getId() + "-tagListBox",
        visibleItems: 10,
        width: "100%",
        height: "194px",
        select: function(oEvent) {
            that._handleListSelect(oEvent);
        }
    });

    this._oTagInput = new sap.ui.commons.TextField({
        id: this.getId() + "-inputTag",
        liveChange: function(oEvent) {
            that._handleTagInputLive(oEvent);
        }
    });

    this._oTagInput.onsapdown = function(oEvent) {
        oEvent.preventDefault();
        oEvent.stopPropagation();
        jQuery("#" + that.getId() + "-tagListBox li:eq(0)").focus();
    };

    this._oCancelTagButton = new sap.ui.commons.Button({
        id: this.getId() + "-cancel-tags-button",
        text: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS"),
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_CANCEL_TAGS_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    this._oCancelTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederCancelTagButton");

    this._oAddTagButton = new sap.ui.commons.Button({
        id: this.getId() + "-add-tags-button",
        text: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS"),
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS_TOOLTIP"),
        press: function() {
            that._handleAddTag(that._oTagInput.getValue());
            that._oTagButton.rerender();
            that._toggleTagPopup();
        }
    });

    this._oTagButton = new sap.ui.commons.Button({
        id: this.getId() + "-tag-button",
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_TAG_TOOLTIP"),
        press: function() {
            that._toggleTagPopup();
        }
    });
    this._oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederTagButton");
    
    // Extended UI5 TextField which does render placeholder attribute
    sap.ui.commons.TextField.extend("sap.suite.ui.commons.TextFieldWithPlaceholder", {
        renderer: {
            renderInnerAttributes: function(rm, oTextField) {
                rm.writeAttributeEscaped("data-placeholder", that._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_HEADER") + "...");
            }
        }
    });

    // Extended UI5 TextArea which does render placeholder attribute
    sap.ui.commons.TextArea.extend("sap.suite.ui.commons.TextAreaWithPlaceholder", {
        renderer: {
            renderInnerAttributes: function(rm, oTextArea) {
                rm.writeAttributeEscaped("data-placeholder", that._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_BODY") + "...");
            }
        }
    });

    this._oTitle = new sap.suite.ui.commons.TextFieldWithPlaceholder({
        id : this.getId() + "-title-field",
        maxLength : 50
    });
    
    this._oBody = new sap.suite.ui.commons.TextAreaWithPlaceholder({
        id : this.getId() + "-body-field",
        liveChange : function(e) {
            that._setAddButtonEnabled(e.getParameter("liveValue"));
        }
    });
    
    this._oThumbUpButton = new sap.ui.commons.Button({
        id: this.getId() + "-thumb-up-button",
        press: function(e){
            that._handleThumbUpButtonPress();
        },
        tooltip : this._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_UP_TOOLTIP")
    });
    this._oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederThumbUpButton");
    
    this._oThumbDownButton = new sap.ui.commons.Button({
        id: this.getId() + "-thumb-down-button",
        press: function(e){
            that._handleThumbDownButtonPress();
        },
        tooltip : this._rb.getText("NOTETAKERFEEDER_BUTTON_THUMB_DOWN_TOOLTIP")
    });
    this._oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederThumbDownButton");
    
    this._oFileUploader = new sap.ui.commons.FileUploader({
        id: this.getId() + "-attach",
        uploadOnChange: false,
        name : this.getAttachmentName(),
        change: function (oEvent) {
            that._disableAddAttachBtn();
            var name = oEvent.getParameter("newValue");
            that._oAttachmentLink.setText(name);
            that._oAttachmentLink.rerender();
            that._handleAddAttachUI();

            var eData = {};
            eData.filename = name;
            that.fireAttachmentSelect(eData);
            that._oTitle.focus();
        },
        uploadComplete : function(oEvent){
            that._handleUploadComplete(oEvent);
        }
    });
    
    this._oFileUploader.oBrowse.setText("");
    
    this._oAddAttachButton = new sap.ui.commons.Button({
        id: this.getId() + "-attach-button",
        press: function(e) {
            jQuery.sap.domById(that._oFileUploader.getId() + "-fu").click();
        },
        tooltip: that._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP")
    });
    this._oAddAttachButton.addStyleClass("sapSuiteUiCommonsNtAttachIcon");
    
    this._oAttachmentLoadingLabel = new sap.ui.commons.Label({
        id : this.getId() + "-loading-label",
        text: this._rb.getText("NOTETAKERFEEDER_LABEL_ATTACHMENT_LOADING") + "...",
    });

    this._oDeleteAttachButton = new sap.ui.commons.Button({
        id: this.getId() + "-delete-attach-button",
        lite : true,
        press : function(e) {
            that._handleDeleteAttachUI();
            var eData = {filename: that._oFileUploader.getName()};
            that.fireAttachmentDelete(eData);
            
        },
        tooltip: this._rb.getText("NOTETAKERFEEDER_BUTTON_DELETE_ATTACHMENT"),
    });
    
    this._oAttachmentLink = new sap.ui.commons.Link({
        id: this.getId() + "-attachmentLink",
        tooltip: this._rb.getText("NOTETAKERFEEDER_LINK_ATTACHMENT_TOOLTIP"),
        press: function(e) {
            var eData = {filename: that._oFileUploader.getName()};
            that.fireAttachmentClick(eData);
        },
        width: "200px"
    });
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.exit = function() {
    this._oAddButton.destroy();
    this._oTitle.destroy();
    this._oBody.destroy();
    this._oTagButton.destroy();
    this._oTagList.destroy();
    this._oTagInput.destroy();
    this._oCancelTagButton.destroy();
    this._oAddTagButton.destroy();
    this._oThumbUpButton.destroy();
    this._oThumbDownButton.destroy();
    this._oFileUploader.destroy();
    this._oAddAttachButton.destroy();
    this._oAttachmentLoadingLabel.destroy();
    this._oDeleteAttachButton.destroy();   
    this._oAttachmentLink.destroy();
    
    this._oAddButton = null;
    this._oTitle = null;
    this._oBody = null;
    this._oTagButton = null;
    this._oTagList = null;
    this._oTagInput = null;
    this._oCancelTagButton = null;
    this._oAddTagButton = null;
    this._oThumbUpButton = null;
    this._oThumbDownButton = null;
    this._oFileUploader = null;
    this._oAddAttachButton = null;
    this._oAttachmentLoadingLabel = null;
    this._oDeleteAttachButton = null;
    this._oAttachmentLink = null;
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleAdd = function() {
    if (this.getBody()) {
        var eData = new Object();
        eData.title = this.getTitle();
        eData.body = this.getBody();
        eData.timestamp = this._getTimestamp();
        eData.tags = this._selectedTags;
        eData.thumbUp = this.getThumbUp();
        eData.thumbDown = this.getThumbDown();
        eData.attachmentFilename = this._oFileUploader.getValue();
        
        this.setTitle("");
        this.setBody("");
        
        this.setThumbDown(false);
        this.setThumbUp(false);
        
        this._oFileUploader.setValue("");
        this._enableAddAttachBtn();
        this.fireAddNote(eData);
        this._handleClearTag();
    } else {
        this._setAddButtonEnabled(this.getBody());
    }
    
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._getTimestamp = function() {
    return new Date();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setTitle = function(sTitle) {
    this._oTitle.setValue(sTitle);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getTitle = function() {
    return jQuery.sap.byId(this.getId() + "-title-field").hasClass('sapSuiteUiCommonsPlaceholder') ? "" : this._oTitle.getValue();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setBody = function(sBodyText) {
    this._oBody.setValue(sBodyText);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getBody = function() {
    return this._isBodyPlaceholderActive() ? "" : this._oBody.getValue();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._applyPlaceholder = function(){
    jQuery('[data-placeholder]').focus(
        function() {
            var input = jQuery(this);
            if (input.hasClass('sapSuiteUiCommonsPlaceholder')) {
                input.val('');
                input.removeClass('sapSuiteUiCommonsPlaceholder');
            }
        }
    ).blur(
        function() {
            var input = jQuery(this);
            if (jQuery.sap.equal(input.val(),'') || jQuery.sap.equal(input.val(), input.attr('data-placeholder'))) {
                input.addClass('sapSuiteUiCommonsPlaceholder');
                input.val(input.attr('data-placeholder'));
            }
        }
    ).blur();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._isBodyPlaceholderActive = function() {
    return jQuery.sap.byId(this.getId() + "-body-field").hasClass('sapSuiteUiCommonsPlaceholder');
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._setAddButtonEnabled = function(sBody, notRerender) {
    var bEnabled = sBody != null && !this._isBodyPlaceholderActive() && !/^\s*$/.test(sBody);
    if (bEnabled !== this._oAddButton.getEnabled()) {
        this._oAddButton.setEnabled(bEnabled);
        if (!notRerender) {
            this._oAddButton.rerender();
        }
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._adjustUploaderForIe = function() {
    this._oFileUploader.superOnkeydown = this._oFileUploader.onkeydown;
    this._oFileUploader.onkeydown = function(oEvent) {
    	var iKeyCode = oEvent.keyCode,
		eKC = jQuery.sap.KeyCodes;
    	if (iKeyCode != eKC.SPACE && iKeyCode != eKC.ENTER) {
    		this.superOnkeydown(oEvent);
    	}
    };
    
    jQuery(this._oFileUploader.oFilePath.getDomRef()).hide();
    jQuery(this._oFileUploader.oBrowse.getDomRef()).hide();
    jQuery(this._oAddAttachButton.getDomRef()).attr("tabindex", "-1");
    
    var that = this;
    jQuery(this._oFileUploader.oFileUpload).attr("tabindex", "0").attr("title", this._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP"))
    .focus(function() {
    	this.hasFocus = true;
    	jQuery(that._oAddAttachButton.getDomRef()).addClass("sapUiBtnStdFocus");
    }).focusout(function() {
    	this.hasFocus = false;
    	jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapUiBtnStdFocus");
    }).hover(function() {
    	jQuery(that._oAddAttachButton.getDomRef()).addClass("sapUiBtnStdFocus");
    }, function() {
    	if (!this.hasFocus) {
    		jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapUiBtnStdFocus");
    	}
    	jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }).mousedown(function() {
    	jQuery(that._oAddAttachButton.getDomRef()).addClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected")
    	.addClass("sapUiBtnAct");
    }).mouseup(function() {
    	jQuery(that._oAddAttachButton.getDomRef()).removeClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    });
    
    jQuery(this._oFileUploader.oFileUpload).keydown(function(oEvent) {
		var eKC = jQuery.sap.KeyCodes;
    	if (oEvent.keyCode == eKC.TAB) {
    		if (oEvent.shiftKey) {
    			that._oThumbDownButton.focus();
    		} else {
    			that._oTitle.focus();
    		}
    		oEvent.preventDefault();
    		oEvent.stopPropagation();    		
    	}
    });
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._setAriaInfo = function() {
    jQuery.sap.byId(this._oThumbUpButton.getId()).attr("aria-pressed", this.getThumbUp());
    jQuery.sap.byId(this._oThumbDownButton.getId()).attr("aria-pressed", this.getThumbDown());

    jQuery.sap.byId(this._oTitle.getId()).attr("aria-label", this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_HEADER"));
    jQuery.sap.byId(this._oBody.getId()).attr("aria-label", this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_BODY"));
    jQuery(this._oFileUploader.oFileUpload).attr("aria-label", this._rb.getText("NOTETAKERFEEDER_PLACEHOLDER_BODY"));
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.onAfterRendering = function() {
    this._applyPlaceholder();
    this._adjustPopupState();
    
    if (this._oFileUploader.getValue()) {
        jQuery.sap.byId(this.getId() + "-attachment-panel").show();
        jQuery.sap.byId(this.getId() + "-attachment-loading").hide();
        jQuery.sap.byId(this.getId() + "-attachment-delete").show();
    }
    
    jQuery.sap.byId(this._oFileUploader.getId()).addClass("sapSuiteUiCommonsNtfUploader");
    
    this._setAriaInfo();
    
    if (jQuery.browser.msie) {
    	this._adjustUploaderForIe();
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.onBeforeRendering = function() {
    this._setAddButtonEnabled(this.getBody(), true);
    this._setThumbButtonsView();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getFormattedTags = function() {
    return sap.suite.ui.commons.NoteTakerCard.prototype._getFormattedTags();  
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._adjustPopupState = function() {
    if (this._bTagPopupOpen) {
        jQuery.sap.byId(this.getId() + "-selectTag-panel").show();
    }
}; 

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleAddTag = function(sTag) {
    this._selectedTags = [];
    var aNewTags = sTag.split(new RegExp("\\s+"));

    var oTemp = {};
    
    for (var i = 0; i < aNewTags.length; i++) {
        if (aNewTags[i].length != 0) {
            oTemp[aNewTags[i]] = 0;
        }
    }

    for (var field in oTemp) {
        this._selectedTags.push(field);
    }
    
    if(this._oTagButton) {
        this._adjustTagButton();    
    }
    
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._adjustTagButton = function() {
    if (this._selectedTags.length) {
        this._oTagButton.setTooltip(this._rb.getText("NOTETAKERFEEDER_BUTTON_ADD_TAGS_SELECTED_TOOLTIP") + ": " + this._selectedTags.join(" "));
        this._oTagButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        this._oTagButton.setTooltip(this._rb.getText("NOTETAKERFEEDER_BUTTON_TAG_TOOLTIP"));
        this._oTagButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleClearTag = function() {
    if(this._oTagInput) {
        this._oTagInput.setValue("");    
    }
    
    if(this._oTagList) {
        this._oTagList.clearSelection();    
    }
    
    this._selectedTags = [];
    
    if(this._oTagButton) {
        this._adjustTagButton();    
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setTags = function(aTags) {
    this.setProperty("tags", aTags, true); // no automatic rerendering
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._toggleTagPopup = function() {
    if (this._bTagPopupOpen) {
        jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        this._focusDefaultControl();
        this._bTagPopupOpen = false;
    } else {
        this._addTagsToListBox(this.getTags());
        jQuery.sap.byId(this.getId() + "-selectTag-panel").slideToggle();
        jQuery.sap.byId(this.getId() + "-inputTag").val(this._selectedTags.length == 0 ? "" : this._selectedTags.join(" ") + " ");
        this._oTagInput.focus();
        this._bTagPopupOpen = true;
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._focusDefaultControl = function() {
    this._oTagButton.focus();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleTagInputLive = function(oEvent) {
    var sLiveValue = oEvent.getParameter("liveValue");
    var aNewTags = sLiveValue.split(" ");
    var sCurrentlyEntering = aNewTags[aNewTags.length - 1];
    this._filterListBox(sCurrentlyEntering);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._filterListBox = function(sInput) {
    if (sInput.length == 0) {
        this._addTagsToListBox(this.getTags());
        return;
    }
    
   var aFiltered = jQuery.grep(this.getTags(), function(a){
        if (a.indexOf(sInput) >= 0) {
            return true;
        }
    });
   
   this._addTagsToListBox(aFiltered);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._addTagsToListBox = function(aTags) {
    var aListItems = jQuery.map(aTags, function(v, i) {
        return new sap.ui.core.ListItem({text: v});
    });

    this._oTagList.setItems(aListItems, true);
    this._oTagList.rerender();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleListSelect = function(oEvent) {
    var sSelectedTag = oEvent.getParameter("selectedItem").getText();
    var sTemp = this._oTagInput.getValue();
    var aNewTags = sTemp.split(" ");
    
    aNewTags.pop();
    
    if(aNewTags.length == 0) {
        this._oTagInput.setValue(sSelectedTag + " ");
    } else {
        this._oTagInput.setValue(aNewTags.join(" ") + " " + sSelectedTag + " ");
    }
    
    this._oTagList.setSelectedIndex(-1);
    this._oTagInput.focus();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._setThumbButtonsView = function() {
    if (this.getThumbUp()) {
        this._oThumbUpButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        this._oThumbUpButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
    
    if (this.getThumbDown()) {
        this._oThumbDownButton.addStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    } else {
        this._oThumbDownButton.removeStyleClass("sapSuiteUiCommonsNoteTakerFeederButtonSelected");
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleThumbUpButtonPress = function() {
    this.setThumbUp(!this.getThumbUp());
    if (this.getThumbUp()) {
        this.setThumbDown(false);
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleThumbDownButtonPress = function() {
    this.setThumbDown(!this.getThumbDown());
    if (this.getThumbDown()) {
        this.setThumbUp(false);
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._disableAddAttachBtn = function() {
    this._oAddAttachButton.setEnabled(false);
    this._oAddAttachButton.removeStyleClass("sapSuiteUiCommonsNtAttachIcon");
    this._oAddAttachButton.addStyleClass("sapSuiteUiCommonsNtDsblAttachIcon");
    this._oAddAttachButton.setTooltip("");
    
    this._oAddAttachButton.rerender();
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._enableAddAttachBtn = function() {
    this._oAddAttachButton.setEnabled(true);
    this._oAddAttachButton.removeStyleClass("sapSuiteUiCommonsNtDsblAttachIcon");
    this._oAddAttachButton.addStyleClass("sapSuiteUiCommonsNtAttachIcon");
    this._oAddAttachButton.setTooltip(this._rb.getText("NOTETAKER_BUTTON_ATTACH_TOOLTIP"));
    this._oAddAttachButton.rerender();
    
    if (jQuery.browser.msie) {
    	jQuery.sap.byId(this._oAddAttachButton.getId()).attr("tabindex", "-1");
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleAddAttachUI = function() {
	jQuery(this._oFileUploader.oFileUpload).hide();
    jQuery.sap.byId(this.getId() + "-attachment-loading").show("fast");
    jQuery.sap.byId(this.getId() + "-body").animate({
        height:"332px",
    },300);
    
    jQuery.sap.byId(this.getId() + "-attachment-panel").slideDown({duration: 300, queue: false});
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleDeleteAttachUI = function() {
	jQuery(this._oFileUploader.oFileUpload).show();
	jQuery.sap.byId(this.getId() + "-body").animate({
        height:"352px",
    },300);
    
    jQuery.sap.byId(this.getId() + "-attachment-delete").hide("fast");
    jQuery.sap.byId(this.getId() + "-attachment-panel").hide({duration: 300, queue: false});
    
    this._enableAddAttachBtn();
    
    this._oFileUploader.setValue("");
    this._oAttachmentLink.setText("");
    
    if (jQuery.browser.msie) {
    	jQuery(this._oFileUploader.oFileUpload).focus();
    } else {
    	this._oAddAttachButton.focus();
    }
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.handleUploadResponse = function(sResponse) {
    
};

sap.suite.ui.commons.NoteTakerFeeder.prototype._handleUploadComplete = function(oEvent) {
    jQuery.sap.byId(this.getId() + "-attachment-loading").hide("fast");
    jQuery.sap.byId(this.getId() + "-attachment-delete").show("fast");
    
    var eData = {
        response: oEvent.getParameter("response")
    };
    this.fireAttachmentUploadComplete(eData);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.setAttachmentUploadUrl = function(sUrl) {
    this._oFileUploader.setUploadUrl(sUrl);
};

sap.suite.ui.commons.NoteTakerFeeder.prototype.getAttachmentUploadUrl = function() {
    return this._oFileUploader.getUploadUrl();
};

}; // end of sap.suite.ui.commons.NoteTakerFeeder
if ( !jQuery.sap.isDeclared('sap.suite.ui.commons.SplitButton') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5) (c) Copyright 2009-2012 SAP AG. All rights reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.suite.ui.commons.SplitButton.
jQuery.sap.declare("sap.suite.ui.commons.SplitButton");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained


/**
 * Constructor for a new SplitButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getEnabled enabled} : boolean (default: true)</li>
 * <li>{@link #getLite lite} : boolean (default: false)</li>
 * <li>{@link #getStyle style} : sap.ui.commons.ButtonStyle (default: sap.ui.commons.ButtonStyle.Default)</li>
 * <li>{@link #getStyled styled} : boolean (default: true)</li>
 * <li>{@link #getIconFirst iconFirst} : boolean (default: true)</li>
 * <li>{@link #getText text} : string (default: '')</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getMenu menu} : sap.ui.commons.Menu</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Split Button Control is a composite control that consists of a default-action Button and a Menu Button control.
 * The default-action button control represents a simple push button. It is used for initiating actions, such as save or print. It can contain some text, an icon, or both; the order of the two can be configured. The action initiated by this button is considered to be the default action for the control, and it must be one of the selections defined in the Menu Button menu.
 * The Menu Button control is a button that opens a menu upon user's click. MenuButton is a composition of the Menu control and the Button control and thus inheriting all features. When a menu item is selected by the user, MenuButton throws an event called itemSelected. The event transfers the itemId of the selected item. As an alternative, the button press event can be used which has a similar behavior.
 * @extends sap.ui.core.Control
 *
 * @author  
 * @version 1.12.1
 *
 * @constructor   
 * @public
 * @name sap.suite.ui.commons.SplitButton
 */
sap.ui.core.Control.extend("sap.suite.ui.commons.SplitButton", { metadata : {

	// ---- object ----

	// ---- control specific ----
	library : "sap.suite.ui.commons",
	properties : {
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"enabled" : {type : "boolean", group : "Behavior", defaultValue : true},
		"lite" : {type : "boolean", group : "Appearance", defaultValue : false},
		"style" : {type : "sap.ui.commons.ButtonStyle", group : "Appearance", defaultValue : sap.ui.commons.ButtonStyle.Default},
		"styled" : {type : "boolean", group : "Appearance", defaultValue : true},
		"iconFirst" : {type : "boolean", group : "Appearance", defaultValue : true},
		"text" : {type : "string", group : "Appearance", defaultValue : ''},
		"icon" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : ''}
	},
	aggregations : {
    	"menu" : {type : "sap.ui.commons.Menu", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.suite.ui.commons.SplitButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.suite.ui.commons.SplitButton.extend
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 * Invisible split buttons are not rendered
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setVisible
 * @function
 */


/**
 * Getter for property <code>enabled</code>.
 * Boolean property to enable the control (default is true). Buttons that are disabled have other colors than enabled ones, depending on custom settings.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>enabled</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getEnabled
 * @function
 */

/**
 * Setter for property <code>enabled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bEnabled  new value for property <code>enabled</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setEnabled
 * @function
 */


/**
 * Getter for property <code>lite</code>.
 * The split button is rendered as lite split button.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>lite</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getLite
 * @function
 */

/**
 * Setter for property <code>lite</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLite  new value for property <code>lite</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setLite
 * @function
 */


/**
 * Getter for property <code>style</code>.
 * Style of the control (e.g. emphasized, accept)
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code>
 *
 * @return {sap.ui.commons.ButtonStyle} the value of property <code>style</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getStyle
 * @function
 */

/**
 * Setter for property <code>style</code>.
 *
 * Default value is <code>sap.ui.commons.ButtonStyle.Default</code> 
 *
 * @param {sap.ui.commons.ButtonStyle} oStyle  new value for property <code>style</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setStyle
 * @function
 */


/**
 * Getter for property <code>styled</code>.
 * Indicatied if the button is styled. If not it is rendered as native HTML-button. In this case a custom styling can be added usig addStyleClass.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>styled</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getStyled
 * @function
 */

/**
 * Setter for property <code>styled</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bStyled  new value for property <code>styled</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setStyled
 * @function
 */


/**
 * Getter for property <code>iconFirst</code>.
 * If set to true (default), the display sequence is 1. icon 2. control text .
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>iconFirst</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getIconFirst
 * @function
 */

/**
 * Setter for property <code>iconFirst</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIconFirst  new value for property <code>iconFirst</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setIconFirst
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * Text to be displayed for the action button.
 *
 * Default value is <code>''</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setText
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * Icon to be displayed as graphical element within the action button.
 *
 * Default value is <code>''</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.suite.ui.commons.SplitButton#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is <code>''</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setIcon
 * @function
 */


/**
 * Getter for aggregation <code>menu</code>.<br/>
 * Menu that shall be opened when the menu part of the button is clicked
 * 
 * @return {sap.ui.commons.Menu}
 * @public
 * @name sap.suite.ui.commons.SplitButton#getMenu
 * @function
 */


/**
 * Setter for the aggregated <code>menu</code>.
 * @param oMenu {sap.ui.commons.Menu}
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#setMenu
 * @function
 */
	

/**
 * Destroys the menu in the aggregation 
 * named <code>menu</code>.
 * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.suite.ui.commons.SplitButton#destroyMenu
 * @function
 */


// Start of sap/suite/ui/commons/SplitButton.js
jQuery.sap.require('sap.ui.commons.Button'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuButton'); // unlisted dependency retained

jQuery.sap.require('sap.ui.commons.MenuItem'); // unlisted dependency retained


(function() {

    /**
     * Checks that oMenuItem is in oMenu.
     * 
     * @param oMenu
     *                {sap.ui.commons.Menu}
     * @param oMenuItem
     *                {sap.ui.commons.MenuItem}
     * @return true if the oMenuItem exists in the menu, false otherwise
     * @private
     */
    function existingMenuItem(oMenu, oMenuItem) {

        if (!oMenuItem || !oMenu || oMenu.getItems().length === 0) {
            return false;
        }

        if (oMenu.indexOfItem(oMenuItem) >= 0) {
            return true;
        }

        var aItems = oMenu.getItems();
        var oSubmenu = null;

        for ( var i = 0; i < aItems.length; i++) {
            oSubmenu = aItems[i].getSubmenu();
            if (existingMenuItem(oSubmenu, oMenuItem)) {
                return true;
            }
        }

        return false;
    }

    /**
     * Interceptor method for menu item <code>setVisible()</code> method. Resets the menu is this menu item is not visible.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton} the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    function menuItemSetVisibleInterceptor(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setVisible.apply(oSplitButton._oMenuItem, arguments);

            if (!oSplitButton._oMenuItem.getVisible()) {
                oSplitButton.setMenu(oSplitButton._oMenuButton.getMenu());
            }
            return oSplitButton._oMenuItem;
        };
    }

    /**
     * Interceptor method for menu item <code>setIcon()</code> method. Updates default action button icon as well if it is not set.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton} the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    function menuItemSetIconInterceptor(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setIcon.apply(oSplitButton._oMenuItem, arguments);
            if (!oSplitButton.getIcon()) {
                oSplitButton._oDefaultActionButton.setIcon(oSplitButton._oMenuItem.getIcon());
            }
            return oSplitButton._oMenuItem;
        };
    }

    /**
     * Interceptor method for menu item <code>setTooltip()</code> method. Updates default action button tooltip as well.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton}the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    function menuItemSetTooltipInterceptor(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setTooltip.apply(oSplitButton._oMenuItem, arguments);
            oSplitButton._oDefaultActionButton.setTooltip(oSplitButton._oMenuItem.getTooltip());
            return oSplitButton._oMenuItem;
        };
    }

    /**
     * Interceptor method for menu item <code>setTooltip()</code> method. Updates default action button text as well if it is not set.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton}the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    var menuItemSetTextInterceptor = function(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setText.apply(oSplitButton._oMenuItem, arguments);
            if (!oSplitButton.getText()) {
                oSplitButton._oDefaultActionButton.setText(oSplitButton._oMenuItem.getText());
            }
            return oSplitButton._oMenuItem;
        };
    };

    /**
     * Interceptor method for menu item <code>setEnabled()</code> method. Updates default action button as well with new property value if the control is enabled.
     * 
     * @param oSplitButton
     *                {sap.suite.ui.commons.SplitButton}the SplitButton control
     * @return {sap.ui.commons.MenuItem} the SplitButton menu item
     * @private
     */
    var menuItemSetEnabledInterceptor = function(oSplitButton) {

        return function() {

            sap.ui.commons.MenuItem.prototype.setEnabled.apply(oSplitButton._oMenuItem, arguments);
            if (oSplitButton.getEnabled()) {
                oSplitButton._oDefaultActionButton.setEnabled(oSplitButton._oMenuItem.getEnabled());
            }
            return oSplitButton._oMenuItem;
        };
    };

    /**
     * Does the setup when the SplitButton is created.
     * 
     * @private
     */
    sap.suite.ui.commons.SplitButton.prototype.init = function() {

        this._oDefaultActionButton = new sap.ui.commons.Button(this.getId() + "-defaultActionButton");
        var that = this;
        // when default button is clicked and _menuItem is set then the event
        // will be fired
        this._oDefaultActionButton.attachPress(function() {

            if (that._oMenuItem) {
                that._oMenuItem.fireSelect();
            }
        });

        this._oMenuButton = new sap.ui.commons.MenuButton(this.getId() + "-menuButton");
        this._oMenuButton.addStyleClass("sapSuiteUiCommonsSplitButton-menuButton");
        if (this.getMenu()) {
            this._oMenuButton.setMenu(this.getMenu());
        }
    };

    /**
     * Cleans up the SplitButton instance before destruction.
     * 
     * @private
     */
    sap.suite.ui.commons.SplitButton.prototype.exit = function() {

        this.destroyAggregation("menu", true);
        this._oDefaultActionButton.destroy();
        this._oDefaultActionButton = null;
        this._oMenuButton.destroy();
        this._oMenuButton = null;
    };

    /**
     * Set the menu to the button and set menu item for the action button. The menu item for action button must exist in the menu. If it doesn't exist the first menu item is set by
     * default.
     * 
     * @param oMenu
     *                {sap.ui.commons.Menu}
     * @param oMenuItem
     *                {sap.ui.commons.MenuItem}
     * @return {sap.suite.ui.commons.SplitButton} <code>this</code> to allow method chaining
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setMenu = function(oMenu, oMenuItem) {

        var that = this;
        this._oMenuButton.setMenu(oMenu);

        if (existingMenuItem(oMenu, oMenuItem) && oMenuItem.getVisible()) {
            this._oMenuItem = oMenuItem;
        } else {
            // set first menu item by default
            if (oMenu && oMenu.getItems()) {
                var firstMenuItem = oMenu.getItems()[0];
                if (firstMenuItem && firstMenuItem.getVisible()) {
                    this._oMenuItem = firstMenuItem;
                } else {
                    this._oMenuItem = null;
                }
            }
        }

        if (this._oMenuItem) {
            if (!this.getText()) {
                this._oDefaultActionButton.setText(this._oMenuItem.getText() || null);
            }
            if (!this.getIcon()) {
                this._oDefaultActionButton.setIcon(this._oMenuItem.getIcon() || null);
            }
            if (this.getEnabled()) {
                this._oDefaultActionButton.setEnabled(this._oMenuItem.getEnabled());
            }

            this._oDefaultActionButton.setTooltip(this._oMenuItem.getTooltip() || null);

            this._oMenuItem.setTooltip = menuItemSetTooltipInterceptor(that);
            this._oMenuItem.setText = menuItemSetTextInterceptor(that);
            this._oMenuItem.setIcon = menuItemSetIconInterceptor(that);
            this._oMenuItem.setEnabled = menuItemSetEnabledInterceptor(that);
            this._oMenuItem.setVisible = menuItemSetVisibleInterceptor(that);
        }

        return this;
    };

    /**
     * Return the menu.
     * 
     * @return {sap.ui.commons.Menu}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.getMenu = function() {

        return this._oMenuButton.getMenu();
    };

    /**
     * Destroy the menu.
     * 
     * @return {sap.ui.commons.Menu}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.destroyMenu = function() {

        this._oMenuButton.destroyMenu();
        return this;
    };

    /**
     * set enabled property for the control
     * 
     * @param bEnabled
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setEnabled = function(bEnabled) {

        this._oDefaultActionButton.setEnabled(bEnabled);
        this._oMenuButton.setEnabled(bEnabled);
        this.setProperty("enabled", bEnabled);
    };

    /**
     * set lite property for the control
     * 
     * @param bLite
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setLite = function(bLite) {

        this._oDefaultActionButton.setLite(bLite);
        this._oMenuButton.setLite(bLite);
        this.setProperty("lite", bLite);
    };

    /**
     * set style for the control
     * 
     * @param oStyle
     *                {sap.ui.commons.ButtonStyle}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setStyle = function(oStyle) {

        this._oDefaultActionButton.setStyle(oStyle);
        this._oMenuButton.setStyle(oStyle);
        this.setProperty("style", oStyle);
    };

    /**
     * set if the control is styled or not
     * 
     * @param bStyled
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setStyled = function(bStyled) {

        this._oDefaultActionButton.setStyled(bStyled);
        this._oMenuButton.setStyled(bStyled);
        this.setProperty("styled", bStyled);
    };

    /**
     * set if the icon for the action button be displayed before or after text
     * 
     * @param bIconFirst
     *                {boolean}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setIconFirst = function(bIconFirst) {

        this._oDefaultActionButton.setIconFirst(bIconFirst);
        this.setProperty("iconFirst", bIconFirst);
    };

    /**
     * set icon (image) to be displayed in action button
     * 
     * @param sIcon
     *                {sap.ui.core.URI}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setIcon = function(sIcon) {

        this._oDefaultActionButton.setIcon(sIcon);
        this.setProperty("icon", sIcon);
    };

    /**
     * set text for the action button
     * 
     * @param sText
     *                {string}
     * @public
     */
    sap.suite.ui.commons.SplitButton.prototype.setText = function(sText) {

        this._oDefaultActionButton.setText(sText);
        this.setProperty("text", sText);
    };

}());

}; // end of sap.suite.ui.commons.SplitButton
